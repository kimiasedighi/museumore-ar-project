import { c as lo, g as XC, O as _C } from "./ui.4498bf0c.js";
function KC(n, t) {
  for (var e = 0; e < t.length; e++) {
    const s = t[e];
    if (typeof s != "string" && !Array.isArray(s)) {
      for (const r in s)
        if (r !== "default" && !(r in n)) {
          const o = Object.getOwnPropertyDescriptor(s, r);
          o && Object.defineProperty(n, r, o.get ? o : {
            enumerable: !0,
            get: () => s[r]
          });
        }
    }
  }
  return Object.freeze(Object.defineProperty(n, Symbol.toStringTag, { value: "Module" }));
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ZC = 1e-7, BC = 1e-4;
class mm {
  constructor(t, e) {
    this.backend = t, this.dataMover = e, this.data = /* @__PURE__ */ new WeakMap(), this.dataIdsCount = 0;
  }
  get(t) {
    return this.data.has(t) || this.dataMover.moveData(this.backend, t), this.data.get(t);
  }
  set(t, e) {
    this.dataIdsCount++, this.data.set(t, e);
  }
  has(t) {
    return this.data.has(t);
  }
  delete(t) {
    return this.dataIdsCount--, this.data.delete(t);
  }
  numDataIds() {
    return this.dataIdsCount;
  }
}
class th {
  refCount(t) {
    return Cn("refCount");
  }
  incRef(t) {
    return Cn("incRef");
  }
  timerAvailable() {
    return !0;
  }
  time(t) {
    return Cn("time");
  }
  read(t) {
    return Cn("read");
  }
  readSync(t) {
    return Cn("readSync");
  }
  readToGPU(t, e) {
    return Cn("readToGPU");
  }
  numDataIds() {
    return Cn("numDataIds");
  }
  disposeData(t, e) {
    return Cn("disposeData");
  }
  write(t, e, s) {
    return Cn("write");
  }
  move(t, e, s, r, o) {
    return Cn("move");
  }
  memory() {
    return Cn("memory");
  }
  floatPrecision() {
    return Cn("floatPrecision");
  }
  epsilon() {
    return this.floatPrecision() === 32 ? ZC : BC;
  }
  dispose() {
    return Cn("dispose");
  }
}
function Cn(n) {
  throw new Error(`'${n}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function gm(n) {
  let t = n.length, e = 0;
  for (; t > 0; )
    e = Math.random() * t | 0, t--, hn(n, t, e);
}
function HC(n, t) {
  if (n.length !== t.length)
    throw new Error(`Array sizes must match to be shuffled together First array length was ${n.length}Second array length was ${t.length}`);
  let e = n.length, s = 0;
  for (; e > 0; )
    s = Math.random() * e | 0, e--, hn(n, e, s), hn(t, e, s);
}
function fr(n, t, e) {
  return Math.max(n, Math.min(t, e));
}
function eh(n) {
  return n % 2 === 0 ? n : n + 1;
}
function hn(n, t, e) {
  const s = n[t];
  n[t] = n[e], n[e] = s;
}
function b1(n) {
  let t = 0;
  for (let e = 0; e < n.length; e++)
    t += n[e];
  return t;
}
function UC(n, t) {
  const e = Math.random();
  return t * e + (1 - e) * n;
}
function YC(n, t) {
  let e = 0;
  for (let s = 0; s < n.length; s++) {
    const r = Number(n[s]) - Number(t[s]);
    e += r * r;
  }
  return e;
}
function C(n, t) {
  if (!n)
    throw new Error(typeof t == "string" ? t : t());
}
function Oe(n, t, e = "") {
  C(Nt(n, t), () => e + ` Shapes ${n} and ${t} must match`);
}
function co(n) {
  C(n != null, () => "The input to the tensor constructor must be a non-null value.");
}
function zs(n, t = [], e = !1) {
  if (t == null && (t = []), Array.isArray(n) || De(n) && !e)
    for (let s = 0; s < n.length; ++s)
      zs(n[s], t, e);
  else
    t.push(n);
  return t;
}
function P(n) {
  if (n.length === 0)
    return 1;
  let t = n[0];
  for (let e = 1; e < n.length; e++)
    t *= n[e];
  return t;
}
function jC(n) {
  return n.length === 0;
}
function Nt(n, t) {
  if (n === t)
    return !0;
  if (n == null || t == null || n.length !== t.length)
    return !1;
  for (let e = 0; e < n.length; e++)
    if (n[e] !== t[e])
      return !1;
  return !0;
}
function Yr(n) {
  return n % 1 === 0;
}
function JC(n) {
  if (Math.tanh != null)
    return Math.tanh(n);
  if (n === 1 / 0)
    return 1;
  if (n === -1 / 0)
    return -1;
  {
    const t = Math.exp(2 * n);
    return (t - 1) / (t + 1);
  }
}
function bu(n) {
  const t = Math.ceil(Math.sqrt(n));
  return [t, Math.ceil(n / t)];
}
function QC(n) {
  const t = new Uint32Array(n);
  for (let e = 0; e < n; ++e)
    t[e] = e;
  return gm(t), t;
}
function Kr(n, t) {
  return t <= n.length ? n : n + " ".repeat(t - n.length);
}
function xf(n, t = (r) => 0, e, s = setTimeout) {
  return new Promise((r, o) => {
    let i = 0;
    const a = () => {
      if (n()) {
        r();
        return;
      }
      i++;
      const l = t(i);
      if (e != null && i >= e) {
        o();
        return;
      }
      s(a, l);
    };
    a();
  });
}
function ym(n, t) {
  let e = 1, s = -1;
  for (let o = 0; o < n.length; ++o)
    if (n[o] >= 0)
      e *= n[o];
    else if (n[o] === -1) {
      if (s !== -1)
        throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${s} and dim ${o}`);
      s = o;
    } else if (n[o] < 0)
      throw Error(`Shapes can not be < 0. Found ${n[o]} at dim ${o}`);
  if (s === -1) {
    if (t > 0 && t !== e)
      throw Error(`Size(${t}) must match the product of shape ${n}`);
    return n;
  }
  if (e === 0)
    throw Error(`Cannot infer the missing size in [${n}] when there are 0 elements`);
  if (t % e !== 0)
    throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${e}`);
  const r = n.slice();
  return r[s] = t / e, r;
}
function vt(n, t) {
  const e = t.length;
  return n = n == null ? t.map((s, r) => r) : [].concat(n), C(n.every((s) => s >= -e && s < e), () => `All values in axis param must be in range [-${e}, ${e}) but got axis ${n}`), C(n.every((s) => Yr(s)), () => `All values in axis param must be integers but got axis ${n}`), n.map((s) => s < 0 ? e + s : s);
}
function Bs(n, t) {
  const e = [], s = [], r = t != null && Array.isArray(t) && t.length === 0, o = t == null || r ? null : vt(t, n).sort();
  let i = 0;
  for (let a = 0; a < n.length; ++a) {
    if (o != null) {
      if (o[i] === a && n[a] !== 1)
        throw new Error(`Can't squeeze axis ${a} since its dim '${n[a]}' is not 1`);
      (o[i] == null || o[i] > a) && n[a] === 1 && (e.push(n[a]), s.push(a)), o[i] <= a && i++;
    }
    n[a] !== 1 && (e.push(n[a]), s.push(a));
  }
  return { newShape: e, keptDims: s };
}
function jt(n, t) {
  let e = null;
  if (n == null || n === "float32")
    e = new Float32Array(t);
  else if (n === "int32")
    e = new Int32Array(t);
  else if (n === "bool")
    e = new Uint8Array(t);
  else
    throw new Error(`Unknown data type ${n}`);
  return e;
}
function Gt(n, t) {
  let e = null;
  if (n == null || n === "float32")
    e = new Float32Array(t);
  else if (n === "int32")
    e = new Int32Array(t);
  else if (n === "bool")
    e = new Uint8Array(t);
  else if (n === "string")
    e = new Array(t);
  else
    throw new Error(`Unknown data type ${n}`);
  return e;
}
function x1(n, t) {
  for (let e = 0; e < n.length; e++) {
    const s = n[e];
    if (isNaN(s) || !isFinite(s))
      throw Error(`A tensor of type ${t} being uploaded contains ${s}.`);
  }
}
function w1(n) {
  return n === "bool" || n === "complex64" || n === "float32" || n === "int32" || n === "string";
}
function bm(n, t) {
  return !(t === "complex64" || t === "float32" && n !== "complex64" || t === "int32" && n !== "float32" && n !== "complex64" || t === "bool" && n === "bool");
}
function De(n) {
  return n instanceof Float32Array || n instanceof Int32Array || n instanceof Uint8Array || n instanceof Uint8ClampedArray;
}
function xu(n) {
  if (n === "float32" || n === "int32")
    return 4;
  if (n === "complex64")
    return 8;
  if (n === "bool")
    return 1;
  throw new Error(`Unknown dtype ${n}`);
}
function I1(n) {
  if (n == null)
    return 0;
  let t = 0;
  return n.forEach((e) => t += e.length), t;
}
function xs(n) {
  return typeof n == "string" || n instanceof String;
}
function S1(n) {
  return typeof n == "boolean";
}
function wu(n) {
  return typeof n == "number";
}
function Qo(n) {
  return Array.isArray(n) ? Qo(n[0]) : n instanceof Float32Array ? "float32" : n instanceof Int32Array || n instanceof Uint8Array || n instanceof Uint8ClampedArray ? "int32" : wu(n) ? "float32" : xs(n) ? "string" : S1(n) ? "bool" : "float32";
}
function mr(n) {
  return !!(n && n.constructor && n.call && n.apply);
}
function Iu(n, t) {
  for (let e = t; e < n; ++e)
    if (n % e === 0)
      return e;
  return n;
}
function lt(n) {
  const t = n.length;
  if (t < 2)
    return [];
  const e = new Array(t - 1);
  e[t - 2] = n[t - 1];
  for (let s = t - 3; s >= 0; --s)
    e[s] = e[s + 1] * n[s + 1];
  return e;
}
function v1(n, t, e, s = !1) {
  const r = new Array();
  if (t.length === 1) {
    const o = t[0] * (s ? 2 : 1);
    for (let i = 0; i < o; i++)
      r[i] = e[n + i];
  } else {
    const o = t[0], i = t.slice(1), a = i.reduce((l, c) => l * c) * (s ? 2 : 1);
    for (let l = 0; l < o; l++)
      r[l] = v1(n + l * a, i, e, s);
  }
  return r;
}
function En(n, t, e = !1) {
  if (n.length === 0)
    return t[0];
  const s = n.reduce((r, o) => r * o) * (e ? 2 : 1);
  if (s === 0)
    return [];
  if (s !== t.length)
    throw new Error(`[${n}] does not match the input size ${t.length}${e ? " for a complex tensor" : ""}.`);
  return v1(0, n, t, e);
}
function nh(n, t) {
  const e = ae(n, t);
  for (let s = 0; s < e.length; s++)
    e[s] = 1;
  return e;
}
function ae(n, t) {
  if (t == null || t === "float32" || t === "complex64")
    return new Float32Array(n);
  if (t === "int32")
    return new Int32Array(n);
  if (t === "bool")
    return new Uint8Array(n);
  throw new Error(`Unknown data type ${t}`);
}
function xm(n, t) {
  const e = n.reduce((s, r) => s * r, 1);
  if (t == null || t === "float32")
    return En(n, new Float32Array(e));
  if (t === "int32")
    return En(n, new Int32Array(e));
  if (t === "bool")
    return En(n, new Uint8Array(e));
  throw new Error(`Unknown data type ${t}`);
}
function wm(n) {
  n.forEach((t) => {
    C(Number.isInteger(t) && t >= 0, () => `Tensor must have a shape comprised of positive integers but got shape [${n}].`);
  });
}
function mn(n, t, e) {
  if (t === 0)
    return 0;
  if (t === 1)
    return n[0];
  let s = n[n.length - 1];
  for (let r = 0; r < n.length - 1; ++r)
    s += e[r] * n[r];
  return s;
}
function Ts(n, t, e) {
  if (t === 0)
    return [];
  if (t === 1)
    return [n];
  const s = new Array(t);
  for (let r = 0; r < s.length - 1; ++r)
    s[r] = Math.floor(n / e[r]), n -= s[r] * e[r];
  return s[s.length - 1] = n, s;
}
function gr(n) {
  return n && n.then && typeof n.then == "function";
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Sb = "tfjsflags";
class C1 {
  constructor(t) {
    this.global = t, this.flags = {}, this.flagRegistry = {}, this.urlFlags = {}, this.getQueryParams = qC, this.populateURLFlags();
  }
  setPlatform(t, e) {
    this.platform != null && (V().getBool("IS_TEST") || V().getBool("PROD") || console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${t}.`)), this.platformName = t, this.platform = e;
  }
  registerFlag(t, e, s) {
    if (this.flagRegistry[t] = { evaluationFn: e, setHook: s }, this.urlFlags[t] != null) {
      const r = this.urlFlags[t];
      V().getBool("IS_TEST") || V().getBool("PROD") || console.warn(`Setting feature override from URL ${t}: ${r}.`), this.set(t, r);
    }
  }
  async getAsync(t) {
    return t in this.flags ? this.flags[t] : (this.flags[t] = await this.evaluateFlag(t), this.flags[t]);
  }
  get(t) {
    if (t in this.flags)
      return this.flags[t];
    const e = this.evaluateFlag(t);
    if (gr(e))
      throw new Error(`Flag ${t} cannot be synchronously evaluated. Please use getAsync() instead.`);
    return this.flags[t] = e, this.flags[t];
  }
  getNumber(t) {
    return this.get(t);
  }
  getBool(t) {
    return this.get(t);
  }
  getFlags() {
    return this.flags;
  }
  get features() {
    return this.flags;
  }
  set(t, e) {
    if (this.flagRegistry[t] == null)
      throw new Error(`Cannot set flag ${t} as it has not been registered.`);
    this.flags[t] = e, this.flagRegistry[t].setHook != null && this.flagRegistry[t].setHook(e);
  }
  evaluateFlag(t) {
    if (this.flagRegistry[t] == null)
      throw new Error(`Cannot evaluate flag '${t}': no evaluation function found.`);
    return this.flagRegistry[t].evaluationFn();
  }
  setFlags(t) {
    this.flags = Object.assign({}, t);
  }
  reset() {
    this.flags = {}, this.urlFlags = {}, this.populateURLFlags();
  }
  populateURLFlags() {
    if (typeof this.global > "u" || typeof this.global.location > "u" || typeof this.global.location.search > "u")
      return;
    const t = this.getQueryParams(this.global.location.search);
    Sb in t && t[Sb].split(",").forEach((s) => {
      const [r, o] = s.split(":");
      this.urlFlags[r] = e2(r, o);
    });
  }
}
function qC(n) {
  const t = {};
  return n.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, (e, ...s) => (t2(t, s[0], s[1]), s.join("="))), t;
}
function t2(n, t, e) {
  n[decodeURIComponent(t)] = decodeURIComponent(e || "");
}
function e2(n, t) {
  if (t = t.toLowerCase(), t === "true" || t === "false")
    return t === "true";
  if (`${+t}` === t)
    return +t;
  throw new Error(`Could not parse value flag value ${t} for flag ${n}.`);
}
function V() {
  return Im;
}
let Im = null;
function n2(n) {
  Im = n;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
let Gp;
function k1() {
  if (Gp == null) {
    let n;
    if (typeof window < "u")
      n = window;
    else if (typeof global < "u")
      n = global;
    else if (typeof process < "u")
      n = process;
    else if (typeof self < "u")
      n = self;
    else
      throw new Error("Could not find a global object");
    Gp = n;
  }
  return Gp;
}
function s2() {
  const n = k1();
  return n._tfGlobals == null && (n._tfGlobals = /* @__PURE__ */ new Map()), n._tfGlobals;
}
function Sm(n, t) {
  const e = s2();
  if (e.has(n))
    return e.get(n);
  {
    const s = t();
    return e.set(n, s), e.get(n);
  }
}
const sl = "Abs", qo = "Acos", ti = "Acosh", uo = "Add", rl = "AddN", sh = "All", rh = "Any", ol = "ArgMax", il = "ArgMin", ei = "Asin", ni = "Asinh", si = "Atan", ri = "Atanh", oi = "Atan2", al = "AvgPool", oh = "AvgPoolGrad", ll = "AvgPool3D", ih = "AvgPool3DGrad", cl = "BatchMatMul", ul = "BatchToSpaceND", ah = "Bincount", T1 = "BroadcastTo", lh = "BroadcastArgs", ii = "Cast", ai = "Ceil", li = "ClipByValue", ch = "Complex", hl = "ComplexAbs", dl = "Concat", pl = "Conv2D", uh = "Conv2DBackpropFilter", fl = "Conv2DBackpropInput", ml = "Conv3D", hh = "Conv3DBackpropFilterV2", dh = "Conv3DBackpropInputV2", ci = "Cos", ui = "Cosh", ph = "Cumprod", gl = "Cumsum", fh = "CropAndResize", mh = "DenseBincount", gh = "DepthToSpace", yl = "DepthwiseConv2dNative", yh = "DepthwiseConv2dNativeBackpropFilter", bh = "DepthwiseConv2dNativeBackpropInput", xh = "Diag", bl = "Dilation2D", Su = "Dilation2DBackpropInput", vu = "Dilation2DBackpropFilter", hi = "RealDiv", wh = "Einsum", di = "Elu", Ih = "EluGrad", pi = "Erf", xl = "Equal", fi = "Exp", wl = "ExpandDims", mi = "Expm1", Sh = "FFT", vh = "Fill", Ch = "FlipLeftRight", gi = "Floor", yi = "FloorDiv", Il = "FusedBatchNorm", Sl = "GatherV2", kh = "GatherNd", vl = "Greater", bi = "GreaterEqual", xi = "Identity", Th = "IFFT", Nh = "Imag", wi = "IsFinite", Ii = "IsInf", Si = "IsNan", Cl = "LeakyRelu", kl = "Less", Tl = "LessEqual", $h = "LinSpace", vi = "Log", Ci = "Log1p", Nl = "LogicalAnd", $l = "LogicalNot", Rl = "LogicalOr", r2 = "LogicalXor", N1 = "LogSoftmax", o2 = "LowerBound", El = "LRN", Rh = "LRNGrad", Ll = "Max", ki = "Maximum", Dl = "MaxPool", Eh = "MaxPoolGrad", Gl = "MaxPool3D", Lh = "MaxPool3DGrad", Dh = "MaxPoolWithArgmax", Fl = "Mean", Ol = "Min", Ti = "Minimum", Al = "MirrorPad", Ni = "Mod", Gh = "Multinomial", $i = "Multiply", zl = "Neg", Wl = "NotEqual", Fh = "NonMaxSuppressionV3", Oh = "NonMaxSuppressionV4", Ah = "NonMaxSuppressionV5", Vl = "OnesLike", Ml = "OneHot", Pl = "Pack", Xl = "PadV2", i2 = "Pool", Ri = "Pow", _l = "Prelu", Kl = "Prod", zh = "RaggedGather", Wh = "RaggedTensorToTensor", Vh = "Range", Mh = "Real", Ei = "Reciprocal", Li = "Relu", Zl = "Reshape", Bl = "ResizeNearestNeighbor", Ph = "ResizeNearestNeighborGrad", Hl = "ResizeBilinear", Xh = "ResizeBilinearGrad", Di = "Relu6", Ul = "Reverse", Gi = "Round", Fi = "Rsqrt", _h = "ScatterNd", Kh = "SearchSorted", Yl = "Select", Oi = "Selu", jl = "Slice", Ai = "Sin", zi = "Sinh", Wi = "Sign", Vi = "Sigmoid", Mi = "Softplus", Pi = "Sqrt", Jl = "Sum", Ql = "SpaceToBatchND", ql = "SplitV", tc = "Softmax", Zh = "SparseFillEmptyRows", Bh = "SparseReshape", Hh = "SparseSegmentMean", Uh = "SparseSegmentSum", Yh = "SparseToDense", Xi = "SquaredDifference", jh = "Square", Jh = "StridedSlice", Qh = "StringNGrams", qh = "StringSplit", td = "StringToHashBucketFast", _i = "Sub", Ki = "Tan", Zi = "Tanh", Bi = "Tile", ed = "TopK", nd = "Transform", Zr = "Transpose", sd = "Unique", ec = "Unpack", nc = "UnsortedSegmentSum", a2 = "UpperBound", sc = "ZerosLike", Hi = "Step", Cu = "FromPixels", rd = "RotateWithOffset", Va = "_FusedMatMul", Ma = "FusedConv2D", Pa = "FusedDepthwiseConv2D";
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Tn(...n) {
  V().getBool("IS_TEST") || V().getBool("PROD") || console.warn(...n);
}
function l2(...n) {
  V().getBool("IS_TEST") || V().getBool("PROD") || console.log(...n);
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Oo = Sm("kernelRegistry", () => /* @__PURE__ */ new Map()), Xa = Sm("gradRegistry", () => /* @__PURE__ */ new Map());
function ku(n, t) {
  const e = vm(n, t);
  return Oo.get(e);
}
function wf(n) {
  return Xa.get(n);
}
function Tu(n) {
  const t = Oo.entries(), e = [];
  for (; ; ) {
    const { done: s, value: r } = t.next();
    if (s)
      break;
    const [o, i] = r, [a] = o.split("_");
    a === n && e.push(i);
  }
  return e;
}
function on(n) {
  const { kernelName: t, backendName: e } = n, s = vm(t, e);
  Oo.has(s) && Tn(`The kernel '${t}' for backend '${e}' is already registered`), Oo.set(s, n);
}
function $1(n) {
  const { kernelName: t } = n;
  Xa.has(t) && V().getBool("DEBUG") && Tn(`Overriding the gradient for '${t}'`), Xa.set(t, n);
}
function c2(n, t) {
  const e = vm(n, t);
  if (!Oo.has(e))
    throw new Error(`The kernel '${n}' for backend '${t}' is not registered`);
  Oo.delete(e);
}
function u2(n) {
  if (!Xa.has(n))
    throw new Error(`The gradient '${n}' for backend is not registered`);
  Xa.delete(n);
}
function h2(n, t) {
  Tu(n).forEach((s) => {
    const r = Object.assign({}, s, { backendName: t });
    on(r);
  });
}
function vm(n, t) {
  return `${t}_${n}`;
}
var If = Ht, Pn = null;
try {
  Pn = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([
    0,
    97,
    115,
    109,
    1,
    0,
    0,
    0,
    1,
    13,
    2,
    96,
    0,
    1,
    127,
    96,
    4,
    127,
    127,
    127,
    127,
    1,
    127,
    3,
    7,
    6,
    0,
    1,
    1,
    1,
    1,
    1,
    6,
    6,
    1,
    127,
    1,
    65,
    0,
    11,
    7,
    50,
    6,
    3,
    109,
    117,
    108,
    0,
    1,
    5,
    100,
    105,
    118,
    95,
    115,
    0,
    2,
    5,
    100,
    105,
    118,
    95,
    117,
    0,
    3,
    5,
    114,
    101,
    109,
    95,
    115,
    0,
    4,
    5,
    114,
    101,
    109,
    95,
    117,
    0,
    5,
    8,
    103,
    101,
    116,
    95,
    104,
    105,
    103,
    104,
    0,
    0,
    10,
    191,
    1,
    6,
    4,
    0,
    35,
    0,
    11,
    36,
    1,
    1,
    126,
    32,
    0,
    173,
    32,
    1,
    173,
    66,
    32,
    134,
    132,
    32,
    2,
    173,
    32,
    3,
    173,
    66,
    32,
    134,
    132,
    126,
    34,
    4,
    66,
    32,
    135,
    167,
    36,
    0,
    32,
    4,
    167,
    11,
    36,
    1,
    1,
    126,
    32,
    0,
    173,
    32,
    1,
    173,
    66,
    32,
    134,
    132,
    32,
    2,
    173,
    32,
    3,
    173,
    66,
    32,
    134,
    132,
    127,
    34,
    4,
    66,
    32,
    135,
    167,
    36,
    0,
    32,
    4,
    167,
    11,
    36,
    1,
    1,
    126,
    32,
    0,
    173,
    32,
    1,
    173,
    66,
    32,
    134,
    132,
    32,
    2,
    173,
    32,
    3,
    173,
    66,
    32,
    134,
    132,
    128,
    34,
    4,
    66,
    32,
    135,
    167,
    36,
    0,
    32,
    4,
    167,
    11,
    36,
    1,
    1,
    126,
    32,
    0,
    173,
    32,
    1,
    173,
    66,
    32,
    134,
    132,
    32,
    2,
    173,
    32,
    3,
    173,
    66,
    32,
    134,
    132,
    129,
    34,
    4,
    66,
    32,
    135,
    167,
    36,
    0,
    32,
    4,
    167,
    11,
    36,
    1,
    1,
    126,
    32,
    0,
    173,
    32,
    1,
    173,
    66,
    32,
    134,
    132,
    32,
    2,
    173,
    32,
    3,
    173,
    66,
    32,
    134,
    132,
    130,
    34,
    4,
    66,
    32,
    135,
    167,
    36,
    0,
    32,
    4,
    167,
    11
  ])), {}).exports;
} catch {
}
function Ht(n, t, e) {
  this.low = n | 0, this.high = t | 0, this.unsigned = !!e;
}
Ht.prototype.__isLong__;
Object.defineProperty(Ht.prototype, "__isLong__", { value: !0 });
function Sn(n) {
  return (n && n.__isLong__) === !0;
}
Ht.isLong = Sn;
var vb = {}, Cb = {};
function ho(n, t) {
  var e, s, r;
  return t ? (n >>>= 0, (r = 0 <= n && n < 256) && (s = Cb[n], s) ? s : (e = Ut(n, (n | 0) < 0 ? -1 : 0, !0), r && (Cb[n] = e), e)) : (n |= 0, (r = -128 <= n && n < 128) && (s = vb[n], s) ? s : (e = Ut(n, n < 0 ? -1 : 0, !1), r && (vb[n] = e), e));
}
Ht.fromInt = ho;
function Xn(n, t) {
  if (isNaN(n))
    return t ? Mr : _n;
  if (t) {
    if (n < 0)
      return Mr;
    if (n >= R1)
      return D1;
  } else {
    if (n <= -Tb)
      return pn;
    if (n + 1 >= Tb)
      return L1;
  }
  return n < 0 ? Xn(-n, t).neg() : Ut(n % Ao | 0, n / Ao | 0, t);
}
Ht.fromNumber = Xn;
function Ut(n, t, e) {
  return new Ht(n, t, e);
}
Ht.fromBits = Ut;
var Nu = Math.pow;
function Cm(n, t, e) {
  if (n.length === 0)
    throw Error("empty string");
  if (n === "NaN" || n === "Infinity" || n === "+Infinity" || n === "-Infinity")
    return _n;
  if (typeof t == "number" ? (e = t, t = !1) : t = !!t, e = e || 10, e < 2 || 36 < e)
    throw RangeError("radix");
  var s;
  if ((s = n.indexOf("-")) > 0)
    throw Error("interior hyphen");
  if (s === 0)
    return Cm(n.substring(1), t, e).neg();
  for (var r = Xn(Nu(e, 8)), o = _n, i = 0; i < n.length; i += 8) {
    var a = Math.min(8, n.length - i), l = parseInt(n.substring(i, i + a), e);
    if (a < 8) {
      var c = Xn(Nu(e, a));
      o = o.mul(c).add(Xn(l));
    } else
      o = o.mul(r), o = o.add(Xn(l));
  }
  return o.unsigned = t, o;
}
Ht.fromString = Cm;
function cs(n, t) {
  return typeof n == "number" ? Xn(n, t) : typeof n == "string" ? Cm(n, t) : Ut(n.low, n.high, typeof t == "boolean" ? t : n.unsigned);
}
Ht.fromValue = cs;
var kb = 1 << 16, d2 = 1 << 24, Ao = kb * kb, R1 = Ao * Ao, Tb = R1 / 2, Nb = ho(d2), _n = ho(0);
Ht.ZERO = _n;
var Mr = ho(0, !0);
Ht.UZERO = Mr;
var Eo = ho(1);
Ht.ONE = Eo;
var E1 = ho(1, !0);
Ht.UONE = E1;
var Sf = ho(-1);
Ht.NEG_ONE = Sf;
var L1 = Ut(-1, 2147483647, !1);
Ht.MAX_VALUE = L1;
var D1 = Ut(-1, -1, !0);
Ht.MAX_UNSIGNED_VALUE = D1;
var pn = Ut(0, -2147483648, !1);
Ht.MIN_VALUE = pn;
var nt = Ht.prototype;
nt.toInt = function() {
  return this.unsigned ? this.low >>> 0 : this.low;
};
nt.toNumber = function() {
  return this.unsigned ? (this.high >>> 0) * Ao + (this.low >>> 0) : this.high * Ao + (this.low >>> 0);
};
nt.toString = function(t) {
  if (t = t || 10, t < 2 || 36 < t)
    throw RangeError("radix");
  if (this.isZero())
    return "0";
  if (this.isNegative())
    if (this.eq(pn)) {
      var e = Xn(t), s = this.div(e), r = s.mul(e).sub(this);
      return s.toString(t) + r.toInt().toString(t);
    } else
      return "-" + this.neg().toString(t);
  for (var o = Xn(Nu(t, 6), this.unsigned), i = this, a = ""; ; ) {
    var l = i.div(o), c = i.sub(l.mul(o)).toInt() >>> 0, u = c.toString(t);
    if (i = l, i.isZero())
      return u + a;
    for (; u.length < 6; )
      u = "0" + u;
    a = "" + u + a;
  }
};
nt.getHighBits = function() {
  return this.high;
};
nt.getHighBitsUnsigned = function() {
  return this.high >>> 0;
};
nt.getLowBits = function() {
  return this.low;
};
nt.getLowBitsUnsigned = function() {
  return this.low >>> 0;
};
nt.getNumBitsAbs = function() {
  if (this.isNegative())
    return this.eq(pn) ? 64 : this.neg().getNumBitsAbs();
  for (var t = this.high != 0 ? this.high : this.low, e = 31; e > 0 && (t & 1 << e) == 0; e--)
    ;
  return this.high != 0 ? e + 33 : e + 1;
};
nt.isZero = function() {
  return this.high === 0 && this.low === 0;
};
nt.eqz = nt.isZero;
nt.isNegative = function() {
  return !this.unsigned && this.high < 0;
};
nt.isPositive = function() {
  return this.unsigned || this.high >= 0;
};
nt.isOdd = function() {
  return (this.low & 1) === 1;
};
nt.isEven = function() {
  return (this.low & 1) === 0;
};
nt.equals = function(t) {
  return Sn(t) || (t = cs(t)), this.unsigned !== t.unsigned && this.high >>> 31 === 1 && t.high >>> 31 === 1 ? !1 : this.high === t.high && this.low === t.low;
};
nt.eq = nt.equals;
nt.notEquals = function(t) {
  return !this.eq(t);
};
nt.neq = nt.notEquals;
nt.ne = nt.notEquals;
nt.lessThan = function(t) {
  return this.comp(t) < 0;
};
nt.lt = nt.lessThan;
nt.lessThanOrEqual = function(t) {
  return this.comp(t) <= 0;
};
nt.lte = nt.lessThanOrEqual;
nt.le = nt.lessThanOrEqual;
nt.greaterThan = function(t) {
  return this.comp(t) > 0;
};
nt.gt = nt.greaterThan;
nt.greaterThanOrEqual = function(t) {
  return this.comp(t) >= 0;
};
nt.gte = nt.greaterThanOrEqual;
nt.ge = nt.greaterThanOrEqual;
nt.compare = function(t) {
  if (Sn(t) || (t = cs(t)), this.eq(t))
    return 0;
  var e = this.isNegative(), s = t.isNegative();
  return e && !s ? -1 : !e && s ? 1 : this.unsigned ? t.high >>> 0 > this.high >>> 0 || t.high === this.high && t.low >>> 0 > this.low >>> 0 ? -1 : 1 : this.sub(t).isNegative() ? -1 : 1;
};
nt.comp = nt.compare;
nt.negate = function() {
  return !this.unsigned && this.eq(pn) ? pn : this.not().add(Eo);
};
nt.neg = nt.negate;
nt.add = function(t) {
  Sn(t) || (t = cs(t));
  var e = this.high >>> 16, s = this.high & 65535, r = this.low >>> 16, o = this.low & 65535, i = t.high >>> 16, a = t.high & 65535, l = t.low >>> 16, c = t.low & 65535, u = 0, h = 0, d = 0, p = 0;
  return p += o + c, d += p >>> 16, p &= 65535, d += r + l, h += d >>> 16, d &= 65535, h += s + a, u += h >>> 16, h &= 65535, u += e + i, u &= 65535, Ut(d << 16 | p, u << 16 | h, this.unsigned);
};
nt.subtract = function(t) {
  return Sn(t) || (t = cs(t)), this.add(t.neg());
};
nt.sub = nt.subtract;
nt.multiply = function(t) {
  if (this.isZero())
    return _n;
  if (Sn(t) || (t = cs(t)), Pn) {
    var e = Pn.mul(
      this.low,
      this.high,
      t.low,
      t.high
    );
    return Ut(e, Pn.get_high(), this.unsigned);
  }
  if (t.isZero())
    return _n;
  if (this.eq(pn))
    return t.isOdd() ? pn : _n;
  if (t.eq(pn))
    return this.isOdd() ? pn : _n;
  if (this.isNegative())
    return t.isNegative() ? this.neg().mul(t.neg()) : this.neg().mul(t).neg();
  if (t.isNegative())
    return this.mul(t.neg()).neg();
  if (this.lt(Nb) && t.lt(Nb))
    return Xn(this.toNumber() * t.toNumber(), this.unsigned);
  var s = this.high >>> 16, r = this.high & 65535, o = this.low >>> 16, i = this.low & 65535, a = t.high >>> 16, l = t.high & 65535, c = t.low >>> 16, u = t.low & 65535, h = 0, d = 0, p = 0, f = 0;
  return f += i * u, p += f >>> 16, f &= 65535, p += o * u, d += p >>> 16, p &= 65535, p += i * c, d += p >>> 16, p &= 65535, d += r * u, h += d >>> 16, d &= 65535, d += o * c, h += d >>> 16, d &= 65535, d += i * l, h += d >>> 16, d &= 65535, h += s * u + r * c + o * l + i * a, h &= 65535, Ut(p << 16 | f, h << 16 | d, this.unsigned);
};
nt.mul = nt.multiply;
nt.divide = function(t) {
  if (Sn(t) || (t = cs(t)), t.isZero())
    throw Error("division by zero");
  if (Pn) {
    if (!this.unsigned && this.high === -2147483648 && t.low === -1 && t.high === -1)
      return this;
    var e = (this.unsigned ? Pn.div_u : Pn.div_s)(
      this.low,
      this.high,
      t.low,
      t.high
    );
    return Ut(e, Pn.get_high(), this.unsigned);
  }
  if (this.isZero())
    return this.unsigned ? Mr : _n;
  var s, r, o;
  if (this.unsigned) {
    if (t.unsigned || (t = t.toUnsigned()), t.gt(this))
      return Mr;
    if (t.gt(this.shru(1)))
      return E1;
    o = Mr;
  } else {
    if (this.eq(pn)) {
      if (t.eq(Eo) || t.eq(Sf))
        return pn;
      if (t.eq(pn))
        return Eo;
      var i = this.shr(1);
      return s = i.div(t).shl(1), s.eq(_n) ? t.isNegative() ? Eo : Sf : (r = this.sub(t.mul(s)), o = s.add(r.div(t)), o);
    } else if (t.eq(pn))
      return this.unsigned ? Mr : _n;
    if (this.isNegative())
      return t.isNegative() ? this.neg().div(t.neg()) : this.neg().div(t).neg();
    if (t.isNegative())
      return this.div(t.neg()).neg();
    o = _n;
  }
  for (r = this; r.gte(t); ) {
    s = Math.max(1, Math.floor(r.toNumber() / t.toNumber()));
    for (var a = Math.ceil(Math.log(s) / Math.LN2), l = a <= 48 ? 1 : Nu(2, a - 48), c = Xn(s), u = c.mul(t); u.isNegative() || u.gt(r); )
      s -= l, c = Xn(s, this.unsigned), u = c.mul(t);
    c.isZero() && (c = Eo), o = o.add(c), r = r.sub(u);
  }
  return o;
};
nt.div = nt.divide;
nt.modulo = function(t) {
  if (Sn(t) || (t = cs(t)), Pn) {
    var e = (this.unsigned ? Pn.rem_u : Pn.rem_s)(
      this.low,
      this.high,
      t.low,
      t.high
    );
    return Ut(e, Pn.get_high(), this.unsigned);
  }
  return this.sub(this.div(t).mul(t));
};
nt.mod = nt.modulo;
nt.rem = nt.modulo;
nt.not = function() {
  return Ut(~this.low, ~this.high, this.unsigned);
};
nt.and = function(t) {
  return Sn(t) || (t = cs(t)), Ut(this.low & t.low, this.high & t.high, this.unsigned);
};
nt.or = function(t) {
  return Sn(t) || (t = cs(t)), Ut(this.low | t.low, this.high | t.high, this.unsigned);
};
nt.xor = function(t) {
  return Sn(t) || (t = cs(t)), Ut(this.low ^ t.low, this.high ^ t.high, this.unsigned);
};
nt.shiftLeft = function(t) {
  return Sn(t) && (t = t.toInt()), (t &= 63) === 0 ? this : t < 32 ? Ut(this.low << t, this.high << t | this.low >>> 32 - t, this.unsigned) : Ut(0, this.low << t - 32, this.unsigned);
};
nt.shl = nt.shiftLeft;
nt.shiftRight = function(t) {
  return Sn(t) && (t = t.toInt()), (t &= 63) === 0 ? this : t < 32 ? Ut(this.low >>> t | this.high << 32 - t, this.high >> t, this.unsigned) : Ut(this.high >> t - 32, this.high >= 0 ? 0 : -1, this.unsigned);
};
nt.shr = nt.shiftRight;
nt.shiftRightUnsigned = function(t) {
  if (Sn(t) && (t = t.toInt()), t &= 63, t === 0)
    return this;
  var e = this.high;
  if (t < 32) {
    var s = this.low;
    return Ut(s >>> t | e << 32 - t, e >>> t, this.unsigned);
  } else
    return t === 32 ? Ut(e, 0, this.unsigned) : Ut(e >>> t - 32, 0, this.unsigned);
};
nt.shru = nt.shiftRightUnsigned;
nt.shr_u = nt.shiftRightUnsigned;
nt.toSigned = function() {
  return this.unsigned ? Ut(this.low, this.high, !1) : this;
};
nt.toUnsigned = function() {
  return this.unsigned ? this : Ut(this.low, this.high, !0);
};
nt.toBytes = function(t) {
  return t ? this.toBytesLE() : this.toBytesBE();
};
nt.toBytesLE = function() {
  var t = this.high, e = this.low;
  return [
    e & 255,
    e >>> 8 & 255,
    e >>> 16 & 255,
    e >>> 24,
    t & 255,
    t >>> 8 & 255,
    t >>> 16 & 255,
    t >>> 24
  ];
};
nt.toBytesBE = function() {
  var t = this.high, e = this.low;
  return [
    t >>> 24,
    t >>> 16 & 255,
    t >>> 8 & 255,
    t & 255,
    e >>> 24,
    e >>> 16 & 255,
    e >>> 8 & 255,
    e & 255
  ];
};
Ht.fromBytes = function(t, e, s) {
  return s ? Ht.fromBytesLE(t, e) : Ht.fromBytesBE(t, e);
};
Ht.fromBytesLE = function(t, e) {
  return new Ht(
    t[0] | t[1] << 8 | t[2] << 16 | t[3] << 24,
    t[4] | t[5] << 8 | t[6] << 16 | t[7] << 24,
    e
  );
};
Ht.fromBytesBE = function(t, e) {
  return new Ht(
    t[4] << 24 | t[5] << 16 | t[6] << 8 | t[7],
    t[0] << 24 | t[1] << 16 | t[2] << 8 | t[3],
    e
  );
};
const p2 = /* @__PURE__ */ KC({
  __proto__: null,
  default: If
}, [If]);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Ar = If || p2;
function rc(n) {
  return Ar.fromString(n, !0, 16);
}
const G1 = rc("c3a5c85c97cb3127"), Fr = rc("b492b66fbe98f273"), _e = rc("9ae16a3b2f90404f");
function vf(n) {
  return n.xor(n.shru(47));
}
function F1(n, t, e) {
  const s = n.slice(t, t + e);
  return Ar.fromBytes(Array.from(s), !0, !0);
}
function Pt(n, t) {
  return F1(n, t, 8);
}
function $b(n, t) {
  return F1(n, t, 4);
}
function ke(n, t) {
  return t === 0 ? n : n.shru(t).or(n.shl(64 - t));
}
function cr(n, t, e = rc("9ddfea08eb382d69")) {
  let s = n.xor(t).mul(e);
  s = s.xor(s.shru(47));
  let r = t.xor(s).mul(e);
  return r = r.xor(r.shru(47)), r = r.mul(e), r;
}
function f2(n, t, e, s, r, o) {
  r = r.add(n), o = ke(o.add(r).add(s), 21);
  const i = r;
  return r = r.add(t), r = r.add(e), o = o.add(ke(r, 44)), [r.add(s), o.add(i)];
}
function Hc(n, t, e, s) {
  return f2(Pt(n, t), Pt(n, t + 8), Pt(n, t + 16), Pt(n, t + 24), e, s);
}
function m2(n, t = n.length) {
  if (t >= 8) {
    const e = _e.add(t * 2), s = Pt(n, 0).add(_e), r = Pt(n, t - 8), o = ke(r, 37).mul(e).add(s), i = ke(s, 25).add(r).mul(e);
    return cr(o, i, e);
  }
  if (t >= 4) {
    const e = _e.add(t * 2), s = $b(n, 0);
    return cr(s.shl(3).add(t), $b(n, t - 4), e);
  }
  if (t > 0) {
    const e = n[0], s = n[t >> 1], r = n[t - 1], o = e + (s << 8), i = t + (r << 2);
    return vf(_e.mul(o).xor(G1.mul(i))).mul(_e);
  }
  return _e;
}
function g2(n, t = n.length) {
  const e = _e.add(t * 2), s = Pt(n, 0).mul(Fr), r = Pt(n, 8), o = Pt(n, t - 8).mul(e), i = Pt(n, t - 16).mul(_e);
  return cr(ke(s.add(r), 43).add(ke(o, 30)).add(i), s.add(ke(r.add(_e), 18)).add(o), e);
}
function y2(n, t = n.length) {
  const e = _e.add(t * 2), s = Pt(n, 0).mul(_e), r = Pt(n, 8), o = Pt(n, t - 8).mul(e), i = Pt(n, t - 16).mul(_e), a = ke(s.add(r), 43).add(ke(o, 30)).add(i), l = cr(a, s.add(ke(r.add(_e), 18)).add(o), e), c = Pt(n, 16).mul(e), u = Pt(n, 24), h = a.add(Pt(n, t - 32)).mul(e), d = l.add(Pt(n, t - 24)).mul(e);
  return cr(ke(c.add(u), 43).add(ke(h, 30)).add(d), c.add(ke(u.add(s), 18)).add(h), e);
}
function km(n, t = n.length) {
  const e = Ar.fromNumber(81, !0);
  if (t <= 32)
    return t <= 16 ? m2(n, t) : g2(n, t);
  if (t <= 64)
    return y2(n, t);
  let s = e, r = e.mul(Fr).add(113), o = vf(r.mul(_e).add(113)).mul(_e), i = [Ar.UZERO, Ar.UZERO], a = [Ar.UZERO, Ar.UZERO];
  s = s.mul(_e).add(Pt(n, 0));
  let l = 0;
  const c = (t - 1 >> 6) * 64, u = c + (t - 1 & 63) - 63;
  do
    s = ke(s.add(r).add(i[0]).add(Pt(n, l + 8)), 37).mul(Fr), r = ke(r.add(i[1]).add(Pt(n, l + 48)), 42).mul(Fr), s = s.xor(a[1]), r = r.add(i[0]).add(Pt(n, l + 40)), o = ke(o.add(a[0]), 33).mul(Fr), i = Hc(n, l, i[1].mul(Fr), s.add(a[0])), a = Hc(n, l + 32, o.add(a[1]), r.add(Pt(n, l + 16))), [o, s] = [s, o], l += 64;
  while (l !== c);
  const h = Fr.add(o.and(255).shl(1));
  return l = u, a[0] = a[0].add(t - 1 & 63), i[0] = i[0].add(a[0]), a[0] = a[0].add(i[0]), s = ke(s.add(r).add(i[0]).add(Pt(n, l + 8)), 37).mul(h), r = ke(r.add(i[1]).add(Pt(n, l + 48)), 42).mul(h), s = s.xor(a[1].mul(9)), r = r.add(i[0].mul(9).add(Pt(n, l + 40))), o = ke(o.add(a[0]), 33).mul(h), i = Hc(n, l, i[1].mul(h), s.add(a[0])), a = Hc(n, l + 32, o.add(a[1]), r.add(Pt(n, l + 16))), [o, s] = [s, o], cr(cr(i[0], a[0], h).add(vf(r).mul(G1)).add(o), cr(i[1], a[1], h).add(s), h);
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ns(n, t) {
  return t === "string" ? Ln(n) : Hs([n], t);
}
function b2(n, t) {
  return n instanceof Float32Array && t === "float32" || n instanceof Int32Array && t === "int32" || n instanceof Uint8Array && t === "bool";
}
function Hs(n, t) {
  if (t === "string")
    throw new Error("Cannot convert a string[] to a TypedArray");
  if (Array.isArray(n) && (n = zs(n)), V().getBool("DEBUG") && x1(n, t), b2(n, t))
    return n;
  if (t == null || t === "float32" || t === "complex64")
    return new Float32Array(n);
  if (t === "int32")
    return new Int32Array(n);
  if (t === "bool") {
    const e = new Uint8Array(n.length);
    for (let s = 0; s < e.length; ++s)
      Math.round(n[s]) !== 0 && (e[s] = 1);
    return e;
  } else
    throw new Error(`Unknown data type ${t}`);
}
function Le() {
  return V().platform.now();
}
function O1(n, t) {
  return V().platform.fetch(n, t);
}
function Ln(n, t = "utf-8") {
  return t = t || "utf-8", V().platform.encode(n, t);
}
function Ws(n, t = "utf-8") {
  return t = t || "utf-8", V().platform.decode(n, t);
}
const x2 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  createScalarValue: Ns,
  toTypedArray: Hs,
  now: Le,
  fetch: O1,
  encodeString: Ln,
  decodeString: Ws,
  shuffle: gm,
  shuffleCombo: HC,
  clamp: fr,
  nearestLargerEven: eh,
  swap: hn,
  sum: b1,
  randUniform: UC,
  distSquared: YC,
  assert: C,
  assertShapesMatch: Oe,
  assertNonNull: co,
  flatten: zs,
  sizeFromShape: P,
  isScalarShape: jC,
  arraysEqual: Nt,
  isInt: Yr,
  tanh: JC,
  sizeToSquarishShape: bu,
  createShuffledIndices: QC,
  rightPad: Kr,
  repeatedTry: xf,
  inferFromImplicitShape: ym,
  parseAxisParam: vt,
  squeezeShape: Bs,
  getTypedArrayFromDType: jt,
  getArrayFromDType: Gt,
  checkConversionForErrors: x1,
  isValidDtype: w1,
  hasEncodingLoss: bm,
  isTypedArray: De,
  bytesPerElement: xu,
  bytesFromStringArray: I1,
  isString: xs,
  isBoolean: S1,
  isNumber: wu,
  inferDtype: Qo,
  isFunction: mr,
  nearestDivisor: Iu,
  computeStrides: lt,
  toNestedArray: En,
  makeOnesTypedArray: nh,
  makeZerosTypedArray: ae,
  makeZerosNestedTypedArray: xm,
  assertNonNegativeIntegerDimensions: wm,
  locToIndex: mn,
  indexToLoc: Ts,
  isPromise: gr,
  hexToLong: rc,
  fingerPrint64: km
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class w2 {
  constructor(t, e) {
    this.backendTimer = t, this.logger = e, e == null && (this.logger = new S2());
  }
  profileKernel(t, e, s) {
    let r;
    const o = () => {
      r = s();
    };
    let i;
    const a = Le();
    if (this.backendTimer.timerAvailable())
      i = this.backendTimer.time(o);
    else {
      o();
      for (const c of r)
        c.dataSync();
      i = Promise.resolve({ kernelMs: Le() - a });
    }
    if (V().getBool("CHECK_COMPUTATION_FOR_ERRORS"))
      for (let c = 0; c < r.length; c++) {
        const u = r[c];
        u.data().then((h) => {
          I2(h, u.dtype, t);
        });
      }
    return {
      kernelName: t,
      outputs: r,
      inputs: e,
      timeMs: i.then((c) => c.kernelMs),
      extraInfo: i.then((c) => c.getExtraProfileInfo != null ? c.getExtraProfileInfo() : "")
    };
  }
  logKernelProfile(t) {
    const { kernelName: e, outputs: s, timeMs: r, inputs: o, extraInfo: i } = t;
    s.forEach((a) => {
      Promise.all([a.data(), r, i]).then((l) => {
        this.logger.logKernelProfile(e, a, l[0], l[1], o, l[2]);
      });
    });
  }
}
function I2(n, t, e) {
  if (t !== "float32")
    return !1;
  for (let s = 0; s < n.length; s++) {
    const r = n[s];
    if (isNaN(r) || !isFinite(r))
      return console.warn(`Found ${r} in the result of '${e}'`), !0;
  }
  return !1;
}
class S2 {
  logKernelProfile(t, e, s, r, o, i) {
    const a = typeof r == "number" ? Kr(`${r}ms`, 9) : r.error, l = Kr(t, 25), c = e.rank, u = e.size, h = Kr(e.shape.toString(), 14);
    let d = "";
    for (const p in o) {
      const f = o[p];
      if (f != null) {
        const m = f.shape || e.shape, g = m.length;
        d += `${p}: ${g}D ${g > 0 ? m : ""} `;
      }
    }
    console.log(`%c${l}	%c${a}	%c${c}D ${h}	%c${u}	%c${d}	%c${i}`, "font-weight:bold", "color:red", "color:blue", "color: orange", "color: green", "color: steelblue");
  }
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function v2(n, t, e) {
  const s = {}, r = {};
  for (let l = 0; l < t.length; l++)
    s[t[l].id] = !0;
  for (let l = 0; l < n.length; l++) {
    const c = n[l], u = c.inputs;
    for (const h in u) {
      const d = u[h];
      let p = !1;
      for (let f = 0; f < t.length; f++)
        if (s[d.id]) {
          c.outputs.forEach((m) => s[m.id] = !0), p = !0, r[c.id] = !0;
          break;
        }
      if (p)
        break;
    }
  }
  const o = {};
  o[e.id] = !0;
  const i = {};
  for (let l = n.length - 1; l >= 0; l--) {
    const c = n[l], u = c.inputs;
    for (let h = 0; h < c.outputs.length; h++)
      if (o[c.outputs[h].id]) {
        for (const d in u)
          o[u[d].id] = !0, i[c.id] = !0;
        break;
      }
  }
  const a = [];
  for (let l = 0; l < n.length; l++) {
    const c = n[l];
    if (r[c.id] && i[c.id]) {
      const u = {};
      for (const d in c.inputs) {
        const p = c.inputs[d];
        s[p.id] && (u[d] = p);
      }
      const h = Object.assign({}, c);
      h.inputs = u, h.outputs = c.outputs, a.push(h);
    }
  }
  return a;
}
function C2(n, t, e, s) {
  for (let r = t.length - 1; r >= 0; r--) {
    const o = t[r], i = [];
    if (o.outputs.forEach((l) => {
      const c = n[l.id];
      c != null ? i.push(c) : i.push(null);
    }), o.gradient == null)
      throw new Error(`Cannot compute gradient: gradient function not found for ${o.kernelName}.`);
    const a = o.gradient(i);
    for (const l in o.inputs) {
      if (!(l in a))
        throw new Error(`Cannot backprop through input ${l}. Available gradients found: ${Object.keys(a)}.`);
      const c = e(() => a[l]());
      if (c.dtype !== "float32")
        throw new Error(`Error in gradient for op ${o.kernelName}. The gradient of input ${l} must have 'float32' dtype, but has '${c.dtype}'`);
      const u = o.inputs[l];
      if (!Nt(c.shape, u.shape))
        throw new Error(`Error in gradient for op ${o.kernelName}. The gradient of input '${l}' has shape '${c.shape}', which does not match the shape of the input '${u.shape}'`);
      if (n[u.id] == null)
        n[u.id] = c;
      else {
        const h = n[u.id];
        n[u.id] = s(h, c), h.dispose();
      }
    }
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Rb = 20, Ia = 3, Fp = 7;
function k2(n, t, e, s) {
  const r = lt(t), o = T2(n, t, e, r), i = t.length, a = fu(n, t, e, r, o), l = ["Tensor"];
  return s && (l.push(`  dtype: ${e}`), l.push(`  rank: ${i}`), l.push(`  shape: [${t}]`), l.push("  values:")), l.push(a.map((c) => "    " + c).join(`
`)), l.join(`
`);
}
function T2(n, t, e, s) {
  const r = P(t), o = s[s.length - 1], i = new Array(o).fill(0), a = t.length, l = e === "complex64" ? Ra(n) : n;
  if (a > 1)
    for (let c = 0; c < r / o; c++) {
      const u = c * o;
      for (let h = 0; h < o; h++)
        i[h] = Math.max(i[h], $a(l[u + h], 0, e).length);
    }
  return i;
}
function $a(n, t, e) {
  let s;
  return Array.isArray(n) ? s = `${parseFloat(n[0].toFixed(Fp))} + ${parseFloat(n[1].toFixed(Fp))}j` : xs(n) ? s = `'${n}'` : e === "bool" ? s = A1(n) : s = parseFloat(n.toFixed(Fp)).toString(), Kr(s, t);
}
function A1(n) {
  return n === 0 ? "false" : "true";
}
function fu(n, t, e, s, r, o = !0) {
  const i = e === "complex64" ? 2 : 1, a = t[0], l = t.length;
  if (l === 0) {
    if (e === "complex64") {
      const m = Ra(n);
      return [$a(m[0], 0, e)];
    }
    return e === "bool" ? [A1(n[0])] : [n[0].toString()];
  }
  if (l === 1) {
    if (a > Rb) {
      const g = Ia * i;
      let y = Array.from(n.slice(0, g)), b = Array.from(n.slice((a - Ia) * i, a * i));
      return e === "complex64" && (y = Ra(y), b = Ra(b)), [
        "[" + y.map((w, x) => $a(w, r[x], e)).join(", ") + ", ..., " + b.map((w, x) => $a(w, r[a - Ia + x], e)).join(", ") + "]"
      ];
    }
    return [
      "[" + (e === "complex64" ? Ra(n) : Array.from(n)).map((g, y) => $a(g, r[y], e)).join(", ") + "]"
    ];
  }
  const c = t.slice(1), u = s.slice(1), h = s[0] * i, d = [];
  if (a > Rb) {
    for (let m = 0; m < Ia; m++) {
      const g = m * h, y = g + h;
      d.push(...fu(n.slice(g, y), c, e, u, r, !1));
    }
    d.push("...");
    for (let m = a - Ia; m < a; m++) {
      const g = m * h, y = g + h;
      d.push(...fu(n.slice(g, y), c, e, u, r, m === a - 1));
    }
  } else
    for (let m = 0; m < a; m++) {
      const g = m * h, y = g + h;
      d.push(...fu(n.slice(g, y), c, e, u, r, m === a - 1));
    }
  const p = l === 2 ? "," : "";
  d[0] = "[" + d[0] + p;
  for (let m = 1; m < d.length - 1; m++)
    d[m] = " " + d[m] + p;
  let f = `,
`;
  for (let m = 2; m < l; m++)
    f += `
`;
  return d[d.length - 1] = " " + d[d.length - 1] + "]" + (o ? "" : f), d;
}
function Ra(n) {
  const t = [];
  for (let e = 0; e < n.length; e += 2)
    t.push([n[e], n[e + 1]]);
  return t;
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ue {
  constructor(t, e, s) {
    if (this.dtype = e, this.shape = t.slice(), this.size = P(t), s != null) {
      const r = s.length;
      C(r === this.size, () => `Length of values '${r}' does not match the size inferred by the shape '${this.size}'.`);
    }
    if (e === "complex64")
      throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");
    this.values = s || Gt(e, this.size), this.strides = lt(t);
  }
  set(t, ...e) {
    e.length === 0 && (e = [0]), C(e.length === this.rank, () => `The number of provided coordinates (${e.length}) must match the rank (${this.rank})`);
    const s = this.locToIndex(e);
    this.values[s] = t;
  }
  get(...t) {
    t.length === 0 && (t = [0]);
    let e = 0;
    for (const r of t) {
      if (r < 0 || r >= this.shape[e]) {
        const o = `Requested out of range element at ${t}.   Buffer shape=${this.shape}`;
        throw new Error(o);
      }
      e++;
    }
    let s = t[t.length - 1];
    for (let r = 0; r < t.length - 1; ++r)
      s += this.strides[r] * t[r];
    return this.values[s];
  }
  locToIndex(t) {
    if (this.rank === 0)
      return 0;
    if (this.rank === 1)
      return t[0];
    let e = t[t.length - 1];
    for (let s = 0; s < t.length - 1; ++s)
      e += this.strides[s] * t[s];
    return e;
  }
  indexToLoc(t) {
    if (this.rank === 0)
      return [];
    if (this.rank === 1)
      return [t];
    const e = new Array(this.shape.length);
    for (let s = 0; s < e.length - 1; ++s)
      e[s] = Math.floor(t / this.strides[s]), t -= e[s] * this.strides[s];
    return e[e.length - 1] = t, e;
  }
  get rank() {
    return this.shape.length;
  }
  toTensor() {
    return ts().makeTensor(this.values, this.shape, this.dtype);
  }
}
let ts = null, $o = null;
function N2(n) {
  ts = n;
}
function $2(n) {
  $o = n;
}
class Lt {
  constructor(t, e, s, r) {
    this.kept = !1, this.isDisposedInternal = !1, this.shape = t.slice(), this.dtype = e || "float32", this.size = P(t), this.strides = lt(t), this.dataId = s, this.id = r, this.rankType = this.rank < 5 ? this.rank.toString() : "higher";
  }
  get rank() {
    return this.shape.length;
  }
  async buffer() {
    const t = await this.data();
    return $o.buffer(this.shape, this.dtype, t);
  }
  bufferSync() {
    return $o.buffer(this.shape, this.dtype, this.dataSync());
  }
  async array() {
    const t = await this.data();
    return En(this.shape, t, this.dtype === "complex64");
  }
  arraySync() {
    return En(this.shape, this.dataSync(), this.dtype === "complex64");
  }
  async data() {
    this.throwIfDisposed();
    const t = ts().read(this.dataId);
    if (this.dtype === "string") {
      const e = await t;
      try {
        return e.map((s) => Ws(s));
      } catch {
        throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().");
      }
    }
    return t;
  }
  dataToGPU(t) {
    return this.throwIfDisposed(), ts().readToGPU(this.dataId, t);
  }
  dataSync() {
    this.throwIfDisposed();
    const t = ts().readSync(this.dataId);
    if (this.dtype === "string")
      try {
        return t.map((e) => Ws(e));
      } catch {
        throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().");
      }
    return t;
  }
  async bytes() {
    this.throwIfDisposed();
    const t = await ts().read(this.dataId);
    return this.dtype === "string" ? t : new Uint8Array(t.buffer);
  }
  dispose() {
    this.isDisposed || (ts().disposeTensor(this), this.isDisposedInternal = !0);
  }
  get isDisposed() {
    return this.isDisposedInternal;
  }
  throwIfDisposed() {
    if (this.isDisposed)
      throw new Error("Tensor is disposed.");
  }
  print(t = !1) {
    return $o.print(this, t);
  }
  clone() {
    return this.throwIfDisposed(), $o.clone(this);
  }
  toString(t = !1) {
    const e = this.dataSync();
    return k2(e, this.shape, this.dtype, t);
  }
  cast(t) {
    return this.throwIfDisposed(), $o.cast(this, t);
  }
  variable(t = !0, e, s) {
    return this.throwIfDisposed(), ts().makeVariable(this, t, e, s);
  }
}
Object.defineProperty(Lt, Symbol.hasInstance, {
  value: (n) => !!n && n.data != null && n.dataSync != null && n.throwIfDisposed != null
});
function K() {
  return Sm("Tensor", () => Lt);
}
K();
class _a extends Lt {
  constructor(t, e, s, r) {
    super(t.shape, t.dtype, t.dataId, r), this.trainable = e, this.name = s;
  }
  assign(t) {
    if (t.dtype !== this.dtype)
      throw new Error(`dtype of the new value (${t.dtype}) and previous value (${this.dtype}) must match`);
    if (!Nt(t.shape, this.shape))
      throw new Error(`shape of the new value (${t.shape}) and previous value (${this.shape}) must match`);
    ts().disposeTensor(this), this.dataId = t.dataId, ts().incRef(this, null);
  }
  dispose() {
    ts().disposeVariable(this), this.isDisposedInternal = !0;
  }
}
Object.defineProperty(_a, Symbol.hasInstance, {
  value: (n) => n instanceof Lt && n.assign != null && n.assign instanceof Function
});
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var Cf;
(function(n) {
  n.R0 = "R0", n.R1 = "R1", n.R2 = "R2", n.R3 = "R3", n.R4 = "R4", n.R5 = "R5", n.R6 = "R6";
})(Cf || (Cf = {}));
var kf;
(function(n) {
  n.float32 = "float32", n.int32 = "int32", n.bool = "int32", n.complex64 = "complex64";
})(kf || (kf = {}));
var Tf;
(function(n) {
  n.float32 = "float32", n.int32 = "int32", n.bool = "bool", n.complex64 = "complex64";
})(Tf || (Tf = {}));
var Nf;
(function(n) {
  n.float32 = "float32", n.int32 = "float32", n.bool = "float32", n.complex64 = "complex64";
})(Nf || (Nf = {}));
var $f;
(function(n) {
  n.float32 = "complex64", n.int32 = "complex64", n.bool = "complex64", n.complex64 = "complex64";
})($f || ($f = {}));
const R2 = {
  float32: Nf,
  int32: kf,
  bool: Tf,
  complex64: $f
};
function He(n, t) {
  if (n === "string" || t === "string") {
    if (n === "string" && t === "string")
      return "string";
    throw new Error(`Can not upcast ${n} with ${t}`);
  }
  return R2[n][t];
}
function od(n) {
  return He(n, "int32");
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function re(n, t) {
  if (n.dtype === t.dtype)
    return [n, t];
  const e = He(n.dtype, t.dtype);
  return [n.cast(e), t.cast(e)];
}
function z1(n, t) {
  C(n.dtype === t.dtype, () => `The dtypes of the first(${n.dtype}) and second(${t.dtype}) input must match`);
}
function id(n, t) {
  return t.some((e) => e.id === n.id);
}
function Vs(n) {
  const t = [];
  return W1(n, t, /* @__PURE__ */ new Set()), t;
}
function W1(n, t, e) {
  if (n == null)
    return;
  if (n instanceof Lt) {
    t.push(n);
    return;
  }
  if (!E2(n))
    return;
  const s = n;
  for (const r in s) {
    const o = s[r];
    e.has(o) || (e.add(o), W1(o, t, e));
  }
}
function E2(n) {
  return Array.isArray(n) || typeof n == "object";
}
const L2 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  makeTypesMatch: re,
  assertTypesMatch: z1,
  isTensorInList: id,
  getTensorsInContainer: Vs
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Op(n) {
  return n.kernelName != null;
}
class Eb {
  constructor() {
    this.registeredVariables = {}, this.nextTapeNodeId = 0, this.numBytes = 0, this.numTensors = 0, this.numStringTensors = 0, this.numDataBuffers = 0, this.gradientDepth = 0, this.kernelDepth = 0, this.scopeStack = [], this.numDataMovesStack = [], this.nextScopeId = 0, this.tensorInfo = /* @__PURE__ */ new WeakMap(), this.profiling = !1, this.activeProfile = {
      newBytes: 0,
      newTensors: 0,
      peakBytes: 0,
      kernels: [],
      result: null,
      get kernelNames() {
        return Array.from(new Set(this.kernels.map((t) => t.name)));
      }
    };
  }
  dispose() {
    for (const t in this.registeredVariables)
      this.registeredVariables[t].dispose();
  }
}
class zo {
  constructor(t) {
    this.ENV = t, this.registry = {}, this.registryFactory = {}, this.pendingBackendInitId = 0, this.state = new Eb();
  }
  async ready() {
    if (this.pendingBackendInit != null)
      return this.pendingBackendInit.then(() => {
      });
    if (this.backendInstance != null)
      return;
    const t = this.getSortedBackends();
    for (let e = 0; e < t.length; e++) {
      const s = t[e];
      if (await this.initializeBackend(s).success) {
        await this.setBackend(s);
        return;
      }
    }
    throw new Error("Could not initialize any backends, all backend initializations failed.");
  }
  get backend() {
    if (this.pendingBackendInit != null)
      throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);
    if (this.backendInstance == null) {
      const { name: t, asyncInit: e } = this.initializeBackendsAndReturnBest();
      if (e)
        throw new Error(`The highest priority backend '${t}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);
      this.setBackend(t);
    }
    return this.backendInstance;
  }
  backendNames() {
    return Object.keys(this.registryFactory);
  }
  findBackend(t) {
    if (!(t in this.registry))
      if (t in this.registryFactory) {
        const { asyncInit: e } = this.initializeBackend(t);
        if (e)
          return null;
      } else
        return null;
    return this.registry[t];
  }
  findBackendFactory(t) {
    return t in this.registryFactory ? this.registryFactory[t].factory : null;
  }
  registerBackend(t, e, s = 1) {
    return t in this.registryFactory ? (Tn(`${t} backend was already registered. Reusing existing backend factory.`), !1) : (this.registryFactory[t] = { factory: e, priority: s }, !0);
  }
  async setBackend(t) {
    if (this.registryFactory[t] == null)
      throw new Error(`Backend name '${t}' not found in registry`);
    if (this.backendName = t, this.registry[t] == null) {
      this.backendInstance = null;
      const { success: e, asyncInit: s } = this.initializeBackend(t);
      if (!(s ? await e : e))
        return !1;
    }
    return this.backendInstance = this.registry[t], this.setupRegisteredKernels(), this.profiler = new w2(this.backendInstance), !0;
  }
  setupRegisteredKernels() {
    Tu(this.backendName).forEach((e) => {
      e.setupFunc != null && e.setupFunc(this.backendInstance);
    });
  }
  disposeRegisteredKernels(t) {
    Tu(t).forEach((s) => {
      s.disposeFunc != null && s.disposeFunc(this.registry[t]);
    });
  }
  initializeBackend(t) {
    const e = this.registryFactory[t];
    if (e == null)
      throw new Error(`Cannot initialize backend ${t}, no registration found.`);
    try {
      const s = e.factory();
      if (s && !(s instanceof th) && typeof s.then == "function") {
        const r = ++this.pendingBackendInitId, o = s.then((i) => r < this.pendingBackendInitId ? !1 : (this.registry[t] = i, this.pendingBackendInit = null, !0)).catch((i) => (r < this.pendingBackendInitId || (this.pendingBackendInit = null, Tn(`Initialization of backend ${t} failed`), Tn(i.stack || i.message)), !1));
        return this.pendingBackendInit = o, { success: o, asyncInit: !0 };
      } else
        return this.registry[t] = s, { success: !0, asyncInit: !1 };
    } catch (s) {
      return Tn(`Initialization of backend ${t} failed`), Tn(s.stack || s.message), { success: !1, asyncInit: !1 };
    }
  }
  removeBackend(t) {
    if (!(t in this.registryFactory))
      throw new Error(`${t} backend not found in registry`);
    this.backendName === t && this.pendingBackendInit != null && this.pendingBackendInitId++, t in this.registry && (this.disposeRegisteredKernels(t), this.registry[t].dispose(), delete this.registry[t]), delete this.registryFactory[t], this.backendName === t && (this.pendingBackendInit = null, this.backendName = null, this.backendInstance = null);
  }
  getSortedBackends() {
    if (Object.keys(this.registryFactory).length === 0)
      throw new Error("No backend found in registry.");
    return Object.keys(this.registryFactory).sort((t, e) => this.registryFactory[e].priority - this.registryFactory[t].priority);
  }
  initializeBackendsAndReturnBest() {
    const t = this.getSortedBackends();
    for (let e = 0; e < t.length; e++) {
      const s = t[e], { success: r, asyncInit: o } = this.initializeBackend(s);
      if (o || r)
        return { name: s, asyncInit: o };
    }
    throw new Error("Could not initialize any backends, all backend initializations failed.");
  }
  moveData(t, e) {
    const s = this.state.tensorInfo.get(e), r = s.backend, o = this.readSync(e), i = r.refCount(e);
    r.disposeData(e, !0), s.backend = t, t.move(e, o, s.shape, s.dtype, i), this.shouldCheckForMemLeaks() && this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1]++;
  }
  tidy(t, e) {
    let s = null;
    if (e == null) {
      if (typeof t != "function")
        throw new Error("Please provide a function to tidy()");
      e = t;
    } else {
      if (typeof t != "string" && !(t instanceof String))
        throw new Error("When calling with two arguments, the first argument to tidy() must be a string");
      if (typeof e != "function")
        throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");
      s = t;
    }
    let r;
    return this.scopedRun(() => this.startScope(s), () => this.endScope(r), () => (r = e(), r instanceof Promise && console.error("Cannot return a Promise inside of tidy."), r));
  }
  scopedRun(t, e, s) {
    t();
    try {
      const r = s();
      return e(), r;
    } catch (r) {
      throw e(), r;
    }
  }
  nextTensorId() {
    return zo.nextTensorId++;
  }
  nextVariableId() {
    return zo.nextVariableId++;
  }
  clone(t) {
    const e = E.runKernel(xi, { x: t }), s = { x: t }, r = (i) => ({
      x: () => {
        const a = "float32", l = { x: i }, c = { dtype: a };
        return E.runKernel(
          ii,
          l,
          c
        );
      }
    }), o = [];
    return this.addTapeNode(this.state.activeScope.name, s, [e], r, o, {}), e;
  }
  runKernel(t, e, s) {
    if (this.backendName == null && this.backend, !(ku(t, this.backendName) != null))
      throw new Error(`Kernel '${t}' not registered for backend '${this.backendName}'`);
    return this.runKernelFunc({ kernelName: t, inputs: e, attrs: s });
  }
  shouldCheckForMemLeaks() {
    return this.ENV.getBool("IS_TEST");
  }
  checkKernelForMemLeak(t, e, s) {
    const r = this.backend.numDataIds();
    let o = 0;
    s.forEach((l) => {
      o += l.dtype === "complex64" ? 3 : 1;
    });
    const i = this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1], a = r - e - o - i;
    if (a > 0)
      throw new Error(`Backend '${this.backendName}' has an internal memory leak (${a} data ids) after running '${t}'`);
  }
  runKernelFunc(t) {
    let e, s = [];
    const r = this.isTapeOn(), o = this.state.numBytes, i = this.state.numTensors;
    this.shouldCheckForMemLeaks() && this.state.numDataMovesStack.push(0);
    let a;
    this.backendName == null && this.backend;
    let l;
    const c = Op(t) ? t.kernelName : this.state.activeScope != null ? this.state.activeScope.name : "";
    if (Op(t)) {
      const { kernelName: f, inputs: m, attrs: g } = t;
      this.backendName == null && this.backend;
      const y = ku(f, this.backendName);
      C(y != null, () => `Cannot find registered kernel '${f}' for backend '${this.backendName}'`), a = () => {
        const b = this.backend.numDataIds();
        l = y.kernelFunc({ inputs: m, attrs: g, backend: this.backend });
        const w = Array.isArray(l) ? l : [l];
        this.shouldCheckForMemLeaks() && this.checkKernelForMemLeak(f, b, w);
        const x = w.map((S) => S.rank != null ? S : this.makeTensorFromTensorInfo(S));
        if (r) {
          const S = this.getTensorsForGradient(f, m, x);
          s = this.saveTensorsForBackwardMode(S);
        }
        return x;
      };
    } else {
      const { forwardFunc: f } = t, m = (g) => {
        !r || (s = g.map((y) => this.keep(this.clone(y))));
      };
      a = () => {
        const g = this.backend.numDataIds();
        l = this.tidy(() => f(this.backend, m));
        const y = Array.isArray(l) ? l : [l];
        return this.shouldCheckForMemLeaks() && this.checkKernelForMemLeak(c, g, y), y;
      };
    }
    const { inputs: u, attrs: h } = t, d = Op(t) ? null : t.backwardsFunc;
    let p;
    return this.scopedRun(
      () => this.state.kernelDepth++,
      () => this.state.kernelDepth--,
      () => {
        !this.ENV.getBool("DEBUG") && !this.state.profiling ? e = a() : (p = this.profiler.profileKernel(c, u, () => a()), this.ENV.getBool("DEBUG") && this.profiler.logKernelProfile(p), e = p.outputs);
      }
    ), r && this.addTapeNode(c, u, e, d, s, h), this.state.profiling && this.state.activeProfile.kernels.push({
      name: c,
      bytesAdded: this.state.numBytes - o,
      totalBytesSnapshot: this.state.numBytes,
      tensorsAdded: this.state.numTensors - i,
      totalTensorsSnapshot: this.state.numTensors,
      inputShapes: Object.keys(u).map((f) => u[f] != null ? u[f].shape : null),
      outputShapes: e.map((f) => f.shape),
      kernelTimeMs: p.timeMs,
      extraInfo: p.extraInfo
    }), Array.isArray(l) ? e : e[0];
  }
  saveTensorsForBackwardMode(t) {
    return t.map((s) => this.keep(this.clone(s)));
  }
  getTensorsForGradient(t, e, s) {
    const r = wf(t);
    if (r != null) {
      const o = r.inputsToSave || [], i = r.outputsToSave || [];
      let a;
      r.saveAllInputs ? (C(Array.isArray(e), () => "saveAllInputs is true, expected inputs to be an array."), a = Object.keys(e).map((c) => e[c])) : a = o.map((c) => e[c]);
      const l = s.filter((c, u) => i[u]);
      return a.concat(l);
    }
    return [];
  }
  makeTensor(t, e, s, r) {
    if (t == null)
      throw new Error("Values passed to engine.makeTensor() are null");
    s = s || "float32", r = r || this.backend;
    let o = t;
    s === "string" && xs(t[0]) && (o = t.map((l) => Ln(l)));
    const i = r.write(o, e, s), a = new Lt(e, s, i, this.nextTensorId());
    if (this.trackTensor(a, r), s === "string") {
      const l = this.state.tensorInfo.get(i), c = I1(o);
      this.state.numBytes += c - l.bytes, l.bytes = c;
    }
    return a;
  }
  makeTensorFromDataId(t, e, s, r) {
    s = s || "float32";
    const o = { dataId: t, shape: e, dtype: s };
    return this.makeTensorFromTensorInfo(o, r);
  }
  makeTensorFromTensorInfo(t, e) {
    const { dataId: s, shape: r, dtype: o } = t, i = new Lt(r, o, s, this.nextTensorId());
    return this.trackTensor(i, e), i;
  }
  makeVariable(t, e = !0, s, r) {
    s = s || this.nextVariableId().toString(), r != null && r !== t.dtype && (t = t.cast(r));
    const o = new _a(t, e, s, this.nextTensorId());
    if (this.state.registeredVariables[o.name] != null)
      throw new Error(`Variable with name ${o.name} was already registered`);
    return this.state.registeredVariables[o.name] = o, this.incRef(o, this.backend), o;
  }
  trackTensor(t, e) {
    this.state.numTensors++, t.dtype === "string" && this.state.numStringTensors++;
    let s = 0;
    t.dtype !== "complex64" && t.dtype !== "string" && (s = t.size * xu(t.dtype)), this.state.numBytes += s, this.state.tensorInfo.has(t.dataId) || (this.state.numDataBuffers++, this.state.tensorInfo.set(t.dataId, {
      backend: e || this.backend,
      dtype: t.dtype,
      shape: t.shape,
      bytes: s
    })), t instanceof _a || this.track(t);
  }
  incRef(t, e) {
    this.trackTensor(t, e), this.backend.incRef(t.dataId);
  }
  removeDataId(t, e) {
    this.state.tensorInfo.has(t) && this.state.tensorInfo.get(t).backend === e && (this.state.tensorInfo.delete(t), this.state.numDataBuffers--);
  }
  disposeTensor(t) {
    if (!this.state.tensorInfo.has(t.dataId))
      return;
    const e = this.state.tensorInfo.get(t.dataId);
    if (this.state.numTensors--, t.dtype === "string" && (this.state.numStringTensors--, this.state.numBytes -= e.bytes), t.dtype !== "complex64" && t.dtype !== "string") {
      const s = t.size * xu(t.dtype);
      this.state.numBytes -= s;
    }
    e.backend.disposeData(t.dataId) && this.removeDataId(t.dataId, e.backend);
  }
  disposeVariables() {
    for (const t in this.state.registeredVariables) {
      const e = this.state.registeredVariables[t];
      this.disposeVariable(e);
    }
  }
  disposeVariable(t) {
    this.disposeTensor(t), this.state.registeredVariables[t.name] != null && delete this.state.registeredVariables[t.name];
  }
  memory() {
    const t = this.backend.memory();
    return t.numTensors = this.state.numTensors, t.numDataBuffers = this.state.numDataBuffers, t.numBytes = this.state.numBytes, this.state.numStringTensors > 0 && (t.unreliable = !0, t.reasons == null && (t.reasons = []), t.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")), t;
  }
  async profile(t) {
    this.state.profiling = !0;
    const e = this.state.numBytes, s = this.state.numTensors;
    this.state.activeProfile.kernels = [], this.state.activeProfile.result = await t(), this.state.profiling = !1, this.state.activeProfile.peakBytes = Math.max(...this.state.activeProfile.kernels.map((r) => r.totalBytesSnapshot)), this.state.activeProfile.newBytes = this.state.numBytes - e, this.state.activeProfile.newTensors = this.state.numTensors - s;
    for (const r of this.state.activeProfile.kernels)
      r.kernelTimeMs = await r.kernelTimeMs, r.extraInfo = await r.extraInfo;
    return this.state.activeProfile;
  }
  isTapeOn() {
    return this.state.gradientDepth > 0 && this.state.kernelDepth === 0;
  }
  addTapeNode(t, e, s, r, o, i) {
    const a = { id: this.state.nextTapeNodeId++, kernelName: t, inputs: e, outputs: s, saved: o }, l = wf(t);
    l != null && (r = l.gradFunc), r != null && (a.gradient = (c) => (c = c.map((u, h) => {
      if (u == null) {
        const d = s[h], p = ae(d.size, d.dtype);
        return this.makeTensor(p, d.shape, d.dtype);
      }
      return u;
    }), r(c.length > 1 ? c : c[0], o, i))), this.state.activeTape.push(a);
  }
  keep(t) {
    return t.kept = !0, t;
  }
  startTape() {
    this.state.gradientDepth === 0 && (this.state.activeTape = []), this.state.gradientDepth++;
  }
  endTape() {
    this.state.gradientDepth--;
  }
  startScope(t) {
    const e = {
      track: [],
      name: "unnamed scope",
      id: this.state.nextScopeId++
    };
    t && (e.name = t), this.state.scopeStack.push(e), this.state.activeScope = e;
  }
  endScope(t) {
    const e = Vs(t), s = new Set(e.map((o) => o.id));
    for (let o = 0; o < this.state.activeScope.track.length; o++) {
      const i = this.state.activeScope.track[o];
      !i.kept && !s.has(i.id) && i.dispose();
    }
    const r = this.state.scopeStack.pop();
    this.state.activeScope = this.state.scopeStack.length === 0 ? null : this.state.scopeStack[this.state.scopeStack.length - 1], e.forEach((o) => {
      !o.kept && o.scopeId === r.id && this.track(o);
    });
  }
  gradients(t, e, s, r = !1) {
    if (C(e.length > 0, () => "gradients() received an empty list of xs."), s != null && s.dtype !== "float32")
      throw new Error(`dy must have 'float32' dtype, but has '${s.dtype}'`);
    const o = this.scopedRun(() => this.startTape(), () => this.endTape(), () => this.tidy("forward", t));
    C(o instanceof Lt, () => "The result y returned by f() must be a tensor.");
    const i = v2(this.state.activeTape, e, o);
    if (!r && i.length === 0 && e.length > 0)
      throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");
    return this.tidy("backward", () => {
      const a = {};
      a[o.id] = s == null ? D2(o.shape) : s, C2(
        a,
        i,
        (c) => this.tidy(c),
        G2
      );
      const l = e.map((c) => a[c.id]);
      return this.state.gradientDepth === 0 && (this.state.activeTape.forEach((c) => {
        for (const u of c.saved)
          u.dispose();
      }), this.state.activeTape = null), { value: o, grads: l };
    });
  }
  customGrad(t) {
    return C(mr(t), () => "The f passed in customGrad(f) must be a function."), (...e) => {
      C(e.every((a) => a instanceof Lt), () => "The args passed in customGrad(f)(x1, x2,...) must all be tensors");
      let s;
      const r = {};
      e.forEach((a, l) => {
        r[l] = a;
      });
      const o = (a, l) => (s = t(...e, l), C(s.value instanceof Lt, () => "The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"), C(mr(s.gradFunc), () => "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."), s.value), i = (a, l) => {
        const c = s.gradFunc(a, l), u = Array.isArray(c) ? c : [c];
        C(u.length === e.length, () => "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."), C(u.every((d) => d instanceof Lt), () => "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");
        const h = {};
        return u.forEach((d, p) => {
          h[p] = () => d;
        }), h;
      };
      return this.runKernelFunc({
        forwardFunc: o,
        backwardsFunc: i,
        inputs: r
      });
    };
  }
  readSync(t) {
    return this.state.tensorInfo.get(t).backend.readSync(t);
  }
  read(t) {
    return this.state.tensorInfo.get(t).backend.read(t);
  }
  readToGPU(t, e) {
    return this.state.tensorInfo.get(t).backend.readToGPU(t, e);
  }
  async time(t) {
    const e = Le(), s = await this.backend.time(t);
    return s.wallMs = Le() - e, s;
  }
  track(t) {
    return this.state.activeScope != null && (t.scopeId = this.state.activeScope.id, this.state.activeScope.track.push(t)), t;
  }
  get registeredVariables() {
    return this.state.registeredVariables;
  }
  reset() {
    this.pendingBackendInitId++, this.state.dispose(), this.ENV.reset(), this.state = new Eb();
    for (const t in this.registry)
      this.disposeRegisteredKernels(t), this.registry[t].dispose(), delete this.registry[t];
    this.backendName = null, this.backendInstance = null, this.pendingBackendInit = null;
  }
}
zo.nextTensorId = 0;
zo.nextVariableId = 0;
function D2(n) {
  const t = nh(P(n), "float32");
  return E.makeTensor(t, n, "float32");
}
function V1() {
  const n = k1();
  if (n._tfengine == null) {
    const t = new C1(n);
    n._tfengine = new zo(t);
  }
  return n2(n._tfengine.ENV), N2(() => n._tfengine), n._tfengine;
}
const E = V1();
function G2(n, t) {
  const e = { a: n, b: t };
  return E.runKernel(uo, e);
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function F2() {
  return typeof navigator < "u" && navigator != null;
}
let Rf;
function O2(n) {
  Rf = n;
}
function Tm(n) {
  if (Rf !== void 0)
    return Rf;
  if (n || F2()) {
    if (n || (n = navigator), n.product === "ReactNative")
      return !0;
    const t = n.userAgent || n.vendor || (typeof window < "u" ? window.opera : "");
    if (!t) {
      const e = n;
      return e.userAgentData && e.userAgentData.mobile;
    }
    return /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0, 4));
  }
  return !1;
}
function Nm() {
  return typeof window < "u" && window.document != null || typeof WorkerGlobalScope < "u";
}
const A2 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  mockIsMobile: O2,
  isMobile: Tm,
  isBrowser: Nm
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const gn = V();
gn.registerFlag("DEBUG", () => !1, (n) => {
  n && console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.");
});
gn.registerFlag("IS_BROWSER", () => Nm());
gn.registerFlag("IS_NODE", () => typeof process < "u" && typeof process.versions < "u" && typeof process.versions.node < "u");
gn.registerFlag("IS_CHROME", () => typeof navigator < "u" && navigator != null && navigator.userAgent != null && /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor));
gn.registerFlag("PROD", () => !1);
gn.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY", () => gn.getBool("DEBUG"));
gn.registerFlag("DEPRECATION_WARNINGS_ENABLED", () => !0);
gn.registerFlag("IS_TEST", () => !1);
gn.registerFlag("CHECK_COMPUTATION_FOR_ERRORS", () => !0);
gn.registerFlag("WRAP_TO_IMAGEBITMAP", () => !1);
gn.registerFlag("ENGINE_COMPILE_ONLY", () => !1);
gn.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU", () => !1);
gn.registerFlag("USE_SETTIMEOUTCUSTOM", () => !1);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function vs(n, t) {
  let e = n;
  if (De(n))
    return t === "string" ? [] : [n.length];
  if (!Array.isArray(n))
    return [];
  const s = [];
  for (; Array.isArray(e) || De(e) && t !== "string"; )
    s.push(e.length), e = e[0];
  return Array.isArray(n) && V().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY") && M1(n, s, []), s;
}
function M1(n, t, e) {
  if (e = e || [], !Array.isArray(n) && !De(n)) {
    C(t.length === 0, () => `Element arr[${e.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`);
    return;
  }
  C(t.length > 0, () => `Element arr[${e.join("][")}] should be a primitive, but is an array of ${n.length} elements`), C(n.length === t[0], () => `Element arr[${e.join("][")}] should have ${t[0]} elements, but has ${n.length} elements`);
  const s = t.slice(1);
  for (let r = 0; r < n.length; ++r)
    M1(n[r], s, e.concat(r));
}
function Lb(n, t, e, s) {
  if (n !== "string_or_numeric") {
    if (n == null)
      throw new Error("Expected dtype cannot be null.");
    if (n !== "numeric" && n !== t || n === "numeric" && t === "string")
      throw new Error(`Argument '${e}' passed to '${s}' must be ${n} tensor, but got ${t} tensor`);
  }
}
function k(n, t, e, s = "numeric") {
  if (n instanceof Lt)
    return Lb(s, n.dtype, t, e), n;
  let r = Qo(n);
  if (r !== "string" && ["bool", "int32", "float32"].indexOf(s) >= 0 && (r = s), Lb(s, r, t, e), n == null || !De(n) && !Array.isArray(n) && typeof n != "number" && typeof n != "boolean" && typeof n != "string") {
    const l = n == null ? "null" : n.constructor.name;
    throw new Error(`Argument '${t}' passed to '${e}' must be a Tensor or TensorLike, but got '${l}'`);
  }
  const o = vs(n, r);
  !De(n) && !Array.isArray(n) && (n = [n]);
  const a = r !== "string" ? Hs(n, r) : zs(n, [], !0);
  return E.makeTensor(a, o, r);
}
function Ka(n, t, e, s = "numeric") {
  if (!Array.isArray(n))
    throw new Error(`Argument ${t} passed to ${e} must be a \`Tensor[]\` or \`TensorLike[]\``);
  return n.map((o, i) => k(o, `${t}[${i}]`, e, s));
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const $m = "__op";
function L(n) {
  const t = Object.keys(n);
  if (t.length !== 1)
    throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);
  let e = t[0];
  const s = n[e];
  e.endsWith("_") && (e = e.substring(0, e.length - 1)), e = e + $m;
  const r = (...o) => {
    E.startScope(e);
    try {
      const i = s(...o);
      return gr(i) && console.error("Cannot return a Promise inside of tidy."), E.endScope(i), i;
    } catch (i) {
      throw E.endScope(null), i;
    }
  };
  return Object.defineProperty(r, "name", { value: e, configurable: !0 }), r;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function z2(n, t) {
  const e = k(n, "real", "complex"), s = k(t, "imag", "complex");
  Oe(e.shape, s.shape, `real and imag shapes, ${e.shape} and ${s.shape}, must match in call to tf.complex().`);
  const r = { real: e, imag: s };
  return E.runKernel(ch, r);
}
const Ms = L({ complex_: z2 });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function vr(n, t, e, s) {
  if (s == null && (s = Qo(n)), s === "complex64")
    throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");
  if (!De(n) && !Array.isArray(n) && typeof n != "number" && typeof n != "boolean" && typeof n != "string")
    throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");
  if (t != null) {
    wm(t);
    const r = P(t), o = P(e);
    C(r === o, () => `Based on the provided shape, [${t}], the tensor should have ${r} values but has ${o}`);
    for (let i = 0; i < e.length; ++i) {
      const a = e[i], l = i === e.length - 1 ? a !== P(t.slice(i)) : !0;
      C(e[i] === t[i] || !l, () => `Error creating a new Tensor. Inferred shape (${e}) does not match the provided shape (${t}). `);
    }
  }
  return !De(n) && !Array.isArray(n) && (n = [n]), t = t || e, n = s !== "string" ? Hs(n, s) : zs(n, [], !0), E.makeTensor(n, t, s);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ee(n, t, e) {
  const s = vs(n, e);
  return vr(n, t, s, e);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Ef = {
  float32: 4,
  float16: 2,
  int32: 4,
  uint16: 2,
  uint8: 1,
  bool: 1,
  complex64: 8
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const $u = 4;
async function Lf(n, t) {
  const e = [], s = [], r = Array.isArray(n) ? n.map((i) => i.name) : Object.keys(n);
  for (let i = 0; i < r.length; ++i) {
    const a = r[i], l = Array.isArray(n) ? n[i].tensor : n[a];
    if (l.dtype !== "float32" && l.dtype !== "int32" && l.dtype !== "bool" && l.dtype !== "string" && l.dtype !== "complex64")
      throw new Error(`Unsupported dtype in weight '${a}': ${l.dtype}`);
    const c = { name: a, shape: l.shape, dtype: l.dtype };
    if (l.dtype === "string") {
      const u = new Promise(async (h) => {
        const d = await l.bytes(), p = d.reduce((g, y) => g + y.length, 0) + $u * d.length, f = new Uint8Array(p);
        let m = 0;
        for (let g = 0; g < d.length; g++) {
          const y = d[g], b = new Uint8Array(new Uint32Array([y.length]).buffer);
          f.set(b, m), m += $u, f.set(y, m), m += y.length;
        }
        h(f);
      });
      s.push(u);
    } else
      s.push(l.data());
    t != null && (c.group = t), e.push(c);
  }
  const o = await Promise.all(s);
  return { data: W2(o), specs: e };
}
function Rm(n, t) {
  const e = {};
  let s, r = 0;
  for (const o of t) {
    const i = o.name, a = o.dtype, l = o.shape, c = P(l);
    let u;
    if ("quantization" in o) {
      const h = o.quantization;
      if (h.dtype === "uint8" || h.dtype === "uint16") {
        if (!("min" in h && "scale" in h))
          throw new Error(`Weight ${o.name} with quantization ${h.dtype} doesn't have corresponding metadata min and scale.`);
      } else if (h.dtype === "float16") {
        if (a !== "float32")
          throw new Error(`Weight ${o.name} is quantized with ${h.dtype} which only supports weights of type float32 not ${a}.`);
      } else
        throw new Error(`Weight ${o.name} has unknown quantization dtype ${h.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);
      const d = Ef[h.dtype], p = n.slice(r, r + c * d), f = h.dtype === "uint8" ? new Uint8Array(p) : new Uint16Array(p);
      if (a === "float32")
        if (h.dtype === "uint8" || h.dtype === "uint16") {
          u = new Float32Array(f.length);
          for (let m = 0; m < f.length; m++) {
            const g = f[m];
            u[m] = g * h.scale + h.min;
          }
        } else if (h.dtype === "float16")
          s === void 0 && (s = K2()), u = s(f);
        else
          throw new Error(`Unsupported quantization type ${h.dtype} for weight type float32.`);
      else if (a === "int32") {
        if (h.dtype !== "uint8" && h.dtype !== "uint16")
          throw new Error(`Unsupported quantization type ${h.dtype} for weight type int32.`);
        u = new Int32Array(f.length);
        for (let m = 0; m < f.length; m++) {
          const g = f[m];
          u[m] = Math.round(g * h.scale + h.min);
        }
      } else
        throw new Error(`Unsupported dtype in weight '${i}': ${a}`);
      r += c * d;
    } else if (a === "string") {
      const h = P(o.shape);
      u = [];
      for (let d = 0; d < h; d++) {
        const p = new Uint32Array(n.slice(r, r + $u))[0];
        r += $u;
        const f = new Uint8Array(n.slice(r, r + p));
        u.push(f), r += p;
      }
    } else {
      const h = Ef[a], d = n.slice(r, r + c * h);
      if (a === "float32")
        u = new Float32Array(d);
      else if (a === "int32")
        u = new Int32Array(d);
      else if (a === "bool")
        u = new Uint8Array(d);
      else if (a === "complex64") {
        u = new Float32Array(d);
        const p = new Float32Array(u.length / 2), f = new Float32Array(u.length / 2);
        for (let y = 0; y < p.length; y++)
          p[y] = u[y * 2], f[y] = u[y * 2 + 1];
        const m = ee(p, l, "float32"), g = ee(f, l, "float32");
        e[i] = Ms(m, g), m.dispose(), g.dispose();
      } else
        throw new Error(`Unsupported dtype in weight '${i}': ${a}`);
      r += c * h;
    }
    a !== "complex64" && (e[i] = ee(u, l, a));
  }
  return e;
}
function W2(n) {
  if (n === null)
    throw new Error(`Invalid input value: ${JSON.stringify(n)}`);
  let t = 0;
  const e = [];
  n.forEach((o) => {
    if (t += o.byteLength, e.push(o.byteLength === o.buffer.byteLength ? o : new o.constructor(o)), !(o instanceof Float32Array || o instanceof Int32Array || o instanceof Uint8Array))
      throw new Error(`Unsupported TypedArray subtype: ${o.constructor.name}`);
  });
  const s = new Uint8Array(t);
  let r = 0;
  return e.forEach((o) => {
    s.set(new Uint8Array(o.buffer), r), r += o.byteLength;
  }), s.buffer;
}
const Em = typeof Buffer < "u" && (typeof Blob > "u" || typeof atob > "u" || typeof btoa > "u");
function Db(n) {
  return Em ? Buffer.byteLength(n) : new Blob([n]).size;
}
function V2(n) {
  if (Em)
    return Buffer.from(n).toString("base64");
  const t = new Uint8Array(n);
  let e = "";
  for (let s = 0, r = t.length; s < r; s++)
    e += String.fromCharCode(t[s]);
  return btoa(e);
}
function M2(n) {
  if (Em) {
    const s = Buffer.from(n, "base64");
    return s.buffer.slice(s.byteOffset, s.byteOffset + s.byteLength);
  }
  const t = atob(n), e = new Uint8Array(t.length);
  for (let s = 0; s < t.length; ++s)
    e.set([t.charCodeAt(s)], s);
  return e.buffer;
}
function ad(n) {
  if (n.length === 1)
    return n[0];
  let t = 0;
  n.forEach((r) => {
    t += r.byteLength;
  });
  const e = new Uint8Array(t);
  let s = 0;
  return n.forEach((r) => {
    e.set(new Uint8Array(r), s), s += r.byteLength;
  }), e.buffer;
}
function Gb(n) {
  const t = "/";
  for (n = n.trim(); n.endsWith(t); )
    n = n.slice(0, n.length - 1);
  const e = n.split(t);
  return e[e.length - 1];
}
function P1(n, t) {
  const e = {
    modelTopology: n.modelTopology,
    format: n.format,
    generatedBy: n.generatedBy,
    convertedBy: n.convertedBy,
    weightsManifest: t
  };
  return n.signature != null && (e.signature = n.signature), n.userDefinedMetadata != null && (e.userDefinedMetadata = n.userDefinedMetadata), n.modelInitializer != null && (e.modelInitializer = n.modelInitializer), n.trainingConfig != null && (e.trainingConfig = n.trainingConfig), e;
}
function Lm(n, t, e) {
  const s = {
    modelTopology: n.modelTopology,
    format: n.format,
    generatedBy: n.generatedBy,
    convertedBy: n.convertedBy
  };
  if (n.trainingConfig != null && (s.trainingConfig = n.trainingConfig), n.weightsManifest != null) {
    if (!t)
      throw new Error("modelJSON has weightsManifest but weightSpecs is null");
    if (!e)
      throw new Error("modelJSON has weightsManifest but weightData is null");
    s.weightSpecs = t, s.weightData = e;
  }
  return n.signature != null && (s.signature = n.signature), n.userDefinedMetadata != null && (s.userDefinedMetadata = n.userDefinedMetadata), n.modelInitializer != null && (s.modelInitializer = n.modelInitializer), s;
}
async function Dm(n, t) {
  let e, s;
  return n.weightsManifest != null && ([e, s] = await t(n.weightsManifest)), Lm(n, e, s);
}
function oc(n) {
  if (n.modelTopology instanceof ArrayBuffer)
    throw new Error("Expected JSON model topology, received ArrayBuffer.");
  return {
    dateSaved: new Date(),
    modelTopologyType: "JSON",
    modelTopologyBytes: n.modelTopology == null ? 0 : Db(JSON.stringify(n.modelTopology)),
    weightSpecsBytes: n.weightSpecs == null ? 0 : Db(JSON.stringify(n.weightSpecs)),
    weightDataBytes: n.weightData == null ? 0 : n.weightData.byteLength
  };
}
function Gm(n) {
  const t = [];
  for (const e of n)
    t.push(...e.weights);
  return t;
}
function P2() {
  const n = (e) => {
    let s = e << 13, r = 0;
    for (; (s & 8388608) === 0; )
      r -= 8388608, s <<= 1;
    return s &= -8388609, r += 947912704, s | r;
  }, t = new Uint32Array(2048);
  t[0] = 0;
  for (let e = 1; e < 1024; e++)
    t[e] = n(e);
  for (let e = 1024; e < 2048; e++)
    t[e] = 939524096 + (e - 1024 << 13);
  return t;
}
function X2() {
  const n = new Uint32Array(64);
  n[0] = 0, n[31] = 1199570944, n[32] = 2147483648, n[63] = 3347054592;
  for (let t = 1; t < 31; t++)
    n[t] = t << 23;
  for (let t = 33; t < 63; t++)
    n[t] = 2147483648 + (t - 32 << 23);
  return n;
}
function _2() {
  const n = new Uint32Array(64);
  for (let t = 0; t < 64; t++)
    n[t] = 1024;
  return n[0] = n[32] = 0, n;
}
function K2() {
  const n = P2(), t = X2(), e = _2();
  return (s) => {
    const r = new ArrayBuffer(4 * s.length), o = new Uint32Array(r);
    for (let i = 0; i < s.length; i++) {
      const a = s[i], l = n[e[a >> 10] + (a & 1023)] + t[a >> 10];
      o[i] = l;
    }
    return new Float32Array(r);
  };
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class te {
  constructor() {
    this.saveRouters = [], this.loadRouters = [];
  }
  static getInstance() {
    return te.instance == null && (te.instance = new te()), te.instance;
  }
  static registerSaveRouter(t) {
    te.getInstance().saveRouters.push(t);
  }
  static registerLoadRouter(t) {
    te.getInstance().loadRouters.push(t);
  }
  static getSaveHandlers(t) {
    return te.getHandlers(t, "save");
  }
  static getLoadHandlers(t, e) {
    return te.getHandlers(t, "load", e);
  }
  static getHandlers(t, e, s) {
    const r = [];
    return (e === "load" ? te.getInstance().loadRouters : te.getInstance().saveRouters).forEach((i) => {
      const a = i(t, s);
      a !== null && r.push(a);
    }), r;
  }
}
const Z2 = (n) => te.registerSaveRouter(n), B2 = (n) => te.registerLoadRouter(n), X1 = (n) => te.getSaveHandlers(n), _1 = (n, t) => te.getLoadHandlers(n, t);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Df = "tensorflowjs", Gf = 1, Pr = "models_store", ir = "model_info_store";
function K1() {
  if (!V().getBool("IS_BROWSER"))
    throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");
  const n = typeof window > "u" ? self : window, t = n.indexedDB || n.mozIndexedDB || n.webkitIndexedDB || n.msIndexedDB || n.shimIndexedDB;
  if (t == null)
    throw new Error("The current browser does not appear to support IndexedDB.");
  return t;
}
function Ff(n) {
  const t = n.result;
  t.createObjectStore(Pr, { keyPath: "modelPath" }), t.createObjectStore(ir, { keyPath: "modelPath" });
}
class jr {
  constructor(t) {
    if (this.indexedDB = K1(), t == null || !t)
      throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");
    this.modelPath = t;
  }
  async save(t) {
    if (t.modelTopology instanceof ArrayBuffer)
      throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");
    return this.databaseAction(this.modelPath, t);
  }
  async load() {
    return this.databaseAction(this.modelPath);
  }
  databaseAction(t, e) {
    return new Promise((s, r) => {
      const o = this.indexedDB.open(Df, Gf);
      o.onupgradeneeded = () => Ff(o), o.onsuccess = () => {
        const i = o.result;
        if (e == null) {
          const a = i.transaction(Pr, "readonly"), c = a.objectStore(Pr).get(this.modelPath);
          c.onsuccess = () => {
            if (c.result == null)
              return i.close(), r(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));
            s(c.result.modelArtifacts);
          }, c.onerror = (u) => (i.close(), r(c.error)), a.oncomplete = () => i.close();
        } else {
          const a = oc(e), l = i.transaction(ir, "readwrite");
          let c = l.objectStore(ir);
          const u = c.put({ modelPath: this.modelPath, modelArtifactsInfo: a });
          let h;
          u.onsuccess = () => {
            h = i.transaction(Pr, "readwrite");
            const p = h.objectStore(Pr).put({
              modelPath: this.modelPath,
              modelArtifacts: e,
              modelArtifactsInfo: a
            });
            p.onsuccess = () => s({ modelArtifactsInfo: a }), p.onerror = (f) => {
              c = l.objectStore(ir);
              const m = c.delete(this.modelPath);
              m.onsuccess = () => (i.close(), r(p.error)), m.onerror = (g) => (i.close(), r(p.error));
            };
          }, u.onerror = (d) => (i.close(), r(u.error)), l.oncomplete = () => {
            h == null ? i.close() : h.oncomplete = () => i.close();
          };
        }
      }, o.onerror = (i) => r(o.error);
    });
  }
}
jr.URL_SCHEME = "indexeddb://";
const Z1 = (n) => V().getBool("IS_BROWSER") && !Array.isArray(n) && n.startsWith(jr.URL_SCHEME) ? H2(n.slice(jr.URL_SCHEME.length)) : null;
te.registerSaveRouter(Z1);
te.registerLoadRouter(Z1);
function H2(n) {
  return new jr(n);
}
function U2(n) {
  return n.startsWith(jr.URL_SCHEME) ? n.slice(jr.URL_SCHEME.length) : n;
}
class Y2 {
  constructor() {
    this.indexedDB = K1();
  }
  async listModels() {
    return new Promise((t, e) => {
      const s = this.indexedDB.open(Df, Gf);
      s.onupgradeneeded = () => Ff(s), s.onsuccess = () => {
        const r = s.result, o = r.transaction(ir, "readonly"), a = o.objectStore(ir).getAll();
        a.onsuccess = () => {
          const l = {};
          for (const c of a.result)
            l[c.modelPath] = c.modelArtifactsInfo;
          t(l);
        }, a.onerror = (l) => (r.close(), e(a.error)), o.oncomplete = () => r.close();
      }, s.onerror = (r) => e(s.error);
    });
  }
  async removeModel(t) {
    return t = U2(t), new Promise((e, s) => {
      const r = this.indexedDB.open(Df, Gf);
      r.onupgradeneeded = () => Ff(r), r.onsuccess = () => {
        const o = r.result, i = o.transaction(ir, "readwrite"), a = i.objectStore(ir), l = a.get(t);
        let c;
        l.onsuccess = () => {
          if (l.result == null)
            return o.close(), s(new Error(`Cannot find model with path '${t}' in IndexedDB.`));
          {
            const u = a.delete(t), h = () => {
              c = o.transaction(Pr, "readwrite");
              const p = c.objectStore(Pr).delete(t);
              p.onsuccess = () => e(l.result.modelArtifactsInfo), p.onerror = (f) => s(l.error);
            };
            u.onsuccess = h, u.onerror = (d) => (h(), o.close(), s(l.error));
          }
        }, l.onerror = (u) => (o.close(), s(l.error)), i.oncomplete = () => {
          c == null ? o.close() : c.oncomplete = () => o.close();
        };
      }, r.onerror = (o) => s(r.error);
    });
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Gs = "/", Ro = "tensorflowjs_models", B1 = "info", j2 = "model_topology", J2 = "weight_specs", Q2 = "weight_data", q2 = "model_metadata";
function H1(n) {
  return {
    info: [Ro, n, B1].join(Gs),
    topology: [Ro, n, j2].join(Gs),
    weightSpecs: [Ro, n, J2].join(Gs),
    weightData: [Ro, n, Q2].join(Gs),
    modelMetadata: [Ro, n, q2].join(Gs)
  };
}
function U1(n) {
  for (const t of Object.values(n))
    window.localStorage.removeItem(t);
}
function tk(n) {
  const t = n.split(Gs);
  if (t.length < 3)
    throw new Error(`Invalid key format: ${n}`);
  return t.slice(1, t.length - 1).join(Gs);
}
function ek(n) {
  return n.startsWith(Jr.URL_SCHEME) ? n.slice(Jr.URL_SCHEME.length) : n;
}
class Jr {
  constructor(t) {
    if (!V().getBool("IS_BROWSER") || typeof window > "u" || typeof window.localStorage > "u")
      throw new Error("The current environment does not support local storage.");
    if (this.LS = window.localStorage, t == null || !t)
      throw new Error("For local storage, modelPath must not be null, undefined or empty.");
    this.modelPath = t, this.keys = H1(this.modelPath);
  }
  async save(t) {
    if (t.modelTopology instanceof ArrayBuffer)
      throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");
    {
      const e = JSON.stringify(t.modelTopology), s = JSON.stringify(t.weightSpecs), r = oc(t);
      try {
        this.LS.setItem(this.keys.info, JSON.stringify(r)), this.LS.setItem(this.keys.topology, e), this.LS.setItem(this.keys.weightSpecs, s), this.LS.setItem(this.keys.weightData, V2(t.weightData));
        const o = {
          format: t.format,
          generatedBy: t.generatedBy,
          convertedBy: t.convertedBy,
          signature: t.signature != null ? t.signature : void 0,
          userDefinedMetadata: t.userDefinedMetadata != null ? t.userDefinedMetadata : void 0,
          modelInitializer: t.modelInitializer != null ? t.modelInitializer : void 0,
          trainingConfig: t.trainingConfig != null ? t.trainingConfig : void 0
        };
        return this.LS.setItem(this.keys.modelMetadata, JSON.stringify(o)), { modelArtifactsInfo: r };
      } catch {
        throw U1(this.keys), new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`);
      }
    }
  }
  async load() {
    const t = JSON.parse(this.LS.getItem(this.keys.info));
    if (t == null)
      throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);
    if (t.modelTopologyType !== "JSON")
      throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");
    const e = {}, s = JSON.parse(this.LS.getItem(this.keys.topology));
    if (s == null)
      throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);
    e.modelTopology = s;
    const r = JSON.parse(this.LS.getItem(this.keys.weightSpecs));
    if (r == null)
      throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);
    e.weightSpecs = r;
    const o = this.LS.getItem(this.keys.modelMetadata);
    if (o != null) {
      const a = JSON.parse(o);
      e.format = a.format, e.generatedBy = a.generatedBy, e.convertedBy = a.convertedBy, a.signature != null && (e.signature = a.signature), a.userDefinedMetadata != null && (e.userDefinedMetadata = a.userDefinedMetadata), a.modelInitializer != null && (e.modelInitializer = a.modelInitializer), a.trainingConfig != null && (e.trainingConfig = a.trainingConfig);
    }
    const i = this.LS.getItem(this.keys.weightData);
    if (i == null)
      throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);
    return e.weightData = M2(i), e;
  }
}
Jr.URL_SCHEME = "localstorage://";
const Y1 = (n) => V().getBool("IS_BROWSER") && !Array.isArray(n) && n.startsWith(Jr.URL_SCHEME) ? nk(n.slice(Jr.URL_SCHEME.length)) : null;
te.registerSaveRouter(Y1);
te.registerLoadRouter(Y1);
function nk(n) {
  return new Jr(n);
}
class sk {
  constructor() {
    C(V().getBool("IS_BROWSER"), () => "Current environment is not a web browser"), C(typeof window > "u" || typeof window.localStorage < "u", () => "Current browser does not appear to support localStorage"), this.LS = window.localStorage;
  }
  async listModels() {
    const t = {}, e = Ro + Gs, s = Gs + B1;
    for (let r = 0; r < this.LS.length; ++r) {
      const o = this.LS.key(r);
      if (o.startsWith(e) && o.endsWith(s)) {
        const i = tk(o);
        t[i] = JSON.parse(this.LS.getItem(o));
      }
    }
    return t;
  }
  async removeModel(t) {
    t = ek(t);
    const e = H1(t);
    if (this.LS.getItem(e.info) == null)
      throw new Error(`Cannot find model at path '${t}'`);
    const s = JSON.parse(this.LS.getItem(e.info));
    return U1(e), s;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Lo = "://";
class Xe {
  constructor() {
    this.managers = {};
  }
  static getInstance() {
    return Xe.instance == null && (Xe.instance = new Xe()), Xe.instance;
  }
  static registerManager(t, e) {
    C(t != null, () => "scheme must not be undefined or null."), t.endsWith(Lo) && (t = t.slice(0, t.indexOf(Lo))), C(t.length > 0, () => "scheme must not be an empty string.");
    const s = Xe.getInstance();
    C(s.managers[t] == null, () => `A model store manager is already registered for scheme '${t}'.`), s.managers[t] = e;
  }
  static getManager(t) {
    const e = Xe.getInstance().managers[t];
    if (e == null)
      throw new Error(`Cannot find model manager for scheme '${t}'`);
    return e;
  }
  static getSchemes() {
    return Object.keys(Xe.getInstance().managers);
  }
}
function mu(n) {
  if (n.indexOf(Lo) === -1)
    throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${Xe.getSchemes().join(",")}`);
  return {
    scheme: n.split(Lo)[0],
    path: n.split(Lo)[1]
  };
}
async function j1(n, t, e = !1) {
  C(n !== t, () => `Old path and new path are the same: '${n}'`);
  const s = te.getLoadHandlers(n);
  C(s.length > 0, () => `Copying failed because no load handler is found for source URL ${n}.`), C(s.length < 2, () => `Copying failed because more than one (${s.length}) load handlers for source URL ${n}.`);
  const r = s[0], o = te.getSaveHandlers(t);
  C(o.length > 0, () => `Copying failed because no save handler is found for destination URL ${t}.`), C(o.length < 2, () => `Copying failed because more than one (${s.length}) save handlers for destination URL ${t}.`);
  const i = o[0], a = mu(n).scheme, l = mu(n).path, c = a === mu(n).scheme, u = await r.load();
  e && c && await Xe.getManager(a).removeModel(l);
  const h = await i.save(u);
  return e && !c && await Xe.getManager(a).removeModel(l), h.modelArtifactsInfo;
}
async function rk() {
  const n = Xe.getSchemes(), t = {};
  for (const e of n) {
    const s = await Xe.getManager(e).listModels();
    for (const r in s) {
      const o = e + Lo + r;
      t[o] = s[r];
    }
  }
  return t;
}
async function ok(n) {
  const t = mu(n);
  return Xe.getManager(t.scheme).removeModel(t.path);
}
async function ik(n, t) {
  return j1(n, t, !1);
}
async function ak(n, t) {
  return j1(n, t, !0);
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class lk {
  constructor() {
    this.messageName = "setTimeoutCustom", this.functionRefs = [], this.handledMessageCount = 0, this.hasEventListener = !1;
  }
  fetch(t, e) {
    return fetch(t, e);
  }
  now() {
    return performance.now();
  }
  encode(t, e) {
    if (e !== "utf-8" && e !== "utf8")
      throw new Error(`Browser's encoder only supports utf-8, but got ${e}`);
    return this.textEncoder == null && (this.textEncoder = new TextEncoder()), this.textEncoder.encode(t);
  }
  decode(t, e) {
    return new TextDecoder(e).decode(t);
  }
  setTimeoutCustom(t, e) {
    if (!window || !V().getBool("USE_SETTIMEOUTCUSTOM")) {
      setTimeout(t, e);
      return;
    }
    this.functionRefs.push(t), setTimeout(() => {
      window.postMessage({ name: this.messageName, index: this.functionRefs.length - 1 }, "*");
    }, e), this.hasEventListener || (this.hasEventListener = !0, window.addEventListener("message", (s) => {
      if (s.source === window && s.data.name === this.messageName) {
        s.stopPropagation();
        const r = this.functionRefs[s.data.index];
        r(), this.handledMessageCount++, this.handledMessageCount === this.functionRefs.length && (this.functionRefs = [], this.handledMessageCount = 0);
      }
    }, !0));
  }
}
if (V().get("IS_BROWSER")) {
  V().setPlatform("browser", new lk());
  try {
    Xe.registerManager(Jr.URL_SCHEME, new sk());
  } catch {
  }
  try {
    Xe.registerManager(jr.URL_SCHEME, new Y2());
  } catch {
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ck = {
  importFetch: () => require("node-fetch")
};
let Ap;
class uk {
  constructor() {
    this.util = require("util"), this.textEncoder = new this.util.TextEncoder();
  }
  fetch(t, e) {
    return V().global.fetch != null ? V().global.fetch(t, e) : (Ap == null && (Ap = ck.importFetch()), Ap(t, e));
  }
  now() {
    const t = process.hrtime();
    return t[0] * 1e3 + t[1] / 1e6;
  }
  encode(t, e) {
    if (e !== "utf-8" && e !== "utf8")
      throw new Error(`Node built-in encoder only supports utf-8, but got ${e}`);
    return this.textEncoder.encode(t);
  }
  decode(t, e) {
    return t.length === 0 ? "" : new this.util.TextDecoder(e).decode(t);
  }
}
V().get("IS_NODE") && !V().get("IS_BROWSER") && V().setPlatform("node", new uk());
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function gt(n, t = "float32", e) {
  return t = t || "float32", wm(n), new ue(n, t, e);
}
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function hk(n, t) {
  const e = k(n, "x", "cast");
  if (!w1(t))
    throw new Error(`Failed to cast to unknown dtype ${t}`);
  if (t === "string" && e.dtype !== "string" || t !== "string" && e.dtype === "string")
    throw new Error("Only strings can be casted to strings");
  const s = { x: e }, r = { dtype: t };
  return E.runKernel(ii, s, r);
}
const et = L({ cast_: hk });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function dk(n) {
  const e = { x: k(n, "x", "clone", "string_or_numeric") };
  return E.runKernel(xi, e);
}
const ws = L({ clone_: dk });
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Fm(n, t = !1) {
  console.log(n.toString(t));
}
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
V1();
const pk = {
  buffer: gt,
  cast: et,
  clone: ws,
  print: Fm
};
$2(pk);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const fk = "model", mk = ".json", gk = ".weights.bin";
function Fb(n) {
  return new Promise((t) => setTimeout(t)).then(n);
}
class Qr {
  constructor(t) {
    if (!V().getBool("IS_BROWSER"))
      throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");
    t.startsWith(Qr.URL_SCHEME) && (t = t.slice(Qr.URL_SCHEME.length)), (t == null || t.length === 0) && (t = fk), this.modelJsonFileName = t + mk, this.weightDataFileName = t + gk;
  }
  async save(t) {
    if (typeof document > "u")
      throw new Error("Browser downloads are not supported in this environment since `document` is not present");
    const e = window.URL.createObjectURL(new Blob([t.weightData], { type: "application/octet-stream" }));
    if (t.modelTopology instanceof ArrayBuffer)
      throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");
    {
      const s = [{
        paths: ["./" + this.weightDataFileName],
        weights: t.weightSpecs
      }], r = P1(t, s), o = window.URL.createObjectURL(new Blob([JSON.stringify(r)], { type: "application/json" })), i = this.modelJsonAnchor == null ? document.createElement("a") : this.modelJsonAnchor;
      if (i.download = this.modelJsonFileName, i.href = o, await Fb(() => i.dispatchEvent(new MouseEvent("click"))), t.weightData != null) {
        const a = this.weightDataAnchor == null ? document.createElement("a") : this.weightDataAnchor;
        a.download = this.weightDataFileName, a.href = e, await Fb(() => a.dispatchEvent(new MouseEvent("click")));
      }
      return { modelArtifactsInfo: oc(t) };
    }
  }
}
Qr.URL_SCHEME = "downloads://";
class yk {
  constructor(t) {
    if (t == null || t.length < 1)
      throw new Error(`When calling browserFiles, at least 1 file is required, but received ${t}`);
    this.jsonFile = t[0], this.weightsFiles = t.slice(1);
  }
  async load() {
    return new Promise((t, e) => {
      const s = new FileReader();
      s.onload = (r) => {
        const o = JSON.parse(r.target.result), i = o.modelTopology;
        if (i == null) {
          e(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));
          return;
        }
        if (o.weightsManifest == null) {
          e(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));
          return;
        }
        if (this.weightsFiles.length === 0) {
          t({ modelTopology: i });
          return;
        }
        const l = Dm(o, (c) => this.loadWeights(c));
        t(l);
      }, s.onerror = (r) => e(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`), s.readAsText(this.jsonFile);
    });
  }
  loadWeights(t) {
    const e = [], s = [];
    for (const i of t)
      e.push(...i.weights), s.push(...i.paths);
    const r = this.checkManifestAndWeightFiles(t), o = s.map((i) => this.loadWeightsFile(i, r[i]));
    return Promise.all(o).then((i) => [e, ad(i)]);
  }
  loadWeightsFile(t, e) {
    return new Promise((s, r) => {
      const o = new FileReader();
      o.onload = (i) => {
        const a = i.target.result;
        s(a);
      }, o.onerror = (i) => r(`Failed to weights data from file of path '${t}'.`), o.readAsArrayBuffer(e);
    });
  }
  checkManifestAndWeightFiles(t) {
    const e = [], s = this.weightsFiles.map((o) => Gb(o.name)), r = {};
    for (const o of t)
      o.paths.forEach((i) => {
        const a = Gb(i);
        if (e.indexOf(a) !== -1)
          throw new Error(`Duplicate file basename found in weights manifest: '${a}'`);
        if (e.push(a), s.indexOf(a) === -1)
          throw new Error(`Weight file with basename '${a}' is not provided.`);
        r[i] = this.weightsFiles[s.indexOf(a)];
      });
    if (e.length !== this.weightsFiles.length)
      throw new Error(`Mismatch in the number of files in weights manifest (${e.length}) and the number of weight files provided (${this.weightsFiles.length}).`);
    return r;
  }
}
const bk = (n) => V().getBool("IS_BROWSER") && !Array.isArray(n) && n.startsWith(Qr.URL_SCHEME) ? xk(n.slice(Qr.URL_SCHEME.length)) : null;
te.registerSaveRouter(bk);
function xk(n = "model") {
  return new Qr(n);
}
function wk(n) {
  return new yk(n);
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ob(n, t, e, s) {
  i(n), e = e == null ? 0 : e, s = s == null ? 1 : s, a(e, s);
  let r = 0;
  const o = (l) => (l.then((c) => {
    const u = e + ++r / n.length * (s - e);
    return t(u), c;
  }), l);
  function i(l) {
    C(l != null && Array.isArray(l) && l.length > 0, () => "promises must be a none empty array");
  }
  function a(l, c) {
    C(l >= 0 && l <= 1, () => `Progress fraction must be in range [0, 1], but got startFraction ${l}`), C(c >= 0 && c <= 1, () => `Progress fraction must be in range [0, 1], but got endFraction ${c}`), C(c >= l, () => `startFraction must be no more than endFraction, but got startFraction ${l} and endFraction ${c}`);
  }
  return Promise.all(n.map(o));
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
async function J1(n, t) {
  t == null && (t = {});
  const e = t.fetchFunc == null ? V().platform.fetch : t.fetchFunc, s = n.map((h) => e(h, t.requestInit, { isBinary: !0 })), r = 0, o = 0.5, a = (t.onProgress == null ? await Promise.all(s) : await Ob(s, t.onProgress, r, o)).map((h) => h.arrayBuffer()), l = 0.5, c = 1;
  return t.onProgress == null ? await Promise.all(a) : await Ob(a, t.onProgress, l, c);
}
async function Q1(n, t = "", e, s) {
  return q1((i) => J1(i, { requestInit: s }))(n, t, e);
}
function q1(n) {
  return async (t, e = "", s) => {
    const r = t.map(() => !1), o = {}, i = s != null ? s.map(() => !1) : [], a = [];
    if (t.forEach((p, f) => {
      let m = 0;
      p.weights.forEach((g) => {
        const y = "quantization" in g ? g.quantization.dtype : g.dtype, b = Ef[y] * P(g.shape), w = () => {
          r[f] = !0, o[f] == null && (o[f] = []), o[f].push({
            manifestEntry: g,
            groupOffset: m,
            sizeBytes: b
          });
        };
        s != null ? s.forEach((x, S) => {
          x === g.name && (w(), i[S] = !0);
        }) : w(), a.push(g.name), m += b;
      });
    }), !i.every((p) => p)) {
      const p = s.filter((f, m) => !i[m]);
      throw new Error(`Could not find weights in manifest with names: ${p.join(", ")}. 
Manifest JSON has weights with names: ${a.join(", ")}.`);
    }
    const l = r.reduce((p, f, m) => (f && p.push(m), p), []), c = [];
    l.forEach((p) => {
      t[p].paths.forEach((f) => {
        const m = e + (e.endsWith("/") ? "" : "/") + f;
        c.push(m);
      });
    });
    const u = await n(c), h = {};
    let d = 0;
    return l.forEach((p) => {
      const f = t[p].paths.length;
      let m = 0;
      for (let x = 0; x < f; x++)
        m += u[d + x].byteLength;
      const g = new ArrayBuffer(m), y = new Uint8Array(g);
      let b = 0;
      for (let x = 0; x < f; x++) {
        const S = new Uint8Array(u[d + x]);
        y.set(S, b), b += S.byteLength;
      }
      o[p].forEach((x) => {
        const S = g.slice(x.groupOffset, x.groupOffset + x.sizeBytes), v = Rm(S, [x.manifestEntry]);
        for (const T in v)
          h[T] = v[T];
      }), d += f;
    }), h;
  };
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Ik = "application/octet-stream", Sk = "application/json";
class Om {
  constructor(t, e) {
    if (this.DEFAULT_METHOD = "POST", e == null && (e = {}), this.weightPathPrefix = e.weightPathPrefix, this.onProgress = e.onProgress, this.weightUrlConverter = e.weightUrlConverter, e.fetchFunc != null ? (C(typeof e.fetchFunc == "function", () => "Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"), this.fetch = e.fetchFunc) : this.fetch = V().platform.fetch, C(t != null && t.length > 0, () => "URL path for http must not be null, undefined or empty."), Array.isArray(t) && C(t.length === 2, () => `URL paths for http must have a length of 2, (actual length is ${t.length}).`), this.path = t, e.requestInit != null && e.requestInit.body != null)
      throw new Error("requestInit is expected to have no pre-existing body, but has one.");
    this.requestInit = e.requestInit || {};
  }
  async save(t) {
    if (t.modelTopology instanceof ArrayBuffer)
      throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");
    const e = Object.assign({ method: this.DEFAULT_METHOD }, this.requestInit);
    e.body = new FormData();
    const s = [{
      paths: ["./model.weights.bin"],
      weights: t.weightSpecs
    }], r = P1(t, s);
    e.body.append("model.json", new Blob([JSON.stringify(r)], { type: Sk }), "model.json"), t.weightData != null && e.body.append("model.weights.bin", new Blob([t.weightData], { type: Ik }), "model.weights.bin");
    const o = await this.fetch(this.path, e);
    if (o.ok)
      return {
        modelArtifactsInfo: oc(t),
        responses: [o]
      };
    throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${o.status}.`);
  }
  async load() {
    const t = await this.fetch(this.path, this.requestInit);
    if (!t.ok)
      throw new Error(`Request to ${this.path} failed with status code ${t.status}. Please verify this URL points to the model JSON of the model to load.`);
    let e;
    try {
      e = await t.json();
    } catch {
      let i = `Failed to parse model JSON of response from ${this.path}.`;
      throw this.path.endsWith(".pb") ? i += " Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository." : i += " Please make sure the server is serving valid JSON for this request.", new Error(i);
    }
    const s = e.modelTopology, r = e.weightsManifest;
    if (s == null && r == null)
      throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);
    return Dm(e, (o) => this.loadWeights(o));
  }
  async loadWeights(t) {
    const e = Array.isArray(this.path) ? this.path[1] : this.path, [s, r] = vk(e), o = this.weightPathPrefix || s, i = Gm(t), a = [], l = [];
    for (const u of t)
      for (const h of u.paths)
        this.weightUrlConverter != null ? l.push(this.weightUrlConverter(h)) : a.push(o + h + r);
    this.weightUrlConverter && a.push(...await Promise.all(l));
    const c = await J1(a, {
      requestInit: this.requestInit,
      fetchFunc: this.fetch,
      onProgress: this.onProgress
    });
    return [i, ad(c)];
  }
}
Om.URL_SCHEME_REGEX = /^https?:\/\//;
function vk(n) {
  const t = n.lastIndexOf("/"), e = n.lastIndexOf("?"), s = n.substring(0, t), r = e > t ? n.substring(e) : "";
  return [s + "/", r];
}
function Of(n) {
  return n.match(Om.URL_SCHEME_REGEX) != null;
}
const tw = (n, t) => {
  if (typeof fetch > "u" && (t == null || t.fetchFunc == null))
    return null;
  {
    let e = !0;
    if (Array.isArray(n) ? e = n.every((s) => Of(s)) : e = Of(n), e)
      return Am(n, t);
  }
  return null;
};
te.registerSaveRouter(tw);
te.registerLoadRouter(tw);
function Am(n, t) {
  return new Om(n, t);
}
function ew(n, t) {
  return Am(n, t);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class zp {
  constructor(t) {
    this.modelArtifacts = t;
  }
  load() {
    return this.modelArtifacts;
  }
}
class nw {
  constructor(t) {
    this.saveHandler = t;
  }
  save(t) {
    return this.saveHandler(t);
  }
}
class Ck {
  constructor(t) {
    t.load && (this.load = () => Promise.resolve(t.load())), t.save && (this.save = (e) => Promise.resolve(t.save(e)));
  }
}
function kk(n, t, e, s) {
  const r = arguments;
  return new Ck(Ru(...r));
}
function Ru(n, t, e, s) {
  return arguments.length === 1 ? n.modelTopology != null || n.weightSpecs != null ? new zp(n) : (console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."), new zp({ modelTopology: n })) : (console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."), new zp({
    modelTopology: n,
    weightSpecs: t,
    weightData: e,
    trainingConfig: s
  }));
}
function Tk(n) {
  return new nw(n);
}
function Nk(n) {
  return new nw(n);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const zm = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  browserFiles: wk,
  browserHTTPRequest: ew,
  concatenateArrayBuffers: ad,
  decodeWeights: Rm,
  encodeWeights: Lf,
  fromMemory: kk,
  fromMemorySync: Ru,
  getLoadHandlers: _1,
  getModelArtifactsForJSON: Dm,
  getModelArtifactsForJSONSync: Lm,
  getModelArtifactsInfoForJSON: oc,
  getSaveHandlers: X1,
  getWeightSpecs: Gm,
  http: Am,
  isHTTPScheme: Of,
  loadWeights: Q1,
  registerLoadRouter: B2,
  registerSaveRouter: Z2,
  weightsLoaderFactory: q1,
  withSaveHandler: Tk,
  withSaveHandlerSync: Nk,
  copyModel: ik,
  listModels: rk,
  moveModel: ak,
  removeModel: ok
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $k(n, t, e = !1, s = !1) {
  let r = k(n, "a", "matMul"), o = k(t, "b", "matMul");
  [r, o] = re(r, o);
  const i = { a: r, b: o }, a = { transposeA: e, transposeB: s };
  return E.runKernel(cl, i, a);
}
const Ct = L({ matMul_: $k });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Rk(n, t, e = 1, s = 0, r = "int32") {
  if (t < 2)
    throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);
  const i = { indices: k(n, "indices", "oneHot", "int32") }, a = { dtype: r, depth: t, onValue: e, offValue: s };
  return E.runKernel(Ml, i, a);
}
const Wo = L({ oneHot_: Rk });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ek() {
  V().set("PROD", !0);
}
function Lk() {
  V().set("DEBUG", !0);
}
function Dk() {
  V().set("DEPRECATION_WARNINGS_ENABLED", !1), console.warn("TensorFlow.js deprecation warnings have been disabled.");
}
function Gk(n) {
  V().getBool("DEPRECATION_WARNINGS_ENABLED") && console.warn(n + " You can disable deprecation warnings with tf.disableDeprecationWarnings().");
}
function Fk() {
  E.disposeVariables();
}
function Zt() {
  return E;
}
function Za() {
  return E.memory();
}
function Ok(n) {
  return E.profile(n);
}
function A(n, t) {
  return E.tidy(n, t);
}
function xt(n) {
  Vs(n).forEach((e) => e.dispose());
}
function ce(n) {
  return E.keep(n);
}
function Ak(n) {
  return E.time(n);
}
function zk(n) {
  return E.setBackend(n);
}
function Wk() {
  return E.ready();
}
function Vk() {
  return E.backendName;
}
function Mk(n) {
  E.removeBackend(n);
}
function Pk(n) {
  return E.findBackend(n);
}
function Xk(n) {
  return E.findBackendFactory(n);
}
function Wm(n, t, e = 1) {
  return E.registerBackend(n, t, e);
}
function Fs() {
  return E.backend;
}
function _k(n, t) {
  V().setPlatform(n, t);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Kk(n) {
  const e = { input: k(n, "input", "imag") };
  return E.runKernel(Nh, e);
}
const ic = L({ imag_: Kk });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Zk(n) {
  const e = { x: k(n, "x", "neg") };
  return E.runKernel(zl, e);
}
const Yt = L({ neg_: Zk });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Bk(n) {
  const e = { input: k(n, "input", "real") };
  return E.runKernel(Mh, e);
}
const Vo = L({ real_: Bk });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Hk(n, t, e) {
  const s = k(n, "x", "transpose");
  if (t == null && (t = s.shape.map((i, a) => a).reverse()), C(s.rank === t.length, () => `Error in transpose: rank of input ${s.rank} must match length of perm ${t}.`), t.forEach((i) => {
    C(i >= 0 && i < s.rank, () => `All entries in 'perm' must be between 0 and ${s.rank - 1} but got ${t}`);
  }), s.rank <= 1)
    return s.clone();
  const r = { x: s }, o = { perm: t };
  return s.dtype === "complex64" ? A(() => {
    let i = Vo(s), a = ic(s);
    return i = E.runKernel(Zr, { x: i }, o), a = E.runKernel(Zr, { x: a }, o), e && (a = Yt(a)), Ms(i, a);
  }) : E.runKernel(Zr, r, o);
}
const kt = L({ transpose_: Hk });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Uk(n, t, e) {
  const s = k(n, "labels", "confusionMatrix"), r = k(t, "predictions", "confusionMatrix");
  C(e == null || e > 0 && Number.isInteger(e), () => `If provided, numClasses must be a positive integer, but got ${e}`), C(s.rank === 1, () => `Expected the rank of labels to be 1, but got ${s.rank}`), C(r.rank === 1, () => `Expected the rank of predictions to be 1, but got ${r.rank}`), C(s.shape[0] === r.shape[0], () => `Mismatch in the number of examples: ${s.shape[0]} vs. ${r.shape[0]}. Labels and predictions should have the same number of elements.`), C(e > 0 && Number.isInteger(e), () => `numClasses is required to be a positive integer, but got ${e}`);
  const o = Wo(et(s, "int32"), e), i = Wo(et(r, "int32"), e), a = kt(o), l = Ct(a, i);
  return et(l, "int32");
}
const Yk = L({ confusionMatrix_: Uk });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const jk = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  confusionMatrix: Yk
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ps(n, t) {
  const e = n.length, s = [];
  for (let r = 0; r < e; r++) {
    const o = e - 1 - r, i = n[o] || 1;
    (t[t.length - 1 - r] || 1) > 1 && i === 1 && s.unshift(o);
  }
  return s;
}
function be(n, t) {
  const e = [];
  for (let s = 0; s < t.length; s++) {
    const r = n[n.length - s - 1], o = t.length - s - 1, i = t[o];
    (r == null || r === 1 && i > 1) && e.unshift(o);
  }
  return e;
}
function bt(n, t) {
  const e = [], s = Math.max(n.length, t.length);
  for (let r = 0; r < s; r++) {
    let o = n[n.length - r - 1];
    o == null && (o = 1);
    let i = t[t.length - r - 1];
    if (i == null && (i = 1), o === 1)
      e.unshift(i);
    else if (i === 1)
      e.unshift(o);
    else if (o !== i) {
      const a = `Operands could not be broadcast together with shapes ${n} and ${t}.`;
      throw Error(a);
    } else
      e.unshift(o);
  }
  return e;
}
const Jk = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  getBroadcastDims: Ps,
  getReductionAxes: be,
  assertAndGetBroadcastShape: bt
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Vm(n, t, e) {
  if (co(n), t != null && t.length !== 3)
    throw new Error("tensor3d() requires shape to have three numbers");
  const s = vs(n, e);
  if (s.length !== 3 && s.length !== 1)
    throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");
  if (s.length === 1 && t == null)
    throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");
  return vr(n, t, s, e);
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
let Dr;
function sw(n, t = 3) {
  if (t > 4)
    throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");
  if (n == null)
    throw new Error("pixels passed to tf.browser.fromPixels() can not be null");
  let e = !1, s = !1, r = !1, o = !1, i = !1, a = !1;
  if (n.data instanceof Uint8Array)
    e = !0;
  else if (typeof ImageData < "u" && n instanceof ImageData)
    s = !0;
  else if (typeof HTMLVideoElement < "u" && n instanceof HTMLVideoElement)
    r = !0;
  else if (typeof HTMLImageElement < "u" && n instanceof HTMLImageElement)
    o = !0;
  else if (n.getContext != null)
    i = !0;
  else if (typeof ImageBitmap < "u" && n instanceof ImageBitmap)
    a = !0;
  else
    throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${n.constructor.name}`);
  if (ku(Cu, E.backendName) != null) {
    const f = { pixels: n }, m = { numChannels: t };
    return E.runKernel(Cu, f, m);
  }
  const [c, u] = r ? [
    n.videoWidth,
    n.videoHeight
  ] : [n.width, n.height];
  let h;
  if (i)
    h = n.getContext("2d").getImageData(0, 0, c, u).data;
  else if (s || e)
    h = n.data;
  else if (o || r || a) {
    if (Dr == null)
      if (typeof document > "u")
        if (typeof OffscreenCanvas < "u" && typeof OffscreenCanvasRenderingContext2D < "u")
          Dr = new OffscreenCanvas(1, 1).getContext("2d");
        else
          throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");
      else
        Dr = document.createElement("canvas").getContext("2d", { willReadFrequently: !0 });
    Dr.canvas.width = c, Dr.canvas.height = u, Dr.drawImage(n, 0, 0, c, u), h = Dr.getImageData(0, 0, c, u).data;
  }
  let d;
  if (t === 4)
    d = new Int32Array(h);
  else {
    const f = c * u;
    d = new Int32Array(f * t);
    for (let m = 0; m < f; m++)
      for (let g = 0; g < t; ++g)
        d[m * t + g] = h[m * 4 + g];
  }
  return Vm(d, [u, c, t], "int32");
}
function Qk(n) {
  return n != null && n.data instanceof Uint8Array;
}
function qk() {
  return typeof window < "u" && typeof ImageBitmap < "u" && window.hasOwnProperty("createImageBitmap");
}
function tT(n) {
  return n != null && n.width !== 0 && n.height !== 0;
}
function eT(n) {
  return qk() && !(n instanceof ImageBitmap) && tT(n) && !Qk(n);
}
async function nT(n, t = 3) {
  let e = null;
  if (V().getBool("WRAP_TO_IMAGEBITMAP") && eT(n)) {
    let s;
    try {
      s = await createImageBitmap(n, { premultiplyAlpha: "none" });
    } catch {
      s = null;
    }
    s != null && s.width === n.width && s.height === n.height ? e = s : e = n;
  } else
    e = n;
  return sw(e, t);
}
async function sT(n, t) {
  let e = k(n, "img", "toPixels");
  if (!(n instanceof Lt)) {
    const c = e;
    e = et(c, "int32"), c.dispose();
  }
  if (e.rank !== 2 && e.rank !== 3)
    throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${e.rank}.`);
  const [s, r] = e.shape.slice(0, 2), o = e.rank === 2 ? 1 : e.shape[2];
  if (o > 4 || o === 2)
    throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${o}`);
  if (e.dtype !== "float32" && e.dtype !== "int32")
    throw new Error(`Unsupported type for toPixels: ${e.dtype}. Please use float32 or int32 tensors.`);
  const i = await e.data(), a = e.dtype === "float32" ? 255 : 1, l = new Uint8ClampedArray(r * s * 4);
  for (let c = 0; c < s * r; ++c) {
    const u = [0, 0, 0, 255];
    for (let d = 0; d < o; d++) {
      const p = i[c * o + d];
      if (e.dtype === "float32") {
        if (p < 0 || p > 1)
          throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${p}.`);
      } else if (e.dtype === "int32" && (p < 0 || p > 255))
        throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${p}.`);
      o === 1 ? (u[0] = p * a, u[1] = p * a, u[2] = p * a) : u[d] = p * a;
    }
    const h = c * 4;
    l[h + 0] = Math.round(u[0]), l[h + 1] = Math.round(u[1]), l[h + 2] = Math.round(u[2]), l[h + 3] = Math.round(u[3]);
  }
  if (t != null) {
    t.width = r, t.height = s;
    const c = t.getContext("2d"), u = new ImageData(l, r, s);
    c.putImageData(u, 0, 0);
  }
  return e !== n && e.dispose(), l;
}
const Mm = L({ fromPixels_: sw }), rT = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  fromPixelsAsync: nT,
  toPixels: sT,
  fromPixels: Mm
}, Symbol.toStringTag, { value: "Module" }));
function ld(n, t) {
  const e = n.shape.length, s = t.shape.length;
  if (e < 1)
    throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${e}.`);
  if (s < 1)
    throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${s}.`);
  if (t.dtype !== "int32")
    throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);
  if (t.shape[s - 1] > e)
    throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[s - 1]} vs. ${e}`);
  if (P(n.shape) === 0)
    throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${n.shape}.`);
  const r = t.shape, o = r[r.length - 1];
  let i = 1;
  for (let h = 0; h < r.length - 1; ++h)
    i *= r[h];
  const a = n.shape, l = r.slice();
  l.pop();
  let c = 1;
  for (let h = o; h < e; ++h)
    c *= a[h], l.push(a[h]);
  const u = [
    ...lt(n.shape).map((h) => h / c),
    1
  ].slice(0, o);
  return [l, i, c, u];
}
const oT = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  prepareAndValidate: ld
}, Symbol.toStringTag, { value: "Module" }));
function Pm(n, t, e) {
  const s = t.rank > 1 ? t.shape[t.rank - 1] : 1, r = t.rank > 1 ? t.rank - 1 : 1, o = `Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${e.shape}, indices.shape: ${t.shape}, shape: ${n}, sliceDim: ${s}, and batchDim: ${r}.`;
  if (e.rank < r)
    throw new Error(o + ` update.rank < ${r}. `);
  if (n.length < s + (e.rank - r))
    throw new Error(o + ` Output shape length < ${s + (e.rank - r)}`);
  if (e.rank !== r + n.length - s)
    throw new Error(o + ` update.rank != ${r + n.length - s}`);
  for (let i = 0; i < r; ++i)
    if (e.shape[i] !== t.shape[i])
      throw new Error(o + ` updates.shape[${i}] (${e.shape[i]}) != indices.shape[${i}] (${t.shape[i]}).`);
  for (let i = 0; i < e.rank - r; ++i)
    if (e.shape[i + r] !== n[i + s])
      throw new Error(o + ` updates.shape[${i + r}] (${e.shape[i + r]}) != shape[${i + r}] (${n[i + r]})`);
}
function Xm(n, t, e) {
  if (t.rank < 1)
    throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);
  if (n.rank < 1)
    throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${n.rank}.`);
  if (t.dtype !== "int32")
    throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);
  if (e.length < 1)
    throw new Error(`Output rank must be greater or equal to 1, but got shape: ${e}`);
  if (e.length === 0) {
    if (t.size === 0)
      throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);
    if (n.size === 0)
      throw new Error(`Updates specified for empty output. updates shape: ${n.shape}`);
  }
  Pm(e, t, n);
}
function Ui(n, t, e) {
  const s = t.shape.length, r = s > 1 ? t.shape[s - 1] : 1, o = e.length;
  let i = 1;
  for (let h = r; h < o; ++h)
    i *= e[h];
  const a = r < 1 ? 1 : r, l = P(t.shape) / a, c = [...lt(e.slice(0, r)), 1], u = P(e);
  return { sliceRank: r, numUpdates: l, sliceSize: i, strides: c, outputSize: u };
}
const iT = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  validateUpdateShape: Pm,
  validateInput: Xm,
  calculateShapes: Ui
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Af = -2, aT = -1;
function _m(n, t, e) {
  const s = n.shape.length;
  C(s === t.length, () => `Error in slice${s}D: Length of begin ${t} must match the rank of the array (${s}).`), C(s === e.length, () => `Error in slice${s}D: Length of size ${e} must match the rank of the array (${s}).`);
  for (let r = 0; r < s; ++r)
    C(t[r] + e[r] <= n.shape[r], () => `Error in slice${s}D: begin[${r}] + size[${r}] (${t[r] + e[r]}) would overflow input.shape[${r}] (${n.shape[r]})`);
}
function lT(n) {
  const t = [];
  let e = 0;
  for (; n > 0; )
    n & 1 && t.push(e), n /= 2, e++;
  return t;
}
function Km(n, t, e) {
  const s = [];
  for (let r = 0; r < n.length; r++)
    s[r] = Math.ceil((t[r] - n[r]) / e[r]);
  return s;
}
function rw(n, t, e, s) {
  const r = [...n];
  for (let o = r.length; o < s.length; o++)
    r.push(1);
  for (let o = 0; o < e; o++)
    o === 0 ? r[t] = 1 : (r.splice(t, 0, 1), r.pop());
  return r;
}
function ow(n, t, e) {
  return e <= n ? e : e - (t - 1);
}
function iw(n, t) {
  const e = [];
  for (let s = 0; s < n; s++)
    e.push(t + s);
  return e;
}
function cT(n, t, e, s, r, o, i, a, l) {
  const c = n.length;
  let u = new Array(c), h = new Array(c), d = new Array(c);
  if (t.length && e > 0) {
    const p = t[0], f = e + 1;
    u = aw(i, p, f, s, n), h = lw(a, p, f, r, n), d = rw(o, p, f, n);
  } else
    for (let p = 0; p < c; p++)
      u[p] = uw(i, s, o, n, p, l), h[p] = hw(a, r, o, n, p, l), d[p] = cw(o, p, l);
  return {
    begin: u,
    end: h,
    strides: d
  };
}
function aw(n, t, e, s, r) {
  const o = [...r], i = iw(e, t);
  for (let a = 0; a < o.length; a++)
    if (i.indexOf(a) > -1)
      o[a] = 0;
    else {
      const l = ow(t, e, a);
      let c = s[l];
      n & 1 << l && (c = 0), o[a] = c;
    }
  return o;
}
function lw(n, t, e, s, r) {
  const o = [...r], i = iw(e, t);
  for (let a = 0; a < o.length; a++)
    if (i.indexOf(a) > -1)
      o[a] = Number.MAX_SAFE_INTEGER;
    else {
      const l = ow(t, e, a);
      let c = s[l];
      n & 1 << l && (c = Number.MAX_SAFE_INTEGER), o[a] = c;
    }
  for (let a = 0; a < o.length; a++) {
    const l = r[a];
    o[a] < 0 && (o[a] += l), o[a] = fr(0, o[a], r[a]);
  }
  return o;
}
function cw(n, t, e) {
  let s = n[t];
  return (e & 1 << t || s == null) && (s = 1), s;
}
function uw(n, t, e, s, r, o) {
  let i = t[r];
  const a = e[r] || 1;
  (n & 1 << r || o & 1 << r || i == null) && (a > 0 ? i = Number.MIN_SAFE_INTEGER : i = Number.MAX_SAFE_INTEGER);
  const l = s[r];
  return i < 0 && (i += l), i = fr(0, i, l - 1), i;
}
function hw(n, t, e, s, r, o) {
  let i = t[r];
  const a = e[r] || 1;
  (n & 1 << r || o & 1 << r || i == null) && (a > 0 ? i = Number.MAX_SAFE_INTEGER : i = Number.MIN_SAFE_INTEGER);
  const l = s[r];
  return i < 0 && (i += l), a > 0 ? i = fr(0, i, l) : i = fr(-1, i, l - 1), i;
}
function cd(n, t, e) {
  let s = e.length;
  for (let r = 0; r < e.length; r++)
    if (e[r] > 1) {
      s = r;
      break;
    }
  for (let r = s + 1; r < e.length; r++)
    if (t[r] > 0 || e[r] !== n[r])
      return !1;
  return !0;
}
function ud(n, t) {
  let e = n.length > 0 ? n[n.length - 1] : 1;
  for (let s = 0; s < n.length - 1; s++)
    e += n[s] * t[s];
  return e;
}
function hd(n, t, e) {
  let s;
  const r = n.shape.length;
  typeof t == "number" ? s = [t, ...new Array(r - 1).fill(0)] : t.length < r ? s = t.concat(new Array(r - t.length).fill(0)) : s = t.slice(), s.forEach((i) => {
    C(i !== -1, () => "slice() does not support negative begin indexing.");
  });
  let o;
  return e == null ? o = new Array(r).fill(-1) : typeof e == "number" ? o = [e, ...new Array(r - 1).fill(-1)] : e.length < r ? o = e.concat(new Array(r - e.length).fill(-1)) : o = e, o = o.map((i, a) => i >= 0 ? i : (C(i === -1, () => `Negative size values should be exactly -1 but got ${i} for the slice() size at index ${a}.`), n.shape[a] - s[a])), [s, o];
}
function Zm(n, t, e, s, r, o, i, a, l) {
  let c;
  if (s == null ? (c = new Array(t.length), c.fill(1)) : c = s, i != null && (i & i - 1) !== 0)
    throw new Error("Multiple ellipses in slice is not allowed.");
  let u = !1;
  const h = {
    dims: c.length,
    numAddAxisAfterEllipsis: 0,
    begin: t.slice(),
    end: e.slice(),
    strides: c.slice(),
    beginMask: r,
    endMask: o,
    ellipsisMask: i,
    newAxisMask: a,
    shrinkAxisMask: l
  };
  for (let w = 0; w < h.dims; w++)
    u && (1 << w & a) !== 0 && h.numAddAxisAfterEllipsis++, 1 << w & i && (u = !0);
  u || (h.ellipsisMask |= 1 << h.dims, h.dims++);
  const d = {
    dims: n.length,
    beginMask: 0,
    endMask: 0,
    beginValid: !1,
    endValid: !1
  };
  uT(h, d);
  let p = !0, f = !0, m = !0;
  const g = [], y = [];
  for (let w = 0; w < n.length; ++w) {
    if (d.strides[w] === 0)
      throw Error(`strides[${w}] must be non-zero`);
    const x = !!(d.shrinkAxisMask & 1 << w), S = n[w];
    if (S === -1) {
      g.push(x ? 1 : -1);
      continue;
    }
    const v = [d.beginMask & 1 << w, d.endMask & 1 << w], T = [
      d.strides[w] > 0 ? 0 : -1,
      d.strides[w] > 0 ? S : S - 1
    ];
    if (x && d.strides[w] <= 0)
      throw Error("only stride 1 allowed on non-range indexing.");
    m = m && d.strides[w] === 1;
    const N = !!(d.beginMask & 1 << w && d.endMask & 1 << w);
    if (d.beginValid && d.endValid) {
      if (x) {
        const z = d.begin[w] < 0 ? S + d.begin[w] : d.begin[w];
        if (d.begin[w] = z, d.end[w] = d.begin[w] + 1, z < 0 || z >= S)
          throw Error(`slice index ${d.begin[w]} of dimension ${w} out of bounds.`);
      } else
        d.begin[w] = Ab(d.begin[w], 0, d.strides[w], S, v, T), d.end[w] = Ab(d.end[w], 1, d.strides[w], S, v, T);
      const F = d.strides[w] === 1 && d.begin[w] === 0 && d.end[w] === S;
      p = p && F, f = f && (w === 0 && d.strides[w] === 1 || F);
    } else
      p = p && d.strides[w] === 1 && N, f = f && (w === 0 && d.strides[w] === 1 || N);
    let $, R = !1;
    if (d.beginValid && d.endValid ? ($ = d.end[w] - d.begin[w], R = !0) : x ? ($ = 1, R = !0) : N && S >= 0 && (d.strides[w] < 0 ? $ = -S : $ = S, R = !0), R) {
      let F;
      $ === 0 || $ < 0 != d.strides[w] < 0 ? F = 0 : F = Math.trunc($ / d.strides[w]) + ($ % d.strides[w] !== 0 ? 1 : 0), g.push(F);
    } else
      g.push(-1);
  }
  for (let w = 0; w < d.finalShapeGatherIndices.length; ++w) {
    const x = d.finalShapeGatherIndices[w];
    x >= 0 ? y.push(g[x]) : x === Af && y.push(1);
  }
  return {
    finalShapeSparse: y.filter((w, x) => d.finalShapeGatherIndices[x] !== Af),
    finalShape: y,
    isIdentity: p,
    sliceDim0: f,
    isSimpleSlice: m,
    begin: d.begin,
    end: d.end,
    strides: d.strides
  };
}
function uT(n, t) {
  t.beginMask = 0, t.endMask = 0, t.shrinkAxisMask = 0;
  let e = 0;
  t.beginValid = n.begin != null, t.endValid = n.end != null, t.begin = new Array(t.dims), t.end = new Array(t.dims), t.strides = new Array(t.dims), t.finalShapeGatherIndices = [], t.finalShapeGatherIndicesSparse = [], t.inputShapeGatherIndicesSparse = new Array(t.dims);
  for (let s = 0; s < n.dims; s++)
    if (1 << s & n.ellipsisMask) {
      const r = Math.min(t.dims - (n.dims - s) + 1 + n.numAddAxisAfterEllipsis, t.dims);
      for (; e < r; e++)
        t.begin[e] = 0, t.end[e] = 0, t.strides[e] = 1, t.beginMask |= 1 << e, t.endMask |= 1 << e, t.finalShapeGatherIndices.push(e), t.finalShapeGatherIndicesSparse.push(-1), t.inputShapeGatherIndicesSparse[e] = s;
    } else if (1 << s & n.newAxisMask)
      t.finalShapeGatherIndices.push(Af), t.finalShapeGatherIndicesSparse.push(-1);
    else {
      if (e === t.begin.length)
        throw Error(`Index out of range using input dim ${e}; input has only ${t.dims} dims, ${t.begin.length}.`);
      n.begin != null && (t.begin[e] = n.begin[s]), n.end != null && (t.end[e] = n.end[s]), t.strides[e] = n.strides[s], n.beginMask & 1 << s && (t.beginMask |= 1 << e), n.endMask & 1 << s && (t.endMask |= 1 << e), n.shrinkAxisMask & 1 << s ? (t.finalShapeGatherIndices.push(aT), t.finalShapeGatherIndicesSparse.push(-1), t.shrinkAxisMask |= 1 << e) : (t.finalShapeGatherIndices.push(e), t.finalShapeGatherIndicesSparse.push(s)), t.inputShapeGatherIndicesSparse[e] = s, e++;
    }
}
function Ab(n, t, e, s, r, o) {
  if (r[t])
    return e > 0 ? o[t] : o[t + 1 & 1];
  {
    const i = n < 0 ? s + n : n;
    return i < o[0] ? o[0] : i > o[1] ? o[1] : i;
  }
}
const dw = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  assertParamsValid: _m,
  maskToAxes: lT,
  computeOutShape: Km,
  stridesWithElidedDims: rw,
  getNormalizedAxes: cT,
  startIndicesWithElidedDims: aw,
  stopIndicesWithElidedDims: lw,
  stridesForAxis: cw,
  startForAxis: uw,
  stopForAxis: hw,
  isSliceContinous: cd,
  computeFlatOffset: ud,
  parseSliceParams: hd,
  sliceInfo: Zm
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class po {
  getClassName() {
    return this.constructor.className;
  }
  static fromConfig(t, e) {
    return new t(e);
  }
}
class Nn {
  constructor() {
    this.classNameMap = {};
  }
  static getMap() {
    return Nn.instance == null && (Nn.instance = new Nn()), Nn.instance;
  }
  static register(t) {
    Nn.getMap().classNameMap[t.className] = [t, t.fromConfig];
  }
}
function Y(n) {
  C(n.className != null, () => "Class being registered does not have the static className property defined."), C(typeof n.className == "string", () => "className is required to be a string, but got type " + typeof n.className), C(n.className.length > 0, () => "Class being registered has an empty-string as its className, which is disallowed."), Nn.register(n);
}
const hT = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  Serializable: po,
  SerializationMap: Nn,
  registerClass: Y
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const dT = 1e-3, pw = 0.1;
function pT(n, t, e) {
  return e == null && (e = Bm()), zf(n, t, (s, r) => Hm(s, r, e));
}
function Bm() {
  return E.backend.floatPrecision() === 32 ? dT : pw;
}
function zf(n, t, e) {
  let s = !0;
  if ((De(n) || De(t)) && (s = !1), De(n) && De(t) && (s = !0), s) {
    const i = n.constructor.name, a = t.constructor.name;
    if (i !== a)
      throw new Error(`Arrays are of different type. Actual: ${i}. Expected: ${a}`);
  }
  if (Array.isArray(n) && Array.isArray(t)) {
    const i = vs(n), a = vs(t);
    if (!Nt(i, a))
      throw new Error(`Arrays have different shapes. Actual: [${i}]. Expected: [${a}]`);
  }
  const r = De(n) ? n : zs(n), o = De(t) ? t : zs(t);
  if (r.length !== o.length)
    throw new Error(`Arrays have different lengths actual: ${r.length} vs expected: ${o.length}.
Actual:   ${r}.
Expected: ${o}.`);
  for (let i = 0; i < o.length; ++i) {
    const a = r[i], l = o[i];
    if (!e(a, l))
      throw new Error(`Arrays differ: actual[${i}] = ${a}, expected[${i}] = ${l}.
Actual:   ${r}.
Expected: ${o}.`);
  }
  typeof expect < "u" && expect().nothing();
}
function fT(n, t) {
  n().then(() => t.fail(), () => t()), typeof expect < "u" && expect().nothing();
}
function mT(n, t) {
  const e = typeof t == "string" || typeof t == "number" || typeof t == "boolean" ? [t] : t;
  return xs(n) || xs(n[0]) || xs(t) || xs(t[0]) ? zf(n, e, (s, r) => s == r) : zf(n, t, (s, r) => Hm(s, r, 0));
}
function gT(n, t, e) {
  if (e == null && (e = Bm()), !Hm(n, t, e))
    throw new Error(`Numbers differ: actual === ${n}, expected === ${t}`);
  typeof expect < "u" && expect().nothing();
}
function Hm(n, t, e) {
  return !isFinite(n) && !isFinite(t) ? !0 : !(isNaN(n) || isNaN(t) || Math.abs(n - t) > e);
}
function yT(n, t, e) {
  for (let s = 0; s < n.length; s++)
    if (n[s] < t || n[s] > e)
      throw new Error(`Value out of range:${n[s]} low: ${t}, high: ${e}`);
}
function bT(n, t) {
  const e = new Float32Array(n), s = new Float32Array(t);
  if (e.length !== s.length)
    throw new Error(`Expected ArrayBuffer to be of length ${s.length}, but it was ${e.length}`);
  for (let r = 0; r < s.length; r++)
    if (e[r] !== s[r])
      throw new Error(`Expected ArrayBuffer value at ${r} to be ${s[r]} but got ${e[r]} instead`);
}
function fw(n) {
  for (let t = 0; t < n.length; t++) {
    const e = n[t];
    Array.isArray(e) ? fw(e) : n[t] = Ln(e);
  }
  return n;
}
function xT(n) {
  const t = document.createElement("video");
  return "playsInline" in t && (t.playsInline = !0), t.muted = !0, t.loop = !0, t.style.position = "fixed", t.style.left = "0px", t.style.top = "0px", t.preload = "auto", t.appendChild(n), new Promise((e) => {
    t.addEventListener("loadeddata", (s) => e(t)), t.load();
  });
}
async function wT(n) {
  await n.play(), "requestVideoFrameCallback" in n && await new Promise((t) => {
    n.requestVideoFrameCallback(t);
  });
}
const IT = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  TEST_EPSILON_FLOAT16: pw,
  expectArraysClose: pT,
  testEpsilon: Bm,
  expectPromiseToFail: fT,
  expectArraysEqual: mT,
  expectNumbersClose: gT,
  expectValuesInRange: yT,
  expectArrayBuffersEqual: bT,
  encodeStrings: fw,
  createVideoElement: xT,
  play: wT
}, Symbol.toStringTag, { value: "Module" }));
/** @license See the LICENSE file. */
const mw = "3.21.0";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ST(n, t) {
  let e = k(n, "a", "add"), s = k(t, "b", "add");
  [e, s] = re(e, s);
  const r = { a: e, b: s };
  return E.runKernel(uo, r);
}
const U = L({ add_: ST });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function vT(n, t) {
  let e = k(n, "a", "floorDiv"), s = k(t, "b", "floorDiv");
  [e, s] = re(e, s);
  const r = { a: e, b: s };
  return E.runKernel(yi, r);
}
const dd = L({ floorDiv_: vT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function CT(n, t) {
  let e = k(n, "a", "div"), s = k(t, "b", "div");
  if ([e, s] = re(e, s), e.dtype === "int32" && s.dtype === "int32")
    return dd(e, s);
  const r = { a: e, b: s }, o = {};
  return E.runKernel(hi, r, o);
}
const ht = L({ div_: CT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function kT(n, t) {
  let e = k(n, "a", "mul"), s = k(t, "b", "mul");
  [e, s] = re(e, s);
  const r = { a: e, b: s };
  return E.runKernel($i, r);
}
const D = L({ mul_: kT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function TT(n) {
  const t = k(n, "x", "abs");
  if (t.dtype === "complex64") {
    const e = { x: t };
    return E.runKernel(hl, e);
  } else {
    const e = { x: t };
    return E.runKernel(sl, e);
  }
}
const me = L({ abs_: TT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function NT(n) {
  const e = { x: k(n, "x", "acos") };
  return E.runKernel(qo, e);
}
const Um = L({ acos_: NT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $T(n) {
  const e = { x: k(n, "x", "acosh") };
  return E.runKernel(ti, e);
}
const Ym = L({ acosh_: $T });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function RT(n) {
  C(Array.isArray(n), () => "The argument passed to tf.addN() must be a list of tensors"), C(n.length >= 1, () => `Must pass at least one tensor to tf.addN(), but got ${n.length}`);
  const t = n.map((r, o) => k(r, `tensors${o}`, "addN")), e = t[0];
  t.forEach((r) => {
    if (r.dtype !== e.dtype)
      throw new Error("All tensors passed to tf.addN() must have the same dtype");
  }), t.forEach((r) => {
    if (!Nt(r.shape, e.shape))
      throw new Error("All tensors passed to tf.addN() must have the same shape");
  });
  const s = t;
  return E.runKernel(rl, s);
}
const gw = L({ addN_: RT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ET(n, t = null, e = !1) {
  const r = { x: k(n, "x", "all", "bool") }, o = { axis: t, keepDims: e };
  return E.runKernel(sh, r, o);
}
const pd = L({ all_: ET });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function LT(n, t = null, e = !1) {
  const r = { x: k(n, "x", "any", "bool") }, o = { axis: t, keepDims: e };
  return E.runKernel(rh, r, o);
}
const Ba = L({ any_: LT });
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function DT(n, t = 0) {
  const s = { x: k(n, "x", "argMax") }, r = { axis: t };
  return E.runKernel(ol, s, r);
}
const qr = L({ argMax_: DT });
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function GT(n, t = 0) {
  const s = { x: k(n, "x", "argMin") }, r = { axis: t };
  return E.runKernel(il, s, r);
}
const jm = L({ argMin_: GT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function FT(n) {
  const e = { x: k(n, "x", "asin") };
  return E.runKernel(ei, e);
}
const Jm = L({ asin_: FT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function OT(n) {
  const e = { x: k(n, "x", "asinh") };
  return E.runKernel(ni, e);
}
const Qm = L({ asinh_: OT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function AT(n) {
  const e = { x: k(n, "x", "atan") };
  return E.runKernel(si, e);
}
const qm = L({ atan_: AT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function zT(n, t) {
  let e = k(n, "a", "atan2"), s = k(t, "b", "atan2");
  [e, s] = re(e, s);
  const r = { a: e, b: s };
  return E.runKernel(oi, r);
}
const tg = L({ atan2_: zT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function WT(n) {
  const e = { x: k(n, "x", "atanh") };
  return E.runKernel(ri, e);
}
const eg = L({ atanh_: WT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ac(n, t, e, s, r = "NHWC", o) {
  const i = n[3], a = [...t, i], l = Ys(r);
  return $e(n, a, e, o, s, null, null, l);
}
function Yn(n, t, e, s, r, o, i = "channelsLast") {
  const [a, l] = Eu(t);
  let c;
  if (i === "channelsLast")
    c = [a, l, n[3], n[3]];
  else if (i === "channelsFirst")
    c = [a, l, n[1], n[1]];
  else
    throw new Error(`Unknown dataFormat ${i}`);
  return $e(n, c, e, s, r, o, !1, i);
}
function Us(n, t, e, s, r, o, i = "NDHWC") {
  const [a, l, c] = Wf(t);
  let u, h;
  if (i === "NDHWC")
    h = "channelsLast", u = [a, l, c, n[4], n[4]];
  else if (i === "NCDHW")
    h = "channelsFirst", u = [a, l, c, n[1], n[1]];
  else
    throw new Error(`Unknown dataFormat ${i}`);
  return Cr(n, u, e, s, r, !1, h, o);
}
function $e(n, t, e, s, r, o, i = !1, a = "channelsLast") {
  let [l, c, u, h] = [-1, -1, -1, -1];
  if (a === "channelsLast")
    [l, c, u, h] = n;
  else if (a === "channelsFirst")
    [l, h, c, u] = n;
  else
    throw new Error(`Unknown dataFormat ${a}`);
  const [d, p, , f] = t, [m, g] = Eu(e), [y, b] = Eu(s), w = Do(d, y), x = Do(p, b), { padInfo: S, outHeight: v, outWidth: T } = PT(r, c, u, m, g, w, x, o, a), N = i ? f * h : f;
  let $;
  return a === "channelsFirst" ? $ = [l, N, v, T] : a === "channelsLast" && ($ = [l, v, T, N]), {
    batchSize: l,
    dataFormat: a,
    inHeight: c,
    inWidth: u,
    inChannels: h,
    outHeight: v,
    outWidth: T,
    outChannels: N,
    padInfo: S,
    strideHeight: m,
    strideWidth: g,
    filterHeight: d,
    filterWidth: p,
    effectiveFilterHeight: w,
    effectiveFilterWidth: x,
    dilationHeight: y,
    dilationWidth: b,
    inShape: n,
    outShape: $,
    filterShape: t
  };
}
function Cr(n, t, e, s, r, o = !1, i = "channelsLast", a) {
  let [l, c, u, h, d] = [-1, -1, -1, -1, -1];
  if (i === "channelsLast")
    [l, c, u, h, d] = n;
  else if (i === "channelsFirst")
    [l, d, c, u, h] = n;
  else
    throw new Error(`Unknown dataFormat ${i}`);
  const [p, f, m, , g] = t, [y, b, w] = Wf(e), [x, S, v] = Wf(s), T = Do(p, x), N = Do(f, S), $ = Do(m, v), { padInfo: R, outDepth: F, outHeight: z, outWidth: W } = XT(r, c, u, h, y, b, w, T, N, $, a), M = o ? g * d : g;
  let X;
  return i === "channelsFirst" ? X = [l, M, F, z, W] : i === "channelsLast" && (X = [l, F, z, W, M]), {
    batchSize: l,
    dataFormat: i,
    inDepth: c,
    inHeight: u,
    inWidth: h,
    inChannels: d,
    outDepth: F,
    outHeight: z,
    outWidth: W,
    outChannels: M,
    padInfo: R,
    strideDepth: y,
    strideHeight: b,
    strideWidth: w,
    filterDepth: p,
    filterHeight: f,
    filterWidth: m,
    effectiveFilterDepth: T,
    effectiveFilterHeight: N,
    effectiveFilterWidth: $,
    dilationDepth: x,
    dilationHeight: S,
    dilationWidth: v,
    inShape: n,
    outShape: X,
    filterShape: t
  };
}
function VT(n, t, e, s, r) {
  s == null && (s = ng(n, t, e));
  const o = n[0], i = n[1], a = Br((o - t + 2 * s) / e + 1, r), l = Br((i - t + 2 * s) / e + 1, r);
  return [a, l];
}
function MT(n, t, e, s, r, o) {
  r == null && (r = ng(n, t, s));
  const i = n[0], a = n[1], l = n[2], c = Br((i - t + 2 * r) / s + 1, o), u = Br((a - t + 2 * r) / s + 1, o), h = Br((l - t + 2 * r) / s + 1, o);
  return [c, u, h, e];
}
function ng(n, t, e, s = 1) {
  const r = Do(t, s);
  return Math.floor((n[0] * (e - 1) - e + r) / 2);
}
function Eu(n) {
  return typeof n == "number" ? [n, n, n] : n.length === 2 ? [n[0], n[1], 1] : n;
}
function Wf(n) {
  return typeof n == "number" ? [n, n, n] : n;
}
function Do(n, t) {
  return t <= 1 ? n : n + (n - 1) * (t - 1);
}
function PT(n, t, e, s, r, o, i, a, l) {
  let c, u, h;
  if (typeof n == "number") {
    c = { top: n, bottom: n, left: n, right: n, type: n === 0 ? "VALID" : "NUMBER" };
    const p = VT([t, e], o, s, n, a);
    u = p[0], h = p[1];
  } else if (n === "same") {
    u = Math.ceil(t / s), h = Math.ceil(e / r);
    const d = Math.max(0, (u - 1) * s + o - t), p = Math.max(0, (h - 1) * r + i - e), f = Math.floor(d / 2), m = d - f, g = Math.floor(p / 2), y = p - g;
    c = { top: f, bottom: m, left: g, right: y, type: "SAME" };
  } else if (n === "valid")
    c = { top: 0, bottom: 0, left: 0, right: 0, type: "VALID" }, u = Math.ceil((t - o + 1) / s), h = Math.ceil((e - i + 1) / r);
  else if (typeof n == "object") {
    const d = l === "channelsLast" ? n[1][0] : n[2][0], p = l === "channelsLast" ? n[1][1] : n[2][1], f = l === "channelsLast" ? n[2][0] : n[3][0], m = l === "channelsLast" ? n[2][1] : n[3][1];
    c = { top: d, bottom: p, left: f, right: m, type: d === 0 && p === 0 && f === 0 && m === 0 ? "VALID" : "EXPLICIT" }, u = Br((t - o + d + p) / s + 1, a), h = Br((e - i + f + m) / r + 1, a);
  } else
    throw Error(`Unknown padding parameter: ${n}`);
  return { padInfo: c, outHeight: u, outWidth: h };
}
function XT(n, t, e, s, r, o, i, a, l, c, u) {
  let h, d, p, f;
  if (typeof n == "number") {
    h = {
      top: n,
      bottom: n,
      left: n,
      right: n,
      front: n,
      back: n,
      type: n === 0 ? "VALID" : "NUMBER"
    };
    const g = MT([t, e, s, 1], a, 1, r, n, u);
    d = g[0], p = g[1], f = g[2];
  } else if (n === "same") {
    d = Math.ceil(t / r), p = Math.ceil(e / o), f = Math.ceil(s / i);
    const m = (d - 1) * r + a - t, g = (p - 1) * o + l - e, y = (f - 1) * i + c - s, b = Math.floor(m / 2), w = m - b, x = Math.floor(g / 2), S = g - x, v = Math.floor(y / 2), T = y - v;
    h = { top: x, bottom: S, left: v, right: T, front: b, back: w, type: "SAME" };
  } else if (n === "valid")
    h = {
      top: 0,
      bottom: 0,
      left: 0,
      right: 0,
      front: 0,
      back: 0,
      type: "VALID"
    }, d = Math.ceil((t - a + 1) / r), p = Math.ceil((e - l + 1) / o), f = Math.ceil((s - c + 1) / i);
  else
    throw Error(`Unknown padding parameter: ${n}`);
  return { padInfo: h, outDepth: d, outHeight: p, outWidth: f };
}
function Br(n, t) {
  if (!t)
    return Math.trunc(n);
  switch (t) {
    case "round":
      return Math.round(n);
    case "ceil":
      return Math.ceil(n);
    case "floor":
      return Math.floor(n);
    default:
      throw new Error(`Unknown roundingMode ${t}`);
  }
}
function yr(n) {
  const [t, e, s] = Eu(n);
  return t === 1 && e === 1 && s === 1;
}
function Ae(n, t) {
  return yr(n) || yr(t);
}
function Ys(n) {
  if (n === "NHWC")
    return "channelsLast";
  if (n === "NCHW")
    return "channelsFirst";
  throw new Error(`Unknown dataFormat ${n}`);
}
function Ye(n, t, e) {
  if (e != null) {
    if (typeof t == "string")
      throw Error(`Error in ${n}: pad must be an integer when using dimRoundingMode ${e} but got pad ${t}.`);
    if (typeof t == "number")
      C(Yr(t), () => `Error in ${n}: pad must be an integer when using dimRoundingMode ${e} but got pad ${t}.`);
    else if (typeof t == "object")
      t.forEach((s) => {
        s.forEach((r) => {
          C(Yr(r), () => `Error in ${n}: pad must be an integer when using dimRoundingMode ${e} but got pad ${r}.`);
        });
      });
    else
      throw Error(`Error in ${n}: Unknown padding parameter: ${t}`);
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _T(n, t) {
  const s = { x: k(n, "x", "reshape", "string_or_numeric") }, r = { shape: t };
  return E.runKernel(Zl, s, r);
}
const G = L({ reshape_: _T });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function KT(n, t, e, s, r) {
  const o = k(n, "x", "avgPool", "float32"), i = 1;
  C(Ae(e, i), () => `Error in avgPool: Either strides or dilations must be 1. Got strides ${e} and dilations '${i}'`);
  let a = o, l = !1;
  o.rank === 3 && (l = !0, a = G(o, [1, o.shape[0], o.shape[1], o.shape[2]])), C(a.rank === 4, () => `Error in avgPool: x must be rank 4 but got rank ${a.rank}.`), Ye("avgPool", s, r);
  const c = { x: a }, u = { filterSize: t, strides: e, pad: s, dimRoundingMode: r };
  let h = E.runKernel(al, c, u);
  return h = et(h, o.dtype), l ? G(h, [h.shape[1], h.shape[2], h.shape[3]]) : h;
}
const lc = L({ avgPool_: KT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ZT(n, t, e, s, r, o = "NDHWC") {
  const i = k(n, "x", "avgPool3d", "float32");
  let a = i, l = !1;
  i.rank === 4 && (l = !0, a = G(i, [1, i.shape[0], i.shape[1], i.shape[2], i.shape[3]])), C(a.rank === 5, () => `Error in avgPool3d: x must be rank 5 but got rank ${a.rank}.`), C(o === "NDHWC", () => `Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${o}`), Ye("avgPool3d", s, r);
  const c = { x: a }, u = { filterSize: t, strides: e, pad: s, dimRoundingMode: r, dataFormat: o };
  let h = E.runKernel(ll, c, u);
  return h = et(h, a.dtype), l ? G(h, [h.shape[1], h.shape[2], h.shape[3], h.shape[4]]) : h;
}
const sg = L({ avgPool3d_: ZT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function BT(n, t = 0) {
  C(n.length >= 1, () => "Pass at least one tensor to concat");
  const e = Ka(n, "tensors", "concat", "string_or_numeric");
  if (e[0].dtype === "complex64" && e.forEach((o) => {
    if (o.dtype !== "complex64")
      throw new Error(`Cannot concatenate complex64 tensors with a tensor
          with dtype ${o.dtype}. `);
  }), e.length === 1)
    return ws(e[0]);
  const s = e, r = { axis: t };
  return E.runKernel(dl, s, r);
}
const he = L({ concat_: BT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function HT(n) {
  const e = { x: k(n, "x", "sigmoid", "float32") };
  return E.runKernel(Vi, e);
}
const ss = L({ sigmoid_: HT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function UT(n, t, e) {
  const s = k(n, "x", "slice", "string_or_numeric");
  if (s.rank === 0)
    throw new Error("Slicing scalar is not possible");
  const r = { x: s }, o = { begin: t, size: e };
  return E.runKernel(jl, r, o);
}
const $t = L({ slice_: UT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function YT(n) {
  const e = { x: k(n, "x", "tanh", "float32") };
  return E.runKernel(Zi, e);
}
const to = L({ tanh_: YT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function jT(n, t, e, s, r, o) {
  const i = k(n, "forgetBias", "basicLSTMCell"), a = k(t, "lstmKernel", "basicLSTMCell"), l = k(e, "lstmBias", "basicLSTMCell"), c = k(s, "data", "basicLSTMCell"), u = k(r, "c", "basicLSTMCell"), h = k(o, "h", "basicLSTMCell"), d = he([c, h], 1), p = Ct(d, a), f = U(p, l), m = f.shape[0], g = f.shape[1] / 4, y = [m, g], b = $t(f, [0, 0], y), w = $t(f, [0, g], y), x = $t(f, [0, g * 2], y), S = $t(f, [0, g * 3], y), v = U(D(ss(b), to(w)), D(u, ss(U(i, x)))), T = D(to(v), ss(S));
  return [v, T];
}
const yw = L({ basicLSTMCell_: jT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function JT(n, t, e) {
  const s = k(n, "x", "batchToSpaceND"), r = t.reduce((a, l) => a * l);
  C(s.rank >= 1 + t.length, () => `input rank is ${s.rank} but should be > than blockShape.length ${t.length}`), C(e.length === t.length, () => `crops.length is ${e.length} but should be equal to blockShape.length  ${t.length}`), C(s.shape[0] % r === 0, () => `input tensor batch is ${s.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${r}`);
  const o = { x: s }, i = { blockShape: t, crops: e };
  return E.runKernel(ul, o, i);
}
const cc = L({ batchToSpaceND_: JT });
function QT(n) {
  let t;
  return n.rank === 0 || n.rank === 1 ? t = G(n, [1, 1, 1, n.size]) : n.rank === 2 ? t = G(n, [1, 1, n.shape[0], n.shape[1]]) : n.rank === 3 ? t = G(n, [1, n.shape[0], n.shape[1], n.shape[2]]) : t = n, t;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function qT(n, t, e, s, r, o) {
  o == null && (o = 1e-3);
  const i = k(n, "x", "batchNorm"), a = k(t, "mean", "batchNorm"), l = k(e, "variance", "batchNorm");
  let c;
  r != null && (c = k(r, "scale", "batchNorm"));
  let u;
  s != null && (u = k(s, "offset", "batchNorm")), C(a.rank === l.rank, () => "Batch normalization gradient requires mean and variance to have equal ranks."), C(u == null || a.rank === u.rank, () => "Batch normalization gradient requires mean and offset to have equal ranks."), C(c == null || a.rank === c.rank, () => "Batch normalization gradient requires mean and scale to have equal ranks.");
  const d = {
    x: QT(i),
    scale: c,
    offset: u,
    mean: a,
    variance: l
  }, p = { varianceEpsilon: o }, f = E.runKernel(Il, d, p);
  return G(f, i.shape);
}
const Yi = L({ batchNorm_: qT });
function tN(n, t, e, s, r, o) {
  const i = k(n, "x", "batchNorm"), a = k(t, "mean", "batchNorm"), l = k(e, "variance", "batchNorm");
  let c;
  r != null && (c = k(r, "scale", "batchNorm"));
  let u;
  return s != null && (u = k(s, "offset", "batchNorm")), C(i.rank === 2, () => `Error in batchNorm2D: x must be rank 2 but got rank ${i.rank}.`), C(a.rank === 2 || a.rank === 1, () => `Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${a.rank}.`), C(l.rank === 2 || l.rank === 1, () => `Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`), c != null && C(c.rank === 2 || c.rank === 1, () => `Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${c.rank}.`), u != null && C(u.rank === 2 || u.rank === 1, () => `Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${u.rank}.`), Yi(i, a, l, u, c, o);
}
const rg = L({ batchNorm2d_: tN });
function eN(n, t, e, s, r, o) {
  const i = k(n, "x", "batchNorm"), a = k(t, "mean", "batchNorm"), l = k(e, "variance", "batchNorm");
  let c;
  r != null && (c = k(r, "scale", "batchNorm"));
  let u;
  return s != null && (u = k(s, "offset", "batchNorm")), C(i.rank === 3, () => `Error in batchNorm3D: x must be rank 3 but got rank ${i.rank}.`), C(a.rank === 3 || a.rank === 1, () => `Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${a.rank}.`), C(l.rank === 3 || l.rank === 1, () => `Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`), c != null && C(c.rank === 3 || c.rank === 1, () => `Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${c.rank}.`), u != null && C(u.rank === 3 || u.rank === 1, () => `Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${u.rank}.`), Yi(i, a, l, u, c, o);
}
const og = L({ batchNorm3d_: eN });
function nN(n, t, e, s, r, o) {
  const i = k(n, "x", "batchNorm"), a = k(t, "mean", "batchNorm"), l = k(e, "variance", "batchNorm");
  let c;
  r != null && (c = k(r, "scale", "batchNorm"));
  let u;
  return s != null && (u = k(s, "offset", "batchNorm")), C(i.rank === 4, () => `Error in batchNorm4D: x must be rank 4 but got rank ${i.rank}.`), C(a.rank === 4 || a.rank === 1, () => `Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${a.rank}.`), C(l.rank === 4 || l.rank === 1, () => `Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`), c != null && C(c.rank === 4 || c.rank === 1, () => `Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${c.rank}.`), u != null && C(u.rank === 4 || u.rank === 1, () => `Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${u.rank}.`), Yi(i, a, l, u, c, o);
}
const ig = L({ batchNorm4d_: nN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sN(n, t, e) {
  const s = k(n, "x", "bincount"), r = k(t, "weights", "bincount");
  C(s.dtype === "int32", () => `Error in bincount: input dtype must be int32, but got ${s.dtype}`), C(e >= 0, () => `size must be non-negative, but got ${e}.`), C(r.size === s.size || r.size === 0, () => `Error in bincount: weights must have the same size as input or0-length, but got input shape: ${s.shape}, weights shape: ${r.shape}.`);
  const o = { x: s, weights: r }, i = { size: e };
  return E.runKernel(ah, o, i);
}
const ag = L({ bincount_: sN });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function rN(n, t) {
  const e = k(n, "s0", "broadcastArgs", "int32"), s = k(t, "s1", "broadcastArgs", "int32");
  if (e.rank !== 1)
    throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${e.rank}`);
  if (s.rank !== 1)
    throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${s.rank}`);
  const r = { s0: e, s1: s };
  return E.runKernel(lh, r);
}
const bw = L({ broadcastArgs_: rN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function oN(n, t) {
  let e = k(n, "broadcastTo", "x");
  const s = e.shape;
  if (t.some((c) => !(c > 0) || c % 1 !== 0))
    throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);
  if (t.length < e.rank)
    throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${e.rank}.`);
  if (t.length > e.rank) {
    const c = e.shape.slice();
    for (; c.length < t.length; )
      c.unshift(1);
    e = G(e, c);
  }
  const r = e.shape, o = Array.from(t);
  for (let c = t.length - 1; c >= 0; c--)
    if (r[c] === t[c])
      o[c] = 1;
    else if (e.shape[c] !== 1)
      throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${t}].`);
  if (o.map((c, u) => c > 1 ? u : -1).filter((c) => c >= 0).length === 0)
    return ws(e);
  const a = { x: e }, l = { reps: o };
  return E.runKernel(Bi, a, l);
}
const ur = L({ broadcastTo_: oN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function iN(n) {
  const e = { x: k(n, "x", "ceil", "float32") };
  return E.runKernel(ai, e);
}
const lg = L({ ceil_: iN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fo(n, t, e) {
  const s = { shape: n, value: t, dtype: e };
  return E.runKernel(vh, {}, s);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function aN(n, t, e) {
  const s = k(n, "x", "clipByValue");
  if (C(t <= e, () => `Error in clip: min (${t}) must be less than or equal to max (${e}).`), t === e)
    return fo(s.shape, t, s.dtype);
  const r = { x: s }, o = { clipValueMin: t, clipValueMax: e };
  return E.runKernel(li, r, o);
}
const en = L({ clipByValue_: aN });
function lN(n) {
  return he(n, 0);
}
const cg = L({ concat1d_: lN });
function cN(n, t) {
  return he(n, t);
}
const ug = L({ concat2d_: cN });
function uN(n, t) {
  return he(n, t);
}
const hg = L({ concat3d_: uN });
function hN(n, t) {
  return he(n, t);
}
const dg = L({ concat4d_: hN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function dN(n, t, e, s, r = "NHWC", o = [1, 1], i) {
  const a = k(n, "x", "conv2d", "float32"), l = k(t, "filter", "conv2d", "float32");
  let c = a, u = !1;
  a.rank === 3 && (u = !0, c = G(a, [1, a.shape[0], a.shape[1], a.shape[2]])), C(c.rank === 4, () => `Error in conv2d: input must be rank 4, but got rank ${c.rank}.`), C(l.rank === 4, () => `Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`), Ye("conv2d", s, i);
  const h = r === "NHWC" ? c.shape[3] : c.shape[1];
  C(h === l.shape[2], () => `Error in conv2d: depth of input (${h}) must match input depth for filter ${l.shape[2]}.`), C(Ae(e, o), () => `Error in conv2D: Either strides or dilations must be 1. Got strides ${e} and dilations '${o}'`);
  const d = { x: c, filter: l }, p = { strides: e, pad: s, dataFormat: r, dilations: o, dimRoundingMode: i }, f = E.runKernel(pl, d, p);
  return u ? G(f, [f.shape[1], f.shape[2], f.shape[3]]) : f;
}
const Xs = L({ conv2d_: dN });
function pN(n, t, e, s, r = "NWC", o = 1, i) {
  const a = k(n, "x", "conv1d"), l = k(t, "filter", "conv1d");
  let c = a, u = !1;
  a.rank === 2 && (u = !0, c = G(a, [1, a.shape[0], a.shape[1]])), C(c.rank === 3, () => `Error in conv1d: input must be rank 3, but got rank ${c.rank}.`), C(l.rank === 3, () => `Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`), Ye("conv1d", s, i), C(c.shape[2] === l.shape[1], () => `Error in conv1d: depth of input (${c.shape[2]}) must match input depth for filter ${l.shape[1]}.`), C(Ae(e, o), () => `Error in conv1D: Either stride or dilation must be 1. Got stride ${e} and dilation '${o}'`), C(r === "NWC", () => `Error in conv1d: got dataFormat of ${r} but only NWC is currently supported.`);
  const h = G(l, [1, l.shape[0], l.shape[1], l.shape[2]]), d = G(c, [c.shape[0], 1, c.shape[1], c.shape[2]]), g = Xs(d, h, [1, e], s, "NHWC", [1, o], i);
  return u ? G(g, [g.shape[2], g.shape[3]]) : G(g, [g.shape[0], g.shape[2], g.shape[3]]);
}
const fd = L({ conv1d_: pN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fN(n, t, e, s, r, o = "NHWC", i) {
  C(n.length === t.rank, () => `Length of inShape (${n.length}) and rank of dy (${t.rank}) must match`);
  let a = n, l = t, c = !1;
  t.rank === 3 && (c = !0, l = G(t, [1, t.shape[0], t.shape[1], t.shape[2]]), a = [1, n[0], n[1], n[2]]), C(a.length === 4, () => `Error in conv2dDerInput: inShape must be length 4, but got length ${a.length}.`), C(l.rank === 4, () => `Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`), C(e.rank === 4, () => `Error in conv2dDerInput: filter must be rank 4, but got rank ${e.rank}`);
  const u = o === "NHWC" ? a[3] : a[1], h = o === "NHWC" ? l.shape[3] : l.shape[1];
  C(u === e.shape[2], () => `Error in conv2dDerInput: depth of input (${u}) must match input depth for filter ${e.shape[2]}.`), C(h === e.shape[3], () => `Error in conv2dDerInput: depth of output (${h}) must match output depth for filter ${e.shape[3]}.`), Ye("conv2dDerInput", r, i);
  const d = { dy: l, filter: e }, p = { strides: s, pad: r, dataFormat: o, dimRoundingMode: i, inputShape: a }, f = E.runKernel(fl, d, p);
  return c ? G(f, [f.shape[1], f.shape[2], f.shape[3]]) : f;
}
const pg = L({ conv2DBackpropInput_: fN });
function mN(n, t, e, s, r, o) {
  const i = k(n, "x", "conv2dTranspose"), a = k(t, "filter", "conv2dTranspose");
  return pg(e, i, a, s, r, "NHWC", o);
}
const md = L({ conv2dTranspose_: mN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function gN(n, t, e, s, r = "NDHWC", o = [1, 1, 1]) {
  const i = k(n, "x", "conv3d"), a = k(t, "filter", "conv3d");
  let l = i, c = !1;
  i.rank === 4 && (c = !0, l = G(i, [1, i.shape[0], i.shape[1], i.shape[2], i.shape[3]])), C(l.rank === 5, () => `Error in conv3d: input must be rank 5, but got rank ${l.rank}.`), C(a.rank === 5, () => `Error in conv3d: filter must be rank 5, but got rank ${a.rank}.`), C(l.shape[4] === a.shape[3], () => `Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${a.shape[3]}.`), C(Ae(e, o), () => `Error in conv3D: Either strides or dilations must be 1. Got strides ${e} and dilations '${o}'`), C(r === "NDHWC", () => `Error in conv3d: got dataFormat of ${r} but only NDHWC is currently supported.`);
  const u = { x: l, filter: a }, h = { strides: e, pad: s, dataFormat: r, dilations: o }, d = E.runKernel(ml, u, h);
  return c ? G(d, [d.shape[1], d.shape[2], d.shape[3], d.shape[4]]) : d;
}
const fg = L({ conv3d_: gN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function yN(n, t, e, s, r) {
  C(n.length === t.rank, () => `Length of inShape (${n.length}) and rank of dy (${t.rank}) must match`);
  let o = n, i = t, a = !1;
  t.rank === 4 && (a = !0, i = G(t, [1, t.shape[0], t.shape[1], t.shape[2], t.shape[3]]), o = [1, n[0], n[1], n[2], n[3]]);
  const l = o[4], c = i.shape[4];
  C(o.length === 5, () => `Error in conv3dDerInput: inShape must be length 5, but got length ${o.length}.`), C(i.rank === 5, () => `Error in conv3dDerInput: dy must be rank 5, but got rank ${i.rank}`), C(e.rank === 5, () => `Error in conv3dDerInput: filter must be rank 5, but got rank ${e.rank}`), C(l === e.shape[3], () => `Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${e.shape[3]}.`), C(c === e.shape[4], () => `Error in conv3dDerInput: depth of output (${c}) must match output depth for filter ${e.shape[4]}.`);
  const u = { dy: i, filter: e }, h = { pad: r, strides: s, inputShape: o }, d = E.runKernel(dh, u, h);
  return a ? G(d, [d.shape[1], d.shape[2], d.shape[3], d.shape[4]]) : d;
}
const xw = L({ conv3DBackpropInput_: yN });
function bN(n, t, e, s, r) {
  const o = k(n, "x", "conv3dTranspose"), i = k(t, "filter", "conv3dTranspose");
  return xw(e, o, i, s, r);
}
const mg = L({ conv3dTranspose_: bN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function xN(n) {
  const e = { x: k(n, "x", "cos", "float32") };
  return E.runKernel(ci, e);
}
const uc = L({ cos_: xN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function wN(n) {
  const e = { x: k(n, "x", "cosh", "float32") };
  return E.runKernel(ui, e);
}
const gd = L({ cosh_: wN });
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function IN(n, t = 0, e = !1, s = !1) {
  const o = { x: k(n, "x", "cumprod") }, i = { axis: t, exclusive: e, reverse: s };
  return E.runKernel(ph, o, i);
}
const Ha = L({ cumprod_: IN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function SN(n, t = 0, e = !1, s = !1) {
  const o = { x: k(n, "x", "cumsum") }, i = { axis: t, exclusive: e, reverse: s };
  return E.runKernel(gl, o, i);
}
const yd = L({ cumsum_: SN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function vN(n, t, e, s = !1) {
  const r = k(n, "x", "denseBincount"), o = k(t, "weights", "denseBincount");
  C(r.dtype === "int32", () => `Error in denseBincount: input dtype must be int32, but got ${r.dtype}`), C(r.rank <= 2, () => `Error in denseBincount: input must be at most rank 2, but got rank ${r.rank}.`), C(e >= 0, () => `size must be non-negative, but got ${e}.`), C(o.size === r.size || o.size === 0, () => `Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${r.shape}, weights shape: ${o.shape}.`);
  const i = { x: r, weights: o }, a = { size: e, binaryOutput: s };
  return E.runKernel(mh, i, a);
}
const ww = L({ denseBincount_: vN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function CN(n, t, e = "NHWC") {
  const s = k(n, "x", "depthToSpace", "float32"), r = e === "NHWC" ? s.shape[1] : s.shape[2], o = e === "NHWC" ? s.shape[2] : s.shape[3], i = e === "NHWC" ? s.shape[3] : s.shape[1];
  C(t > 1, () => `blockSize should be > 1 for depthToSpace, but was: ${t}`), C(r * t >= 0, () => `Negative dimension size caused by overflow when multiplying
    ${r} and ${t}  for depthToSpace with input shape
    ${s.shape}`), C(o * t >= 0, () => `Negative dimension size caused by overflow when multiplying
    ${o} and ${t} for depthToSpace with input shape
        ${s.shape}`), C(i % (t * t) === 0, () => `Dimension size must be evenly divisible by ${t * t} but is ${i} for depthToSpace with input shape ${s.shape}`);
  const a = { x: s }, l = { blockSize: t, dataFormat: e };
  return E.runKernel(gh, a, l);
}
const gg = L({ depthToSpace_: CN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function kN(n, t, e, s, r = "NHWC", o = [1, 1], i) {
  const a = k(n, "x", "depthwiseConv2d", "float32"), l = k(t, "filter", "depthwiseConv2d", "float32");
  let c = a, u = !1;
  a.rank === 3 && (u = !0, c = G(a, [1, a.shape[0], a.shape[1], a.shape[2]])), C(c.rank === 4, () => `Error in depthwiseConv2d: input must be rank 4, but got rank ${c.rank}.`), C(l.rank === 4, () => `Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`);
  const h = r === "NHWC" ? c.shape[3] : c.shape[1];
  C(h === l.shape[2], () => `Error in depthwiseConv2d: number of input channels (${h}) must match the inChannels dimension in filter ${l.shape[2]}.`), Ye("depthwiseConv2d", s, i);
  const d = { x: c, filter: l }, p = { strides: e, pad: s, dataFormat: r, dilations: o, dimRoundingMode: i }, f = E.runKernel(yl, d, p);
  return u ? G(f, [f.shape[1], f.shape[2], f.shape[3]]) : f;
}
const ji = L({ depthwiseConv2d_: kN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function TN(n) {
  const e = { x: k(n, "x", "diag") };
  return E.runKernel(xh, e);
}
const Iw = L({ diag_: TN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function NN(n, t, e, s, r = [1, 1], o = "NHWC") {
  const i = k(n, "x", "dilation2d"), a = k(t, "filter", "dilation2d");
  C(i.rank === 3 || i.rank === 4, () => `Error in dilation2d: input must be rank 3 or 4, but got rank ${i.rank}.`), C(a.rank === 3, () => `Error in dilation2d: filter must be rank 3, but got rank ${a.rank}.`), C(o === "NHWC", () => `Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${o}`);
  let l = i, c = !1;
  i.rank === 3 && (l = G(i, [1, i.shape[0], i.shape[1], i.shape[2]]), c = !0);
  const u = { x: l, filter: a }, h = { strides: e, pad: s, dilations: r }, d = E.runKernel(bl, u, h);
  return c ? G(d, [d.shape[1], d.shape[2], d.shape[3]]) : d;
}
const yg = L({ dilation2d_: NN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $N(n, t) {
  let e = k(n, "a", "equal", "string_or_numeric"), s = k(t, "b", "equal", "string_or_numeric");
  [e, s] = re(e, s), bt(e.shape, s.shape);
  const r = { a: e, b: s };
  return E.runKernel(xl, r);
}
const yn = L({ equal_: $N });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function RN(n, t, e) {
  const s = k(t, "a", "where"), r = k(e, "b", "where"), o = k(n, "condition", "where", "bool"), i = bt(bt(o.shape, s.shape), r.shape), a = ur(o, i), l = ur(s, i), c = ur(r, i), u = {
    condition: a,
    t: l,
    e: c
  };
  return E.runKernel(Yl, u);
}
const Me = L({ where_: RN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function EN(n) {
  const e = { x: k(n, "x", "zerosLike") };
  return E.runKernel(sc, e);
}
const Rt = L({ zerosLike_: EN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function LN(n, t) {
  let e = k(n, "a", "div"), s = k(t, "b", "div");
  [e, s] = re(e, s);
  const r = ht(e, s), o = Rt(r), i = yn(s, o);
  return Me(i, o, r);
}
const bg = L({ divNoNan_: LN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function DN(n, t) {
  const e = k(n, "t1", "dot"), s = k(t, "t2", "dot");
  C((e.rank === 1 || e.rank === 2) && (s.rank === 1 || s.rank === 2), () => `Error in dot: inputs must all be rank 1 or 2, but got ranks ${e.rank} and ${s.rank}.`);
  const r = e.rank === 1 ? e.size : e.shape[1], o = s.rank === 1 ? s.size : s.shape[0];
  if (C(r === o, () => `Error in dot: inner dimensions of inputs must match, but got ${r} and ${o}.`), e.rank === 1 && s.rank === 1) {
    const i = G(e, [1, -1]), a = G(s, [-1, 1]), l = Ct(i, a);
    return G(l, []);
  } else if (e.rank === 1 && s.rank === 2) {
    const i = G(e, [1, -1]), a = G(s, [s.shape[0], s.shape[1]]), l = Ct(i, a);
    return G(l, [l.size]);
  } else if (e.rank === 2 && s.rank === 1) {
    const i = G(s, [-1, 1]), a = Ct(e, i);
    return G(a, [a.size]);
  } else {
    const i = G(s, [s.shape[0], s.shape[1]]);
    return Ct(e, i);
  }
}
const xg = L({ dot_: DN });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function GN(n, ...t) {
  const e = t.map((r, o) => k(r, `tensors${o}`, "einsum")), s = { equation: n };
  return E.runKernel(wh, e, s);
}
const Sw = L({ einsum_: GN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function FN(n) {
  const e = { x: k(n, "x", "elu", "float32") };
  return E.runKernel(di, e);
}
const Ji = L({ elu_: FN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ON(n) {
  let t = k(n, "x", "erf");
  C(t.dtype === "int32" || t.dtype === "float32", () => "Input dtype must be `int32` or `float32`."), t.dtype === "int32" && (t = et(t, "float32"));
  const e = { x: t };
  return E.runKernel(pi, e);
}
const wg = L({ erf_: ON });
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ig(n, t) {
  for (let e = 0; e < n.length; ++e)
    if (n[n.length - e - 1] !== t - 1 - e)
      return !1;
  return !0;
}
function vw(n, t, e) {
  const s = n.length + t.length, r = [];
  let o = 0, i = 0;
  for (let a = 0; a < s; a++)
    e.indexOf(a) === -1 ? r.push(n[o++]) : r.push(t[i++]);
  return r;
}
function ve(n, t) {
  const e = [], s = n.length;
  for (let o = 0; o < s; o++)
    t.indexOf(o) === -1 && e.push(n[o]);
  const r = t.map((o) => n[o]);
  return [e, r];
}
function de(n, t) {
  const e = t.map((s) => 1);
  return vw(n, e, t);
}
function ze(n, t, e) {
  C(Ig(t, e), () => `${n} supports only inner-most axes for now. Got axes ${t} and rank-${e} input.`);
}
function oe(n, t) {
  if (Ig(n, t))
    return null;
  const e = [];
  for (let s = 0; s < t; ++s)
    n.indexOf(s) === -1 && e.push(s);
  return n.forEach((s) => e.push(s)), e;
}
function kr(n) {
  return n.map((t, e) => [e, t]).sort((t, e) => t[1] - e[1]).map((t) => t[0]);
}
function pe(n, t) {
  const e = [];
  for (let s = t - n; s < t; ++s)
    e.push(s);
  return e;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function AN(n, t = null, e = !1) {
  const r = { x: k(n, "x", "max") }, o = { reductionIndices: t, keepDims: e };
  return E.runKernel(Ll, r, o);
}
const Bn = L({ max_: AN });
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function zN(n, t = null, e = !1) {
  const r = { x: k(n, "x", "min") }, o = { axis: t, keepDims: e };
  return E.runKernel(Ol, r, o);
}
const Ua = L({ min_: zN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function WN(n, t) {
  let e = k(n, "base", "pow"), s = k(t, "exp", "pow");
  [e, s] = re(e, s);
  const r = { a: e, b: s };
  return E.runKernel(Ri, r);
}
const _s = L({ pow_: WN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ft(n, t) {
  if ((De(n) && t !== "string" || Array.isArray(n)) && t !== "complex64")
    throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");
  if (t === "string" && De(n) && !(n instanceof Uint8Array))
    throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");
  return vr(n, [], [], t);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function VN(n) {
  const e = { x: k(n, "x", "sqrt", "float32") };
  return E.runKernel(Pi, e);
}
const Fe = L({ sqrt_: VN });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function MN(n) {
  const t = k(n, "x", "square"), e = {};
  return E.runKernel("Square", { x: t }, e);
}
const Wt = L({ square_: MN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function PN(n, t = null, e = !1) {
  let s = k(n, "x", "sum");
  s.dtype === "bool" && (s = et(s, "int32"));
  const r = { x: s }, o = { axis: t, keepDims: e };
  return E.runKernel(Jl, r, o);
}
const at = L({ sum_: PN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function XN(n, t = "euclidean", e = null, s = !1) {
  n = k(n, "x", "norm");
  const r = Cw(n, t, e);
  let o = r.shape;
  if (s) {
    const i = vt(e, n.shape);
    o = de(r.shape, i);
  }
  return G(r, o);
}
function Cw(n, t, e = null) {
  if (n.rank === 0)
    return me(n);
  if (n.rank !== 1 && e === null)
    return Cw(G(n, [-1]), t, e);
  if (n.rank === 1 || typeof e == "number" || Array.isArray(e) && e.length === 1) {
    if (t === 1)
      return at(me(n), e);
    if (t === 1 / 0)
      return Bn(me(n), e);
    if (t === -1 / 0)
      return Ua(me(n), e);
    if (t === "euclidean" || t === 2)
      return Fe(at(_s(me(n), ft(2, "int32")), e));
    throw new Error(`Error in norm: invalid ord value: ${t}`);
  }
  if (Array.isArray(e) && e.length === 2) {
    if (t === 1)
      return Bn(at(me(n), e[0]), e[1] - 1);
    if (t === 1 / 0)
      return Bn(at(me(n), e[1]), e[0]);
    if (t === -1 / 0)
      return Ua(at(me(n), e[1]), e[0]);
    if (t === "fro" || t === "euclidean")
      return Fe(at(Wt(n), e));
    throw new Error(`Error in norm: invalid ord value: ${t}`);
  }
  throw new Error(`Error in norm: invalid axis: ${e}`);
}
const Qi = L({ norm_: XN });
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _N(n, t = null, e = !1) {
  return Qi(n, "euclidean", t, e);
}
const Sg = L({ euclideanNorm_: _N });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function KN(n) {
  const e = { x: k(n, "x", "exp") };
  return E.runKernel(fi, e);
}
const bn = L({ exp_: KN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ZN(n, t = 0) {
  const e = k(n, "x", "expandDims", "string_or_numeric");
  C(t <= e.rank, () => "Axis must be <= rank of the tensor");
  const s = { input: e }, r = { dim: t };
  return E.runKernel(wl, s, r);
}
const Qe = L({ expandDims_: ZN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function BN(n) {
  const e = { x: k(n, "x", "expm1") };
  return E.runKernel(mi, e);
}
const vg = L({ expm1_: BN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function HN(n, t) {
  const e = k(n, "x", "tile", "string_or_numeric");
  C(e.rank === t.length, () => `Error in transpose: rank of input ${e.rank} must match length of reps ${t}.`);
  const s = { x: e }, r = { reps: t };
  return E.runKernel(Bi, s, r);
}
const $n = L({ tile_: HN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function UN(n, t, e, s = "float32") {
  t == null && (t = n);
  const r = gt([n, t], s), o = n <= t ? n : t;
  for (let a = 0; a < o; ++a)
    r.set(1, a, a);
  const i = G(r.toTensor(), [n, t]);
  if (e == null)
    return i;
  if (e.length === 1)
    return $n(Qe(i, 0), [e[0], 1, 1]);
  if (e.length === 2)
    return $n(Qe(Qe(i, 0), 0), [e[0], e[1], 1, 1]);
  if (e.length === 3)
    return $n(Qe(Qe(Qe(i, 0), 0), 0), [
      e[0],
      e[1],
      e[2],
      1,
      1
    ]);
  throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${e.length}D.`);
}
const bd = L({ eye_: UN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function YN(n) {
  const e = { x: k(n, "x", "floor", "float32") };
  return E.runKernel(gi, e);
}
const qi = L({ floor_: YN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function jN(n, t, e = 0, s = 0) {
  const r = k(n, "x", "gather"), o = k(t, "indices", "gather", "int32"), i = { x: r, indices: o }, a = { axis: e, batchDims: s };
  return E.runKernel(Sl, i, a);
}
const ta = L({ gather_: jN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function JN(n, t) {
  let e = k(n, "a", "greater", "string_or_numeric"), s = k(t, "b", "greater", "string_or_numeric");
  [e, s] = re(e, s), bt(e.shape, s.shape);
  const r = { a: e, b: s };
  return E.runKernel(vl, r);
}
const an = L({ greater_: JN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function QN(n, t) {
  let e = k(n, "a", "greaterEqual", "string_or_numeric"), s = k(t, "b", "greaterEqual", "string_or_numeric");
  [e, s] = re(e, s), bt(e.shape, s.shape);
  const r = { a: e, b: s };
  return E.runKernel(bi, r);
}
const Tr = L({ greaterEqual_: QN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function qN(n) {
  const e = { x: k(n, "x", "isFinite") };
  return E.runKernel(wi, e);
}
const Cg = L({ isFinite_: qN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function t$(n) {
  const e = { x: k(n, "x", "isInf") };
  return E.runKernel(Ii, e);
}
const kg = L({ isInf_: t$ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function e$(n) {
  const e = { x: k(n, "x", "isNaN") };
  return E.runKernel(Si, e);
}
const Tg = L({ isNaN_: e$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function n$(n, t = 0.2) {
  const s = { x: k(n, "x", "leakyRelu") }, r = { alpha: t };
  return E.runKernel(Cl, s, r);
}
const hc = L({ leakyRelu_: n$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function s$(n, t) {
  let e = k(n, "a", "less", "string_or_numeric"), s = k(t, "b", "less", "string_or_numeric");
  [e, s] = re(e, s), bt(e.shape, s.shape);
  const r = { a: e, b: s };
  return E.runKernel(kl, r);
}
const xd = L({ less_: s$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function r$(n, t) {
  let e = k(n, "a", "lessEqual", "string_or_numeric"), s = k(t, "b", "lessEqual", "string_or_numeric");
  [e, s] = re(e, s), bt(e.shape, s.shape);
  const r = { a: e, b: s };
  return E.runKernel(Tl, r);
}
const Nr = L({ lessEqual_: r$ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function kw(n, t, e) {
  if (e <= 0)
    throw new Error("The number of values should be positive.");
  const s = { start: n, stop: t, num: e };
  return E.runKernel($h, {}, s);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function o$(n, t = 5, e = 1, s = 1, r = 0.5) {
  const o = k(n, "x", "localResponseNormalization");
  C(o.rank === 4 || o.rank === 3, () => `Error in localResponseNormalization: x must be rank 3 or 4 but got
               rank ${o.rank}.`), C(Yr(t), () => `Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`);
  let i = o, a = !1;
  o.rank === 3 && (a = !0, i = G(o, [1, o.shape[0], o.shape[1], o.shape[2]]));
  const l = { x: i }, c = { depthRadius: t, bias: e, alpha: s, beta: r }, u = E.runKernel(El, l, c);
  return a ? G(u, [u.shape[1], u.shape[2], u.shape[3]]) : u;
}
const Ng = L({ localResponseNormalization_: o$ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function i$(n) {
  const e = { x: k(n, "x", "log", "float32") };
  return E.runKernel(vi, e);
}
const xn = L({ log_: i$ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function a$(n) {
  const e = { x: k(n, "x", "log1p") };
  return E.runKernel(Ci, e);
}
const dc = L({ log1p_: a$ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function l$(n) {
  return C(mr(n), () => "The f passed in grad(f) must be a function"), (t, e) => {
    const s = k(t, "x", "tf.grad", "string_or_numeric"), r = e != null ? k(e, "dy", "tf.grad") : null;
    return E.tidy(() => {
      const { value: o, grads: i } = E.gradients(() => n(s), [s], r);
      return r != null && Oe(o.shape, r.shape, "The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"), wd(i), i[0];
    });
  };
}
function c$(n) {
  return C(mr(n), () => "The f passed in grads(f) must be a function"), (t, e) => {
    C(Array.isArray(t), () => "The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s");
    const s = Ka(t, "args", "tf.grads", "string_or_numeric"), r = e != null ? k(e, "dy", "tf.grads") : null;
    return E.tidy(() => {
      const { value: o, grads: i } = E.gradients(() => n(...s), s, r);
      return r != null && Oe(o.shape, r.shape, "The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"), wd(i), i;
    });
  };
}
function u$(n) {
  return C(mr(n), () => "The f passed in valueAndGrad(f) must be a function"), (t, e) => {
    C(t instanceof Lt, () => "The x passed in valueAndGrad(f)(x) must be a tensor"), C(e == null || e instanceof Lt, () => "The dy passed in valueAndGrad(f)(x, dy) must be a tensor");
    const { grads: s, value: r } = E.gradients(() => n(t), [t], e);
    return wd(s), { grad: s[0], value: r };
  };
}
function h$(n) {
  return C(mr(n), () => "The f passed in valueAndGrads(f) must be a function"), (t, e) => {
    C(Array.isArray(t) && t.every((r) => r instanceof Lt), () => "The args passed in valueAndGrads(f)(args) must be array of tensors"), C(e == null || e instanceof Lt, () => "The dy passed in valueAndGrads(f)(args, dy) must be a tensor");
    const s = E.gradients(() => n(...t), t, e);
    return e != null && Oe(s.value.shape, e.shape, "The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"), wd(s.grads), s;
  };
}
function Tw(n, t) {
  C(mr(n), () => "The f passed in variableGrads(f) must be a function"), C(t == null || Array.isArray(t) && t.every((c) => c instanceof _a), () => "The varList passed in variableGrads(f, varList) must be an array of variables");
  const e = t != null;
  if (!e) {
    t = [];
    for (const c in E.registeredVariables)
      t.push(E.registeredVariables[c]);
  }
  const s = e ? t.filter((c) => !c.trainable) : null, r = t.length;
  t = t.filter((c) => c.trainable), C(t.length > 0, () => `variableGrads() expects at least one of the input variables to be trainable, but none of the ${r} variables is trainable.`);
  const o = !0, { value: i, grads: a } = E.gradients(n, t, null, o);
  C(a.some((c) => c != null), () => "Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."), C(i.rank === 0, () => `The f passed in variableGrads(f) must return a scalar, but it returned a rank-${i.rank} tensor`);
  const l = {};
  return t.forEach((c, u) => {
    a[u] != null && (l[c.name] = a[u]);
  }), s != null && s.forEach((c) => l[c.name] = null), { value: i, grads: l };
}
function Cs(n) {
  return E.customGrad(n);
}
function wd(n) {
  if (n.filter((e) => e == null).length > 0)
    throw new Error(`Cannot compute gradient of y=f(x) with respect to x. Make sure that
    the f you passed encloses all operations that lead from x to y.`);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function d$(n) {
  const e = { x: k(n, "x", "softplus") };
  return E.runKernel(Mi, e);
}
const mo = L({ softplus_: d$ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function p$(n) {
  const t = k(n, "x", "logSigmoid");
  return Cs((s) => ({ value: Yt(mo(Yt(s))), gradFunc: (i) => D(i, ss(Yt(s))) }))(t);
}
const $g = L({ logSigmoid_: p$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function f$(n, t) {
  let e = k(n, "a", "sub"), s = k(t, "b", "sub");
  [e, s] = re(e, s);
  const r = { a: e, b: s };
  return E.runKernel(_i, r);
}
const it = L({ sub_: f$ });
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function m$(n, t = -1) {
  const e = k(n, "logits", "logSoftmax");
  if (t === -1 && (t = e.rank - 1), t !== e.rank - 1)
    throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${e.rank} and axis was ${t}`);
  return Cs((r, o) => {
    const a = Bn(r, t, !0), l = it(r, a), c = it(et(l, "float32"), xn(at(bn(l), t, !0)));
    return o([c]), { value: c, gradFunc: (h, d) => {
      const [p] = d, f = !0, m = bn(p);
      return it(h, D(at(h, t, f), m));
    } };
  })(e);
}
const Id = L({ logSoftmax_: m$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function g$(n, t = null, e = !1) {
  const s = k(n, "x", "logSumExp"), r = vt(t, s.shape), o = Bn(s, r, !0), i = it(s, o), a = bn(i), l = at(a, r), c = xn(l), u = U(G(o, c.shape), c);
  if (e) {
    const h = de(u.shape, r);
    return G(u, h);
  }
  return u;
}
const Sd = L({ logSumExp_: g$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function y$(n, t) {
  const e = k(n, "a", "logicalAnd", "bool"), s = k(t, "b", "logicalAnd", "bool");
  bt(e.shape, s.shape);
  const r = { a: e, b: s };
  return E.runKernel(Nl, r);
}
const Hn = L({ logicalAnd_: y$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function b$(n) {
  const e = { x: k(n, "x", "logicalNot", "bool") };
  return E.runKernel($l, e);
}
const pc = L({ logicalNot_: b$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function x$(n, t) {
  const e = k(n, "a", "logicalOr", "bool"), s = k(t, "b", "logicalOr", "bool");
  bt(e.shape, s.shape);
  const r = { a: e, b: s };
  return E.runKernel(Rl, r);
}
const vd = L({ logicalOr_: x$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function w$(n, t) {
  const e = k(n, "a", "logicalXor", "bool"), s = k(t, "b", "logicalXor", "bool");
  return bt(e.shape, s.shape), Hn(vd(n, t), pc(Hn(n, t)));
}
const Rg = L({ logicalXor_: w$ });
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Uc = 2147483648;
function I$(n, t, e = "left") {
  const s = k(n, "sortedSequence", "searchSorted"), r = k(t, "values", "searchSorted"), o = s.shape[s.shape.length - 1], i = r.shape[r.shape.length - 1], a = G(s, [-1, o]), l = G(r, [-1, i]);
  if (a.rank < 2)
    throw new Error("Sorted input argument must be at least 2-dimensional");
  if (a.shape[0] !== l.shape[0])
    throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");
  if (P(l.shape) >= Uc)
    throw new Error(`values tensor size must less than ${Uc}`);
  if (a.shape[1] >= Uc)
    throw new Error(`trailing dim_size must less than ${Uc} for int32 output type, was ${a.shape[1]}`);
  const c = {
    sortedSequence: a,
    values: l
  }, u = { side: e };
  return E.runKernel(Kh, c, u);
}
const Cd = L({ searchSorted_: I$ });
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Nw(n, t) {
  return Cd(n, t, "left");
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function S$(n, t, e, s, r) {
  const o = k(n, "x", "maxPool"), i = 1;
  let a = o, l = !1;
  o.rank === 3 && (l = !0, a = G(o, [1, o.shape[0], o.shape[1], o.shape[2]])), C(a.rank === 4, () => `Error in maxPool: input must be rank 4 but got rank ${a.rank}.`), C(Ae(e, i), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${e} and dilations '${i}'`), Ye("maxPool", s, r);
  const c = { x: a }, u = { filterSize: t, strides: e, pad: s, dimRoundingMode: r }, h = E.runKernel(Dl, c, u);
  return l ? G(h, [h.shape[1], h.shape[2], h.shape[3]]) : h;
}
const fc = L({ maxPool_: S$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function v$(n, t = [1, 1, 1], e, s, r, o = "NDHWC") {
  const i = k(n, "x", "maxPool3d");
  let a = i, l = !1;
  i.rank === 4 && (l = !0, a = G(i, [1, i.shape[0], i.shape[1], i.shape[2], i.shape[3]])), C(a.rank === 5, () => `Error in maxPool3d: x must be rank 5 but got rank ${a.rank}.`), C(o === "NDHWC", () => `Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${o}`), Ye("maxPool3d", s, r);
  const c = { x: a }, u = { filterSize: t, strides: e, pad: s, dimRoundingMode: r, dataFormat: o }, h = E.runKernel(Gl, c, u);
  return l ? G(h, [h.shape[1], h.shape[2], h.shape[3], h.shape[4]]) : h;
}
const Eg = L({ maxPool3d_: v$ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function C$(n, t, e, s, r = !1) {
  const i = { x: k(n, "x", "maxPoolWithArgmax") }, a = { filterSize: t, strides: e, pad: s, includeBatchInIndex: r }, l = E.runKernel(Dh, i, a);
  return { result: l[0], indexes: l[1] };
}
const $w = L({ maxPoolWithArgmax_: C$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function k$(n, t) {
  let e = k(n, "a", "maximum"), s = k(t, "b", "maximum");
  [e, s] = re(e, s), e.dtype === "bool" && (e = et(e, "int32"), s = et(s, "int32")), bt(e.shape, s.shape);
  const r = { a: e, b: s };
  return E.runKernel(ki, r);
}
const $s = L({ maximum_: k$ });
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function T$(n, t = null, e = !1) {
  const r = { x: k(n, "x", "mean") }, o = { axis: t, keepDims: e };
  return E.runKernel(Fl, r, o);
}
const ne = L({ mean_: T$ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ge(n, t = "float32") {
  if (t === "complex64") {
    const s = ge(n, "float32"), r = ge(n, "float32");
    return Ms(s, r);
  }
  const e = ae(P(n), t);
  return E.makeTensor(e, n, t);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fn(n, t = "float32") {
  if (t === "complex64") {
    const s = fn(n, "float32"), r = ge(n, "float32");
    return Ms(s, r);
  }
  const e = nh(P(n), t);
  return E.makeTensor(e, n, t);
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Rw(n, t, { indexing: e = "xy" } = {}) {
  if (e !== "xy" && e !== "ij")
    throw new TypeError(`${e} is not a valid third argument to meshgrid`);
  if (n === void 0)
    return [];
  let s = k(n, "x", "meshgrid", n instanceof Lt ? n.dtype : "float32");
  if (t === void 0)
    return [s];
  let r = k(t, "y", "meshgrid", t instanceof Lt ? t.dtype : "float32");
  const o = P(s.shape), i = P(r.shape);
  return e === "xy" ? (s = G(s, [1, -1]), r = G(r, [-1, 1]), [
    Ct(fn([i, 1], s.dtype), s),
    Ct(r, fn([1, o], r.dtype))
  ]) : (s = G(s, [-1, 1]), r = G(r, [1, -1]), [
    Ct(s, fn([1, i], s.dtype)),
    Ct(fn([o, 1], r.dtype), r)
  ]);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function N$(n, t) {
  let e = k(n, "a", "minimum"), s = k(t, "b", "minimum");
  [e, s] = re(e, s), e.dtype === "bool" && (e = et(e, "int32"), s = et(s, "int32")), bt(e.shape, s.shape);
  const r = { a: e, b: s };
  return E.runKernel(Ti, r);
}
const ea = L({ minimum_: N$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $$(n, t, e) {
  C(e === "reflect" || e === "symmetric", () => `Invalid mode. Mode must be either reflect or symmetric. Got ${e}.`);
  const s = k(n, "x", "mirrorPad");
  if (s.rank === 0)
    throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");
  C(t.length === s.rank, () => `Padding doesn't match input. Must be ${s.rank}. Got ${t.length}.`);
  const r = e === "reflect" ? 1 : 0;
  for (let a = 0; a < s.rank; a++)
    C(t[a].length === 2, () => "Invalid number of paddings. Must be length of 2 each."), C(t[a][0] >= 0 && t[a][0] <= s.shape[a] - r && t[a][1] >= 0 && t[a][1] <= s.shape[a] - r, () => `Padding in dimension ${a} cannot be greater than or equal to ${s.shape[a] - r} or less than 0 for input of shape ${s.shape}`);
  const o = { paddings: t, mode: e }, i = { x: s };
  return E.runKernel(Al, i, o);
}
const Lg = L({ mirrorPad_: $$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function R$(n, t) {
  let e = k(n, "a", "mod"), s = k(t, "b", "mod");
  [e, s] = re(e, s);
  const r = { a: e, b: s };
  return E.runKernel(Ni, r);
}
const Dg = L({ mod_: R$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function E$(n, t = null, e = !1) {
  n = k(n, "x", "moments");
  const s = vt(t, n.shape), r = ne(n, s, e);
  let o = r.shape;
  e || (o = de(r.shape, s));
  const i = Wt(it(et(n, "float32"), G(r, o))), a = ne(i, s, e);
  return { mean: r, variance: a };
}
const mc = L({ moments_: E$ });
function L$(n, t, e, s) {
  const r = k(t, "data", "multiRNNCell"), o = Ka(e, "c", "multiRNNCell"), i = Ka(s, "h", "multiRNNCell");
  let a = r;
  const l = [];
  for (let h = 0; h < n.length; h++) {
    const d = n[h](a, o[h], i[h]);
    l.push(d[0]), l.push(d[1]), a = d[1];
  }
  const c = [], u = [];
  for (let h = 0; h < l.length; h += 2)
    c.push(l[h]), u.push(l[h + 1]);
  return [c, u];
}
const Ew = L({ multiRNNCell_: L$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function D$(n, t, e, s = !1) {
  const r = k(n, "logits", "multinomial"), o = r.size, i = r.rank;
  if (o < 2)
    throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${o}.`);
  if (i > 2)
    throw new Error(`Rank of probabilities must be 1 or 2, but is ${i}`);
  e = e || Math.random();
  const l = { logits: i === 1 ? G(r, [1, -1]) : r }, c = { numSamples: t, seed: e, normalized: s }, u = E.runKernel(Gh, l, c);
  return i === 1 ? G(u, [u.size]) : u;
}
const Lw = L({ multinomial_: D$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function G$(n, t) {
  let e = k(n, "a", "notEqual", "string_or_numeric"), s = k(t, "b", "notEqual", "string_or_numeric");
  [e, s] = re(e, s), bt(e.shape, s.shape);
  const r = { a: e, b: s };
  return E.runKernel(Wl, r);
}
const eo = L({ notEqual_: G$ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function F$(n) {
  const e = { x: k(n, "x", "onesLike") };
  return E.runKernel(Vl, e);
}
const wn = L({ onesLike_: F$ });
function O$(n, t) {
  const e = k(n, "v1", "outerProduct"), s = k(t, "v2", "outerProduct");
  C(e.rank === 1 && s.rank === 1, () => `Error in outerProduct: inputs must be rank 1, but got ranks ${e.rank} and ${s.rank}.`);
  const r = G(e, [-1, 1]), o = G(s, [1, -1]);
  return Ct(r, o);
}
const Dw = L({ outerProduct_: O$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function A$(n, t, e = 0) {
  const s = k(n, "x", "pad");
  if (s.rank === 0)
    throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");
  const r = { paddings: t, constantValue: e }, o = { x: s };
  return E.runKernel(Xl, o, r);
}
const js = L({ pad_: A$ });
function z$(n, t, e = 0) {
  return C(t.length === 2, () => "Invalid number of paddings. Must be length of 2."), js(n, [t], e);
}
const Gw = L({ pad1d_: z$ });
function W$(n, t, e = 0) {
  return C(t.length === 2 && t[0].length === 2 && t[1].length === 2, () => "Invalid number of paddings. Must be length of 2 each."), js(n, t, e);
}
const Fw = L({ pad2d_: W$ });
function V$(n, t, e = 0) {
  return C(t.length === 3 && t[0].length === 2 && t[1].length === 2 && t[2].length === 2, () => "Invalid number of paddings. Must be length of 2 each."), js(n, t, e);
}
const Ow = L({ pad3d_: V$ });
function M$(n, t, e = 0) {
  return C(t.length === 4 && t[0].length === 2 && t[1].length === 2 && t[2].length === 2 && t[3].length === 2, () => "Invalid number of paddings. Must be length of 2 each."), js(n, t, e);
}
const Aw = L({ pad4d_: M$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function P$(n, t, e) {
  const s = k(n, "x", "spaceToBatchND");
  C(s.rank >= 1 + t.length, () => `input rank ${s.rank} should be > than [blockShape] ${t.length}`), C(e.length === t.length, () => `paddings.shape[0] ${e.length} must be equal to [blockShape] ${t.length}`), C(s.shape.reduce((i, a, l) => l > 0 && l <= t.length ? i && (a + e[l - 1][0] + e[l - 1][1]) % t[l - 1] === 0 : i, !0), () => `input spatial dimensions ${s.shape.slice(1)} with paddings ${e.toString()} must be divisible by blockShapes ${t.toString()}`);
  const r = { x: s }, o = { blockShape: t, paddings: e };
  return E.runKernel(Ql, r, o);
}
const gc = L({ spaceToBatchND_: P$ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function X$(n, t, e, s, r, o, i) {
  r == null && (r = [1, 1]), o == null && (o = 1), s === 0 && (s = "valid");
  const a = k(n, "x", "maxPool");
  let l = a, c = !1;
  a.rank === 3 && (c = !0, l = G(a, [1, a.shape[0], a.shape[1], a.shape[2]])), C(Ae(o, r), () => `Error in pool: Either strides or dilations must be 1. Got strides ${o} and dilations '${r}'`);
  const u = Yn(l.shape, t, o, r, s), h = [u.dilationHeight, u.dilationWidth];
  let d;
  s === "same" ? d = K$([u.filterHeight, u.filterWidth], h) : d = [[0, 0], [0, 0]];
  const p = h[0] === 1 && h[1] === 1, [f, m] = _$([u.inHeight, u.inWidth], h, d), g = p ? s : "valid", y = p ? l : gc(l, h, f), w = (e === "avg" ? () => lc(y, t, o, g, i) : () => fc(y, t, o, g, i))(), x = p ? w : cc(w, h, m);
  return c ? G(x, [x.shape[1], x.shape[2], x.shape[3]]) : x;
}
function _$(n, t, e) {
  const s = e.map((u) => u[0]), r = e.map((u) => u[1]), o = n.concat(s, r), i = t.map((u, h) => (u - o[h] % u) % u), a = r.map((u, h) => u + i[h]), l = t.map((u, h) => [s[h], a[h]]), c = t.map((u, h) => [0, i[h]]);
  return [l, c];
}
function K$(n, t) {
  const s = n.map((i, a) => i + (i - 1) * (t[a] - 1)).map((i) => i - 1), r = s.map((i) => Math.floor(i / 2)), o = s.map((i, a) => i - r[a]);
  return s.map((i, a) => [r[a], o[a]]);
}
const Gg = L({ pool_: X$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Z$(n, t) {
  const e = k(n, "x", "prelu"), s = k(t, "alpha", "prelu"), r = { x: e, alpha: s };
  return E.runKernel(_l, r);
}
const yc = L({ prelu_: Z$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function B$(n, t = null, e = !1) {
  let s = k(n, "x", "prod");
  s.dtype === "bool" && (s = et(s, "int32"));
  const r = { x: s }, o = { axis: t, keepDims: e };
  return E.runKernel(Kl, r, o);
}
const Fg = L({ prod_: B$ });
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function H$(n, t, e, s) {
  const r = n.map((u, h) => k(u, `tensors${h}`, "raggedGather", "int32")), o = k(t, "paramsDenseValues", "raggedGather"), i = k(e, "indices", "raggedGather", "int32"), a = {
    paramsNestedSplits: r,
    paramsDenseValues: o,
    indices: i
  }, l = { outputRaggedRank: s }, c = E.runKernel(zh, a, l);
  return {
    outputNestedSplits: c.slice(0, c.length - 1),
    outputDenseValues: c[c.length - 1]
  };
}
const zw = L({ raggedGather_: H$ });
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function U$(n, t, e, s, r) {
  const o = k(n, "shape", "raggedTensorToTensor", "int32"), i = k(t, "values", "raggedTensorToTensor"), a = k(e, "defaultValue", "raggedTensorToTensor", i.dtype), l = s.map((h, d) => k(h, `tensors${d}`, "raggedTensorToTensor", "int32")), c = {
    shape: o,
    values: i,
    defaultValue: a,
    rowPartitionTensors: l
  }, u = { rowPartitionTypes: r };
  return E.runKernel(Wh, c, u);
}
const Ww = L({ raggedTensorToTensor_: U$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Y$(n, t, e) {
  const s = P(n);
  let r = null;
  if (e == null || e === "float32")
    r = new Float32Array(s);
  else if (e === "int32")
    r = new Int32Array(s);
  else if (e === "bool")
    r = new Uint8Array(s);
  else
    throw new Error(`Unknown data type ${e}`);
  for (let o = 0; o < s; o++)
    r[o] = t();
  return E.makeTensor(r, n, e);
}
const Vw = L({ rand_: Y$ });
var Mw = { exports: {} };
(function(n) {
  (function(t, e, s) {
    function r(l) {
      var c = this, u = a();
      c.next = function() {
        var h = 2091639 * c.s0 + c.c * 23283064365386963e-26;
        return c.s0 = c.s1, c.s1 = c.s2, c.s2 = h - (c.c = h | 0);
      }, c.c = 1, c.s0 = u(" "), c.s1 = u(" "), c.s2 = u(" "), c.s0 -= u(l), c.s0 < 0 && (c.s0 += 1), c.s1 -= u(l), c.s1 < 0 && (c.s1 += 1), c.s2 -= u(l), c.s2 < 0 && (c.s2 += 1), u = null;
    }
    function o(l, c) {
      return c.c = l.c, c.s0 = l.s0, c.s1 = l.s1, c.s2 = l.s2, c;
    }
    function i(l, c) {
      var u = new r(l), h = c && c.state, d = u.next;
      return d.int32 = function() {
        return u.next() * 4294967296 | 0;
      }, d.double = function() {
        return d() + (d() * 2097152 | 0) * 11102230246251565e-32;
      }, d.quick = d, h && (typeof h == "object" && o(h, u), d.state = function() {
        return o(u, {});
      }), d;
    }
    function a() {
      var l = 4022871197, c = function(u) {
        u = String(u);
        for (var h = 0; h < u.length; h++) {
          l += u.charCodeAt(h);
          var d = 0.02519603282416938 * l;
          l = d >>> 0, d -= l, d *= l, l = d >>> 0, d -= l, l += d * 4294967296;
        }
        return (l >>> 0) * 23283064365386963e-26;
      };
      return c;
    }
    e && e.exports ? e.exports = i : s && s.amd ? s(function() {
      return i;
    }) : this.alea = i;
  })(
    lo,
    n,
    !1
  );
})(Mw);
var Pw = { exports: {} };
(function(n) {
  (function(t, e, s) {
    function r(a) {
      var l = this, c = "";
      l.x = 0, l.y = 0, l.z = 0, l.w = 0, l.next = function() {
        var h = l.x ^ l.x << 11;
        return l.x = l.y, l.y = l.z, l.z = l.w, l.w ^= l.w >>> 19 ^ h ^ h >>> 8;
      }, a === (a | 0) ? l.x = a : c += a;
      for (var u = 0; u < c.length + 64; u++)
        l.x ^= c.charCodeAt(u) | 0, l.next();
    }
    function o(a, l) {
      return l.x = a.x, l.y = a.y, l.z = a.z, l.w = a.w, l;
    }
    function i(a, l) {
      var c = new r(a), u = l && l.state, h = function() {
        return (c.next() >>> 0) / 4294967296;
      };
      return h.double = function() {
        do
          var d = c.next() >>> 11, p = (c.next() >>> 0) / 4294967296, f = (d + p) / (1 << 21);
        while (f === 0);
        return f;
      }, h.int32 = c.next, h.quick = h, u && (typeof u == "object" && o(u, c), h.state = function() {
        return o(c, {});
      }), h;
    }
    e && e.exports ? e.exports = i : s && s.amd ? s(function() {
      return i;
    }) : this.xor128 = i;
  })(
    lo,
    n,
    !1
  );
})(Pw);
var Xw = { exports: {} };
(function(n) {
  (function(t, e, s) {
    function r(a) {
      var l = this, c = "";
      l.next = function() {
        var h = l.x ^ l.x >>> 2;
        return l.x = l.y, l.y = l.z, l.z = l.w, l.w = l.v, (l.d = l.d + 362437 | 0) + (l.v = l.v ^ l.v << 4 ^ (h ^ h << 1)) | 0;
      }, l.x = 0, l.y = 0, l.z = 0, l.w = 0, l.v = 0, a === (a | 0) ? l.x = a : c += a;
      for (var u = 0; u < c.length + 64; u++)
        l.x ^= c.charCodeAt(u) | 0, u == c.length && (l.d = l.x << 10 ^ l.x >>> 4), l.next();
    }
    function o(a, l) {
      return l.x = a.x, l.y = a.y, l.z = a.z, l.w = a.w, l.v = a.v, l.d = a.d, l;
    }
    function i(a, l) {
      var c = new r(a), u = l && l.state, h = function() {
        return (c.next() >>> 0) / 4294967296;
      };
      return h.double = function() {
        do
          var d = c.next() >>> 11, p = (c.next() >>> 0) / 4294967296, f = (d + p) / (1 << 21);
        while (f === 0);
        return f;
      }, h.int32 = c.next, h.quick = h, u && (typeof u == "object" && o(u, c), h.state = function() {
        return o(c, {});
      }), h;
    }
    e && e.exports ? e.exports = i : s && s.amd ? s(function() {
      return i;
    }) : this.xorwow = i;
  })(
    lo,
    n,
    !1
  );
})(Xw);
var _w = { exports: {} };
(function(n) {
  (function(t, e, s) {
    function r(a) {
      var l = this;
      l.next = function() {
        var u = l.x, h = l.i, d, p;
        return d = u[h], d ^= d >>> 7, p = d ^ d << 24, d = u[h + 1 & 7], p ^= d ^ d >>> 10, d = u[h + 3 & 7], p ^= d ^ d >>> 3, d = u[h + 4 & 7], p ^= d ^ d << 7, d = u[h + 7 & 7], d = d ^ d << 13, p ^= d ^ d << 9, u[h] = p, l.i = h + 1 & 7, p;
      };
      function c(u, h) {
        var d, p = [];
        if (h === (h | 0))
          p[0] = h;
        else
          for (h = "" + h, d = 0; d < h.length; ++d)
            p[d & 7] = p[d & 7] << 15 ^ h.charCodeAt(d) + p[d + 1 & 7] << 13;
        for (; p.length < 8; )
          p.push(0);
        for (d = 0; d < 8 && p[d] === 0; ++d)
          ;
        for (d == 8 ? p[7] = -1 : p[d], u.x = p, u.i = 0, d = 256; d > 0; --d)
          u.next();
      }
      c(l, a);
    }
    function o(a, l) {
      return l.x = a.x.slice(), l.i = a.i, l;
    }
    function i(a, l) {
      a == null && (a = +new Date());
      var c = new r(a), u = l && l.state, h = function() {
        return (c.next() >>> 0) / 4294967296;
      };
      return h.double = function() {
        do
          var d = c.next() >>> 11, p = (c.next() >>> 0) / 4294967296, f = (d + p) / (1 << 21);
        while (f === 0);
        return f;
      }, h.int32 = c.next, h.quick = h, u && (u.x && o(u, c), h.state = function() {
        return o(c, {});
      }), h;
    }
    e && e.exports ? e.exports = i : s && s.amd ? s(function() {
      return i;
    }) : this.xorshift7 = i;
  })(
    lo,
    n,
    !1
  );
})(_w);
var Kw = { exports: {} };
(function(n) {
  (function(t, e, s) {
    function r(a) {
      var l = this;
      l.next = function() {
        var u = l.w, h = l.X, d = l.i, p, f;
        return l.w = u = u + 1640531527 | 0, f = h[d + 34 & 127], p = h[d = d + 1 & 127], f ^= f << 13, p ^= p << 17, f ^= f >>> 15, p ^= p >>> 12, f = h[d] = f ^ p, l.i = d, f + (u ^ u >>> 16) | 0;
      };
      function c(u, h) {
        var d, p, f, m, g, y = [], b = 128;
        for (h === (h | 0) ? (p = h, h = null) : (h = h + "\0", p = 0, b = Math.max(b, h.length)), f = 0, m = -32; m < b; ++m)
          h && (p ^= h.charCodeAt((m + 32) % h.length)), m === 0 && (g = p), p ^= p << 10, p ^= p >>> 15, p ^= p << 4, p ^= p >>> 13, m >= 0 && (g = g + 1640531527 | 0, d = y[m & 127] ^= p + g, f = d == 0 ? f + 1 : 0);
        for (f >= 128 && (y[(h && h.length || 0) & 127] = -1), f = 127, m = 4 * 128; m > 0; --m)
          p = y[f + 34 & 127], d = y[f = f + 1 & 127], p ^= p << 13, d ^= d << 17, p ^= p >>> 15, d ^= d >>> 12, y[f] = p ^ d;
        u.w = g, u.X = y, u.i = f;
      }
      c(l, a);
    }
    function o(a, l) {
      return l.i = a.i, l.w = a.w, l.X = a.X.slice(), l;
    }
    function i(a, l) {
      a == null && (a = +new Date());
      var c = new r(a), u = l && l.state, h = function() {
        return (c.next() >>> 0) / 4294967296;
      };
      return h.double = function() {
        do
          var d = c.next() >>> 11, p = (c.next() >>> 0) / 4294967296, f = (d + p) / (1 << 21);
        while (f === 0);
        return f;
      }, h.int32 = c.next, h.quick = h, u && (u.X && o(u, c), h.state = function() {
        return o(c, {});
      }), h;
    }
    e && e.exports ? e.exports = i : s && s.amd ? s(function() {
      return i;
    }) : this.xor4096 = i;
  })(
    lo,
    n,
    !1
  );
})(Kw);
var Zw = { exports: {} };
(function(n) {
  (function(t, e, s) {
    function r(a) {
      var l = this, c = "";
      l.next = function() {
        var h = l.b, d = l.c, p = l.d, f = l.a;
        return h = h << 25 ^ h >>> 7 ^ d, d = d - p | 0, p = p << 24 ^ p >>> 8 ^ f, f = f - h | 0, l.b = h = h << 20 ^ h >>> 12 ^ d, l.c = d = d - p | 0, l.d = p << 16 ^ d >>> 16 ^ f, l.a = f - h | 0;
      }, l.a = 0, l.b = 0, l.c = -1640531527, l.d = 1367130551, a === Math.floor(a) ? (l.a = a / 4294967296 | 0, l.b = a | 0) : c += a;
      for (var u = 0; u < c.length + 20; u++)
        l.b ^= c.charCodeAt(u) | 0, l.next();
    }
    function o(a, l) {
      return l.a = a.a, l.b = a.b, l.c = a.c, l.d = a.d, l;
    }
    function i(a, l) {
      var c = new r(a), u = l && l.state, h = function() {
        return (c.next() >>> 0) / 4294967296;
      };
      return h.double = function() {
        do
          var d = c.next() >>> 11, p = (c.next() >>> 0) / 4294967296, f = (d + p) / (1 << 21);
        while (f === 0);
        return f;
      }, h.int32 = c.next, h.quick = h, u && (typeof u == "object" && o(u, c), h.state = function() {
        return o(c, {});
      }), h;
    }
    e && e.exports ? e.exports = i : s && s.amd ? s(function() {
      return i;
    }) : this.tychei = i;
  })(
    lo,
    n,
    !1
  );
})(Zw);
var Bw = { exports: {} };
const j$ = {}, J$ = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: j$
}, Symbol.toStringTag, { value: "Module" })), Q$ = /* @__PURE__ */ XC(J$);
(function(n) {
  (function(t, e, s) {
    var r = 256, o = 6, i = 52, a = "random", l = s.pow(r, o), c = s.pow(2, i), u = c * 2, h = r - 1, d;
    function p(x, S, v) {
      var T = [];
      S = S == !0 ? { entropy: !0 } : S || {};
      var N = y(g(
        S.entropy ? [x, w(e)] : x == null ? b() : x,
        3
      ), T), $ = new f(T), R = function() {
        for (var F = $.g(o), z = l, W = 0; F < c; )
          F = (F + W) * r, z *= r, W = $.g(1);
        for (; F >= u; )
          F /= 2, z /= 2, W >>>= 1;
        return (F + W) / z;
      };
      return R.int32 = function() {
        return $.g(4) | 0;
      }, R.quick = function() {
        return $.g(4) / 4294967296;
      }, R.double = R, y(w($.S), e), (S.pass || v || function(F, z, W, M) {
        return M && (M.S && m(M, $), F.state = function() {
          return m($, {});
        }), W ? (s[a] = F, z) : F;
      })(
        R,
        N,
        "global" in S ? S.global : this == s,
        S.state
      );
    }
    function f(x) {
      var S, v = x.length, T = this, N = 0, $ = T.i = T.j = 0, R = T.S = [];
      for (v || (x = [v++]); N < r; )
        R[N] = N++;
      for (N = 0; N < r; N++)
        R[N] = R[$ = h & $ + x[N % v] + (S = R[N])], R[$] = S;
      (T.g = function(F) {
        for (var z, W = 0, M = T.i, X = T.j, _ = T.S; F--; )
          z = _[M = h & M + 1], W = W * r + _[h & (_[M] = _[X = h & X + z]) + (_[X] = z)];
        return T.i = M, T.j = X, W;
      })(r);
    }
    function m(x, S) {
      return S.i = x.i, S.j = x.j, S.S = x.S.slice(), S;
    }
    function g(x, S) {
      var v = [], T = typeof x, N;
      if (S && T == "object")
        for (N in x)
          try {
            v.push(g(x[N], S - 1));
          } catch {
          }
      return v.length ? v : T == "string" ? x : x + "\0";
    }
    function y(x, S) {
      for (var v = x + "", T, N = 0; N < v.length; )
        S[h & N] = h & (T ^= S[h & N] * 19) + v.charCodeAt(N++);
      return w(S);
    }
    function b() {
      try {
        var x;
        return d && (x = d.randomBytes) ? x = x(r) : (x = new Uint8Array(r), (t.crypto || t.msCrypto).getRandomValues(x)), w(x);
      } catch {
        var S = t.navigator, v = S && S.plugins;
        return [+new Date(), t, v, t.screen, w(e)];
      }
    }
    function w(x) {
      return String.fromCharCode.apply(0, x);
    }
    if (y(s.random(), e), n.exports) {
      n.exports = p;
      try {
        d = Q$;
      } catch {
      }
    } else
      s["seed" + a] = p;
  })(
    typeof self < "u" ? self : lo,
    [],
    Math
  );
})(Bw);
var q$ = Mw.exports, tR = Pw.exports, eR = Xw.exports, nR = _w.exports, sR = Kw.exports, rR = Zw.exports, go = Bw.exports;
go.alea = q$;
go.xor128 = tR;
go.xorwow = eR;
go.xorshift7 = nR;
go.xor4096 = sR;
go.tychei = rR;
var na = go;
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Og {
  constructor(t, e, s, r, o) {
    this.mean = t, this.stdDev = e, this.dtype = s, this.nextVal = NaN, this.truncated = r, this.truncated && (this.upper = this.mean + this.stdDev * 2, this.lower = this.mean - this.stdDev * 2);
    const i = o || Math.random();
    this.random = na.alea(i.toString());
  }
  nextValue() {
    if (!isNaN(this.nextVal)) {
      const r = this.nextVal;
      return this.nextVal = NaN, r;
    }
    let t, e, s = !1;
    for (; !s; ) {
      let r, o, i;
      do
        r = 2 * this.random() - 1, o = 2 * this.random() - 1, i = r * r + o * o;
      while (i >= 1 || i === 0);
      const a = Math.sqrt(-2 * Math.log(i) / i);
      t = this.mean + this.stdDev * r * a, e = this.mean + this.stdDev * o * a, (!this.truncated || this.isValidTruncated(t)) && (s = !0);
    }
    return (!this.truncated || this.isValidTruncated(e)) && (this.nextVal = this.convertValue(e)), this.convertValue(t);
  }
  convertValue(t) {
    return this.dtype == null || this.dtype === "float32" ? t : Math.round(t);
  }
  isValidTruncated(t) {
    return t <= this.upper && t >= this.lower;
  }
}
class oR {
  constructor(t, e, s, r) {
    this.alpha = t, this.beta = 1 / e, this.dtype = s;
    const o = r || Math.random();
    this.randu = na.alea(o.toString()), this.randn = new Og(0, 1, s, !1, this.randu()), t < 1 ? this.d = t + 2 / 3 : this.d = t - 1 / 3, this.c = 1 / Math.sqrt(9 * this.d);
  }
  nextValue() {
    let t, e, s, r, o, i;
    for (; ; ) {
      do
        r = this.randn.nextValue(), i = 1 + this.c * r;
      while (i <= 0);
      if (i *= i * i, t = r * r, e = 1 - 0.331 * t * t, s = 0.5 * t + this.d * (1 - i + Math.log(i)), o = this.randu(), o < e || Math.log(o) < s)
        break;
    }
    return i = 1 / this.beta * this.d * i, this.alpha < 1 && (i *= Math.pow(this.randu(), 1 / this.alpha)), this.convertValue(i);
  }
  convertValue(t) {
    return this.dtype === "float32" ? t : Math.round(t);
  }
}
class iR {
  constructor(t = 0, e = 1, s, r) {
    if (this.canReturnFloat = () => this.dtype == null || this.dtype === "float32", this.min = t, this.range = e - t, this.dtype = s, r == null && (r = Math.random()), typeof r == "number" && (r = r.toString()), !this.canReturnFloat() && this.range <= 1)
      throw new Error(`The difference between ${t} - ${e} <= 1 and dtype is not float`);
    this.random = na.alea(r);
  }
  convertValue(t) {
    return this.canReturnFloat() ? t : Math.round(t);
  }
  nextValue() {
    return this.convertValue(this.min + this.range * this.random());
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function aR(n, t, e = 1, s = "float32", r) {
  if (e == null && (e = 1), s == null && (s = "float32"), s !== "float32" && s !== "int32")
    throw new Error(`Unsupported data type ${s}`);
  const o = new oR(t, e, s, r), i = gt(n, s);
  for (let a = 0; a < i.values.length; a++)
    i.values[a] = o.nextValue();
  return i.toTensor();
}
const Hw = L({ randomGamma_: aR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function lR(n, t = 0, e = 1, s, r) {
  if (s != null && s === "bool")
    throw new Error(`Unsupported data type ${s}`);
  const o = new Og(t, e, s, !1, r), i = gt(n, s);
  for (let a = 0; a < i.values.length; a++)
    i.values[a] = o.nextValue();
  return i.toTensor();
}
const kd = L({ randomNormal_: lR });
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function cR(n, t, e) {
  if (t != null && t === "bool")
    throw new Error(`Unsupported data type ${t}`);
  return kd(n, 0, 1, t, e);
}
const Uw = L({ randomStandardNormal_: cR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function uR(n, t = 0, e = 1, s = "float32", r) {
  const o = gt(n, s), i = new iR(t, e, null, r);
  for (let a = 0; a < o.values.length; a++)
    o.values[a] = i.nextValue();
  return o.toTensor();
}
const sa = L({ randomUniform_: uR });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Mo(n, t, e = 1, s = "float32") {
  if (e === 0)
    throw new Error("Cannot have a step of zero");
  const r = { start: n, stop: t, step: e, dtype: s };
  return E.runKernel(Vh, {}, r);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function hR(n) {
  const e = { x: k(n, "x", "reciprocal") };
  return E.runKernel(Ei, e);
}
const Ag = L({ reciprocal_: hR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function dR(n) {
  const e = { x: k(n, "x", "relu") };
  return E.runKernel(Li, e);
}
const us = L({ relu_: dR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function pR(n) {
  const e = { x: k(n, "x", "relu6") };
  return E.runKernel(Di, e);
}
const Td = L({ relu6_: pR });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fR(n, t) {
  const s = { x: k(n, "x", "reverse") }, r = { dims: t };
  return E.runKernel(Ul, s, r);
}
const Dn = L({ reverse_: fR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function mR(n) {
  const t = k(n, "x", "reverse");
  return C(t.rank === 1, () => `Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`), Dn(t, 0);
}
const Yw = L({ reverse1d_: mR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function gR(n, t) {
  const e = k(n, "x", "reverse");
  return C(e.rank === 2, () => `Error in reverse2D: x must be rank 2 but got rank ${e.rank}.`), Dn(e, t);
}
const jw = L({ reverse2d_: gR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function yR(n, t) {
  const e = k(n, "x", "reverse");
  return C(e.rank === 3, () => `Error in reverse3D: x must be rank 3 but got rank ${e.rank}.`), Dn(e, t);
}
const Jw = L({ reverse3d_: yR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function bR(n, t) {
  const e = k(n, "x", "reverse");
  return C(e.rank === 4, () => `Error in reverse4D: x must be rank 4 but got rank ${e.rank}.`), Dn(e, t);
}
const Qw = L({ reverse4d_: bR });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function xR(n) {
  const e = { x: k(n, "x", "round") };
  return E.runKernel(Gi, e);
}
const Nd = L({ round_: xR });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function wR(n) {
  const e = { x: k(n, "x", "rsqrt", "float32") };
  return E.runKernel(Fi, e);
}
const $d = L({ rsqrt_: wR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function IR(n) {
  const e = { x: k(n, "x", "selu") };
  return E.runKernel(Oi, e);
}
const Rd = L({ selu_: IR });
function SR(n, t, e, s, r, o = [1, 1], i = "NHWC") {
  const a = k(n, "x", "separableConv2d"), l = k(t, "depthwiseFilter", "separableConv2d"), c = k(e, "pointwiseFilter", "separableConv2d");
  let u = a, h = !1;
  if (a.rank === 3 && (h = !0, u = G(a, [1, a.shape[0], a.shape[1], a.shape[2]])), i === "NCHW")
    throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");
  C(u.rank === 4, () => `Error in separableConv2d: input must be rank 4, but got rank ${u.rank}.`), C(l.rank === 4, () => `Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`), C(c.rank === 4, () => `Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`), C(c.shape[0] === 1, () => `Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${c.shape[0]}.`), C(c.shape[1] === 1, () => `Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${c.shape[1]}.`);
  const d = l.shape[2], p = l.shape[3];
  C(c.shape[2] === d * p, () => `Error in separableConv2d: the third dimension of pointwise filter must be ${d * p}, but got ${c.shape[2]}.`);
  const f = ji(u, l, s, r, i, o), g = Xs(f, c, 1, "valid", i);
  return h ? G(g, [g.shape[1], g.shape[2], g.shape[3]]) : g;
}
const Ed = L({ separableConv2d_: SR });
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
async function vR(n, t) {
  const e = k(n, "x", "setdiff1d"), s = k(t, "y", "setdiff1d");
  C(e.dtype === s.dtype, () => `x and y should have the same dtype, but got x (${e.dtype}) and y (${s.dtype}).`), C(e.rank === 1, () => `x should be 1D tensor, but got x (${e.shape}).`), C(s.rank === 1, () => `y should be 1D tensor, but got y (${s.shape}).`);
  const r = await e.data(), o = await s.data(), i = new Set(o);
  let a = 0;
  for (let u = 0; u < r.length; u++)
    i.has(r[u]) || a++;
  const l = new ue([a], e.dtype), c = new ue([a], "int32");
  for (let u = 0, h = 0; u < r.length; u++)
    i.has(r[u]) || (l.values[h] = r[u], c.values[h] = u, h++);
  return [l.toTensor(), c.toTensor()];
}
const qw = vR;
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function CR(n) {
  const e = { x: k(n, "x", "sign") };
  return E.runKernel(Wi, e);
}
const zg = L({ sign_: CR });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function kR(n) {
  const e = { x: k(n, "x", "sin", "float32") };
  return E.runKernel(Ai, e);
}
const Ld = L({ sin_: kR });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function TR(n) {
  const e = { x: k(n, "x", "sinh") };
  return E.runKernel(zi, e);
}
const Dd = L({ sinh_: TR });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function NR(n, t, e) {
  const s = k(n, "x", "slice1d");
  return C(s.rank === 1, () => `slice1d expects a rank-1 tensor, but got a rank-${s.rank} tensor`), $t(s, [t], [e]);
}
const bc = L({ slice1d_: NR });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $R(n, t, e) {
  const s = k(n, "x", "slice2d");
  return C(s.rank === 2, () => `slice2d expects a rank-2 tensor, but got a rank-${s.rank} tensor`), $t(s, t, e);
}
const Gd = L({ slice2d_: $R });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function RR(n, t, e) {
  const s = k(n, "x", "slice3d");
  return C(s.rank === 3, () => `slice3d expects a rank-3 tensor, but got a rank-${s.rank} tensor`), $t(s, t, e);
}
const xc = L({ slice3d_: RR });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ER(n, t, e) {
  const s = k(n, "x", "slice4d");
  return C(s.rank === 4, () => `slice4d expects a rank-4 tensor, but got a rank-${s.rank} tensor`), $t(s, t, e);
}
const Po = L({ slice4d_: ER });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function LR(n, t = -1) {
  const e = k(n, "logits", "softmax", "float32");
  if (t === -1 && (t = e.rank - 1), t !== e.rank - 1)
    throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${e.rank} and dim was ${t}`);
  const s = { logits: e }, r = { dim: t };
  return E.runKernel(tc, s, r);
}
const wc = L({ softmax_: LR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function DR(n) {
  C(n.dtype === "complex64", () => `The dtype for tf.spectral.fft() must be complex64 but got ${n.dtype}.`);
  const t = { input: n };
  return E.runKernel(Sh, t);
}
const Ic = L({ fft_: DR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function GR(n) {
  C(n.dtype === "complex64", () => `The dtype for tf.spectral.ifft() must be complex64 but got ${n.dtype}.`);
  const t = { input: n };
  return E.runKernel(Th, t);
}
const Xo = L({ ifft_: GR });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function FR(n) {
  const t = n.shape[n.shape.length - 1], e = n.size / t;
  let s;
  if (t <= 2) {
    const r = G(n, [e, t]);
    s = Xo(r);
  } else {
    const r = [e, 2 * (t - 1)], o = G(Vo(n), [e, t]), i = G(ic(n), [e, t]), a = Dn($t(o, [0, 1], [e, t - 2]), 1), l = D(Dn($t(i, [0, 1], [e, t - 2]), 1), ft(-1)), c = he([o, a], 1), u = he([i, l], 1), h = G(Ms(c, u), [r[0], r[1]]);
    s = Xo(h);
  }
  if (s = Vo(s), n.rank === 3 && n.shape[0] !== 0) {
    const r = s, o = n.shape[0];
    s = G(s, [o, s.shape[0] / o, s.shape[1]]), r.dispose();
  }
  return s;
}
const Fd = L({ irfft_: FR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function OR(n, t, e = 0) {
  const r = { x: k(n, "x", "split") }, o = { numOrSizeSplits: t, axis: e };
  return E.runKernel(ql, r, o);
}
const tn = L({ split_: OR });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function AR(n, t) {
  C(n.dtype === "float32", () => `The dtype for rfft() must be real value but got ${n.dtype}`);
  let e = n.shape[n.shape.length - 1];
  const s = n.size / e;
  let r;
  if (t != null && t < e) {
    const f = n.shape.map((g) => 0), m = n.shape.map((g) => g);
    m[n.shape.length - 1] = t, r = $t(n, f, m), e = t;
  } else if (t != null && t > e) {
    const f = n.shape.map((m) => m);
    f[n.shape.length - 1] = t - e, r = he([n, ge(f)], n.shape.length - 1), e = t;
  } else
    r = n;
  const o = Rt(r), i = G(Ms(r, o), [s, e]), a = Ic(i), l = Math.floor(e / 2) + 1, c = Vo(a), u = ic(a), h = tn(c, [l, e - l], c.shape.length - 1), d = tn(u, [l, e - l], u.shape.length - 1), p = r.shape.slice();
  return p[r.shape.length - 1] = l, G(Ms(h[0], d[0]), p);
}
const Sc = L({ rfft_: AR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function zR(n, t) {
  let e = k(n, "a", "squaredDifference"), s = k(t, "b", "squaredDifference");
  [e, s] = re(e, s), bt(e.shape, s.shape);
  const r = { a: e, b: s }, o = {};
  return E.runKernel(Xi, r, o);
}
const Od = L({ squaredDifference_: zR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function WR(n, t) {
  const e = k(n, "x", "squeeze", "string_or_numeric");
  return G(e, Bs(e.shape, t).newShape);
}
const $r = L({ squeeze_: WR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function VR(n, t = 0) {
  const e = Ka(n, "tensors", "stack", "string_or_numeric");
  C(e.length >= 1, () => "Pass at least one tensor to tf.stack"), e.length > 0 && C(t <= e[0].rank, () => "Axis must be <= rank of the tensor");
  const s = e, r = { axis: t };
  return E.runKernel(Pl, s, r);
}
const nn = L({ stack_: VR });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function MR(n, t = 0) {
  const s = { x: k(n, "x", "step") }, r = { alpha: t };
  return E.runKernel(Hi, s, r);
}
const yo = L({ step_: MR });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function PR(n, t, e, s, r = 0, o = 0, i = 0, a = 0, l = 0) {
  const u = { x: k(n, "x", "stridedSlice", "string_or_numeric") }, h = {
    begin: t,
    end: e,
    strides: s,
    beginMask: r,
    endMask: o,
    ellipsisMask: i,
    newAxisMask: a,
    shrinkAxisMask: l
  };
  return E.runKernel(Jh, u, h);
}
const Wg = L({ stridedSlice_: PR });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function XR(n) {
  const e = { x: k(n, "x", "tan", "float32") };
  return E.runKernel(Ki, e);
}
const Vg = L({ tan_: XR });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ve(n, t) {
  co(n);
  const e = vs(n, t);
  if (e.length !== 1)
    throw new Error("tensor1d() requires values to be a flat/TypedArray");
  return vr(n, null, e, t);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function hr(n, t, e) {
  if (co(n), t != null && t.length !== 2)
    throw new Error("tensor2d() requires shape to have two numbers");
  const s = vs(n, e);
  if (s.length !== 2 && s.length !== 1)
    throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");
  if (s.length === 1 && t == null)
    throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");
  return vr(n, t, s, e);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function tI(n, t, e) {
  if (co(n), t != null && t.length !== 4)
    throw new Error("tensor4d() requires shape to have four numbers");
  const s = vs(n, e);
  if (s.length !== 4 && s.length !== 1)
    throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");
  if (s.length === 1 && t == null)
    throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");
  return vr(n, t, s, e);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function eI(n, t, e) {
  if (co(n), t != null && t.length !== 5)
    throw new Error("tensor5d() requires shape to have five numbers");
  const s = vs(n, e);
  if (s.length !== 5 && s.length !== 1)
    throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");
  if (s.length === 1 && t == null)
    throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");
  return vr(n, t, s, e);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function nI(n, t, e) {
  if (co(n), t != null && t.length !== 6)
    throw new Error("tensor6d() requires shape to have six numbers");
  const s = vs(n, e);
  if (s.length !== 6 && s.length !== 1)
    throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");
  if (s.length === 1 && t == null)
    throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");
  return t = t || s, vr(n, t, s, e);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _R(n, t = 1, e = !0) {
  const s = k(n, "x", "topk");
  if (s.rank === 0)
    throw new Error("topk() expects the input to be of rank 1 or higher");
  const r = s.shape[s.shape.length - 1];
  if (t < 0)
    throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);
  if (t > r)
    throw new Error(`'k' passed to topk() must be <= the last dimension (${r}) but got ${t}`);
  const o = { x: s }, i = { k: t, sorted: e }, [a, l] = E.runKernel(ed, o, i);
  return { values: a, indices: l };
}
const Mg = L({ topk_: _R });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function KR(n, t = 0, e = 1, s, r) {
  if (s != null && s === "bool")
    throw new Error("Unsupported data type $ { dtype }");
  const o = new Og(t, e, s, !0, r), i = gt(n, s);
  for (let a = 0; a < i.values.length; a++)
    i.values[a] = o.nextValue();
  return i.toTensor();
}
const Ad = L({ truncatedNormal_: KR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ZR(n, t = 0) {
  const e = k(n, "x", "unique", "string_or_numeric");
  C(e.rank > 0, () => "The input tensor must be at least 1D");
  const s = { x: e }, r = { axis: t }, [o, i] = E.runKernel(sd, s, r);
  return { values: o, indices: i };
}
const Pg = L({ unique_: ZR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function BR(n, t, e) {
  const s = k(n, "x", "unsortedSegmentSum"), r = k(t, "segmentIds", "unsortedSegmentSum", "int32");
  C(Yr(e), () => "numSegments must be of dtype int");
  const o = { x: s, segmentIds: r }, i = { numSegments: e };
  return E.runKernel(nc, o, i);
}
const zd = L({ unsortedSegmentSum_: BR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function HR(n, t = 0) {
  const e = k(n, "x", "unstack", "string_or_numeric");
  C(t >= -e.shape.length && t < e.shape.length, () => `Axis = ${t} is not in [-${e.shape.length}, ${e.shape.length})`);
  const s = { value: e }, r = { axis: t };
  return E.runKernel(ec, s, r);
}
const Un = L({ unstack_: HR });
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sI(n, t) {
  return Cd(n, t, "right");
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Xg(n, t = !0, e, s) {
  return E.makeVariable(n, t, e, s);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Wd(n, t) {
  const e = [];
  for (let o = 0; o < t.length; o++)
    t[o] && e.push(o);
  const s = gt(n, "int32"), r = gt([e.length, n.length], "int32");
  for (let o = 0; o < e.length; o++) {
    const i = s.indexToLoc(e[o]), a = o * n.length;
    r.values.set(i, a);
  }
  return r.toTensor();
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
async function UR(n) {
  const t = k(n, "condition", "whereAsync", "bool"), e = await t.data(), s = Wd(t.shape, e);
  return n !== t && t.dispose(), s;
}
const _g = UR;
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
async function YR(n, t, e) {
  const s = k(n, "tensor", "boolMask"), r = k(t, "mask", "boolMask", "bool"), o = e == null ? 0 : e, i = r.rank, a = s.shape;
  C(i > 0, () => "mask cannot be scalar"), Oe(a.slice(o, o + i), r.shape, "mask's shape must match the first K dimensions of tensor's shape,");
  let l = 1;
  for (let m = o; m < o + i; m++)
    l *= a[m];
  const c = a.slice(0, o).concat([l], a.slice(o + i)), u = G(s, c), h = G(r, [-1]), d = await _g(h), p = $r(d, [1]), f = ta(u, p, o);
  return n !== s && s.dispose(), t !== r && r.dispose(), p.dispose(), u.dispose(), h.dispose(), d.dispose(), f;
}
const rI = YR;
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function jR(n, t, e, s, r = !0) {
  const o = k(n, "v", "movingAverage"), i = k(t, "x", "movingAverage"), a = k(e, "decay", "movingAverage");
  z1(o, i), C(Nt(o.shape, i.shape), () => "Shape mismatch in v and x");
  const l = ft(1), c = it(l, a);
  let u = D(it(i, o), c);
  if (r) {
    C(s != null, () => "When using zeroDebias: true, step is required.");
    const h = k(s, "step", "movingAverage");
    u = ht(u, it(l, _s(a, h)));
  }
  return U(o, u);
}
const oI = L({ movingAverage_: jR });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function JR(n, t, e) {
  const s = k(n, "indices", "scatterND", "int32"), r = k(t, "updates", "scatterND");
  Xm(r, s, e);
  const o = { indices: s, updates: r }, i = { shape: e };
  return E.runKernel(_h, o, i);
}
const iI = L({ scatterND_: JR });
function QR(n, t, e, s) {
  if (n.dtype !== "int32")
    throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${n.dtype}.`);
  if (n.rank > 2)
    throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${n.shape}.`);
  const r = n.rank > 0 ? n.shape[0] : 1, o = n.rank > 1 ? n.shape[1] : 1;
  if (e.length !== o)
    throw new Error(`outputShape has incorrect number of elements:, ${e.length}, should be: ${o}.`);
  const i = t.size;
  if (!(t.rank === 0 || t.rank === 1 && i === r))
    throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${r}]`);
  if (t.dtype !== s.dtype)
    throw new Error("sparseValues.dtype must match defaultValues.dtype");
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function qR(n, t, e, s = 0) {
  const r = k(n, "sparseIndices", "sparseToDense", "int32"), o = k(t, "sparseValues", "sparseToDense", "string_or_numeric"), i = k(s, "defaultValue", "sparseToDense", o.dtype);
  QR(r, o, e, i);
  const a = {
    sparseIndices: r,
    sparseValues: o,
    defaultValue: i
  }, l = { outputShape: e };
  return E.runKernel(Yh, a, l);
}
const aI = L({ sparseToDense_: qR });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function tE(n, t) {
  const e = k(t, "indices", "gatherND", "int32"), r = { params: k(n, "x", "gatherND", "string_or_numeric"), indices: e };
  return E.runKernel(kh, r);
}
const lI = L({ gatherND_: tE });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function eE(n, t) {
  if (t == null)
    return n.shape.slice();
  if (Nt(n.shape, t))
    return t;
  if (n.shape.length === t.length) {
    const e = [];
    for (let s = 0; s < n.shape.length; s++)
      t[s] == null && n.shape[s] != null ? e.push(n.shape[s]) : e.push(t[s]);
    return e;
  }
  return t;
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function nE(n, t, e, s) {
  const r = k(n, "x", "dropout");
  if (C(r.dtype === "float32", () => `x has to be a floating point tensor since it's going to be scaled, but got a ${r.dtype} tensor instead.`), C(t >= 0 && t < 1, () => `rate must be a float in the range [0, 1), but got ${t}.`), t === 0)
    return n instanceof Lt ? r.clone() : r;
  const o = eE(r, e), i = 1 - t, a = ht(qi(U(sa(o, 0, 1, "float32", s), i)), i);
  return D(r, a);
}
const Kg = L({ dropout_: nE });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Zg(n) {
  return Math.floor(Math.pow(2, Math.ceil(Math.log(n) / Math.log(2))));
}
function Vd(n, t, e) {
  const s = 1 - n % 2, r = new Float32Array(n);
  for (let o = 0; o < n; ++o) {
    const i = 2 * Math.PI * o / (n + s - 1);
    r[o] = t - e * Math.cos(i);
  }
  return Ve(r, "float32");
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
async function sE(n, t, e = 1) {
  const s = k(n, "predictions", "inTopK"), r = k(t, "targets", "inTopK");
  C(s.rank > 1, () => `inTopK() expects the predictions to be of rank 2 or higher, but got ${s.rank}`), C(s.rank - 1 === r.rank, () => `predictions rank should be 1 larger than targets rank, but got predictions rank ${s.rank} and targets rank ${r.rank}`), Oe(s.shape.slice(0, s.shape.length - 1), r.shape, "predictions's shape should be align with the targets' shape, except the last dimension.");
  const o = s.shape[s.shape.length - 1];
  C(e > 0 && e <= o, () => `'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${o}), but got ${e}`);
  const i = await s.data(), a = await r.data(), [l, c] = [i.length / o, o], u = jt("bool", l);
  for (let h = 0; h < l; h++) {
    const d = h * c, p = i.subarray(d, d + c), f = [];
    for (let m = 0; m < p.length; m++)
      f.push({ value: p[m], index: m });
    f.sort((m, g) => g.value - m.value), u[h] = 0;
    for (let m = 0; m < e; m++)
      if (f[m].index === a[h]) {
        u[h] = 1;
        break;
      }
  }
  return n !== s && s.dispose(), t !== r && r.dispose(), ee(u, r.shape, "bool");
}
const cI = sE;
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function rE(n, t, e, s, r, o = "NHWC", i) {
  let a = n;
  n.rank === 3 && (a = G(n, [1, n.shape[0], n.shape[1], n.shape[2]]));
  let l = t;
  l.rank === 3 && (l = G(t, [1, t.shape[0], t.shape[1], t.shape[2]])), C(a.rank === 4, () => `Error in conv2dDerFilter: input must be rank 4, but got shape ${a.shape}.`), C(l.rank === 4, () => `Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`), C(e.length === 4, () => `Error in conv2dDerFilter: filterShape must be length 4, but got ${e}.`);
  const c = o === "NHWC" ? a.shape[3] : a.shape[1], u = o === "NHWC" ? l.shape[3] : l.shape[1];
  C(c === e[2], () => `Error in conv2dDerFilter: depth of input ${c}) must match input depth in filter (${e[2]}.`), C(u === e[3], () => `Error in conv2dDerFilter: depth of dy (${u}) must match output depth for filter (${e[3]}).`), Ye("conv2dDerFilter", r, i);
  const h = { x: a, dy: l }, d = { strides: s, pad: r, dataFormat: o, dimRoundingMode: i, filterShape: e };
  return E.runKernel(uh, h, d);
}
const Bg = L({ conv2DBackpropFilter_: rE });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Md(n, t, e) {
  if (e == null || e === "linear")
    return n;
  if (e === "relu")
    return D(n, yo(t));
  throw new Error(`Cannot compute gradient for fused activation ${e}.`);
}
function Pd(n, t) {
  let e = t;
  const s = be(n.shape, t.shape);
  return s.length > 0 && (e = at(e, s)), G(e, n.shape);
}
function Xd(n, t, e, s) {
  if (t === "linear")
    return n;
  if (t === "relu")
    return us(n);
  if (t === "elu")
    return Ji(n);
  if (t === "relu6")
    return Td(n);
  if (t === "prelu")
    return yc(n, e);
  if (t === "leakyrelu")
    return hc(n, s);
  if (t === "sigmoid")
    return ss(n);
  throw new Error(`Unknown fused activation ${t}.`);
}
const _d = (n, t) => !(n > 0) || t === "linear";
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function oE({ x: n, filter: t, strides: e, pad: s, dataFormat: r = "NHWC", dilations: o = [1, 1], dimRoundingMode: i, bias: a, activation: l = "linear", preluActivationWeights: c, leakyreluAlpha: u }) {
  if (l = l || "linear", _d(E.state.gradientDepth, l) === !1) {
    C(r === "NHWC", () => `Error in fused conv2d: got dataFormat of ${r} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`);
    let v = Xs(n, t, e, s, r, o, i);
    return a != null && (v = U(v, a)), Xd(v, l, c, u);
  }
  const h = k(n, "x", "conv2d", "float32"), d = k(t, "filter", "conv2d", "float32");
  let p = h, f = !1;
  h.rank === 3 && (f = !0, p = G(h, [1, h.shape[0], h.shape[1], h.shape[2]])), C(p.rank === 4, () => `Error in fused conv2d: input must be rank 4, but got rank ${p.rank}.`), C(d.rank === 4, () => `Error in fused conv2d: filter must be rank 4, but got rank ${d.rank}.`), Ye("fused conv2d", s, i);
  const m = r === "NHWC" ? p.shape[3] : p.shape[1];
  C(d.shape[2] === m, () => `Error in conv2d: depth of input (${m}) must match input depth for filter ${d.shape[2]}.`), C(Ae(e, o), () => `Error in conv2D: Either strides or dilations must be 1. Got strides ${e} and dilations '${o}'`);
  const g = $e(p.shape, d.shape, e, o, s, i);
  let y;
  a != null && (y = k(a, "bias", "fused conv2d"), [y] = re(y, h), r === "NHWC" ? bt(g.outShape, y.shape) : (C(y.shape.length <= 1, () => `Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${y.shape.length}.`), C(y.shape.length === 0 || y.shape[0] === g.outChannels || y.shape[0] === 1, () => `Error in fused conv2d: bias shape (${y.shape}) is not compatible with the number of output channels (${g.outChannels})`)));
  let b;
  if (c != null) {
    const v = c.shape;
    if (C(v.length <= 1 || v.length === 3, () => `Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${v.length}.`), v.length === 1)
      C(v[0] === 1 || v[0] === g.outChannels, () => `Error in fused conv2d: PReLU activation weights (${v}) is not compatible with the number of output channels (${g.outChannels}).`);
    else if (v.length === 3)
      try {
        bt(v, g.outShape);
      } catch {
        const N = `Error in fused conv2d: PReLU activation weights (${v}) is not compatible with the output shape of the conv2d (${g.outShape}).`;
        throw Error(N);
      }
    b = k(c, "prelu weights", "fused conv2d");
  }
  const w = (v, T) => {
    C(r === "NHWC", () => `Error in gradient of fused conv2D: got dataFormat of ${r} but only NHWC is currently supported.`);
    const [N, $, R, F] = T, z = Md(v, R, l);
    C(yr(o), () => `Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${o}'`);
    const W = pg($.shape, z, N, e, s), M = Bg($, z, N.shape, e, s), X = [W, M];
    if (F != null) {
      const _ = Pd(F, z);
      X.push(_);
    }
    return X;
  }, x = {
    x: p,
    filter: d,
    bias: y,
    preluActivationWeights: b
  }, S = {
    strides: e,
    pad: s,
    dataFormat: r,
    dilations: o,
    dimRoundingMode: i,
    activation: l,
    leakyreluAlpha: u
  };
  return a == null ? Cs((T, N, $) => {
    let R = E.runKernel(Ma, x, S);
    return $([N, T, R]), f && (R = G(R, [R.shape[1], R.shape[2], R.shape[3]])), { value: R, gradFunc: w };
  })(p, d) : Cs((T, N, $, R) => {
    let F = E.runKernel(Ma, x, S);
    return R([N, T, F, $]), f && (F = G(F, [F.shape[1], F.shape[2], F.shape[3]])), { value: F, gradFunc: w };
  })(p, d, y);
}
const uI = L({ fusedConv2d_: oE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function iE(n, t, e, s, r, o = [1, 1], i) {
  let a = n;
  n.rank === 3 && (a = G(n, [1, n.shape[0], n.shape[1], n.shape[2]]));
  let l = t;
  l.rank === 3 && (l = G(t, [1, t.shape[0], t.shape[1], t.shape[2]]));
  const c = { x: a, dy: l }, u = { strides: s, pad: r, dimRoundingMode: i, dilations: o, filterShape: e };
  return E.runKernel(yh, c, u);
}
const hI = L({ depthwiseConv2dNativeBackpropFilter_: iE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function aE(n, t, e, s, r, o = [1, 1], i) {
  let a = t, l = !1;
  t.rank === 3 && (l = !0, a = G(t, [1, t.shape[0], t.shape[1], t.shape[2]]));
  const c = { dy: a, filter: e }, u = { strides: s, pad: r, dimRoundingMode: i, dilations: o, inputShape: n }, h = E.runKernel(bh, c, u);
  return l ? G(h, [h.shape[1], h.shape[2], h.shape[3]]) : h;
}
const dI = L({ depthwiseConv2dNativeBackpropInput_: aE });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function lE({ x: n, filter: t, strides: e, pad: s, dataFormat: r = "NHWC", dilations: o = [1, 1], dimRoundingMode: i, bias: a, activation: l = "linear", preluActivationWeights: c, leakyreluAlpha: u }) {
  if (_d(E.state.gradientDepth, l) === !1) {
    let S = ji(n, t, e, s, r, o, i);
    return a != null && (S = U(S, a)), Xd(S, l, c, u);
  }
  const h = k(n, "x", "depthwiseConv2d", "float32"), d = k(t, "filter", "depthwiseConv2d", "float32");
  let p = h, f = !1;
  h.rank === 3 && (f = !0, p = G(h, [1, h.shape[0], h.shape[1], h.shape[2]])), C(p.rank === 4, () => `Error in fused depthwiseConv2d: input must be rank 4, but got rank ${p.rank}.`), C(d.rank === 4, () => `Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${d.rank}.`), C(p.shape[3] === d.shape[2], () => `Error in fused depthwiseConv2d: number of input channels (${p.shape[3]}) must match the inChannels dimension in filter ${d.shape[2]}.`), o == null && (o = [1, 1]), C(Ae(e, o), () => `Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${e} and dilations '${o}'`), Ye("fused depthwiseConv2d", s, i);
  const m = $e(p.shape, d.shape, e, o, s, i, !0);
  let g;
  a != null && (g = k(a, "bias", "fused conv2d"), [g] = re(g, h), bt(m.outShape, g.shape));
  let y;
  c != null && (y = k(c, "prelu weights", "fused depthwiseConv2d"));
  const b = (S, v) => {
    C(yr(o), () => `Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`);
    const [T, N, $, R] = v, F = Md(S, $, l), z = dI(N.shape, F, T, e, s, o, i), W = hI(N, F, T.shape, e, s, o, i);
    if (R != null) {
      const M = Pd(g, F);
      return [z, W, M];
    }
    return [z, W];
  }, w = {
    x: p,
    filter: d,
    bias: g,
    preluActivationWeights: y
  }, x = {
    strides: e,
    pad: s,
    dataFormat: r,
    dilations: o,
    dimRoundingMode: i,
    activation: l,
    leakyreluAlpha: u
  };
  return a == null ? Cs((v, T, N) => {
    let $ = E.runKernel(Pa, w, x);
    return N([T, v, $]), f && ($ = G($, [$.shape[1], $.shape[2], $.shape[3]])), { value: $, gradFunc: b };
  })(p, d) : Cs((v, T, N, $) => {
    let R = E.runKernel(Pa, w, x);
    return $([T, v, R, N]), f && (R = G(R, [R.shape[1], R.shape[2], R.shape[3]])), { value: R, gradFunc: b };
  })(p, d, g);
}
const cE = L({ fusedDepthwiseConv2d_: lE });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function uE({ a: n, b: t, transposeA: e = !1, transposeB: s = !1, bias: r, activation: o = "linear", preluActivationWeights: i, leakyreluAlpha: a = 0.2 }) {
  if (_d(E.state.gradientDepth, o) === !1) {
    let F = Ct(n, t, e, s);
    return r != null && (F = U(F, r)), Xd(F, o, i, a);
  }
  let l = k(n, "a", "fused matMul"), c = k(t, "b", "fused matMul");
  [l, c] = re(l, c);
  const u = e ? l.shape[l.rank - 2] : l.shape[l.rank - 1], h = s ? c.shape[c.rank - 1] : c.shape[c.rank - 2], d = e ? l.shape[l.rank - 1] : l.shape[l.rank - 2], p = s ? c.shape[c.rank - 2] : c.shape[c.rank - 1], f = l.shape.slice(0, -2), m = c.shape.slice(0, -2), g = P(f), y = P(m);
  C(u === h, () => `Error in fused matMul: inner shapes (${u}) and (${h}) of Tensors with shapes ${l.shape} and ${c.shape} and transposeA=${e} and transposeB=${s} must match.`);
  const w = bt(l.shape.slice(0, -2), c.shape.slice(0, -2)).concat([d, p]), x = e ? G(l, [g, u, d]) : G(l, [g, d, u]), S = s ? G(c, [y, p, h]) : G(c, [y, h, p]);
  let v;
  r != null && (v = k(r, "bias", "fused matMul"), [v] = re(v, l), bt(w, v.shape));
  let T;
  i != null && (T = k(i, "prelu weights", "fused matMul"));
  const N = (F, z) => {
    const [W, M, X, _] = z, B = Md(G(F, X.shape), X, o);
    let Z, H;
    if (!e && !s ? (Z = Ct(B, M, !1, !0), H = Ct(W, B, !0, !1)) : !e && s ? (Z = Ct(B, M, !1, !1), H = Ct(B, W, !0, !1)) : e && !s ? (Z = Ct(M, B, !1, !0), H = Ct(W, B, !1, !1)) : (Z = Ct(M, B, !0, !0), H = Ct(B, W, !0, !0)), r != null) {
      const j = Pd(_, B);
      return [Z, H, j];
    } else
      return [Z, H];
  }, $ = {
    a: x,
    b: S,
    bias: v,
    preluActivationWeights: T
  }, R = { transposeA: e, transposeB: s, activation: o, leakyreluAlpha: a };
  return r == null ? Cs((z, W, M) => {
    const X = E.runKernel(Va, $, R);
    return M([z, W, X]), { value: G(X, w), gradFunc: N };
  })(x, S) : Cs((z, W, M, X) => {
    const _ = E.runKernel(Va, $, R);
    return X([z, W, _, M]), { value: G(_, w), gradFunc: N };
  })(x, S, v);
}
const Vf = L({ fusedMatMul_: uE });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const pI = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  conv2d: uI,
  depthwiseConv2d: cE,
  matMul: Vf
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function hE(n) {
  return Vd(n, 0.54, 0.46);
}
const dE = L({ hammingWindow_: hE });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function pE(n) {
  return Vd(n, 0.5, 0.5);
}
const fI = L({ hannWindow_: pE });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fE(n, t, e, s = !1, r = 0) {
  let o = 0;
  const i = [];
  for (; o + t <= n.size; )
    i.push($t(n, o, t)), o += e;
  if (s)
    for (; o < n.size; ) {
      const a = o + t - n.size, l = he([
        $t(n, o, t - a),
        fo([a], r)
      ]);
      i.push(l), o += e;
    }
  return i.length === 0 ? hr([], [0, t]) : G(he(i), [i.length, t]);
}
const mI = L({ frame_: fE });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function mE(n, t, e, s, r = fI) {
  s == null && (s = Zg(t));
  const o = mI(n, t, e), i = D(o, r(t));
  return Sc(i, s);
}
const gE = L({ stft_: mE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function yE(n, t, e, s, r = "bilinear", o = 0) {
  const i = k(n, "image", "cropAndResize"), a = k(t, "boxes", "cropAndResize", "float32"), l = k(e, "boxInd", "cropAndResize", "int32"), c = a.shape[0];
  C(i.rank === 4, () => `Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`), C(a.rank === 2 && a.shape[1] === 4, () => `Error in cropAndResize: boxes must be have size [${c},4] but had shape ${a.shape}.`), C(l.rank === 1 && l.shape[0] === c, () => `Error in cropAndResize: boxInd must be have size [${c}] but had shape ${a.shape}.`), C(s.length === 2, () => `Error in cropAndResize: cropSize must be of length 2, but got length ${s.length}.`), C(s[0] >= 1 && s[1] >= 1, () => `cropSize must be atleast [1,1], but was ${s}`), C(r === "bilinear" || r === "nearest", () => `method must be bilinear or nearest, but was ${r}`);
  const u = { image: i, boxes: a, boxInd: l }, h = { method: r, extrapolationValue: o, cropSize: s };
  return E.runKernel(fh, u, h);
}
const bE = L({ cropAndResize_: yE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function xE(n) {
  const t = k(n, "image", "flipLeftRight", "float32");
  C(t.rank === 4, () => `Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`);
  const e = { image: t };
  return E.runKernel(Ch, e, {});
}
const wE = L({ flipLeftRight_: xE });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function IE(n) {
  const t = k(n, "image", "grayscaleToRGB"), e = t.rank - 1, s = t.shape[e];
  C(t.rank >= 2, () => `Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`), C(s === 1, () => `Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${s}.`);
  const r = new Array(t.rank);
  return r.fill(1, 0, e), r[e] = 3, $n(t, r);
}
const SE = L({ grayscaleToRGB_: IE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function vE(n, t, e = 0, s = 0.5) {
  const r = k(n, "image", "rotateWithOffset", "float32");
  C(r.rank === 4, () => `Error in rotateWithOffset: image must be rank 4,but got rank ${r.rank}.`);
  const o = { image: r }, i = { radians: t, fillValue: e, center: s };
  return E.runKernel(rd, o, i);
}
const CE = L({ rotateWithOffset_: vE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ra(n, t, e, s, r, o) {
  s == null && (s = 0.5), r == null && (r = Number.NEGATIVE_INFINITY), o == null && (o = 0);
  const i = n.shape[0];
  return e = Math.min(e, i), C(0 <= s && s <= 1, () => `iouThreshold must be in [0, 1], but was '${s}'`), C(n.rank === 2, () => `boxes must be a 2D tensor, but was of rank '${n.rank}'`), C(n.shape[1] === 4, () => `boxes must have 4 columns, but 2nd dimension was ${n.shape[1]}`), C(t.rank === 1, () => "scores must be a 1D tensor"), C(t.shape[0] === i, () => `scores has incompatible shape with boxes. Expected ${i}, but was ${t.shape[0]}`), C(0 <= o && o <= 1, () => `softNmsSigma must be in [0, 1], but was '${o}'`), { maxOutputSize: e, iouThreshold: s, scoreThreshold: r, softNmsSigma: o };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function kE(n, t, e, s = 0.5, r = Number.NEGATIVE_INFINITY) {
  const o = k(n, "boxes", "nonMaxSuppression", "float32"), i = k(t, "scores", "nonMaxSuppression", "float32"), a = ra(o, i, e, s, r);
  e = a.maxOutputSize, s = a.iouThreshold, r = a.scoreThreshold;
  const l = { maxOutputSize: e, iouThreshold: s, scoreThreshold: r };
  return E.runKernel(Fh, { boxes: o, scores: i }, l);
}
const TE = L({ nonMaxSuppression_: kE });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function NE(n, t, e) {
  const s = $E(n, t, e), r = s < 0 ? -(s + 1) : s;
  n.splice(r, 0, t);
}
function $E(n, t, e) {
  return EE(n, t, e || RE);
}
function RE(n, t) {
  return n > t ? 1 : n < t ? -1 : 0;
}
function EE(n, t, e) {
  let s = 0, r = n.length, o = 0, i = !1;
  for (; s < r; ) {
    o = s + (r - s >>> 1);
    const a = e(t, n[o]);
    a > 0 ? s = o + 1 : (r = o, i = !a);
  }
  return i ? s : -s - 1;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Kd(n, t, e, s, r) {
  return Hg(n, t, e, s, r, 0);
}
function Zd(n, t, e, s, r, o) {
  return Hg(
    n,
    t,
    e,
    s,
    r,
    0,
    !1,
    o,
    !0
  );
}
function Bd(n, t, e, s, r, o) {
  return Hg(n, t, e, s, r, o, !0);
}
function Hg(n, t, e, s, r, o, i = !1, a = !1, l = !1) {
  const c = [];
  for (let g = 0; g < t.length; g++)
    t[g] > r && c.push({ score: t[g], boxIndex: g, suppressBeginIndex: 0 });
  c.sort(zb);
  const u = o > 0 ? -0.5 / o : 0, h = [], d = [];
  for (; h.length < e && c.length > 0; ) {
    const g = c.pop(), { score: y, boxIndex: b, suppressBeginIndex: w } = g;
    if (y < r)
      break;
    let x = !1;
    for (let S = h.length - 1; S >= w; --S) {
      const v = LE(n, b, h[S]);
      if (v >= s) {
        x = !0;
        break;
      }
      if (g.score = g.score * DE(s, u, v), g.score <= r)
        break;
    }
    g.suppressBeginIndex = h.length, x || (g.score === y ? (h.push(b), d.push(g.score)) : g.score > r && NE(c, g, zb));
  }
  const p = h.length, f = e - p;
  a && f > 0 && (h.push(...new Array(f).fill(0)), d.push(...new Array(f).fill(0)));
  const m = { selectedIndices: h };
  return i && (m.selectedScores = d), l && (m.validOutputs = p), m;
}
function LE(n, t, e) {
  const s = n.subarray(t * 4, t * 4 + 4), r = n.subarray(e * 4, e * 4 + 4), o = Math.min(s[0], s[2]), i = Math.min(s[1], s[3]), a = Math.max(s[0], s[2]), l = Math.max(s[1], s[3]), c = Math.min(r[0], r[2]), u = Math.min(r[1], r[3]), h = Math.max(r[0], r[2]), d = Math.max(r[1], r[3]), p = (a - o) * (l - i), f = (h - c) * (d - u);
  if (p <= 0 || f <= 0)
    return 0;
  const m = Math.max(o, c), g = Math.max(i, u), y = Math.min(a, h), b = Math.min(l, d), w = Math.max(y - m, 0) * Math.max(b - g, 0);
  return w / (p + f - w);
}
function DE(n, t, e) {
  const s = Math.exp(t * e * e);
  return e <= n ? s : 0;
}
function zb(n, t) {
  return n.score - t.score || n.score === t.score && t.boxIndex - n.boxIndex;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
async function GE(n, t, e, s = 0.5, r = Number.NEGATIVE_INFINITY) {
  const o = k(n, "boxes", "nonMaxSuppressionAsync"), i = k(t, "scores", "nonMaxSuppressionAsync"), a = ra(o, i, e, s, r);
  e = a.maxOutputSize, s = a.iouThreshold, r = a.scoreThreshold;
  const l = await Promise.all([o.data(), i.data()]), c = l[0], u = l[1], { selectedIndices: h } = Kd(c, u, e, s, r);
  return o !== n && o.dispose(), i !== t && i.dispose(), Ve(h, "int32");
}
const FE = GE;
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function OE(n, t, e, s = 0.5, r = Number.NEGATIVE_INFINITY, o = 0) {
  const i = k(n, "boxes", "nonMaxSuppression"), a = k(t, "scores", "nonMaxSuppression"), l = ra(i, a, e, s, r, o);
  e = l.maxOutputSize, s = l.iouThreshold, r = l.scoreThreshold, o = l.softNmsSigma;
  const c = { boxes: i, scores: a }, u = { maxOutputSize: e, iouThreshold: s, scoreThreshold: r, softNmsSigma: o }, h = E.runKernel(Ah, c, u);
  return { selectedIndices: h[0], selectedScores: h[1] };
}
const AE = L({ nonMaxSuppressionWithScore_: OE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
async function zE(n, t, e, s = 0.5, r = Number.NEGATIVE_INFINITY, o = 0) {
  const i = k(n, "boxes", "nonMaxSuppressionAsync"), a = k(t, "scores", "nonMaxSuppressionAsync"), l = ra(i, a, e, s, r, o);
  e = l.maxOutputSize, s = l.iouThreshold, r = l.scoreThreshold, o = l.softNmsSigma;
  const c = await Promise.all([i.data(), a.data()]), u = c[0], h = c[1], { selectedIndices: d, selectedScores: p } = Bd(u, h, e, s, r, o);
  return i !== n && i.dispose(), a !== t && a.dispose(), {
    selectedIndices: Ve(d, "int32"),
    selectedScores: Ve(p)
  };
}
const WE = zE;
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function VE(n, t, e, s = 0.5, r = Number.NEGATIVE_INFINITY, o = !1) {
  const i = k(n, "boxes", "nonMaxSuppression"), a = k(t, "scores", "nonMaxSuppression"), l = ra(i, a, e, s, r, null), c = l.maxOutputSize, u = l.iouThreshold, h = l.scoreThreshold, d = { boxes: i, scores: a }, p = {
    maxOutputSize: c,
    iouThreshold: u,
    scoreThreshold: h,
    padToMaxOutputSize: o
  }, f = E.runKernel(Oh, d, p);
  return { selectedIndices: f[0], validOutputs: f[1] };
}
const ME = L({ nonMaxSuppressionPadded_: VE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
async function PE(n, t, e, s = 0.5, r = Number.NEGATIVE_INFINITY, o = !1) {
  const i = k(n, "boxes", "nonMaxSuppressionAsync"), a = k(t, "scores", "nonMaxSuppressionAsync"), l = ra(i, a, e, s, r, null), c = l.maxOutputSize, u = l.iouThreshold, h = l.scoreThreshold, [d, p] = await Promise.all([i.data(), a.data()]), { selectedIndices: f, validOutputs: m } = Zd(d, p, c, u, h, o);
  return i !== n && i.dispose(), a !== t && a.dispose(), {
    selectedIndices: Ve(f, "int32"),
    validOutputs: ft(m, "int32")
  };
}
const XE = PE;
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _E(n, t, e = !1, s = !1) {
  const r = k(n, "images", "resizeBilinear");
  C(r.rank === 3 || r.rank === 4, () => `Error in resizeBilinear: x must be rank 3 or 4, but got rank ${r.rank}.`), C(t.length === 2, () => `Error in resizeBilinear: new shape must 2D, but got shape ${t}.`), C(s === !1 || e === !1, () => "Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.");
  let o = r, i = !1;
  r.rank === 3 && (i = !0, o = G(r, [1, r.shape[0], r.shape[1], r.shape[2]]));
  const a = { images: o }, l = { alignCorners: e, halfPixelCenters: s, size: t }, c = E.runKernel(Hl, a, l);
  return i ? G(c, [c.shape[1], c.shape[2], c.shape[3]]) : c;
}
const gI = L({ resizeBilinear_: _E });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function KE(n, t, e = !1, s = !1) {
  const r = k(n, "images", "resizeNearestNeighbor");
  C(r.rank === 3 || r.rank === 4, () => `Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${r.rank}.`), C(t.length === 2, () => `Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`), C(r.dtype === "float32" || r.dtype === "int32", () => "`images` must have `int32` or `float32` as dtype"), C(s === !1 || e === !1, () => "Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.");
  let o = r, i = !1;
  r.rank === 3 && (i = !0, o = G(r, [1, r.shape[0], r.shape[1], r.shape[2]]));
  const a = { images: o }, l = { alignCorners: e, halfPixelCenters: s, size: t }, c = E.runKernel(Bl, a, l);
  return i ? G(c, [c.shape[1], c.shape[2], c.shape[3]]) : c;
}
const yI = L({ resizeNearestNeighbor_: KE });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ZE(n, t = "binary", e = !1, s = 0.5) {
  const r = k(n, "image", "threshold"), o = 0.2989, i = 0.587, a = 0.114, l = r.shape[0] * r.shape[1];
  let c = D(Ve([s]), 255), u, h, d, p;
  if (C(r.rank === 3, () => `Error in threshold: image must be rank 3,but got rank ${r.rank}.`), C(r.shape[2] === 3 || r.shape[2] === 1, () => `Error in threshold: image color channel must be equal to 3 or 1but got ${r.shape[2]}.`), C(r.dtype === "int32" || r.dtype === "float32", () => `Error in dtype: image dtype must be int32 or float32,but got dtype ${r.dtype}.`), C(t === "otsu" || t === "binary", () => `Method must be binary or otsu, but was ${t}`), r.shape[2] === 3) {
    [u, h, d] = tn(r, [1, 1, 1], -1);
    const g = D(u, o), y = D(h, i), b = D(d, a);
    p = U(U(g, y), b);
  } else
    p = n;
  if (t === "otsu") {
    const g = ag(et(Nd(p), "int32"), ee([]), 256);
    c = BE(g, l);
  }
  const f = e ? Nr(p, c) : an(p, c);
  return et(D(f, 255), "int32");
}
function BE(n, t) {
  let e = Ve([-1]), s = Ve([0]), r = Ve([0]), o, i, a, l, c, u;
  for (let h = 0; h < n.size - 1; h++) {
    o = $t(n, 0, h + 1), i = $t(n, h + 1), c = ht(at(o), t), u = ht(at(i), t);
    const d = at(D(o, Mo(0, o.size)));
    a = ht(d, at(o));
    const p = fo(i.shape, o.size), f = U(Mo(0, i.size), p), m = D(i, f);
    l = ht(at(m), at(i));
    const g = it(a, l), y = it(a, l), b = D(c, u);
    r = D(D(b, g), y);
    const w = an(r, s);
    s = Me(w, r, s), e = Me(w, Ve([h]), e);
  }
  return e;
}
const HE = L({ threshold_: ZE });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function UE(n, t, e = "nearest", s = "constant", r = 0, o) {
  const i = k(n, "image", "transform", "float32"), a = k(t, "transforms", "transform", "float32");
  C(i.rank === 4, () => `Error in transform: image must be rank 4,but got rank ${i.rank}.`), C(a.rank === 2 && (a.shape[0] === i.shape[0] || a.shape[0] === 1) && a.shape[1] === 8, () => "Error in transform: Input transform should be batch x 8 or 1 x 8"), C(o == null || o.length === 2, () => `Error in transform: outputShape must be [height, width] or null, but got ${o}.`);
  const l = { image: i, transforms: a }, c = { interpolation: e, fillMode: s, fillValue: r, outputShape: o };
  return E.runKernel(nd, l, c);
}
const YE = L({ transform_: UE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function jE(n, t, e) {
  C(t % 1 === 0, () => `bandPart(): numLower must be an integer, got ${t}.`), C(e % 1 === 0, () => `bandPart(): numUpper must be an integer, got ${e}.`);
  const s = k(n, "a", "bandPart");
  C(s.rank >= 2, () => `bandPart(): Rank must be at least 2, got ${s.rank}.`);
  const r = s.shape, [o, i] = s.shape.slice(-2);
  if (!(t <= o))
    throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${o}).`);
  if (!(e <= i))
    throw new Error(`bandPart(): numUpper (${e}) must not be greater than the number of columns (${i}).`);
  t < 0 && (t = o), e < 0 && (e = i);
  const a = G(Mo(0, o, 1, "int32"), [-1, 1]), l = Mo(0, i, 1, "int32"), c = it(a, l), u = Hn(Nr(c, ft(+t, "int32")), Tr(c, ft(-e, "int32"))), h = ge([o, i], s.dtype);
  return G(nn(Un(G(s, [-1, o, i])).map((d) => Me(u, d, h))), r);
}
const JE = L({ bandPart_: jE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function QE(n) {
  let t;
  if (Array.isArray(n)) {
    t = !1, C(n != null && n.length > 0, () => "Gram-Schmidt process: input must not be null, undefined, or empty");
    const r = n[0].shape[0];
    for (let o = 1; o < n.length; ++o)
      C(n[o].shape[0] === r, () => `Gram-Schmidt: Non-unique lengths found in the input vectors: (${n[o].shape[0]} vs. ${r})`);
  } else
    t = !0, n = tn(n, n.shape[0], 0).map((r) => $r(r, [0]));
  C(n.length <= n[0].shape[0], () => `Gram-Schmidt: Number of vectors (${n.length}) exceeds number of dimensions (${n[0].shape[0]}).`);
  const e = [], s = n;
  for (let r = 0; r < n.length; ++r)
    e.push(E.tidy(() => {
      let o = s[r];
      if (r > 0)
        for (let i = 0; i < r; ++i) {
          const a = D(at(D(e[i], o)), e[i]);
          o = it(o, a);
        }
      return ht(o, Qi(o, "euclidean"));
    }));
  return t ? nn(e, 0) : e;
}
const qE = L({ gramSchmidt_: QE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function tL(n, t = !1) {
  if (C(n.rank >= 2, () => `qr() requires input tensor to have a rank >= 2, but got rank ${n.rank}`), n.rank === 2)
    return Wb(n, t);
  {
    const e = n.shape.slice(0, n.shape.length - 2).reduce((l, c) => l * c), s = Un(G(n, [
      e,
      n.shape[n.shape.length - 2],
      n.shape[n.shape.length - 1]
    ]), 0), r = [], o = [];
    s.forEach((l) => {
      const [c, u] = Wb(l, t);
      r.push(c), o.push(u);
    });
    const i = G(nn(r, 0), n.shape), a = G(nn(o, 0), n.shape);
    return [i, a];
  }
}
function Wb(n, t = !1) {
  return E.tidy(() => {
    C(n.shape.length === 2, () => `qr2d() requires a 2D Tensor, but got a ${n.shape.length}D Tensor.`);
    const e = n.shape[0], s = n.shape[1];
    let r = bd(e), o = ws(n);
    const i = hr([[1]], [1, 1]);
    let a = ws(i);
    const l = e >= s ? s : e;
    for (let c = 0; c < l; ++c) {
      const u = o, h = a, d = r;
      [a, o, r] = E.tidy(() => {
        const p = $t(o, [c, c], [e - c, 1]), f = Qi(p), m = $t(o, [c, c], [1, 1]), g = Me(an(m, 0), hr([[-1]]), hr([[1]])), y = it(m, D(g, f)), b = ht(p, y);
        b.shape[0] === 1 ? a = ws(i) : a = he([
          i,
          $t(b, [1, 0], [b.shape[0] - 1, b.shape[1]])
        ], 0);
        const w = Yt(ht(Ct(g, y), f)), x = $t(o, [c, 0], [e - c, s]), S = D(w, a), v = kt(a);
        if (c === 0)
          o = it(x, Ct(S, Ct(v, x)));
        else {
          const $ = it(x, Ct(S, Ct(v, x)));
          o = he([$t(o, [0, 0], [c, s]), $], 0);
        }
        const T = kt(S), N = $t(r, [0, c], [e, r.shape[1] - c]);
        if (c === 0)
          r = it(N, Ct(Ct(N, a), T));
        else {
          const $ = it(N, Ct(Ct(N, a), T));
          r = he([$t(r, [0, 0], [e, c]), $], 1);
        }
        return [a, o, r];
      }), xt([u, h, d]);
    }
    return !t && e > s && (r = $t(r, [0, 0], [e, s]), o = $t(o, [0, 0], [s, s])), [r, o];
  });
}
const eL = L({ qr_: tL });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var Ke;
(function(n) {
  n[n.NONE = 0] = "NONE", n[n.MEAN = 1] = "MEAN", n[n.SUM = 2] = "SUM", n[n.SUM_BY_NONZERO_WEIGHTS = 3] = "SUM_BY_NONZERO_WEIGHTS";
})(Ke || (Ke = {}));
function nL(n, t, e = Ke.SUM_BY_NONZERO_WEIGHTS) {
  const s = k(n, "losses", "computeWeightedLoss");
  let r = null;
  t != null && (r = k(t, "weights", "computeWeightedLoss"));
  const o = r == null ? s : D(s, r);
  if (e === Ke.NONE)
    return o;
  if (e === Ke.SUM)
    return at(o);
  if (e === Ke.MEAN) {
    if (r == null)
      return ne(o);
    {
      const i = s.size / r.size, a = ht(at(o), at(r));
      return i > 1 ? ht(a, ft(i)) : a;
    }
  }
  if (e === Ke.SUM_BY_NONZERO_WEIGHTS) {
    if (r == null)
      return ht(at(o), ft(s.size));
    {
      const i = D(r, fn(s.shape)), a = et(at(eo(i, ft(0))), "float32");
      return ht(at(o), a);
    }
  }
  throw Error(`Unknown reduction: ${e}`);
}
const Js = L({ computeWeightedLoss_: nL });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sL(n, t, e, s = Ke.SUM_BY_NONZERO_WEIGHTS) {
  const r = k(n, "labels", "absoluteDifference"), o = k(t, "predictions", "absoluteDifference");
  let i = null;
  e != null && (i = k(e, "weights", "absoluteDifference")), Oe(r.shape, o.shape, "Error in absoluteDifference: ");
  const a = me(it(r, o));
  return Js(a, i, s);
}
const rL = L({ absoluteDifference_: sL });
function oL(n, t, e, s, r = Ke.SUM_BY_NONZERO_WEIGHTS) {
  const o = k(n, "labels", "cosineDistance"), i = k(t, "predictions", "cosineDistance");
  let a = null;
  s != null && (a = k(s, "weights", "cosineDistance")), Oe(o.shape, i.shape, "Error in cosineDistance: ");
  const l = ft(1), c = it(l, at(D(o, i), e, !0));
  return Js(c, a, r);
}
const iL = L({ cosineDistance_: oL });
function aL(n, t, e, s = Ke.SUM_BY_NONZERO_WEIGHTS) {
  let r = k(n, "labels", "hingeLoss");
  const o = k(t, "predictions", "hingeLoss");
  let i = null;
  e != null && (i = k(e, "weights", "hingeLoss")), Oe(r.shape, o.shape, "Error in hingeLoss: ");
  const a = ft(1);
  r = it(D(ft(2), r), a);
  const l = us(it(a, D(r, o)));
  return Js(l, i, s);
}
const lL = L({ hingeLoss_: aL });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function cL(n, t, e, s = 1, r = Ke.SUM_BY_NONZERO_WEIGHTS) {
  const o = k(n, "labels", "huberLoss"), i = k(t, "predictions", "huberLoss");
  let a = null;
  e != null && (a = k(e, "weights", "huberLoss")), Oe(o.shape, i.shape, "Error in huberLoss: ");
  const l = ft(s), c = me(it(i, o)), u = ea(c, l), h = it(c, u), d = U(D(ft(0.5), Wt(u)), D(l, h));
  return Js(d, a, r);
}
const uL = L({ huberLoss_: cL });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function hL(n, t, e, s = 1e-7, r = Ke.SUM_BY_NONZERO_WEIGHTS) {
  const o = k(n, "labels", "logLoss"), i = k(t, "predictions", "logLoss");
  let a = null;
  e != null && (a = k(e, "weights", "logLoss")), Oe(o.shape, i.shape, "Error in logLoss: ");
  const l = ft(1), c = ft(s), u = Yt(D(o, xn(U(i, c)))), h = D(it(l, o), xn(U(it(l, i), c))), d = it(u, h);
  return Js(d, a, r);
}
const dL = L({ logLoss_: hL });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function pL(n, t, e, s = Ke.SUM_BY_NONZERO_WEIGHTS) {
  const r = k(n, "labels", "meanSquaredError"), o = k(t, "predictions", "meanSquaredError");
  let i = null;
  e != null && (i = k(e, "weights", "meanSquaredError")), Oe(r.shape, o.shape, "Error in meanSquaredError: ");
  const a = Od(r, o);
  return Js(a, i, s);
}
const fL = L({ meanSquaredError_: pL });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function mL(n, t) {
  const e = k(n, "labels", "sigmoidCrossEntropyWithLogits"), s = k(t, "logits", "sigmoidCrossEntropyWithLogits");
  Oe(e.shape, s.shape, "Error in sigmoidCrossEntropyWithLogits: ");
  const r = us(s), o = D(s, e), i = dc(bn(Yt(me(s))));
  return U(it(r, o), i);
}
function gL(n, t, e, s = 0, r = Ke.SUM_BY_NONZERO_WEIGHTS) {
  let o = k(n, "multiClassLabels", "sigmoidCrossEntropy");
  const i = k(t, "logits", "sigmoidCrossEntropy");
  let a = null;
  if (e != null && (a = k(e, "weights", "sigmoidCrossEntropy")), Oe(o.shape, i.shape, "Error in sigmoidCrossEntropy: "), s > 0) {
    const c = ft(s), u = ft(1), h = ft(0.5);
    o = U(D(o, it(u, c)), D(h, c));
  }
  const l = mL(o, i);
  return Js(l, a, r);
}
const yL = L({ sigmoidCrossEntropy_: gL });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function bL(n, t, e = -1) {
  if (e === -1 && (e = t.rank - 1), e !== t.rank - 1)
    throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${e}`);
  return Cs((r, o, i) => {
    const l = Sd(o, [e], !0), c = it(et(o, "float32"), l);
    i([r, c]);
    const u = Yt(D(c, r));
    return { value: at(u, [e]), gradFunc: (p, f) => {
      const [m, g] = f, y = de(p.shape, [e]);
      return [
        D(G(p, y), it(et(m, "float32"), bn(g))),
        D(G(p, y), it(bn(g), et(m, "float32")))
      ];
    } };
  })(n, t);
}
function xL(n, t, e, s = 0, r = Ke.SUM_BY_NONZERO_WEIGHTS) {
  let o = k(n, "onehotLabels", "softmaxCrossEntropy");
  const i = k(t, "logits", "softmaxCrossEntropy");
  let a = null;
  if (e != null && (a = k(e, "weights", "softmaxCrossEntropy")), Oe(o.shape, i.shape, "Error in softmaxCrossEntropy: "), s > 0) {
    const c = ft(s), u = ft(1), h = ft(o.shape[1]);
    o = U(D(o, it(u, c)), ht(c, h));
  }
  const l = bL(o, i);
  return Js(l, a, r);
}
const wL = L({ softmaxCrossEntropy_: xL });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function IL(n, t, e, s) {
  const r = k(n, "indices", "sparseFillEmptyRows", "int32"), o = k(t, "values", "sparseFillEmptyRows"), i = k(e, "denseShape", "sparseFillEmptyRows", "int32"), a = k(s, "defaultValue", "sparseFillEmptyRows", o.dtype);
  if (r.rank !== 2)
    throw new Error(`Indices should be Tensor2D but received shape
        ${r.shape}`);
  if (o.rank !== 1)
    throw new Error(`Values should be Tensor1D but received shape ${o.shape}`);
  if (i.rank !== 1)
    throw new Error(`Dense shape should be Tensor1D but received shape ${i.shape}`);
  if (a.rank !== 0)
    throw new Error(`Default value should be a scalar but received shape ${a.shape}`);
  const l = {
    indices: r,
    values: o,
    denseShape: i,
    defaultValue: a
  }, c = E.runKernel(Zh, l);
  return {
    outputIndices: c[0],
    outputValues: c[1],
    emptyRowIndicator: c[2],
    reverseIndexMap: c[3]
  };
}
const SL = L({ sparseFillEmptyRows_: IL });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function vL(n, t, e) {
  const s = k(n, "inputIndices", "sparseReshape", "int32"), r = k(t, "inputShape", "sparseReshape", "int32"), o = k(e, "newShape", "sparseReshape", "int32");
  if (s.rank !== 2)
    throw new Error(`Input indices should be Tensor2D but received shape
        ${s.shape}`);
  if (r.rank !== 1)
    throw new Error(`Input shape should be Tensor1D but received shape ${r.shape}`);
  if (o.rank !== 1)
    throw new Error(`New shape should be Tensor1D but received shape ${o.shape}`);
  const i = {
    inputIndices: s,
    inputShape: r,
    newShape: o
  }, a = E.runKernel(Bh, i);
  return { outputIndices: a[0], outputShape: a[1] };
}
const CL = L({ sparseReshape_: vL });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function kL(n, t, e) {
  const s = k(n, "data", "sparseSegmentMean"), r = k(t, "indices", "sparseSegmentMean", "int32"), o = k(e, "segmentIds", "sparseSegmentMean", "int32");
  if (s.rank < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (r.rank !== 1)
    throw new Error(`Indices should be Tensor1D but received shape
          ${r.shape}`);
  if (o.rank !== 1)
    throw new Error(`Segment ids should be Tensor1D but received shape
          ${o.shape}`);
  const i = {
    data: s,
    indices: r,
    segmentIds: o
  };
  return E.runKernel(Hh, i);
}
const TL = L({ sparseSegmentMean_: kL });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function NL(n, t, e) {
  const s = k(n, "data", "sparseSegmentSum"), r = k(t, "indices", "sparseSegmentSum", "int32"), o = k(e, "segmentIds", "sparseSegmentSum", "int32");
  if (s.rank < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (r.rank !== 1)
    throw new Error(`Indices should be Tensor1D but received shape
         ${r.shape}`);
  if (o.rank !== 1)
    throw new Error(`Segment ids should be Tensor1D but received shape
         ${o.shape}`);
  const i = {
    data: s,
    indices: r,
    segmentIds: o
  };
  return E.runKernel(Uh, i);
}
const $L = L({ sparseSegmentSum_: NL });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function RL(n, t, e, s, r, o, i, a) {
  const l = k(n, "data", "stringNGrams", "string");
  if (l.dtype !== "string")
    throw new Error("Data must be of datatype string");
  if (l.shape.length !== 1)
    throw new Error(`Data must be a vector, saw: ${l.shape}`);
  const c = k(t, "dataSplits", "stringNGrams");
  if (c.dtype !== "int32")
    throw new Error("Data splits must be of datatype int32");
  const u = {
    separator: e,
    nGramWidths: s,
    leftPad: r,
    rightPad: o,
    padWidth: i,
    preserveShortSequences: a
  }, h = { data: l, dataSplits: c }, d = E.runKernel(Qh, h, u);
  return { nGrams: d[0], nGramsSplits: d[1] };
}
const EL = L({ stringNGrams_: RL });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function LL(n, t, e = !0) {
  const s = k(n, "input", "stringSplit", "string"), r = k(t, "delimiter", "stringSplit", "string");
  if (s.rank !== 1)
    throw new Error(`Input should be Tensor1D but received shape ${s.shape}`);
  if (r.rank !== 0)
    throw new Error(`Delimiter should be a scalar but received shape ${r.shape}`);
  const o = { skipEmpty: e }, i = { input: s, delimiter: r }, a = E.runKernel(qh, i, o);
  return { indices: a[0], values: a[1], shape: a[2] };
}
const DL = L({ stringSplit_: LL });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function GL(n, t) {
  const e = k(n, "input", "stringToHashBucketFast", "string"), s = { numBuckets: t };
  if (t <= 0)
    throw new Error("Number of buckets must be at least 1");
  const r = { input: e };
  return E.runKernel(td, r, s);
}
const FL = L({ stringToHashBucketFast_: GL });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const bI = {
  fft: Ic,
  ifft: Xo,
  rfft: Sc,
  irfft: Fd
}, xI = {
  hammingWindow: dE,
  hannWindow: fI,
  frame: mI,
  stft: gE
}, Xr = {
  flipLeftRight: wE,
  grayscaleToRGB: SE,
  resizeNearestNeighbor: yI,
  resizeBilinear: gI,
  rotateWithOffset: CE,
  cropAndResize: bE,
  nonMaxSuppression: TE,
  nonMaxSuppressionAsync: FE,
  nonMaxSuppressionWithScore: AE,
  nonMaxSuppressionWithScoreAsync: WE,
  nonMaxSuppressionPadded: ME,
  nonMaxSuppressionPaddedAsync: XE,
  threshold: HE,
  transform: YE
}, Ug = {
  bandPart: JE,
  gramSchmidt: qE,
  qr: eL
}, wI = {
  absoluteDifference: rL,
  computeWeightedLoss: Js,
  cosineDistance: iL,
  hingeLoss: lL,
  huberLoss: uL,
  logLoss: dL,
  meanSquaredError: fL,
  sigmoidCrossEntropy: yL,
  softmaxCrossEntropy: wL
}, II = {
  sparseFillEmptyRows: SL,
  sparseReshape: CL,
  sparseSegmentMean: TL,
  sparseSegmentSum: $L
}, SI = {
  stringNGrams: EL,
  stringSplit: DL,
  stringToHashBucketFast: FL
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Qs extends po {
  minimize(t, e = !1, s) {
    const { value: r, grads: o } = this.computeGradients(t, s);
    if (s != null) {
      const i = s.map((a) => ({ name: a.name, tensor: o[a.name] }));
      this.applyGradients(i);
    } else
      this.applyGradients(o);
    return xt(o), e ? r : (r.dispose(), null);
  }
  get iterations() {
    return this.iterations_ == null && (this.iterations_ = 0), this.iterations_;
  }
  incrementIterations() {
    this.iterations_ = this.iterations + 1;
  }
  computeGradients(t, e) {
    return Tw(t, e);
  }
  dispose() {
    this.iterations_ != null && xt(this.iterations_);
  }
  async saveIterations() {
    return this.iterations_ == null && (this.iterations_ = 0), {
      name: "iter",
      tensor: ft(this.iterations_, "int32")
    };
  }
  async getWeights() {
    throw new Error("getWeights() is not implemented for this optimizer yet.");
  }
  async setWeights(t) {
    throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`);
  }
  async extractIterations(t) {
    return this.iterations_ = (await t[0].tensor.data())[0], t.slice(1);
  }
}
Object.defineProperty(Qs, Symbol.hasInstance, {
  value: (n) => n.minimize != null && n.computeGradients != null && n.applyGradients != null
});
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Hd extends Qs {
  constructor(t, e, s = null) {
    super(), this.learningRate = t, this.rho = e, this.epsilon = s, this.accumulatedGrads = [], this.accumulatedUpdates = [], s == null && (this.epsilon = E.backend.epsilon());
  }
  applyGradients(t) {
    (Array.isArray(t) ? t.map((s) => s.name) : Object.keys(t)).forEach((s, r) => {
      const o = E.registeredVariables[s], i = !1;
      this.accumulatedGrads[r] == null && (this.accumulatedGrads[r] = {
        originalName: `${s}/accum_grad`,
        variable: A(() => Rt(o).variable(i))
      }), this.accumulatedUpdates[r] == null && (this.accumulatedUpdates[r] = {
        originalName: `${s}/accum_var`,
        variable: A(() => Rt(o).variable(i))
      });
      const a = Array.isArray(t) ? t[r].tensor : t[s];
      if (a == null)
        return;
      const l = this.accumulatedGrads[r].variable, c = this.accumulatedUpdates[r].variable;
      A(() => {
        const u = U(D(l, this.rho), D(Wt(a), 1 - this.rho)), h = D(ht(Fe(U(c, this.epsilon)), Fe(U(l, this.epsilon))), a), d = U(D(c, this.rho), D(Wt(h), 1 - this.rho));
        l.assign(u), c.assign(d);
        const p = U(D(h, -this.learningRate), o);
        o.assign(p);
      });
    }), this.incrementIterations();
  }
  dispose() {
    this.accumulatedUpdates != null && (xt(this.accumulatedGrads.map((t) => t.variable)), xt(this.accumulatedUpdates.map((t) => t.variable)));
  }
  async getWeights() {
    const t = [...this.accumulatedGrads, ...this.accumulatedUpdates];
    return [await this.saveIterations()].concat(t.map((e) => ({ name: e.originalName, tensor: e.variable })));
  }
  async setWeights(t) {
    t = await this.extractIterations(t);
    const e = t.length / 2, s = !1;
    this.accumulatedGrads = t.slice(0, e).map((r) => ({
      originalName: r.name,
      variable: r.tensor.variable(s)
    })), this.accumulatedUpdates = t.slice(e, e * 2).map((r) => ({
      originalName: r.name,
      variable: r.tensor.variable(s)
    }));
  }
  getConfig() {
    return {
      learningRate: this.learningRate,
      rho: this.rho,
      epsilon: this.epsilon
    };
  }
  static fromConfig(t, e) {
    return new t(e.learningRate, e.rho, e.epsilon);
  }
}
Hd.className = "Adadelta";
Y(Hd);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Ud extends Qs {
  constructor(t, e = 0.1) {
    super(), this.learningRate = t, this.initialAccumulatorValue = e, this.accumulatedGrads = [];
  }
  applyGradients(t) {
    (Array.isArray(t) ? t.map((s) => s.name) : Object.keys(t)).forEach((s, r) => {
      const o = E.registeredVariables[s];
      this.accumulatedGrads[r] == null && (this.accumulatedGrads[r] = {
        originalName: `${s}/accumulator`,
        variable: A(() => fo(o.shape, this.initialAccumulatorValue).variable(!1))
      });
      const i = Array.isArray(t) ? t[r].tensor : t[s];
      if (i == null)
        return;
      const a = this.accumulatedGrads[r].variable;
      A(() => {
        const l = U(a, Wt(i));
        a.assign(l);
        const c = U(D(ht(i, Fe(U(l, E.backend.epsilon()))), -this.learningRate), o);
        o.assign(c);
      });
    }), this.incrementIterations();
  }
  dispose() {
    this.accumulatedGrads != null && xt(this.accumulatedGrads.map((t) => t.variable));
  }
  async getWeights() {
    return [await this.saveIterations()].concat(this.accumulatedGrads.map((t) => ({ name: t.originalName, tensor: t.variable })));
  }
  async setWeights(t) {
    t = await this.extractIterations(t);
    const e = !1;
    this.accumulatedGrads = t.map((s) => ({ originalName: s.name, variable: s.tensor.variable(e) }));
  }
  getConfig() {
    return {
      learningRate: this.learningRate,
      initialAccumulatorValue: this.initialAccumulatorValue
    };
  }
  static fromConfig(t, e) {
    return new t(e.learningRate, e.initialAccumulatorValue);
  }
}
Ud.className = "Adagrad";
Y(Ud);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Yd extends Qs {
  constructor(t, e, s, r = null) {
    super(), this.learningRate = t, this.beta1 = e, this.beta2 = s, this.epsilon = r, this.accumulatedFirstMoment = [], this.accumulatedSecondMoment = [], A(() => {
      this.accBeta1 = ft(e).variable(), this.accBeta2 = ft(s).variable();
    }), r == null && (this.epsilon = E.backend.epsilon());
  }
  applyGradients(t) {
    const e = Array.isArray(t) ? t.map((s) => s.name) : Object.keys(t);
    A(() => {
      const s = it(1, this.accBeta1), r = it(1, this.accBeta2);
      e.forEach((o, i) => {
        const a = E.registeredVariables[o], l = !1;
        this.accumulatedFirstMoment[i] == null && (this.accumulatedFirstMoment[i] = {
          originalName: `${o}/m`,
          variable: A(() => Rt(a).variable(l))
        }), this.accumulatedSecondMoment[i] == null && (this.accumulatedSecondMoment[i] = {
          originalName: `${o}/v`,
          variable: A(() => Rt(a).variable(l))
        });
        const c = Array.isArray(t) ? t[i].tensor : t[o];
        if (c == null)
          return;
        const u = this.accumulatedFirstMoment[i].variable, h = this.accumulatedSecondMoment[i].variable, d = U(D(u, this.beta1), D(c, 1 - this.beta1)), p = U(D(h, this.beta2), D(Wt(c), 1 - this.beta2)), f = ht(d, s), m = ht(p, r);
        u.assign(d), h.assign(p);
        const g = U(D(ht(f, U(Fe(m), this.epsilon)), -this.learningRate), a);
        a.assign(g);
      }), this.accBeta1.assign(D(this.accBeta1, this.beta1)), this.accBeta2.assign(D(this.accBeta2, this.beta2));
    }), this.incrementIterations();
  }
  dispose() {
    this.accBeta1.dispose(), this.accBeta2.dispose(), this.accumulatedFirstMoment != null && xt(this.accumulatedFirstMoment.map((t) => t.variable)), this.accumulatedSecondMoment != null && xt(this.accumulatedSecondMoment.map((t) => t.variable));
  }
  async getWeights() {
    const t = [...this.accumulatedFirstMoment, ...this.accumulatedSecondMoment];
    return [await this.saveIterations()].concat(t.map((e) => ({ name: e.originalName, tensor: e.variable })));
  }
  async setWeights(t) {
    t = await this.extractIterations(t), A(() => {
      this.accBeta1.assign(_s(this.beta1, this.iterations_ + 1)), this.accBeta2.assign(_s(this.beta2, this.iterations_ + 1));
    });
    const e = t.length / 2, s = !1;
    this.accumulatedFirstMoment = t.slice(0, e).map((r) => ({
      originalName: r.name,
      variable: r.tensor.variable(s)
    })), this.accumulatedSecondMoment = t.slice(e, e * 2).map((r) => ({
      originalName: r.name,
      variable: r.tensor.variable(s)
    }));
  }
  getConfig() {
    return {
      learningRate: this.learningRate,
      beta1: this.beta1,
      beta2: this.beta2,
      epsilon: this.epsilon
    };
  }
  static fromConfig(t, e) {
    return new t(e.learningRate, e.beta1, e.beta2, e.epsilon);
  }
}
Yd.className = "Adam";
Y(Yd);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class jd extends Qs {
  constructor(t, e, s, r = null, o = 0) {
    super(), this.learningRate = t, this.beta1 = e, this.beta2 = s, this.epsilon = r, this.decay = o, this.accumulatedFirstMoment = [], this.accumulatedWeightedInfNorm = [], A(() => {
      this.iteration = ft(0).variable(), this.accBeta1 = ft(e).variable();
    }), r == null && (this.epsilon = E.backend.epsilon());
  }
  applyGradients(t) {
    const e = Array.isArray(t) ? t.map((s) => s.name) : Object.keys(t);
    A(() => {
      const s = it(1, this.accBeta1), r = ht(-this.learningRate, U(D(this.iteration, this.decay), 1));
      e.forEach((o, i) => {
        const a = E.registeredVariables[o], l = !1;
        this.accumulatedFirstMoment[i] == null && (this.accumulatedFirstMoment[i] = {
          originalName: `${o}/m`,
          variable: Rt(a).variable(l)
        }), this.accumulatedWeightedInfNorm[i] == null && (this.accumulatedWeightedInfNorm[i] = {
          originalName: `${o}/v`,
          variable: Rt(a).variable(l)
        });
        const c = Array.isArray(t) ? t[i].tensor : t[o];
        if (c == null)
          return;
        const u = this.accumulatedFirstMoment[i].variable, h = this.accumulatedWeightedInfNorm[i].variable, d = U(D(u, this.beta1), D(c, 1 - this.beta1)), p = D(h, this.beta2), f = me(c), m = $s(p, f);
        u.assign(d), h.assign(m);
        const g = U(D(ht(r, s), ht(d, U(m, this.epsilon))), a);
        a.assign(g);
      }), this.iteration.assign(U(this.iteration, 1)), this.accBeta1.assign(D(this.accBeta1, this.beta1));
    }), this.incrementIterations();
  }
  dispose() {
    this.accBeta1.dispose(), this.iteration.dispose(), this.accumulatedFirstMoment != null && xt(this.accumulatedFirstMoment.map((t) => t.variable)), this.accumulatedWeightedInfNorm != null && xt(this.accumulatedWeightedInfNorm.map((t) => t.variable));
  }
  async getWeights() {
    throw new Error("getWeights() is not implemented for Adamax yet.");
  }
  async setWeights(t) {
    throw new Error("setWeights() is not implemented for Adamax yet.");
  }
  getConfig() {
    return {
      learningRate: this.learningRate,
      beta1: this.beta1,
      beta2: this.beta2,
      epsilon: this.epsilon,
      decay: this.decay
    };
  }
  static fromConfig(t, e) {
    return new t(e.learningRate, e.beta1, e.beta2, e.epsilon, e.decay);
  }
}
jd.className = "Adamax";
Y(jd);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class vc extends Qs {
  constructor(t) {
    super(), this.learningRate = t, this.setLearningRate(t);
  }
  applyGradients(t) {
    (Array.isArray(t) ? t.map((s) => s.name) : Object.keys(t)).forEach((s, r) => {
      const o = Array.isArray(t) ? t[r].tensor : t[s];
      if (o == null)
        return;
      const i = E.registeredVariables[s];
      A(() => {
        const a = U(D(this.c, o), i);
        i.assign(a);
      });
    }), this.incrementIterations();
  }
  setLearningRate(t) {
    this.learningRate = t, this.c != null && this.c.dispose(), this.c = ce(ft(-t));
  }
  dispose() {
    this.c.dispose();
  }
  async getWeights() {
    return [await this.saveIterations()];
  }
  async setWeights(t) {
    if (t = await this.extractIterations(t), t.length !== 0)
      throw new Error("SGD optimizer does not have settable weights.");
  }
  getConfig() {
    return { learningRate: this.learningRate };
  }
  static fromConfig(t, e) {
    return new t(e.learningRate);
  }
}
vc.className = "SGD";
Y(vc);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Jd extends vc {
  constructor(t, e, s = !1) {
    super(t), this.learningRate = t, this.momentum = e, this.useNesterov = s, this.accumulations = [], this.m = ft(this.momentum);
  }
  applyGradients(t) {
    (Array.isArray(t) ? t.map((s) => s.name) : Object.keys(t)).forEach((s, r) => {
      const o = E.registeredVariables[s];
      this.accumulations[r] == null && (this.accumulations[r] = {
        originalName: `${s}/momentum`,
        variable: A(() => Rt(o).variable(!1))
      });
      const i = this.accumulations[r].variable, a = Array.isArray(t) ? t[r].tensor : t[s];
      a != null && A(() => {
        let l;
        const c = U(D(this.m, i), a);
        this.useNesterov ? l = U(D(this.c, U(a, D(c, this.m))), o) : l = U(D(this.c, c), o), i.assign(c), o.assign(l);
      });
    }), this.incrementIterations();
  }
  dispose() {
    this.m.dispose(), this.accumulations != null && xt(this.accumulations.map((t) => t.variable));
  }
  setMomentum(t) {
    this.momentum = t;
  }
  async getWeights() {
    return [await this.saveIterations()].concat(this.accumulations.map((t) => ({ name: t.originalName, tensor: t.variable })));
  }
  async setWeights(t) {
    t = await this.extractIterations(t);
    const e = !1;
    this.accumulations = t.map((s) => ({ originalName: s.name, variable: s.tensor.variable(e) }));
  }
  getConfig() {
    return {
      learningRate: this.learningRate,
      momentum: this.momentum,
      useNesterov: this.useNesterov
    };
  }
  static fromConfig(t, e) {
    return new t(e.learningRate, e.momentum, e.useNesterov);
  }
}
Jd.className = "Momentum";
Y(Jd);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Qd extends Qs {
  constructor(t, e = 0.9, s = 0, r = null, o = !1) {
    if (super(), this.learningRate = t, this.decay = e, this.momentum = s, this.epsilon = r, this.accumulatedMeanSquares = [], this.accumulatedMoments = [], this.accumulatedMeanGrads = [], this.centered = o, r == null && (this.epsilon = E.backend.epsilon()), t == null)
      throw new Error("learningRate for RMSPropOptimizer must be defined.");
  }
  applyGradients(t) {
    (Array.isArray(t) ? t.map((s) => s.name) : Object.keys(t)).forEach((s, r) => {
      const o = E.registeredVariables[s], i = !1;
      this.accumulatedMeanSquares[r] == null && (this.accumulatedMeanSquares[r] = {
        originalName: `${s}/rms`,
        variable: A(() => Rt(o).variable(i))
      }), this.accumulatedMoments[r] == null && (this.accumulatedMoments[r] = {
        originalName: `${s}/momentum`,
        variable: A(() => Rt(o).variable(i))
      }), this.accumulatedMeanGrads[r] == null && this.centered && (this.accumulatedMeanGrads[r] = {
        originalName: `${s}/mg`,
        variable: A(() => Rt(o).variable(i))
      });
      const a = Array.isArray(t) ? t[r].tensor : t[s];
      if (a == null)
        return;
      const l = this.accumulatedMeanSquares[r].variable, c = this.accumulatedMoments[r].variable;
      A(() => {
        const u = U(D(l, this.decay), D(Wt(a), 1 - this.decay));
        if (this.centered) {
          const h = this.accumulatedMeanGrads[r].variable, d = U(D(h, this.decay), D(a, 1 - this.decay)), p = ht(D(a, this.learningRate), Fe(it(u, U(Wt(d), this.epsilon)))), f = U(D(c, this.momentum), p);
          l.assign(u), h.assign(d), c.assign(f);
          const m = it(o, f);
          o.assign(m);
        } else {
          const h = U(D(l, this.decay), D(Wt(a), 1 - this.decay)), d = U(D(c, this.momentum), ht(D(a, this.learningRate), Fe(U(h, this.epsilon))));
          l.assign(h), c.assign(d);
          const p = it(o, d);
          o.assign(p);
        }
      });
    }), this.incrementIterations();
  }
  dispose() {
    this.accumulatedMeanSquares != null && xt(this.accumulatedMeanSquares.map((t) => t.variable)), this.accumulatedMeanGrads != null && this.centered && xt(this.accumulatedMeanGrads.map((t) => t.variable)), this.accumulatedMoments != null && xt(this.accumulatedMoments.map((t) => t.variable));
  }
  async getWeights() {
    const t = [...this.accumulatedMeanSquares, ...this.accumulatedMoments];
    return this.centered && t.push(...this.accumulatedMeanGrads), [await this.saveIterations()].concat(t.map((e) => ({ name: e.originalName, tensor: e.variable })));
  }
  async setWeights(t) {
    t = await this.extractIterations(t);
    const e = this.centered ? t.length / 3 : t.length / 2, s = !1;
    this.accumulatedMeanSquares = t.slice(0, e).map((r) => ({
      originalName: r.name,
      variable: r.tensor.variable(s)
    })), this.accumulatedMoments = t.slice(e, e * 2).map((r) => ({
      originalName: r.name,
      variable: r.tensor.variable(s)
    })), this.centered && (this.accumulatedMeanGrads = t.slice(e * 2, e * 3).map((r) => ({
      originalName: r.name,
      variable: r.tensor.variable(s)
    })));
  }
  getConfig() {
    return {
      learningRate: this.learningRate,
      decay: this.decay,
      momentum: this.momentum,
      epsilon: this.epsilon,
      centered: this.centered
    };
  }
  static fromConfig(t, e) {
    return new t(e.learningRate, e.decay, e.momentum, e.epsilon, e.centered);
  }
}
Qd.className = "RMSProp";
Y(Qd);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class rr {
  static sgd(t) {
    return new vc(t);
  }
  static momentum(t, e, s = !1) {
    return new Jd(t, e, s);
  }
  static rmsprop(t, e = 0.9, s = 0, r = null, o = !1) {
    return new Qd(t, e, s, r, o);
  }
  static adam(t = 1e-3, e = 0.9, s = 0.999, r = null) {
    return new Yd(t, e, s, r);
  }
  static adadelta(t = 1e-3, e = 0.95, s = null) {
    return new Hd(t, e, s);
  }
  static adamax(t = 2e-3, e = 0.9, s = 0.999, r = null, o = 0) {
    return new jd(t, e, s, r, o);
  }
  static adagrad(t, e = 0.1) {
    return new Ud(t, e);
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Or = {
  sgd: rr.sgd,
  momentum: rr.momentum,
  adadelta: rr.adadelta,
  adagrad: rr.adagrad,
  rmsprop: rr.rmsprop,
  adamax: rr.adamax,
  adam: rr.adam
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const OL = (() => typeof requestAnimationFrame < "u" ? requestAnimationFrame : typeof setImmediate < "u" ? setImmediate : (n) => n())();
function Cc() {
  return new Promise((n) => OL(() => n()));
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Yg(n, t) {
  const e = n[0].length;
  n.forEach((r, o) => {
    C(r.length === e, () => `Error in concat${e}D: rank of tensors[${o}] must be the same as the rank of the rest (${e})`);
  }), C(t >= 0 && t < e, () => `Error in concat${e}D: axis must be between 0 and ${e - 1}.`);
  const s = n[0];
  n.forEach((r, o) => {
    for (let i = 0; i < e; i++)
      C(i === t || r[i] === s[i], () => `Error in concat${e}D: Shape of tensors[${o}] (${r}) does not match the shape of the rest (${s}) along the non-concatenated axis ${o}.`);
  });
}
function Is(n, t) {
  const e = n[0].slice();
  for (let s = 1; s < n.length; s++)
    e[t] += n[s][t];
  return e;
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var Mn;
(function(n) {
  n[n.FIRST_DIM_SIZE = 0] = "FIRST_DIM_SIZE", n[n.VALUE_ROWIDS = 1] = "VALUE_ROWIDS", n[n.ROW_LENGTHS = 2] = "ROW_LENGTHS", n[n.ROW_SPLITS = 3] = "ROW_SPLITS", n[n.ROW_LIMITS = 4] = "ROW_LIMITS", n[n.ROW_STARTS = 5] = "ROW_STARTS";
})(Mn || (Mn = {}));
function jg(n, t, e) {
  let s = new Array();
  if (e == null && t == null)
    return s;
  if (t == null)
    for (; s.length < n + e.length; )
      s.push(-1);
  else
    s = t.slice();
  if (e == null)
    return s;
  if (n + e.length !== s.length)
    throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.rank = ${n + e.length}, but shape.rank = ${s.length}`);
  for (let r = 1; r < e.length; ++r) {
    const o = e[r], i = s[s.length - e.length + r], a = s[i];
    if (o >= 0)
      if (a >= 0) {
        if (a !== o)
          throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.shape[${r + n}] = ${o} but shape[${r + n}] = ${a}`);
      } else
        s[i] = o;
  }
  return s;
}
function Jg(n) {
  const t = {
    FIRST_DIM_SIZE: Mn.FIRST_DIM_SIZE,
    VALUE_ROWIDS: Mn.VALUE_ROWIDS,
    ROW_LENGTHS: Mn.ROW_LENGTHS,
    ROW_SPLITS: Mn.ROW_SPLITS,
    ROW_LIMITS: Mn.ROW_LIMITS,
    ROW_STARTS: Mn.ROW_STARTS
  }, e = [];
  for (const s of n)
    if (s in t)
      e.push(t[s]);
    else
      break;
  return e;
}
function Qg(n) {
  return n.length === 0 ? 0 : n[0] === Mn.FIRST_DIM_SIZE ? n.length - 1 : n.length;
}
function qg(n, t) {
  if (n == null || t == null)
    return;
  const e = n.length, s = t.length;
  if (e >= s)
    throw new Error(`defaultValue.shape=${n} and ragged tensor flatValues.shape=${t}, are incompatible: defaultValue.rank = ${e} must be less than ragged tensor input flatValues.rank = ${s})`);
  for (let r = 0; r < Math.min(e, s - 1); ++r) {
    const o = n[r], i = t[r + 1];
    if (o >= 0 && i >= 0 && o !== 1 && o !== i)
      throw new Error(`defaultValue.shape=${n}, and ragged tensor input flatValues.shape=${t} are incompatible: defaultValue.shape[${r - n.length}] = ${o} but ragged tensor input.flatValues.shape[${r - n.length}] = ${i}`);
  }
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ty = 30;
function qd(n) {
  return n <= ty ? n : Iu(n, Math.floor(Math.sqrt(n)));
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ey(n, t, e) {
  const s = e * (typeof n == "number" ? n : n[0]), r = t * (typeof n == "number" ? n : n[1]);
  return [s, r];
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function kc(n, t, e, s = !0) {
  let r = [];
  if (s)
    r = r.concat(t.slice(0)), r.push(n[0] / e), r = r.concat(n.slice(1));
  else {
    r = r.concat(n[0]);
    const o = t.length;
    for (let i = 0; i < o; ++i)
      r = r.concat([n[i + 1] / t[i], t[i]]);
    r = r.concat(n.slice(o + 1));
  }
  return r;
}
function Tc(n, t, e = !0) {
  const s = [];
  if (e) {
    s.push(t);
    for (let r = t + 1; r < n; ++r)
      r <= 2 * t ? (s.push(r), s.push(r - (t + 1))) : s.push(r);
  } else {
    const r = [], o = [];
    for (let i = 1; i < n; ++i)
      i >= t * 2 + 1 || i % 2 === 1 ? o.push(i) : r.push(i);
    s.push(...r), s.push(0), s.push(...o);
  }
  return s;
}
function Nc(n, t, e, s = !0) {
  const r = [];
  s ? r.push(n[0] / e) : r.push(n[0] * e);
  for (let o = 1; o < n.length; ++o)
    o <= t.length ? s ? r.push(t[o - 1] * n[o]) : r.push(n[o] / t[o - 1]) : r.push(n[o]);
  return r;
}
function ny(n, t) {
  const e = [0];
  for (let s = 0; s < t; ++s)
    e.push(n[s][0]);
  return e;
}
function sy(n, t, e) {
  const s = n.slice(0, 1);
  for (let r = 0; r < e; ++r)
    s.push(n[r + 1] - t[r][0] - t[r][1]);
  return s;
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const tp = 1.7580993408473768, ep = 1.0507009873554805;
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ry = 0.3275911, oy = 0.254829592, iy = -0.284496736, ay = 1.421413741, ly = -1.453152027, cy = 1.061405429;
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ks(n, t) {
  if (n.length !== t.length)
    throw new Error(`Cannot merge real and imag arrays of different lengths. real:${n.length}, imag: ${t.length}.`);
  const e = new Float32Array(n.length * 2);
  for (let s = 0; s < e.length; s += 2)
    e[s] = n[s / 2], e[s + 1] = t[s / 2];
  return e;
}
function vI(n) {
  const t = new Float32Array(n.length / 2), e = new Float32Array(n.length / 2);
  for (let s = 0; s < n.length; s += 2)
    t[s / 2] = n[s], e[s / 2] = n[s + 1];
  return { real: t, imag: e };
}
function CI(n) {
  const t = Math.ceil(n.length / 4), e = new Float32Array(t), s = new Float32Array(t);
  for (let r = 0; r < n.length; r += 4)
    e[Math.floor(r / 4)] = n[r], s[Math.floor(r / 4)] = n[r + 1];
  return { real: e, imag: s };
}
function kI(n) {
  const t = Math.floor(n.length / 4), e = new Float32Array(t), s = new Float32Array(t);
  for (let r = 2; r < n.length; r += 4)
    e[Math.floor(r / 4)] = n[r], s[Math.floor(r / 4)] = n[r + 1];
  return { real: e, imag: s };
}
function uy(n, t) {
  const e = n[t * 2], s = n[t * 2 + 1];
  return { real: e, imag: s };
}
function TI(n, t, e, s) {
  n[s * 2] = t, n[s * 2 + 1] = e;
}
function NI(n, t) {
  const e = new Float32Array(n / 2), s = new Float32Array(n / 2);
  for (let r = 0; r < Math.ceil(n / 2); r++) {
    const o = (t ? 2 : -2) * Math.PI * (r / n);
    e[r] = Math.cos(o), s[r] = Math.sin(o);
  }
  return { real: e, imag: s };
}
function $I(n, t, e) {
  const s = (e ? 2 : -2) * Math.PI * (n / t), r = Math.cos(s), o = Math.sin(s);
  return { real: r, imag: o };
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Wp = "->", AL = /->/g, Vb = ",", Mb = "...";
function hy(n, t) {
  n = n.replace(/\s/g, "");
  const e = (n.length - n.replace(AL, "").length) / Wp.length;
  if (e < 1)
    throw new Error("Equations without an arrow are not supported.");
  if (e > 1)
    throw new Error(`Equation must contain exactly one arrow ("${Wp}").`);
  const [s, r] = n.split(Wp);
  C(s.indexOf(Mb) === -1, () => `The ellipsis notation ("${Mb}") is not supported yet.`);
  const o = s.split(Vb), i = o.length;
  if (t !== i)
    throw new Error(`Expected ${i} input tensors, received ${t}`);
  if (i > 2)
    throw new Error("Support for more than 2 input tensors is not implemented yet.");
  const a = [];
  for (let d = 0; d < r.length; ++d) {
    const p = r[d];
    if (!o.some((f) => f.indexOf(p) !== -1))
      throw new Error(`Output subscripts contain the label ${p} not present in the input subscripts.`);
    a.indexOf(p) === -1 && a.push(p);
  }
  for (let d = 0; d < s.length; ++d) {
    const p = s[d];
    a.indexOf(p) === -1 && p !== Vb && a.push(p);
  }
  const l = new Array(o.length);
  for (let d = 0; d < i; ++d) {
    if (new Set(o[d].split("")).size !== o[d].length)
      throw new Error(`Found duplicate axes in input component ${o[d]}. Support for duplicate axes in input is not implemented yet.`);
    l[d] = [];
    for (let p = 0; p < o[d].length; ++p)
      l[d].push(a.indexOf(o[d][p]));
  }
  const c = a.length, u = r.length, h = [];
  for (let d = u; d < c; ++d)
    h.push(d);
  return { allDims: a, summedDims: h, idDims: l };
}
function dy(n, t) {
  let e = new Array(n);
  e.fill(-1);
  for (let r = 0; r < t.length; ++r)
    e[t[r]] = r;
  const s = [];
  for (let r = 0; r < n; ++r)
    e[r] === -1 && s.push(r);
  return e = e.filter((r) => r !== -1), { permutationIndices: e, expandDims: s };
}
function py(n, t, e) {
  const s = new Array(n);
  for (let r = 0; r < e.length; ++r) {
    const o = e[r].shape;
    for (let i = 0; i < t[r].length; ++i)
      s[t[r][i]] === void 0 ? s[t[r][i]] = o[i] : C(s[t[r][i]] === o[i], () => `Expected dimension ${s[t[r][i]]} at axis ${i} of input shaped ${JSON.stringify(o)}, but got dimension ${o[i]}`);
  }
}
function fy(n, t) {
  const e = n, s = [];
  let r = 0;
  n.length === 0 && e.push(-1), r = n.length + 1;
  for (let i = 0; i < r; ++i)
    s.push([]);
  const o = [];
  for (let i = 0; i < e.length; ++i) {
    const a = e[i], l = zL(t, a);
    for (const c of l)
      o.indexOf(c) === -1 && (s[i].push(c), o.push(c));
  }
  return { path: e, steps: s };
}
function my(n) {
  return n.every((t, e) => t === e);
}
function zL(n, t) {
  const e = [];
  for (let s = 0; s < n.length; ++s)
    (n[s].length === 0 || n[s].indexOf(t) !== -1 || t === -1) && e.push(s);
  return e;
}
function gy(n, t, e = 0) {
  let s = [];
  if (typeof t == "number")
    C(n.shape[e] % t === 0, () => "Number of splits must evenly divide the axis."), s = new Array(t).fill(n.shape[e] / t);
  else {
    const r = t.reduce((i, a) => (a === -1 && (i += 1), i), 0);
    C(r <= 1, () => "There should be only one negative value in split array.");
    const o = t.indexOf(-1);
    if (o !== -1) {
      const i = t.reduce((a, l) => l > 0 ? a + l : a);
      t[o] = n.shape[e] - i;
    }
    C(n.shape[e] === t.reduce((i, a) => i + a), () => "The sum of sizes must match the size of the axis dimension."), s = t;
  }
  return s;
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function yy(n) {
  return `Received SparseTensor with denseShape[0] = 0 but
  indices.shape[0] = ${n}`;
}
function by(n, t) {
  return `indices(${n}, 0) is invalid: ${t} < 0`;
}
function xy(n, t, e) {
  return `indices(${n}, 0) is invalid: ${t} >= ${e}`;
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function wy(n, t) {
  return `only one output dimension may be -1, not both ${n} and ${t}`;
}
function Iy(n, t) {
  return `size ${n} must be non-negative, not ${t}`;
}
function Sy() {
  return "reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero";
}
function vy(n, t) {
  const e = P(n), s = P(t);
  return `Input to reshape is a SparseTensor with ${e}
  dense values, but the requested shape requires a multiple of ${s}. inputShape=${n} outputShape= ${t}`;
}
function Cy(n, t) {
  const e = P(n), s = P(t);
  return `Input to reshape is a tensor with ${e} dense values, but the requested shape has ${s}. inputShape=${n} outputShape=${t}`;
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ya() {
  return "segment ids must be >= 0";
}
function ky() {
  return "segment ids are not increasing";
}
function Ty(n, t) {
  return `Segment id ${n} out of range [0, ${t}), possibly because segmentIds input is not sorted.`;
}
function Ny(n, t, e) {
  return `Bad: indices[${n}] == ${t} out of range [0, ${e})`;
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function RI(n, t) {
  let e = !1, s;
  for (n <= ty ? (s = n, e = !0) : s = Iu(n, Math.floor(Math.sqrt(n))); !e; )
    s > t || s === n ? e = !0 : s = Iu(n, s + 1);
  return s;
}
function EI(n, t, e) {
  const s = [], r = n.length;
  for (let o = 0; o < r; o++)
    o !== t ? s.push(n[o]) : s.push(e);
  return s;
}
function $y(n, t, e, s) {
  const r = t.shape.length, o = n.shape.length;
  if (s !== 0 && (s < -r || s > r))
    throw new Error(`Expect batchDims in the range of [-${r}, ${r}], but got ${s}`);
  if (s < 0 && (s += r), s > o)
    throw new Error(`batchDims (${s}) must be less than rank(x) (
    ${o}).`);
  if (e < s)
    throw new Error(`batchDims (${s}) must be less than or equal to axis (${e}).`);
  for (let h = 0; h < s; ++h)
    if (n.shape[h] !== t.shape[h])
      throw new Error(`x.shape[${h}]: ${n.shape[h]} should be equal to indices.shape[${h}]: ${t.shape[h]}.`);
  const i = n.shape[e], a = [];
  let l = 1, c = 1, u = 1;
  for (let h = 0; h < s; ++h)
    a.push(n.shape[h]), l *= n.shape[h];
  for (let h = s; h < e; h++)
    a.push(n.shape[h]), c *= n.shape[h];
  for (let h = s; h < r; h++)
    a.push(t.shape[h]);
  for (let h = e + 1; h < o; h++)
    a.push(n.shape[h]), u *= n.shape[h];
  return { batchSize: l, sliceSize: u, outerSize: c, dimSize: i, outputShape: a };
}
const WL = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  segOpComputeOptimalWindowSize: RI,
  computeOutShape: EI,
  collectGatherOpShapeInfo: $y
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Zs(n) {
  try {
    return n.map((t) => Ws(t));
  } catch (t) {
    throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${t}`);
  }
}
function Ry(n) {
  return n.map((t) => Ln(t));
}
const LI = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  slice_util: dw,
  segment_util: WL,
  fromUint8ToStringArray: Zs,
  fromStringArrayToUint8: Ry,
  upcastType: He,
  axesAreInnerMostDims: Ig,
  combineLocations: vw,
  computeOutAndReduceShapes: ve,
  expandShapeToKeepDim: de,
  assertAxesAreInnerMostDims: ze,
  getAxesPermutation: oe,
  getUndoAxesPermutation: kr,
  getInnerMostAxes: pe,
  getBroadcastDims: Ps,
  getReductionAxes: be,
  assertAndGetBroadcastShape: bt,
  assertParamsConsistent: Yg,
  computeOutShape: Is,
  computeDilation2DInfo: ac,
  computePool2DInfo: Yn,
  computePool3DInfo: Us,
  computeConv2DInfo: $e,
  computeConv3DInfo: Cr,
  computeDefaultPad: ng,
  tupleValuesAreOne: yr,
  eitherStridesOrDilationsAreOne: Ae,
  convertConv2DDataFormat: Ys,
  checkPadOnDimRoundingMode: Ye,
  getFusedDyActivation: Md,
  getFusedBiasGradient: Pd,
  applyActivation: Xd,
  shouldFuse: _d,
  get RowPartitionType() {
    return Mn;
  },
  combineRaggedTensorToTensorShapes: jg,
  getRowPartitionTypesHelper: Jg,
  getRaggedRank: Qg,
  validateDefaultValueShape: qg,
  PARALLELIZE_THRESHOLD: ty,
  computeOptimalWindowSize: qd,
  getImageCenter: ey,
  getReshaped: kc,
  getPermuted: Tc,
  getReshapedPermuted: Nc,
  getSliceBeginCoords: ny,
  getSliceSize: sy,
  prepareAndValidate: ld,
  validateUpdateShape: Pm,
  validateInput: Xm,
  calculateShapes: Ui,
  SELU_SCALEALPHA: tp,
  SELU_SCALE: ep,
  ERF_P: ry,
  ERF_A1: oy,
  ERF_A2: iy,
  ERF_A3: ay,
  ERF_A4: ly,
  ERF_A5: cy,
  warn: Tn,
  log: l2,
  mergeRealAndImagArrays: Ks,
  splitRealAndImagArrays: vI,
  complexWithEvenIndex: CI,
  complexWithOddIndex: kI,
  getComplexWithIndex: uy,
  assignToTypedArray: TI,
  exponents: NI,
  exponent: $I,
  decodeEinsumEquation: hy,
  getEinsumPermutation: dy,
  checkEinsumDimSizes: py,
  getEinsumComputePath: fy,
  isIdentityPermutation: my,
  prepareSplitSize: gy,
  getSparseFillEmptyRowsIndicesDenseShapeMismatch: yy,
  getSparseFillEmptyRowsNegativeIndexErrorMessage: by,
  getSparseFillEmptyRowsOutOfRangeIndexErrorMessage: xy,
  getSparseReshapeMultipleNegativeOneOutputDimErrorMessage: wy,
  getSparseReshapeNegativeOutputDimErrorMessage: Iy,
  getSparseReshapeEmptyTensorZeroOutputDimErrorMessage: Sy,
  getSparseReshapeInputOutputMultipleErrorMessage: vy,
  getSparseReshapeInputOutputMismatchErrorMessage: Cy,
  getSparseSegmentReductionNegativeSegmentIdsErrorMessage: Ya,
  getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage: ky,
  getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage: Ty,
  getSparseSegmentReductionIndicesOutOfRangeErrorMessage: Ny
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const VL = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  nonMaxSuppressionV3Impl: Kd,
  nonMaxSuppressionV4Impl: Zd,
  nonMaxSuppressionV5Impl: Bd,
  whereImpl: Wd
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const DI = {
  kernelName: sl,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => D(n, yo(et(e, "float32"), -1)) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ML = {
  kernelName: qo,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return {
      x: () => {
        const s = Wt(et(e, "float32")), r = Fe(it(ft(1), s));
        return Yt(ht(n, r));
      }
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const PL = {
  kernelName: ti,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return {
      x: () => {
        const s = Fe(it(Wt(et(e, "float32")), 1));
        return ht(n, s);
      }
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const XL = {
  kernelName: uo,
  inputsToSave: ["a", "b"],
  gradFunc: (n, t) => {
    const [e, s] = t, r = bt(e.shape, s.shape);
    return { a: () => {
      let a = n;
      const l = be(e.shape, r);
      return l.length > 0 && (a = at(a, l)), G(a, e.shape);
    }, b: () => {
      let a = n;
      const l = be(s.shape, r);
      return l.length > 0 && (a = at(a, l)), G(a, s.shape);
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const _L = {
  kernelName: rl,
  saveAllInputs: !0,
  gradFunc: (n, t) => {
    const e = {};
    return t.forEach((s, r) => {
      e[r] = () => n.clone();
    }), e;
  }
};
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const KL = {
  kernelName: ol,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => Rt(e) };
  }
};
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ZL = {
  kernelName: il,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => Rt(e) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const BL = {
  kernelName: ei,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => ht(n, Fe(it(ft(1), Wt(et(e, "float32"))))) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const HL = {
  kernelName: ni,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return {
      x: () => {
        const s = Fe(U(ft(1), Wt(et(e, "float32"))));
        return ht(n, s);
      }
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const UL = {
  kernelName: oi,
  inputsToSave: ["a", "b"],
  gradFunc: (n, t) => {
    const [e, s] = t, r = bt(e.shape, s.shape);
    return { a: () => {
      const a = U(Wt(e), Wt(s));
      let l = D(n, ht(s, a));
      const c = be(e.shape, r);
      return c.length > 0 && (l = at(l, c)), G(l, e.shape);
    }, b: () => {
      const a = U(Wt(e), Wt(s));
      let l = Yt(D(n, ht(e, a)));
      const c = be(s.shape, r);
      return c.length > 0 && (l = at(l, c)), G(l, s.shape);
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const YL = {
  kernelName: si,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => ht(n, U(Wt(et(e, "float32")), 1)) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const jL = {
  kernelName: ri,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => ht(n, it(ft(1), Wt(et(e, "float32")))) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function JL(n, t, e, s, r, o) {
  const i = k(n, "dy", "avgPool3dGrad"), a = k(t, "input", "avgPool3dGrad");
  let l = i, c = a, u = !1;
  a.rank === 4 && (u = !0, l = G(i, [1, i.shape[0], i.shape[1], i.shape[2], i.shape[3]]), c = G(a, [
    1,
    a.shape[0],
    a.shape[1],
    a.shape[2],
    a.shape[3]
  ])), C(l.rank === 5, () => `Error in avgPool3dGrad: dy must be rank 5 but got rank ${l.rank}.`), C(c.rank === 5, () => `Error in avgPool3dGrad: input must be rank 5 but got rank ${c.rank}.`), Ye("avgPool3dGrad", r, o);
  const h = { dy: l, input: c }, d = { filterSize: e, strides: s, pad: r, dimRoundingMode: o }, p = E.runKernel(ih, h, d);
  return u ? G(p, [p.shape[1], p.shape[2], p.shape[3], p.shape[4]]) : p;
}
const QL = L({ avgPool3dGrad_: JL });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const qL = {
  kernelName: ll,
  inputsToSave: ["x"],
  gradFunc: (n, t, e) => {
    const [s] = t, { filterSize: r, strides: o, pad: i, dimRoundingMode: a } = e;
    return {
      x: () => QL(n, s, r, o, i, a)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function tD(n, t, e, s, r) {
  const o = k(n, "dy", "avgPoolGrad"), i = k(t, "input", "avgPoolGrad");
  C(i.rank === o.rank, () => `Rank of input (${i.rank}) does not match rank of dy (${o.rank})`);
  let a = i, l = o, c = !1;
  i.rank === 3 && (c = !0, a = G(i, [1, i.shape[0], i.shape[1], i.shape[2]]), l = G(o, [1, o.shape[0], o.shape[1], o.shape[2]])), C(l.rank === 4, () => `Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`), C(a.rank === 4, () => `Error in avgPoolGrad: input must be rank 4 but got rank ${a.rank}.`);
  const u = { dy: l, input: a }, h = { filterSize: e, strides: s, pad: r }, d = E.runKernel(oh, u, h);
  return c ? G(d, [d.shape[1], d.shape[2], d.shape[3]]) : d;
}
const eD = L({ avgPoolGrad_: tD });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const nD = {
  kernelName: al,
  inputsToSave: ["x"],
  gradFunc: (n, t, e) => {
    const [s] = t, { filterSize: r, strides: o, pad: i } = e;
    return { x: () => eD(n, s, r, o, i) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const sD = {
  kernelName: cl,
  inputsToSave: ["a", "b"],
  gradFunc: (n, t, e) => {
    const [s, r] = t, { transposeA: o, transposeB: i } = e;
    return !o && !i ? {
      a: () => Ct(n, r, !1, !0),
      b: () => Ct(s, n, !0, !1)
    } : !o && i ? {
      a: () => Ct(n, r, !1, !1),
      b: () => Ct(n, s, !0, !1)
    } : o && !i ? {
      a: () => Ct(r, n, !1, !0),
      b: () => Ct(s, n, !1, !1)
    } : {
      a: () => Ct(r, n, !0, !0),
      b: () => Ct(n, s, !0, !0)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const rD = {
  kernelName: ul,
  gradFunc: (n, t, e) => {
    const { blockShape: s, crops: r } = e;
    return { x: () => gc(n, s, r) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const oD = {
  kernelName: T1,
  gradFunc: (n, t, e) => {
    const s = e, r = s.inputShape, o = s.shape, i = Array.from(o);
    for (let l = r.length - 1; l >= 0; l--)
      if (r[l] === o[l])
        i[l] = 1;
      else if (r[l] !== 1)
        throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${o}].`);
    const a = [];
    for (let l = 0; l < i.length; l++)
      i[l] > 1 && a.push(l);
    return { x: () => at(n, a, !0) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const iD = {
  kernelName: ii,
  gradFunc: (n) => ({ x: () => n.clone() })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const aD = {
  kernelName: ai,
  gradFunc: (n) => ({ x: () => Rt(n) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const lD = {
  kernelName: li,
  inputsToSave: ["x"],
  gradFunc: (n, t, e) => {
    const [s] = t, { clipValueMin: r, clipValueMax: o } = e;
    return {
      x: () => Me(Hn(Tr(s, r), Nr(s, o)), n, Rt(n))
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const cD = {
  kernelName: hl,
  inputsToSave: ["x"],
  gradFunc: DI.gradFunc
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const uD = {
  kernelName: dl,
  saveAllInputs: !0,
  gradFunc: (n, t, e) => {
    const s = t.map((l) => l.shape), { axis: r } = e, o = vt(r, t[0].shape)[0], i = s.map((l) => l[o]);
    return tn(n, i, o).map((l) => () => l);
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const hD = {
  kernelName: pl,
  inputsToSave: ["x", "filter"],
  gradFunc: (n, t, e) => {
    const [s, r] = t, { dilations: o, strides: i, pad: a, dataFormat: l } = e;
    return C(yr(o), () => `Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${o}'`), {
      x: () => pg(s.shape, n, r, i, a, l),
      filter: () => Bg(s, n, r.shape, i, a, l)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const dD = {
  kernelName: fl,
  inputsToSave: ["dy", "filter"],
  gradFunc: (n, t, e) => {
    const [s, r] = t, { strides: o, pad: i, dataFormat: a, dimRoundingMode: l } = e;
    return {
      dy: () => Xs(n, r, o, i, a, 1, l),
      filter: () => Bg(n, s, r.shape, o, i, a, l)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function pD(n, t, e, s, r) {
  let o = n;
  n.rank === 4 && (o = G(n, [1, n.shape[0], n.shape[1], n.shape[2], n.shape[3]]));
  let i = t;
  i.rank === 4 && (i = G(t, [1, t.shape[0], t.shape[1], t.shape[2], t.shape[3]])), C(o.rank === 5, () => `Error in conv3dDerFilter: input must be rank 5, but got shape ${o.shape}.`), C(i.rank === 5, () => `Error in conv3dDerFilter: dy must be rank 5, but got shape ${i.shape}.`), C(e.length === 5, () => `Error in conv3dDerFilter: filterShape must be length 5, but got ${e}.`), C(o.shape[4] === e[3], () => `Error in conv3dDerFilter: depth of input ${o.shape[4]}) must match input depth in filter (${e[3]}.`), C(i.shape[4] === e[4], () => `Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${e[4]}).`);
  const a = { x: o, dy: i }, l = { strides: s, pad: r, filterShape: e };
  return E.runKernel(hh, a, l);
}
const fD = L({ conv3DBackpropFilter_: pD });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const mD = {
  kernelName: ml,
  inputsToSave: ["x", "filter"],
  gradFunc: (n, t, e) => {
    const { dilations: s, strides: r, pad: o } = e;
    C(yr(s), () => `Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`);
    const [i, a] = t;
    return {
      x: () => xw(i.shape, n, a, r, o),
      filter: () => fD(i, n, a.shape, r, o)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const gD = {
  kernelName: ci,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => D(Yt(Ld(et(e, "float32"))), n) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const yD = {
  kernelName: ui,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => D(Dd(et(e, "float32")), n) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const bD = {
  kernelName: gl,
  inputsToSave: ["x"],
  gradFunc: (n, t, e) => {
    const [s] = t, { axis: r, exclusive: o, reverse: i } = e;
    return {
      x: () => {
        const a = oe([r], s.rank);
        let l = yd(n, r, o, !i);
        return a != null && (l = kt(l, a)), l;
      }
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const xD = {
  kernelName: yl,
  inputsToSave: ["x", "filter"],
  gradFunc: (n, t, e) => {
    const { dilations: s, strides: r, pad: o, dimRoundingMode: i } = e, a = s == null ? [1, 1] : s;
    C(yr(a), () => `Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`);
    const [l, c] = t;
    return C(l.rank === 4, () => `Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`), C(c.rank === 4, () => `Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${c.rank}.`), C(l.shape[3] === c.shape[2], () => `Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${c.shape[2]}.`), C(Ae(r, a), () => `Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${r} and dilations '${a}'.`), Ye("depthwiseConv2d", o, i), {
      x: () => dI(l.shape, n, c, r, o, a, i),
      filter: () => hI(l, n, c.shape, r, o, a, i)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const wD = {
  kernelName: bl,
  inputsToSave: ["x", "filter"],
  gradFunc: (n, t, e) => {
    const [s, r] = t, o = { x: s, filter: r, dy: n }, i = { x: s, filter: r, dy: n };
    return {
      x: () => E.runKernel(Su, o, e),
      filter: () => E.runKernel(vu, i, e)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ID = {
  kernelName: di,
  outputsToSave: [!0],
  gradFunc: (n, t) => {
    const [e] = t, s = { dy: n, y: e };
    return { x: () => E.runKernel(Ih, s) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const SD = {
  kernelName: pi,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t, s = D(bn(Yt(Wt(e))), 2 / Math.sqrt(Math.PI));
    return { x: () => D(n, s) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const vD = {
  kernelName: fi,
  outputsToSave: [!0],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => D(n, e) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const CD = {
  kernelName: wl,
  inputsToSave: ["input"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { input: () => G(n, e.shape) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const kD = {
  kernelName: mi,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => D(n, bn(e)) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const TD = {
  kernelName: gi,
  gradFunc: (n) => ({ x: () => Rt(n) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ND = {
  kernelName: yi,
  inputsToSave: ["a", "b"],
  gradFunc: (n, t) => {
    const [e, s] = t, r = bt(e.shape, s.shape);
    return { a: () => {
      const a = ht(n, et(s, "float32")), l = be(e.shape, r);
      return l.length > 0 ? G(at(a, l), e.shape) : a;
    }, b: () => {
      let a = D(n, et(e, "float32"));
      const l = be(s.shape, r);
      l.length > 0 && (a = G(at(a, l), s.shape));
      const c = Wt(s);
      return Yt(ht(a, et(c, "float32")));
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const $D = {
  kernelName: Il,
  inputsToSave: ["x", "mean", "variance", "scale"],
  gradFunc: (n, t, e) => {
    const { varianceEpsilon: s } = e, [r, o, i, a] = t, l = a == null ? ft(1) : a, c = be(o.shape, r.shape), u = [];
    if (o.rank === 1) {
      for (let x = 0; x < r.shape.length - 1; ++x)
        u.push(r.shape[x]);
      u.push(1);
    }
    const h = it(r, o), d = D(n, l), p = $d(U(i, ft(s))), f = D(D(D(p, p), p), ft(-0.5));
    return {
      x: () => o.rank === 1 ? G(D(D(n, $n(G(p, [1, 1, 1, o.shape[0]]), u)), l), r.shape) : G(D(D(n, p), l), r.shape),
      mean: () => {
        let x = D(D(p, ft(-1)), d);
        return o.rank === 1 && (x = at(x, c)), G(x, o.shape);
      },
      variance: () => {
        let x = D(D(f, h), d);
        return o.rank === 1 && (x = at(x, c)), G(x, o.shape);
      },
      scale: () => {
        const x = D(h, p);
        let S = D(n, x);
        return o.rank === 1 && (S = at(S, c)), G(S, o.shape);
      },
      offset: () => {
        let x = n;
        return o.rank === 1 && (x = at(x, c)), G(x, o.shape);
      }
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const RD = {
  kernelName: Sl,
  inputsToSave: ["x", "indices"],
  gradFunc: (n, t, e) => {
    const [s, r] = t, { axis: o } = e, i = vt(o, s.shape)[0];
    return { x: () => {
      const l = s.shape, c = r.size, u = l.slice(0, i), h = u.length, d = l.slice(o, l.length).slice(1), p = d.length, f = Pb(0, h), m = Pb(h + 1, h + 1 + p), g = Xb([u, [c], d]), y = G(n, g), b = G(r, [c]), w = Xb([[h], f, m]), x = kt(y, w);
      let S = zd(x, b, s.shape[i]);
      const v = kr(w);
      return S = kt(S, v), S;
    }, indices: () => r };
  }
};
function Pb(n, t) {
  const e = [];
  for (let s = n; s < t; ++s)
    e.push(s);
  return e;
}
function Xb(n) {
  const t = [];
  for (let e = 0; e < n.length; ++e)
    for (let s = 0; s < n[e].length; ++s)
      t.push(n[e][s]);
  return t;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ED = {
  kernelName: bi,
  inputsToSave: ["a", "b"],
  gradFunc: (n, t) => {
    const [e, s] = t;
    return { a: () => Rt(e), b: () => Rt(s) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const LD = {
  kernelName: xi,
  gradFunc: (n) => ({ x: () => et(n, "float32") })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const DD = {
  kernelName: wi,
  gradFunc: (n) => ({ x: () => Rt(n) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const GD = {
  kernelName: Ii,
  gradFunc: (n) => ({ x: () => Rt(n) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const FD = {
  kernelName: Si,
  gradFunc: (n) => ({ x: () => Rt(n) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const OD = {
  kernelName: Cl,
  inputsToSave: ["x"],
  gradFunc: (n, t, e) => {
    const [s] = t, { alpha: r } = e, o = an(s, 0);
    return { x: () => Me(o, n, D(n, r)) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const AD = {
  kernelName: Ci,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => ht(n, U(e, 1)) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const zD = {
  kernelName: vi,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => ht(n, et(e, "float32")) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const WD = {
  kernelName: N1,
  inputsToSave: [],
  outputsToSave: [!0],
  gradFunc: (n, t, e) => {
    const [s] = t, { axis: r } = e;
    return {
      logits: () => {
        const i = bn(s);
        return it(n, D(at(n, r, !0), i));
      }
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function VD(n, t, e, s = 5, r = 1, o = 1, i = 0.5) {
  const a = { x: n, y: t, dy: e }, l = { depthRadius: s, bias: r, alpha: o, beta: i };
  return E.runKernel(Rh, a, l);
}
const MD = L({ localResponseNormalizationBackprop_: VD });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const PD = {
  kernelName: El,
  inputsToSave: ["x"],
  outputsToSave: [!0],
  gradFunc: (n, t, e) => {
    const [s, r] = t, { depthRadius: o, bias: i, alpha: a, beta: l } = e;
    return {
      x: () => MD(s, r, n, o, i, a, l)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function GI(n, t, e, s) {
  return t.rank < e.rank && (t = G(t, de(t.shape, s))), n.rank < e.rank && (n = G(n, de(n.shape, s))), {
    x: () => D(n, et(yn(e, t), n.dtype))
  };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const _b = {
  kernelName: Ll,
  inputsToSave: ["x"],
  outputsToSave: [!0],
  gradFunc: (n, t, e) => {
    const s = e, { reductionIndices: r } = s, o = t[0], i = t[1], a = vt(r, o.shape), l = GI(n, i, o, a);
    return {
      x: () => l.x()
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const XD = {
  kernelName: ki,
  inputsToSave: ["a", "b"],
  gradFunc: (n, t) => {
    const [e, s] = t;
    return { a: () => D(n, et(Tr(e, s), "float32")), b: () => D(n, et(xd(e, s), "float32")) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _D(n, t, e, s, r, o, i) {
  const a = k(n, "dy", "maxPool3dGrad"), l = k(t, "input", "maxPool3dGrad"), c = k(e, "output", "maxPool3dGrad");
  let u = a, h = l, d = c, p = !1;
  l.rank === 4 && (p = !0, u = G(a, [1, a.shape[0], a.shape[1], a.shape[2], a.shape[3]]), h = G(l, [
    1,
    l.shape[0],
    l.shape[1],
    l.shape[2],
    l.shape[3]
  ]), d = G(c, [
    1,
    c.shape[0],
    c.shape[1],
    c.shape[2],
    c.shape[3]
  ])), C(u.rank === 5, () => `Error in maxPool3dGrad: dy must be rank 5 but got rank ${u.rank}.`), C(h.rank === 5, () => `Error in maxPool3dGrad: input must be rank 5 but got rank ${h.rank}.`), C(d.rank === 5, () => `Error in maxPool3dGrad: output must be rank 5 but got rank ${d.rank}.`), Ye("maxPool3dGrad", o, i);
  const f = { dy: u, input: h, output: d }, m = { filterSize: s, strides: r, pad: o, dimRoundingMode: i }, g = E.runKernel(Lh, f, m);
  return p ? G(g, [g.shape[1], g.shape[2], g.shape[3], g.shape[4]]) : g;
}
const KD = L({ maxPool3dGrad_: _D });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ZD = {
  kernelName: Gl,
  inputsToSave: ["x"],
  outputsToSave: [!0],
  gradFunc: (n, t, e) => {
    const [s, r] = t, { filterSize: o, strides: i, pad: a, dimRoundingMode: l } = e;
    return {
      x: () => KD(n, s, r, o, i, a, l)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function BD(n, t, e, s, r, o, i) {
  const a = k(n, "dy", "maxPoolGrad"), l = k(t, "input", "maxPoolGrad"), c = k(e, "output", "maxPoolGrad");
  C(l.rank === a.rank, () => `Rank of input (${l.rank}) does not match rank of dy (${a.rank})`), C(a.rank === 4, () => `Error in maxPoolGrad: dy must be rank 4 but got rank ${a.rank}.`), C(l.rank === 4, () => `Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`), Ye("maxPoolGrad", o, i);
  const u = { dy: a, input: l, output: c }, h = { filterSize: s, strides: r, pad: o, dimRoundingMode: i };
  return E.runKernel(Eh, u, h);
}
const HD = L({ maxPoolGrad_: BD });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const UD = {
  kernelName: Dl,
  inputsToSave: ["x"],
  outputsToSave: [!0],
  gradFunc: (n, t, e) => {
    const [s, r] = t, { filterSize: o, strides: i, pad: a } = e;
    return {
      x: () => HD(n, s, r, o, i, a)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const YD = {
  kernelName: Fl,
  inputsToSave: ["x"],
  gradFunc: (n, t, e) => {
    const [s] = t, { axis: r } = e, o = vt(r, s.shape), a = ve(s.shape, o)[1], l = P(a);
    return { x: () => {
      const u = s.shape.slice();
      o.forEach((p) => {
        u[p] = 1;
      });
      const h = G(n, u);
      return ht(D(h, fn(s.shape, "float32")), l);
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const jD = {
  kernelName: Ol,
  inputsToSave: ["x"],
  outputsToSave: [!0],
  gradFunc: (n, t, e) => {
    const s = e, { axis: r } = s, [o, i] = t, a = vt(r, o.shape), l = GI(n, i, o, a);
    return {
      x: () => l.x()
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const JD = {
  kernelName: Ti,
  inputsToSave: ["a", "b"],
  gradFunc: (n, t) => {
    const [e, s] = t;
    return { a: () => D(n, et(Nr(e, s), "float32")), b: () => D(n, et(an(e, s), "float32")) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const QD = {
  kernelName: Al,
  inputsToSave: ["x"],
  gradFunc: (n, t, e) => {
    const s = t[0], { paddings: r } = e, o = r.map((i) => i[0]);
    return { x: () => $t(n, o, s.shape) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const qD = {
  kernelName: Ni,
  inputsToSave: ["a", "b"],
  gradFunc: (n, t) => {
    const [e, s] = t, r = bt(e.shape, s.shape);
    return { a: () => {
      const a = be(e.shape, r);
      return a.length > 0 ? G(at(n, a), e.shape) : n;
    }, b: () => {
      const a = D(n, Yt(qi(ht(e, s)))), l = be(s.shape, r);
      return l.length > 0 ? G(at(a, l), s.shape) : a;
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const tG = {
  kernelName: $i,
  inputsToSave: ["a", "b"],
  gradFunc: (n, t) => {
    const [e, s] = t, r = bt(e.shape, s.shape);
    return { a: () => {
      const a = D(n, et(s, "float32")), l = be(e.shape, r);
      return l.length > 0 ? G(at(a, l), e.shape) : a;
    }, b: () => {
      const a = D(n, et(e, "float32")), l = be(s.shape, r);
      return l.length > 0 ? G(at(a, l), s.shape) : a;
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const eG = {
  kernelName: zl,
  gradFunc: (n) => ({ x: () => Yt(n) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const nG = {
  kernelName: Ml,
  inputsToSave: ["indices"],
  gradFunc: (n, t) => {
    const e = t[0];
    return { indices: () => ge(e.shape, "float32") };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const sG = {
  kernelName: Vl,
  gradFunc: (n) => ({ x: () => Rt(n) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const rG = {
  kernelName: Pl,
  saveAllInputs: !0,
  gradFunc: (n, t, e) => {
    const { axis: s } = e;
    return Un(n, s).map((o) => () => o);
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Kb = {
  kernelName: Xl,
  inputsToSave: ["x"],
  gradFunc: (n, t, e) => {
    const s = t[0], { paddings: r } = e, o = r.map((i) => i[0]);
    return { x: () => $t(n, o, s.shape) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const oG = {
  kernelName: Ri,
  inputsToSave: ["a", "b"],
  outputsToSave: [!0],
  gradFunc: (n, t) => {
    const [e, s, r] = t, o = e, i = s, a = bt(o.shape, i.shape);
    return { a: () => {
      const u = et(i, "float32");
      let h = D(n, D(u, _s(o, it(u, ft(1)))));
      const d = be(o.shape, a);
      return d.length > 0 && (h = at(h, d)), G(h, o.shape);
    }, b: () => {
      const u = an(o, 0), h = Me(u, xn(o), Rt(o));
      let d = D(n, D(r, h));
      const p = be(i.shape, a);
      return p.length > 0 && (d = at(d, p)), G(d, i.shape);
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const iG = {
  kernelName: _l,
  inputsToSave: ["x", "alpha"],
  gradFunc: (n, t) => {
    const [e, s] = t, r = an(e, 0);
    return {
      x: () => Me(r, n, D(n, s)),
      alpha: () => {
        let o = Me(r, Rt(n), D(n, e));
        const i = be(s.shape, n.shape);
        return i.length > 0 && (o = at(o, i)), G(o, s.shape);
      }
    };
  }
};
/**
 * @license
 * Copyright 2022 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function aG(n, t, e) {
  const s = n.shape.slice();
  s[e] = 1;
  const r = G(t, s), o = Ha(n, e, !0, !1), i = Ha(n, e, !0, !0), a = D(o, i);
  return D(r, a);
}
function lG(n, t, e) {
  const s = n.shape.length, r = s - e.length, o = oe(e, s);
  let i = n;
  o != null && (i = kt(n, o));
  const a = i.shape.slice(), c = a.splice(s - e.length, e.length).reduce((d, p) => d * p, 1);
  a.push(c);
  const u = i.reshape(a);
  let h = aG(u, t, r);
  if (h = h.reshape(i.shape), o != null) {
    const d = kr(o);
    h = kt(h, d);
  }
  return h;
}
const cG = {
  kernelName: Kl,
  inputsToSave: ["x"],
  gradFunc: (n, t, e) => {
    const [s] = t, { axis: r } = e;
    let o = [];
    return r == null ? o = s.shape.map((i, a) => a) : typeof r == "number" ? o = [r] : o = r, { x: () => lG(s, n, o) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const uG = {
  kernelName: hi,
  inputsToSave: ["a", "b"],
  gradFunc: (n, t) => {
    const [e, s] = t, r = bt(e.shape, s.shape);
    return { a: () => {
      const a = ht(n, et(s, "float32")), l = be(e.shape, r);
      return l.length > 0 ? G(at(a, l), e.shape) : a;
    }, b: () => {
      let a = D(n, et(e, "float32"));
      const l = be(s.shape, r);
      l.length > 0 && (a = G(at(a, l), s.shape));
      const c = Wt(s);
      return Yt(ht(a, et(c, "float32")));
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const hG = {
  kernelName: Ei,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => ht(n, Yt(Wt(e))) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const dG = {
  kernelName: Di,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t, s = D(Nr(e, 6), yo(e));
    return { x: () => D(n, et(s, "float32")) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const pG = {
  kernelName: Li,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => D(n, et(yo(e), "float32")) };
  }
};
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const fG = {
  kernelName: Zl,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => G(n, e.shape) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const mG = {
  kernelName: Hl,
  inputsToSave: ["images"],
  gradFunc: (n, t, e) => {
    const [s] = t, r = { dy: n, images: s };
    return { images: () => E.runKernel(Xh, r, e) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const gG = {
  kernelName: Bl,
  inputsToSave: ["images"],
  gradFunc: (n, t, e) => {
    const [s] = t, r = { dy: n, images: s };
    return { images: () => E.runKernel(Ph, r, e) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const yG = {
  kernelName: Ul,
  gradFunc: (n, t, e) => {
    const { dims: s } = e, r = vt(s, n.shape);
    return { x: () => Dn(n, r) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const bG = {
  kernelName: Gi,
  gradFunc: (n) => ({ x: () => Rt(n) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const xG = {
  kernelName: Fi,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => Yt(ht(n, D(_s(e, 1.5), 2))) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const wG = {
  kernelName: Yl,
  inputsToSave: ["condition"],
  gradFunc: (n, t) => {
    const [e] = t;
    return {
      condition: () => et(Rt(e), "float32"),
      t: () => D(n, et(e, n.dtype)),
      e: () => D(n, et(pc(e), n.dtype))
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const IG = {
  kernelName: Oi,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return {
      x: () => {
        const s = an(e, ft(0)), r = ft(tp), o = ft(ep), i = D(n, o), a = D(D(n, r), bn(et(e, "float32")));
        return Me(s, i, a);
      }
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const SG = {
  kernelName: Vi,
  outputsToSave: [!0],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => D(n, D(e, it(ft(1), e))) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const vG = {
  kernelName: Wi,
  gradFunc: (n) => ({ x: () => Rt(n) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const CG = {
  kernelName: Ai,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => D(uc(et(e, "float32")), n) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const kG = {
  kernelName: zi,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => D(gd(et(e, "float32")), n) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const TG = {
  kernelName: jl,
  inputsToSave: ["x"],
  gradFunc: (n, t, e) => {
    const [s] = t, { begin: r, size: o } = e, i = s.shape, [a, l] = hd(s, r, o), c = [];
    for (let u = 0; u < n.rank; u++)
      c.push([a[u], i[u] - a[u] - l[u]]);
    return { x: () => js(n, c) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const NG = {
  kernelName: tc,
  outputsToSave: [!0],
  gradFunc: (n, t, e) => {
    const [s] = t, { dim: r } = e, o = !0, i = D(n, s);
    return {
      logits: () => it(i, D(at(i, [r], o), s))
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const $G = {
  kernelName: Mi,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => D(n, ss(e)) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Zb = {
  kernelName: Ql,
  gradFunc: (n, t, e) => {
    const { blockShape: s, paddings: r } = e;
    return { x: () => cc(n, s, r) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Bb = {
  kernelName: ql,
  gradFunc: (n, t, e) => {
    const { axis: s } = e;
    return { x: () => he(n, s) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const RG = {
  kernelName: Pi,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => ht(n, D(Fe(et(e, "float32")), 2)) };
  }
};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const EG = {
  kernelName: jh,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => D(n, D(et(e, "float32"), 2)) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const LG = {
  kernelName: Xi,
  inputsToSave: ["a", "b"],
  gradFunc: (n, t) => {
    const [e, s] = t, r = ft(2);
    return { a: () => D(n, D(r, it(e, s))), b: () => D(n, D(r, it(s, e))) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const DG = {
  kernelName: Hi,
  gradFunc: (n) => ({ x: () => Rt(n) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const GG = {
  kernelName: _i,
  inputsToSave: ["a", "b"],
  gradFunc: (n, t) => {
    const [e, s] = t, r = bt(e.shape, s.shape);
    return { a: () => {
      let a = n;
      const l = be(e.shape, r);
      return l.length > 0 && (a = at(a, l)), G(a, e.shape);
    }, b: () => {
      let a = n;
      const l = be(s.shape, r);
      return l.length > 0 && (a = at(a, l)), G(Yt(a), s.shape);
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const FG = {
  kernelName: Jl,
  inputsToSave: ["x"],
  gradFunc: (n, t, e) => {
    const [s] = t, r = s.shape.slice(), { axis: o } = e;
    vt(o, s.shape).forEach((c) => {
      r[c] = 1;
    });
    const a = G(n, r), l = D(a, fn(s.shape, "float32"));
    return { x: () => l };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const OG = {
  kernelName: Ki,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => ht(n, Wt(uc(e))) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const AG = {
  kernelName: Zi,
  outputsToSave: [!0],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => D(it(ft(1), Wt(e)), n) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const zG = {
  kernelName: Bi,
  inputsToSave: ["x"],
  gradFunc: (n, t, e) => {
    const [s] = t, { reps: r } = e;
    return { x: () => {
      let i = Rt(s);
      if (s.rank === 1)
        for (let a = 0; a < r[0]; ++a)
          i = U(i, $t(n, [a * s.shape[0]], [s.shape[0]]));
      else if (s.rank === 2)
        for (let a = 0; a < r[0]; ++a)
          for (let l = 0; l < r[1]; ++l)
            i = U(i, $t(n, [a * s.shape[0], l * s.shape[1]], [
              s.shape[0],
              s.shape[1]
            ]));
      else if (s.rank === 3)
        for (let a = 0; a < r[0]; ++a)
          for (let l = 0; l < r[1]; ++l)
            for (let c = 0; c < r[2]; ++c)
              i = U(i, $t(n, [a * s.shape[0], l * s.shape[1], c * s.shape[2]], [s.shape[0], s.shape[1], s.shape[2]]));
      else if (s.rank === 4)
        for (let a = 0; a < r[0]; ++a)
          for (let l = 0; l < r[1]; ++l)
            for (let c = 0; c < r[2]; ++c)
              for (let u = 0; u < r[3]; ++u)
                i = U(i, $t(n, [
                  a * s.shape[0],
                  l * s.shape[1],
                  c * s.shape[2],
                  u * s.shape[3]
                ], [s.shape[0], s.shape[1], s.shape[2], s.shape[3]]));
      else
        throw new Error(`Gradient for tile operation is not implemented for rank-${s.rank} tensors yet.`);
      return i;
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const WG = {
  kernelName: Zr,
  gradFunc: (n, t, e) => {
    const s = e, { perm: r } = s, o = kr(r);
    return { x: () => kt(n, o) };
  }
};
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const VG = {
  kernelName: ec,
  gradFunc: (n, t, e) => {
    const s = e, { axis: r } = s;
    return { value: () => nn(n, r) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const MG = {
  kernelName: nc,
  inputsToSave: ["segmentIds"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => PG(n, e) };
  }
};
function PG(n, t) {
  const e = $s(t, Rt(t)), s = ta(n, e);
  let r = Tr(t, ft(0, "int32"));
  const o = s.rank - r.rank;
  for (let a = 0; a < o; ++a)
    r = Qe(r, a + 1);
  r = Hn(r, fn(s.shape, "bool"));
  const i = Rt(s);
  return Me(r, s, i);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const XG = {
  kernelName: sc,
  gradFunc: (n) => ({ x: () => Rt(n) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const _G = [
  DI,
  ML,
  PL,
  XL,
  _L,
  KL,
  ZL,
  BL,
  HL,
  UL,
  YL,
  jL,
  qL,
  nD,
  sD,
  rD,
  oD,
  iD,
  aD,
  lD,
  cD,
  uD,
  dD,
  hD,
  mD,
  gD,
  yD,
  bD,
  xD,
  wD,
  uG,
  ID,
  SD,
  vD,
  CD,
  kD,
  ND,
  TD,
  $D,
  RD,
  ED,
  LD,
  DD,
  GD,
  FD,
  OD,
  AD,
  zD,
  WD,
  PD,
  _b,
  _b,
  XD,
  ZD,
  UD,
  YD,
  jD,
  JD,
  QD,
  qD,
  tG,
  eG,
  nG,
  sG,
  rG,
  Kb,
  Kb,
  oG,
  iG,
  cG,
  hG,
  dG,
  pG,
  fG,
  mG,
  gG,
  yG,
  bG,
  xG,
  wG,
  IG,
  SG,
  vG,
  CG,
  kG,
  TG,
  NG,
  $G,
  Zb,
  Zb,
  Bb,
  Bb,
  RG,
  LG,
  EG,
  DG,
  GG,
  FG,
  OG,
  AG,
  zG,
  WG,
  VG,
  MG,
  XG
];
for (const n of _G)
  $1(n);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.abs = function() {
  return this.throwIfDisposed(), me(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.acos = function() {
  return this.throwIfDisposed(), Um(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.acosh = function() {
  return this.throwIfDisposed(), Ym(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.add = function(n) {
  return this.throwIfDisposed(), U(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.all = function(n, t) {
  return this.throwIfDisposed(), pd(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.any = function(n, t) {
  return this.throwIfDisposed(), Ba(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.argMax = function(n) {
  return this.throwIfDisposed(), qr(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.argMin = function(n) {
  return this.throwIfDisposed(), jm(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.asScalar = function() {
  return this.throwIfDisposed(), C(this.size === 1, () => "The array must have only 1 element."), G(this, []);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.asType = function(n) {
  return this.throwIfDisposed(), et(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.as1D = function() {
  return this.throwIfDisposed(), G(this, [this.size]);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.as2D = function(n, t) {
  return this.throwIfDisposed(), G(this, [n, t]);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.as3D = function(n, t, e) {
  return this.throwIfDisposed(), G(this, [n, t, e]);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.as4D = function(n, t, e, s) {
  return this.throwIfDisposed(), G(this, [n, t, e, s]);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.as5D = function(n, t, e, s, r) {
  return this.throwIfDisposed(), G(this, [n, t, e, s, r]);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.asin = function() {
  return this.throwIfDisposed(), Jm(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.asinh = function() {
  return this.throwIfDisposed(), Qm(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.atan = function() {
  return this.throwIfDisposed(), qm(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.atan2 = function(n) {
  return this.throwIfDisposed(), tg(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.atanh = function() {
  return this.throwIfDisposed(), eg(this);
};
K().prototype.avgPool = function(n, t, e, s) {
  return this.throwIfDisposed(), lc(this, n, t, e, s);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.batchToSpaceND = function(n, t) {
  return this.throwIfDisposed(), cc(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.batchNorm = function(n, t, e, s, r) {
  return this.throwIfDisposed(), Yi(this, n, t, e, s, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.broadcastTo = function(n) {
  return this.throwIfDisposed(), ur(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.cast = function(n) {
  return this.throwIfDisposed(), et(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.ceil = function() {
  return this.throwIfDisposed(), lg(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.clipByValue = function(n, t) {
  return this.throwIfDisposed(), en(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.concat = function(n, t) {
  return this.throwIfDisposed(), n instanceof Lt && (n = [n]), he([this, ...n], t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.conv1d = function(n, t, e, s, r, o) {
  return this.throwIfDisposed(), fd(this, n, t, e, s, r, o);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.conv2dTranspose = function(n, t, e, s, r) {
  return this.throwIfDisposed(), md(this, n, t, e, s, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.conv2d = function(n, t, e, s, r, o) {
  return this.throwIfDisposed(), Xs(this, n, t, e, s, r, o);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.cos = function() {
  return this.throwIfDisposed(), uc(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.cosh = function() {
  return this.throwIfDisposed(), gd(this);
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.cumprod = function(n, t, e) {
  return this.throwIfDisposed(), Ha(this, n, t, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.cumsum = function(n, t, e) {
  return this.throwIfDisposed(), yd(this, n, t, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.depthToSpace = function(n, t) {
  return this.throwIfDisposed(), gg(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.depthwiseConv2d = function(n, t, e, s, r, o) {
  return this.throwIfDisposed(), ji(this, n, t, e, s, r, o);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.dilation2d = function(n, t, e, s, r) {
  return this.throwIfDisposed(), yg(this, n, t, e, s, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.divNoNan = function(n) {
  return this.throwIfDisposed(), bg(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.div = function(n) {
  return this.throwIfDisposed(), ht(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.dot = function(n) {
  return this.throwIfDisposed(), xg(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.elu = function() {
  return this.throwIfDisposed(), Ji(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.equal = function(n) {
  return this.throwIfDisposed(), yn(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.erf = function() {
  return this.throwIfDisposed(), wg(this);
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.euclideanNorm = function(n, t) {
  return this.throwIfDisposed(), Sg(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.exp = function() {
  return this.throwIfDisposed(), bn(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.expandDims = function(n) {
  return this.throwIfDisposed(), Qe(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.expm1 = function() {
  return this.throwIfDisposed(), vg(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.fft = function() {
  return this.throwIfDisposed(), Ic(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.flatten = function() {
  return this.throwIfDisposed(), G(this, [this.size]);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.floor = function() {
  return this.throwIfDisposed(), qi(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.floorDiv = function(n) {
  return this.throwIfDisposed(), dd(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.gather = function(n, t) {
  return this.throwIfDisposed(), ta(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.greaterEqual = function(n) {
  return this.throwIfDisposed(), Tr(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.greater = function(n) {
  return this.throwIfDisposed(), an(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.ifft = function() {
  return this.throwIfDisposed(), Xo(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.irfft = function() {
  return this.throwIfDisposed(), Fd(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.isFinite = function() {
  return this.throwIfDisposed(), Cg(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.isInf = function() {
  return this.throwIfDisposed(), kg(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.isNaN = function() {
  return this.throwIfDisposed(), Tg(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.leakyRelu = function(n) {
  return this.throwIfDisposed(), hc(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.lessEqual = function(n) {
  return this.throwIfDisposed(), Nr(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.less = function(n) {
  return this.throwIfDisposed(), xd(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.localResponseNormalization = function(n, t, e, s) {
  return this.throwIfDisposed(), Ng(this, n, t, e, s);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.logSigmoid = function() {
  return this.throwIfDisposed(), $g(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.logSoftmax = function(n) {
  return this.throwIfDisposed(), Id(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.logSumExp = function(n, t) {
  return this.throwIfDisposed(), Sd(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.log = function() {
  return this.throwIfDisposed(), xn(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.log1p = function() {
  return this.throwIfDisposed(), dc(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.logicalAnd = function(n) {
  return this.throwIfDisposed(), Hn(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.logicalNot = function() {
  return this.throwIfDisposed(), pc(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.logicalOr = function(n) {
  return this.throwIfDisposed(), vd(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.logicalXor = function(n) {
  return this.throwIfDisposed(), Rg(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.matMul = function(n, t, e) {
  return this.throwIfDisposed(), Ct(this, n, t, e);
};
K().prototype.maxPool = function(n, t, e, s) {
  return this.throwIfDisposed(), fc(this, n, t, e, s);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.max = function(n, t) {
  return this.throwIfDisposed(), Bn(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.maximum = function(n) {
  return this.throwIfDisposed(), $s(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.mean = function(n, t) {
  return this.throwIfDisposed(), ne(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.min = function(n, t) {
  return this.throwIfDisposed(), Ua(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.minimum = function(n) {
  return this.throwIfDisposed(), ea(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.mirrorPad = function(n, t) {
  return this.throwIfDisposed(), Lg(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.mod = function(n) {
  return this.throwIfDisposed(), Dg(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.mul = function(n) {
  return this.throwIfDisposed(), D(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.neg = function() {
  return this.throwIfDisposed(), Yt(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.norm = function(n, t, e) {
  return this.throwIfDisposed(), Qi(this, n, t, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.notEqual = function(n) {
  return this.throwIfDisposed(), eo(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.oneHot = function(n, t = 1, e = 0) {
  return this.throwIfDisposed(), Wo(this, n, t, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.onesLike = function() {
  return this.throwIfDisposed(), wn(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.pad = function(n, t) {
  return this.throwIfDisposed(), js(this, n, t);
};
K().prototype.pool = function(n, t, e, s, r, o) {
  return this.throwIfDisposed(), Gg(this, n, t, e, s, r, o);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.pow = function(n) {
  return this.throwIfDisposed(), _s(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.prelu = function(n) {
  return this.throwIfDisposed(), yc(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.prod = function(n, t) {
  return this.throwIfDisposed(), Fg(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.reciprocal = function() {
  return this.throwIfDisposed(), Ag(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.relu = function() {
  return this.throwIfDisposed(), us(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.relu6 = function() {
  return this.throwIfDisposed(), Td(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.reshapeAs = function(n) {
  return this.throwIfDisposed(), G(this, n.shape);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.reshape = function(n) {
  return this.throwIfDisposed(), G(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.resizeBilinear = function(n, t, e) {
  return this.throwIfDisposed(), gI(this, n, t, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.resizeNearestNeighbor = function(n, t, e) {
  return this.throwIfDisposed(), yI(this, n, t, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.reverse = function(n) {
  return this.throwIfDisposed(), Dn(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.rfft = function() {
  return this.throwIfDisposed(), Sc(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.round = function() {
  return this.throwIfDisposed(), Nd(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.rsqrt = function() {
  return this.throwIfDisposed(), $d(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.selu = function() {
  return this.throwIfDisposed(), Rd(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.separableConv2d = function(n, t, e, s, r, o) {
  return this.throwIfDisposed(), Ed(this, n, t, e, s, r, o);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.sigmoid = function() {
  return this.throwIfDisposed(), ss(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.sign = function() {
  return this.throwIfDisposed(), zg(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.sin = function() {
  return this.throwIfDisposed(), Ld(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.sinh = function() {
  return this.throwIfDisposed(), Dd(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.slice = function(n, t) {
  return this.throwIfDisposed(), $t(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.softmax = function(n) {
  return this.throwIfDisposed(), wc(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.softplus = function() {
  return this.throwIfDisposed(), mo(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.spaceToBatchND = function(n, t) {
  return this.throwIfDisposed(), gc(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.split = function(n, t) {
  return this.throwIfDisposed(), tn(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.sqrt = function() {
  return this.throwIfDisposed(), Fe(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.square = function() {
  return this.throwIfDisposed(), Wt(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.squaredDifference = function(n) {
  return this.throwIfDisposed(), Od(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.squeeze = function(n) {
  return this.throwIfDisposed(), $r(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.stack = function(n, t) {
  this.throwIfDisposed();
  const e = n instanceof Lt ? [this, n] : [this, ...n];
  return nn(e, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.step = function(n) {
  return this.throwIfDisposed(), yo(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.stridedSlice = function(n, t, e, s, r, o, i, a) {
  return this.throwIfDisposed(), Wg(this, n, t, e, s, r, o, i, a);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.sub = function(n) {
  return this.throwIfDisposed(), it(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.sum = function(n, t) {
  return this.throwIfDisposed(), at(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.tan = function() {
  return this.throwIfDisposed(), Vg(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.tanh = function() {
  return this.throwIfDisposed(), to(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.tile = function(n) {
  return this.throwIfDisposed(), $n(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.toBool = function() {
  return this.throwIfDisposed(), et(this, "bool");
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.toFloat = function() {
  return this.throwIfDisposed(), et(this, "float32");
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.toInt = function() {
  return this.throwIfDisposed(), et(this, "int32");
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.topk = function(n, t) {
  return this.throwIfDisposed(), Mg(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.transpose = function(n) {
  return this.throwIfDisposed(), kt(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.unique = function(n) {
  return this.throwIfDisposed(), Pg(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.unsortedSegmentSum = function(n, t) {
  return this.throwIfDisposed(), zd(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.unstack = function(n) {
  return this.throwIfDisposed(), Un(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.where = function(n, t) {
  return this.throwIfDisposed(), Me(n, this, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
K().prototype.zerosLike = function() {
  return this.throwIfDisposed(), Rt(this);
};
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class ms extends Error {
  constructor(t) {
    super(t), Object.setPrototypeOf(this, ms.prototype);
  }
}
class Kn extends Error {
  constructor(t) {
    super(t), Object.setPrototypeOf(this, Kn.prototype);
  }
}
class O extends Error {
  constructor(t) {
    super(t), Object.setPrototypeOf(this, O.prototype);
  }
}
class wt extends Error {
  constructor(t) {
    super(t), Object.setPrototypeOf(this, wt.prototype);
  }
}
class Ey extends Error {
  constructor(t) {
    super(t), Object.setPrototypeOf(this, Ey.prototype);
  }
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class FI {
  constructor(t) {
    this.maxEntries = t || 100, this.cache = /* @__PURE__ */ new Map();
  }
  get(t) {
    let e;
    return this.cache.has(t) && (e = this.cache.get(t), this.cache.delete(t), this.cache.set(t, e)), e;
  }
  put(t, e) {
    if (this.cache.has(t))
      this.cache.delete(t);
    else if (this.cache.size >= this.maxEntries) {
      const s = this.cache.keys().next().value;
      this.cache.delete(s);
    }
    this.cache.set(t, e);
  }
  getMaxEntries() {
    return this.maxEntries;
  }
  setMaxEntries(t) {
    if (t < 0)
      throw new Error(`The maxEntries of LRU caches must be at least 0, but got ${t}.`);
    if (this.maxEntries > t)
      for (let e = 0; e < this.maxEntries - t; e++) {
        const s = this.cache.keys().next().value;
        this.cache.delete(s);
      }
    this.maxEntries = t;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function no(n, t) {
  if (Array.isArray(n)) {
    let e = [];
    for (let s = 0; s < t; s++)
      e = e.concat(n);
    return e;
  } else {
    const e = new Array(t);
    return e.fill(n), e;
  }
}
function gs(n, t) {
  if (!n)
    throw new Ey(t);
}
function Hb(n, t) {
  let e = 0;
  for (const s of n)
    s === t && e++;
  return e;
}
function qe(n) {
  return n.length === 1 ? n[0] : n;
}
function Bt(n) {
  return Array.isArray(n) ? n : [n];
}
function Ls(n) {
  const e = n.replace(/(.)([A-Z][a-z0-9]+)/g, "$1_$2").replace(/([a-z])([A-Z])/g, "$1_$2").toLowerCase();
  return e[0] !== "_" ? e : "private" + e;
}
function zr(n) {
  return n.length <= 1 || n.indexOf("_") === -1 ? n : n.replace(/[_]+(\w|$)/g, (t, e) => e.toUpperCase());
}
let On = {};
function Ly(n) {
  if (n == null)
    return null;
  const t = {};
  return t.className = n.getClassName(), t.config = n.getConfig(), t;
}
function Mf(n) {
  if (!(n == null || typeof n != "object"))
    if (Array.isArray(n))
      n.forEach((t) => Mf(t));
    else {
      const t = Object.keys(n);
      for (const e of t) {
        const s = n[e];
        s != null && typeof s == "object" && (!Array.isArray(s) && s.type === "ndarray" && typeof s.value == "number" ? n[e] = s.value : Mf(s));
      }
    }
}
function $c(n, t = {}, e = {}, s = "object", r = !1) {
  if (typeof n == "string") {
    const o = n;
    let i;
    if (o in e)
      i = e[o];
    else if (o in On)
      i = On[o];
    else if (i = t[o], i == null)
      throw new O(`Unknown ${s}: ${n}. This may be due to one of the following reasons:
1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);
    return i;
  } else {
    const o = n;
    if (o.className == null || o.config == null)
      throw new O(`${s}: Improper config format: ${JSON.stringify(o)}.
'className' and 'config' must set.`);
    const i = o.className;
    let a, l;
    if (i in e ? [a, l] = e[i] : i in On ? [a, l] = On.className : i in t && ([a, l] = t[i]), a == null)
      throw new O(`Unknown ${s}: ${i}. This may be due to one of the following reasons:
1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);
    if (l != null) {
      const c = {};
      for (const p of Object.keys(On))
        c[p] = On[p];
      for (const p of Object.keys(e))
        c[p] = e[p];
      const u = o.config;
      u.customObjects = c;
      const h = Object.assign({}, On);
      for (const p of Object.keys(e))
        On[p] = e[p];
      Mf(o.config);
      const d = l(a, o.config, e, r);
      return On = Object.assign({}, h), d;
    } else {
      const c = Object.assign({}, On);
      for (const h of Object.keys(e))
        On[h] = e[h];
      const u = new a(o.config);
      return On = Object.assign({}, c), u;
    }
  }
}
function KG(n, t) {
  return n < t ? -1 : n > t ? 1 : 0;
}
function Yc(n, t) {
  return -1 * KG(n, t);
}
function dr(n) {
  if (n == null)
    return n;
  const t = [];
  for (const e of n)
    t.indexOf(e) === -1 && t.push(e);
  return t;
}
function ZG(n) {
  if (n == null)
    throw new O(`Invalid value in obj: ${JSON.stringify(n)}`);
  for (const t in n)
    if (n.hasOwnProperty(t))
      return !1;
  return !0;
}
function bo(n, t, e) {
  if (e != null && n.indexOf(e) < 0)
    throw new O(`${e} is not a valid ${t}.  Valid values are ${n} or null/undefined.`);
}
function Dy(n, t, e = 0, s = 1 / 0) {
  return gs(e >= 0), gs(s >= e), Array.isArray(n) && n.length >= e && n.length <= s && n.every((r) => typeof r === t);
}
function Te(n, t) {
  Array.isArray(n) ? (C(n.length > 0, () => `${t} is unexpectedly an empty array.`), n.forEach((e, s) => Te(e, `element ${s + 1} of ${t}`))) : C(Number.isInteger(n) && n > 0, () => `Expected ${t} to be a positive integer, but got ${OI(n)}.`);
}
function OI(n) {
  return n === null ? "null" : Array.isArray(n) ? "[" + n.map((t) => OI(t)).join(",") + "]" : typeof n == "string" ? `"${n}"` : `${n}`;
}
function BG(n, t, e) {
  let s = e != null ? e() : Le(), r;
  return (...i) => {
    const a = e != null ? e() : Le();
    return a - s < t || (s = a, r = n(...i)), r;
  };
}
function AI(n) {
  return n === "relu" ? "relu" : n === "linear" ? "linear" : n === "elu" ? "elu" : null;
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
let HG = 0;
function zI() {
  return HG++;
}
const jc = {};
function np(n = "") {
  return n in jc || (jc[n] = 0), jc[n] += 1, n + jc[n].toString();
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const UG = ["channelsFirst", "channelsLast"], YG = ["nearest", "bilinear"], jG = ["valid", "same", "causal"], JG = ["max", "avg"], QG = ["sum", "mul", "concat", "ave"];
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const Co = /* @__PURE__ */ new Map();
function fe(n) {
  bo(UG, "DataFormat", n);
}
function qG(n) {
  bo(YG, "InterpolationFormat", n);
}
function Gn(n) {
  bo(jG, "PaddingMode", n);
}
function WI(n) {
  bo(JG, "PoolMode", n);
}
const za = [], Ub = "/";
function Hr(n, t) {
  za.push(n);
  try {
    const e = t();
    return za.pop(), e;
  } catch (e) {
    throw za.pop(), e;
  }
}
function t3() {
  return za.length === 0 ? "" : za.join(Ub) + Ub;
}
function VI(n) {
  if (!PI(n))
    throw new Error("Not a valid tensor name: '" + n + "'");
  return t3() + n;
}
function MI(n) {
  if (!PI(n))
    throw new Error("Not a valid tensor name: '" + n + "'");
  Co.has(n) || Co.set(n, 0);
  const t = Co.get(n);
  if (Co.set(n, Co.get(n) + 1), t > 0) {
    const e = `${n}_${t}`;
    return Co.set(e, 1), e;
  } else
    return n;
}
const e3 = new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);
function PI(n) {
  return !!n.match(e3);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function n3(n) {
  return n === parseInt(n.toString(), 10);
}
function pr(n, t, e) {
  t == null && (t = 0), e == null && (e = n.length);
  let s = 1;
  for (let r = t; r < e; ++r)
    s *= n[r];
  return s;
}
function _o(n) {
  if (n.length === 0)
    return Number.NaN;
  let t = Number.POSITIVE_INFINITY;
  for (let e = 0; e < n.length; e++) {
    const s = n[e];
    s < t && (t = s);
  }
  return t;
}
function br(n) {
  if (n.length === 0)
    return Number.NaN;
  let t = Number.NEGATIVE_INFINITY;
  for (let e = 0; e < n.length; e++) {
    const s = n[e];
    s > t && (t = s);
  }
  return t;
}
function is(n, t) {
  if (t < n)
    throw new O(`end (${t}) < begin (${n}) is forbidden.`);
  const e = [];
  for (let s = n; s < t; ++s)
    e.push(s);
  return e;
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
let Vp;
function we() {
  return Vp == null && (Vp = Fs().epsilon()), Vp;
}
function as() {
  return "channelsLast";
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function Rc(n, t) {
  return et(n, t);
}
function Ec(n, t = -1) {
  const e = n.shape.slice();
  return t < 0 && (t = e.length + t + 1), e.splice(t, 0, 1), G(n, e);
}
function s3(n, t) {
  return A(() => {
    if (n.shape.length !== 2)
      throw new O(`repeat() expects a rank-2 tensor, but received a rank-${n.shape.length} tensor.`);
    const e = Ec(n, 1);
    return Pf(e, [1, t, 1]);
  });
}
function r3(n) {
  const t = [pr(n.shape)];
  return G(n, t);
}
function o3(n) {
  if (n.rank <= 1)
    throw new O(`batchFlatten requires a minimum rank of 2. Got rank: ${n.rank}.`);
  const t = [n.shape[0], pr(n.shape, 1)];
  return G(n, t);
}
function Ur(n, t, e) {
  return A(() => {
    switch (n.rank) {
      case 1:
        return bc(n, t, e);
      case 2:
        return Gd(n, [t, 0], [e, n.shape[1]]);
      case 3:
        return xc(n, [t, 0, 0], [e, n.shape[1], n.shape[2]]);
      case 4:
        return Po(n, [t, 0, 0, 0], [e, n.shape[1], n.shape[2], n.shape[3]]);
      case 5:
        return $t(n, [t, 0, 0, 0, 0], [
          e,
          n.shape[1],
          n.shape[2],
          n.shape[3],
          n.shape[4]
        ]);
      case 6:
        return $t(n, [t, 0, 0, 0, 0, 0], [
          e,
          n.shape[1],
          n.shape[2],
          n.shape[3],
          n.shape[4],
          n.shape[5]
        ]);
      default:
        throw new O(`sliceAlongFirstAxis() received an unsupported tensor rank: ${n.rank}`);
    }
  });
}
function Mp(n, t, e) {
  return A(() => {
    switch (n.rank) {
      case 1:
        return bc(n, t, e);
      case 2:
        return Gd(n, [0, t], [n.shape[0], e]);
      case 3:
        return xc(n, [0, 0, t], [n.shape[0], n.shape[1], e]);
      case 4:
        return Po(n, [0, 0, 0, t], [n.shape[0], n.shape[1], n.shape[2], e]);
      default:
        throw new O(`sliceAlongLastAxis() received an unsupported tensor rank: ${n.rank}`);
    }
  });
}
function Jc(n, t, e, s) {
  return A(() => {
    switch (n.rank) {
      case 1:
        return bc(n, t, e);
      case 2:
        switch (s) {
          case 1:
            return Ur(n, t, e);
          case 2:
            return Mp(n, t, e);
          default:
            throw new O(`The axis is not within the rank of the tensor ${s}`);
        }
      case 3:
        switch (s) {
          case 1:
            return Ur(n, t, e);
          case 2:
            return xc(n, [0, t, 0], [n.shape[0], e, n.shape[2]]);
          case 3:
            return Mp(n, t, e);
          default:
            throw new O(`The axis is not within the rank of the tensor ${s}`);
        }
      case 4:
        switch (s) {
          case 1:
            return Ur(n, t, e);
          case 2:
            return Po(n, [0, t, 0, 0], [n.shape[0], e, n.shape[2], n.shape[3]]);
          case 3:
            return Po(n, [0, 0, t, 0], [n.shape[0], n.shape[1], e, n.shape[3]]);
          case 4:
            return Mp(n, t, e);
          default:
            throw new O(`The axis is not within the rank of the tensor ${s}`);
        }
      default:
        throw new O(`sliceAlongLastAxis() received an unsupported tensor rank: ${n.rank}`);
    }
  });
}
function Gy(n, t = -1) {
  let e;
  return t < 0 && (e = n[0].rank, e !== 0 ? t = e : t = 0), t === n[0].rank && (t = -1), he(n, t);
}
function Yb(n, t) {
  switch (n.rank) {
    case 1:
      return cg([n, t]);
    case 2:
      return ug([n, t], 0);
    case 3:
      return hg([n, t], 0);
    case 4:
      return dg([n, t], 0);
    default:
      throw new O(`concatAlongFirstAxis() received an unsupported tensor rank: ${n.rank}`);
  }
}
function Pf(n, t) {
  if (Array.isArray(t) || (t = [t]), n.rank !== t.length)
    throw new O(`The length of input n (${t.length}) does not match the number of dimensions in input x (${n.rank})`);
  return $n(n, t);
}
function sp(n, t = 0, e = 1, s, r) {
  return kd(n, t, e, s, r);
}
function Ss(n, t, e, s) {
  if (n.rank < 2 || t.rank < 2)
    throw new wt(`dot requires both inputs to be rank >= 2 but got x shape = ${n.shape} and y shape = ${t.shape}`);
  if (t.rank >= 3) {
    const r = n.shape.slice(-1)[0], o = t.shape.slice(-2)[0];
    if (r !== o)
      throw new wt(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${n.shape} and  y shape = ${t.shape}`);
  }
  if (n.rank === 2 && t.rank === 2)
    return Vf({
      a: n,
      b: t,
      transposeA: !1,
      transposeB: !1,
      bias: s ? Xf(n.rank, s, as()) : null,
      activation: e
    });
  {
    const r = n.shape.slice(), o = r.pop();
    n = G(n, [-1, o]);
    const i = t.shape.slice(), a = i.pop(), l = i.pop(), c = [...i, a], u = Array.from({ length: t.rank }, (f, m) => m === 0 ? t.rank - 2 : m <= t.rank - 2 ? m - 1 : m);
    t = G(kt(t, u), [l, -1]);
    const h = [...r, ...c];
    return G(Vf({
      a: n,
      b: t,
      transposeA: !1,
      transposeB: !1,
      bias: s ? Xf(n.rank, s, as()) : null,
      activation: e
    }), h);
  }
}
function XI(n, t, e) {
  return A(() => (Array.isArray(t) ? t = Ve(t, "int32") : t = et(t, "int32"), ta(n, t, e)));
}
function Lc(n) {
  return D(n, n);
}
function Xf(n, t, e) {
  const s = t.shape;
  if (t.rank !== 1 && t.rank !== n)
    throw new O(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${n}`);
  if (n === 5) {
    if (e === "channelsFirst")
      return s.length === 1 ? G(t, [1, s[0], 1, 1, 1]) : G(t, [1, s[3], s[0], s[1], s[2]]);
    if (e === "channelsLast")
      return s.length === 1 ? G(t, [1, 1, 1, 1, s[0]]) : G(t, [1].concat(s));
  } else if (n === 4) {
    if (e === "channelsFirst")
      return s.length === 1 ? G(t, [1, s[0], 1, 1]) : G(t, [1, s[2], s[0], s[1]]);
    if (e === "channelsLast")
      return s.length === 1 ? G(t, [1, 1, 1, s[0]]) : G(t, [1].concat(s));
  } else if (n === 3) {
    if (e === "channelsFirst")
      return s.length === 1 ? G(t, [1, s[0], 1]) : G(t, [1, s[1], s[0]]);
    if (e === "channelsLast")
      return s.length === 1 ? G(t, [1, 1, s[0]]) : G(t, [1].concat(s));
  } else if (n < 3)
    return t;
  throw new O(`Unsupported input rank by biasAdd: ${t.rank}`);
}
function hs(n, t, e) {
  return A(() => (e == null && (e = as()), fe(e), U(n, Xf(n.rank, t, e))));
}
function i3(n, t = 1) {
  if (t !== 1)
    throw new wt(`Support for alpha values other than 1 (${t}) is not implemented yet.`);
  return Ji(n);
}
function a3(n) {
  return A(() => ht(n, U(me(n), 1)));
}
function _I(n, t, e, s) {
  return A(() => Kg(n, t, e, s));
}
function l3(n) {
  return A(() => {
    const t = U(0.5, D(0.2, n));
    return en(t, 0, 1);
  });
}
function Dc(n, t, e = !1) {
  return e ? n() : t();
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const c3 = ["fanIn", "fanOut", "fanAvg"], u3 = ["normal", "uniform", "truncatedNormal"];
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function h3(n) {
  bo(c3, "FanMode", n);
}
function d3(n) {
  bo(u3, "Distribution", n);
}
class jn extends po {
  fromConfigUsesCustomObjects() {
    return !1;
  }
  getConfig() {
    return {};
  }
}
class Fy extends jn {
  apply(t, e) {
    return ge(t, e);
  }
}
Fy.className = "Zeros";
Y(Fy);
class rp extends jn {
  apply(t, e) {
    return fn(t, e);
  }
}
rp.className = "Ones";
Y(rp);
class Oy extends jn {
  constructor(t) {
    if (super(), typeof t != "object")
      throw new O(`Expected argument of type ConstantConfig but got ${t}`);
    if (t.value === void 0)
      throw new O(`config must have value set but got ${t}`);
    this.value = t.value;
  }
  apply(t, e) {
    return A(() => D(ft(this.value), fn(t, e)));
  }
  getConfig() {
    return {
      value: this.value
    };
  }
}
Oy.className = "Constant";
Y(Oy);
class Ay extends jn {
  constructor(t) {
    super(), this.DEFAULT_MINVAL = -0.05, this.DEFAULT_MAXVAL = 0.05, this.minval = t.minval || this.DEFAULT_MINVAL, this.maxval = t.maxval || this.DEFAULT_MAXVAL, this.seed = t.seed;
  }
  apply(t, e) {
    return sa(t, this.minval, this.maxval, e);
  }
  getConfig() {
    return { minval: this.minval, maxval: this.maxval, seed: this.seed };
  }
}
Ay.className = "RandomUniform";
Y(Ay);
class zy extends jn {
  constructor(t) {
    super(), this.DEFAULT_MEAN = 0, this.DEFAULT_STDDEV = 0.05, this.mean = t.mean || this.DEFAULT_MEAN, this.stddev = t.stddev || this.DEFAULT_STDDEV, this.seed = t.seed;
  }
  apply(t, e) {
    if (e = e || "float32", e !== "float32" && e !== "int32")
      throw new wt(`randomNormal does not support dType ${e}.`);
    return sp(t, this.mean, this.stddev, e, this.seed);
  }
  getConfig() {
    return { mean: this.mean, stddev: this.stddev, seed: this.seed };
  }
}
zy.className = "RandomNormal";
Y(zy);
class Wy extends jn {
  constructor(t) {
    super(), this.DEFAULT_MEAN = 0, this.DEFAULT_STDDEV = 0.05, this.mean = t.mean || this.DEFAULT_MEAN, this.stddev = t.stddev || this.DEFAULT_STDDEV, this.seed = t.seed;
  }
  apply(t, e) {
    if (e = e || "float32", e !== "float32" && e !== "int32")
      throw new wt(`truncatedNormal does not support dType ${e}.`);
    return Ad(t, this.mean, this.stddev, e, this.seed);
  }
  getConfig() {
    return { mean: this.mean, stddev: this.stddev, seed: this.seed };
  }
}
Wy.className = "TruncatedNormal";
Y(Wy);
class Vy extends jn {
  constructor(t) {
    super(), this.gain = t.gain != null ? t.gain : 1;
  }
  apply(t, e) {
    return A(() => {
      if (t.length !== 2 || t[0] !== t[1])
        throw new O("Identity matrix initializer can only be used for 2D square matrices.");
      return D(this.gain, bd(t[0]));
    });
  }
  getConfig() {
    return { gain: this.gain };
  }
}
Vy.className = "Identity";
Y(Vy);
function p3(n, t = "channelsLast") {
  let e, s;
  if (fe(t), n.length === 2)
    e = n[0], s = n[1];
  else if ([3, 4, 5].indexOf(n.length) !== -1) {
    if (t === "channelsFirst") {
      const r = pr(n, 2);
      e = n[1] * r, s = n[0] * r;
    } else if (t === "channelsLast") {
      const r = pr(n, 0, n.length - 2);
      e = n[n.length - 2] * r, s = n[n.length - 1] * r;
    }
  } else {
    const r = pr(n);
    e = Math.sqrt(r), s = Math.sqrt(r);
  }
  return [e, s];
}
class sn extends jn {
  constructor(t) {
    if (super(), t.scale < 0)
      throw new O(`scale must be a positive float. Got: ${t.scale}`);
    this.scale = t.scale == null ? 1 : t.scale, this.mode = t.mode == null ? "fanIn" : t.mode, h3(this.mode), this.distribution = t.distribution == null ? "normal" : t.distribution, d3(this.distribution), this.seed = t.seed;
  }
  apply(t, e) {
    const s = p3(t), r = s[0], o = s[1];
    let i = this.scale;
    if (this.mode === "fanIn" ? i /= Math.max(1, r) : this.mode === "fanOut" ? i /= Math.max(1, o) : i /= Math.max(1, (r + o) / 2), this.distribution === "normal") {
      const a = Math.sqrt(i);
      if (e = e || "float32", e !== "float32" && e !== "int32")
        throw new wt(`${this.getClassName()} does not support dType ${e}.`);
      return Ad(t, 0, a, e, this.seed);
    } else {
      const a = Math.sqrt(3 * i);
      return sa(t, -a, a, e);
    }
  }
  getConfig() {
    return {
      scale: this.scale,
      mode: this.mode,
      distribution: this.distribution,
      seed: this.seed
    };
  }
}
sn.className = "VarianceScaling";
Y(sn);
class op extends sn {
  constructor(t) {
    super({
      scale: 1,
      mode: "fanAvg",
      distribution: "uniform",
      seed: t == null ? null : t.seed
    });
  }
  getClassName() {
    return sn.className;
  }
}
op.className = "GlorotUniform";
Y(op);
class ip extends sn {
  constructor(t) {
    super({
      scale: 1,
      mode: "fanAvg",
      distribution: "normal",
      seed: t == null ? null : t.seed
    });
  }
  getClassName() {
    return sn.className;
  }
}
ip.className = "GlorotNormal";
Y(ip);
class ap extends sn {
  constructor(t) {
    super({
      scale: 2,
      mode: "fanIn",
      distribution: "normal",
      seed: t == null ? null : t.seed
    });
  }
  getClassName() {
    return sn.className;
  }
}
ap.className = "HeNormal";
Y(ap);
class lp extends sn {
  constructor(t) {
    super({
      scale: 2,
      mode: "fanIn",
      distribution: "uniform",
      seed: t == null ? null : t.seed
    });
  }
  getClassName() {
    return sn.className;
  }
}
lp.className = "HeUniform";
Y(lp);
class cp extends sn {
  constructor(t) {
    super({
      scale: 1,
      mode: "fanIn",
      distribution: "normal",
      seed: t == null ? null : t.seed
    });
  }
  getClassName() {
    return sn.className;
  }
}
cp.className = "LeCunNormal";
Y(cp);
class up extends sn {
  constructor(t) {
    super({
      scale: 1,
      mode: "fanIn",
      distribution: "uniform",
      seed: t == null ? null : t.seed
    });
  }
  getClassName() {
    return sn.className;
  }
}
up.className = "LeCunNormal";
Y(up);
class My extends jn {
  constructor(t) {
    if (super(), this.DEFAULT_GAIN = 1, this.gain = t.gain == null ? this.DEFAULT_GAIN : t.gain, this.seed = t.seed, this.seed != null)
      throw new wt("Random seed is not implemented for Orthogonal Initializer yet.");
  }
  apply(t, e) {
    return A(() => {
      if (t.length < 2)
        throw new wt("Shape must be at least 2D.");
      t[0] * t[1] > 2e3 && console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${t[0] * t[1]}) elements: Slowness may result.`);
      const s = t[0] > t[1] ? [t[1], t[0]] : t, r = sp(s, 0, 1, "float32");
      let o = Ug.gramSchmidt(r);
      return t[0] > t[1] && (o = kt(o)), D(this.gain, o);
    });
  }
  getConfig() {
    return {
      gain: this.gain,
      seed: this.seed
    };
  }
}
My.className = "Orthogonal";
Y(My);
const jb = {
  constant: "Constant",
  glorotNormal: "GlorotNormal",
  glorotUniform: "GlorotUniform",
  heNormal: "HeNormal",
  heUniform: "HeUniform",
  identity: "Identity",
  leCunNormal: "LeCunNormal",
  leCunUniform: "LeCunUniform",
  ones: "Ones",
  orthogonal: "Orthogonal",
  randomNormal: "RandomNormal",
  randomUniform: "RandomUniform",
  truncatedNormal: "TruncatedNormal",
  varianceScaling: "VarianceScaling",
  zeros: "Zeros"
};
function Jb(n, t = {}) {
  return $c(n, Nn.getMap().classNameMap, t, "initializer");
}
function se(n) {
  return Ly(n);
}
function Qt(n) {
  if (typeof n == "string") {
    const t = n in jb ? jb[n] : n;
    if (t === "GlorotNormal")
      return new ip();
    if (t === "GlorotUniform")
      return new op();
    if (t === "HeNormal")
      return new ap();
    if (t === "HeUniform")
      return new lp();
    if (t === "LeCunNormal")
      return new cp();
    if (t === "LeCunUniform")
      return new up();
    {
      const e = {};
      return e.className = t, e.config = {}, Jb(e);
    }
  } else
    return n instanceof jn ? n : Jb(n);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function _f(n) {
  return Array.isArray(n) && Array.isArray(n[0]);
}
function Lu(n) {
  return n.length === 0 ? [] : Array.isArray(n[0]) ? n : [n];
}
function It(n) {
  let t;
  if (Array.isArray(n)) {
    if (n.length !== 1)
      throw new O(`Expected Tensor length to be 1; got ${n.length}`);
    t = n[0];
  } else
    t = n;
  return t;
}
function Ot(n) {
  if (Array.isArray(n) && Array.isArray(n[0])) {
    if (n.length === 1)
      return n = n, n[0];
    throw new O(`Expected exactly 1 Shape; got ${n.length}`);
  } else
    return n;
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function Du(n) {
  let t = 0;
  for (const e of n)
    e.shape.length === 0 ? t += 1 : t += e.shape.reduce((s, r) => s * r);
  return t;
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const Qb = "Variable";
class KI {
  constructor(t, e = "float32", s = Qb, r = !0, o = null) {
    this.dtype = e == null ? "float32" : e, this.shape = t.shape, this.id = zI(), s = s == null ? Qb : s, this.originalName = VI(s), this.name = MI(this.originalName), this.trainable_ = r, this.constraint = o, this.val = Xg(t, this.trainable_, this.name, this.dtype);
  }
  read() {
    return this.assertNotDisposed(), this.val;
  }
  write(t) {
    return this.assertNotDisposed(), f3(this.val, t), this.val.id !== t.id && (this.val.assign(t), this.constraint != null && this.val.assign(this.constraint.apply(this.val))), this;
  }
  dispose() {
    this.assertNotDisposed(), this.val.dispose();
  }
  assertNotDisposed() {
    if (this.val.isDisposed)
      throw new Error(`LayersVariable ${this.name} is already disposed.`);
  }
  get trainable() {
    return this.trainable_;
  }
  set trainable(t) {
    this.trainable_ = t, this.val.trainable = t;
  }
}
function f3(n, t) {
  if (n.shape.toString() !== t.shape.toString())
    throw new Error("Shape mismatch: " + JSON.stringify(n.shape) + " vs. " + JSON.stringify(t.shape));
}
function Kf(n) {
  return n.map((t) => t.read());
}
function Py(n) {
  n.forEach((t) => {
    t[0].write(t[1]);
  });
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class ye {
  constructor(t) {
    this.dtype = t.dtype, this.shape = t.shape, t.shape != null ? this.ndim = t.shape.length : this.ndim = t.ndim, this.maxNDim = t.maxNDim, this.minNDim = t.minNDim, this.axes = t.axes || {};
  }
}
class ns {
  constructor(t, e, s, r, o, i, a) {
    this.dtype = t, this.shape = e, this.sourceLayer = s, this.inputs = r, this.callArgs = o, this.outputTensorIndex = a, this.id = zI(), i != null && (this.originalName = VI(i), this.name = MI(this.originalName)), this.rank = e.length;
  }
}
let m3 = 0;
class hp {
  constructor(t, e) {
    this.callArgs = e, this.id = m3++, this.outboundLayer = t.outboundLayer, this.inboundLayers = t.inboundLayers, this.nodeIndices = t.nodeIndices, this.tensorIndices = t.tensorIndices, this.inputTensors = t.inputTensors, this.outputTensors = t.outputTensors, this.inputMasks = t.inputMasks, this.outputMasks = t.outputMasks, this.inputShapes = t.inputShapes, this.outputShapes = t.outputShapes;
    for (const s of t.inboundLayers)
      s != null && s.outboundNodes.push(this);
    t.outboundLayer.inboundNodes.push(this);
  }
  getConfig() {
    const t = [];
    for (const e of this.inboundLayers)
      e != null ? t.push(e.name) : t.push(null);
    return {
      outboundLayer: this.outboundLayer ? this.outboundLayer.name : null,
      inboundLayers: t,
      nodeIndices: this.nodeIndices,
      tensorIndices: this.tensorIndices
    };
  }
}
let g3 = 0;
class Et extends po {
  constructor(t = {}) {
    super(), this._callHook = null, this._addedWeightNames = [], this._stateful = !1, this.id = g3++, this.activityRegularizer = null, this.inputSpec = null, this.supportsMasking = !1, this._trainableWeights = [], this._nonTrainableWeights = [], this._losses = [], this._updates = [], this._built = !1, this.inboundNodes = [], this.outboundNodes = [];
    let e = t.name;
    if (!e) {
      const s = this.getClassName();
      e = Ls(s) + "_" + np(s);
    }
    if (this.name = e, this.trainable_ = t.trainable == null ? !0 : t.trainable, t.inputShape != null || t.batchInputShape != null) {
      let s;
      if (t.batchInputShape != null)
        s = t.batchInputShape;
      else if (t.inputShape != null) {
        let o = null;
        t.batchSize != null && (o = t.batchSize), s = [o].concat(t.inputShape);
      }
      this.batchInputShape = s;
      let r = t.dtype;
      r == null && (r = t.inputDType), r == null && (r = "float32"), this.dtype = r;
    }
    t.weights != null ? this.initialWeights = t.weights : this.initialWeights = null, this._refCount = null, this.fastWeightInitDuringBuild = !1;
  }
  static nodeKey(t, e) {
    return t.name + "_ib-" + e.toString();
  }
  getNodeAtIndex(t, e) {
    if (this.inboundNodes.length === 0)
      throw new Kn(`The layer has never been called and thus has no defined ${e}.`);
    if (this.inboundNodes.length <= t)
      throw new O(`Asked to get ${e} at node ${t}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);
    return this.inboundNodes[t];
  }
  getInputAt(t) {
    return qe(this.getNodeAtIndex(t, "input").inputTensors);
  }
  getOutputAt(t) {
    return qe(this.getNodeAtIndex(t, "output").outputTensors);
  }
  get input() {
    if (this.inboundNodes.length > 1)
      throw new ms(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);
    if (this.inboundNodes.length === 0)
      throw new ms(`Layer ${this.name} is not connected, no input to return.`);
    return qe(this.getNodeAtIndex(0, "input").inputTensors);
  }
  get output() {
    if (this.inboundNodes.length === 0)
      throw new ms(`Layer ${this.name} has no inbound nodes.`);
    if (this.inboundNodes.length > 1)
      throw new ms(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);
    return qe(this.getNodeAtIndex(0, "output").outputTensors);
  }
  get losses() {
    return this._losses;
  }
  calculateLosses() {
    return this.losses.map((t) => t());
  }
  get updates() {
    return this._updates;
  }
  get built() {
    return this._built;
  }
  set built(t) {
    this._built = t;
  }
  get trainable() {
    return this.trainable_;
  }
  set trainable(t) {
    this._trainableWeights.forEach((e) => e.trainable = t), this.trainable_ = t;
  }
  get trainableWeights() {
    return this.trainable_ ? this._trainableWeights.filter((t) => t.trainable) : [];
  }
  set trainableWeights(t) {
    this._trainableWeights = t;
  }
  get nonTrainableWeights() {
    return this.trainable ? this._trainableWeights.filter((t) => !t.trainable).concat(this._nonTrainableWeights) : this._trainableWeights.concat(this._nonTrainableWeights);
  }
  set nonTrainableWeights(t) {
    this._nonTrainableWeights = t;
  }
  get weights() {
    return this.trainableWeights.concat(this.nonTrainableWeights);
  }
  get stateful() {
    return this._stateful;
  }
  resetStates() {
    if (!this.stateful)
      throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.");
  }
  assertInputCompatibility(t) {
    if (t = Bt(t), this.inputSpec == null || this.inputSpec.length === 0)
      return;
    const e = Bt(this.inputSpec);
    if (t.length !== e.length)
      throw new O(`Layer ${this.name} expects ${e.length} inputs, but it received ${t.length} input tensors. Input received: ${t}`);
    for (let s = 0; s < t.length; s++) {
      const r = t[s], o = e[s];
      if (o == null)
        continue;
      const i = r.rank;
      if (o.ndim != null && i !== o.ndim)
        throw new O(`Input ${s} is incompatible with layer ${this.name}: expected ndim=${o.ndim}, found ndim=${i}`);
      if (o.maxNDim != null && i > o.maxNDim)
        throw new O(`Input ${s} is incompatible with layer ${this.name}: expected max_ndim=${o.maxNDim}, found ndim=${i}`);
      if (o.minNDim != null && i < o.minNDim)
        throw new O(`Input ${s} is incompatible with layer ${this.name}: expected min_ndim=${o.minNDim}, found ndim=${i}.`);
      if (o.dtype != null && r.dtype !== o.dtype)
        throw new O(`Input ${s} is incompatible with layer ${this.name} : expected dtype=${o.dtype}, found dtype=${r.dtype}.`);
      if (o.axes) {
        const a = r.shape;
        for (const l in o.axes) {
          const c = Number(l), u = o.axes[l], h = c >= 0 ? a[c] : a[a.length + c];
          if (u != null && [u, null].indexOf(h) === -1)
            throw new O(`Input ${s} is incompatible with layer ${this.name}: expected axis ${c} of input shape to have value ${u} but got shape ${a}.`);
        }
      }
      if (o.shape != null)
        for (let a = 0; a < o.shape.length; ++a) {
          const l = o.shape[a], c = r.shape[a];
          if (l != null && c != null && l !== c)
            throw new O(`Input ${s} is incompatible with layer ${this.name}: expected shape=${o.shape}, found shape=${r.shape}.`);
        }
    }
  }
  call(t, e) {
    return t;
  }
  invokeCallHook(t, e) {
    this._callHook != null && this._callHook(t, e);
  }
  setCallHook(t) {
    this._callHook = t;
  }
  clearCallHook() {
    this._callHook = null;
  }
  apply(t, e) {
    e = e || {}, this.assertNotDisposed();
    const s = Bt(t);
    let r = !0;
    for (const i of s)
      if (!(i instanceof ns)) {
        r = !1;
        break;
      }
    let o = !0;
    for (const i of s)
      if (i instanceof ns) {
        o = !1;
        break;
      }
    if (r === o)
      throw new O("Arguments to apply() must be all SymbolicTensors or all Tensors");
    return Hr(this.name, () => {
      if (!this.built) {
        this.assertInputCompatibility(t);
        const i = [];
        for (const a of Bt(t))
          i.push(a.shape);
        this.build(qe(i)), this.built = !0, this.initialWeights && this.setWeights(this.initialWeights), this._refCount === null && o && (this._refCount = 1);
      }
      if (this.assertInputCompatibility(t), o) {
        let i = this.call(t, e);
        const a = Bt(i), l = [];
        for (let c of a)
          s.indexOf(c) !== -1 && (c = c.clone()), l.push(c);
        if (i = qe(l), this.activityRegularizer != null)
          throw new wt("Layer invocation in the presence of activity regularizer(s) is not supported yet.");
        return i;
      } else {
        const i = y3(t), a = this.computeOutputShape(i);
        let l;
        const c = b3(t);
        if (this.warnOnIncompatibleInputShape(Array.isArray(t) ? i[0] : i), a != null && a.length > 0 && Array.isArray(a[0]) ? l = a.map((u, h) => new ns(c, u, this, Bt(t), e, this.name, h)) : l = new ns(c, a, this, Bt(t), e, this.name), this.addInboundNode(t, l, null, null, i, a, e), this._refCount++, this.activityRegularizer != null)
          throw new wt("Layer invocation in the presence of activity regularizer(s) is not supported yet.");
        return l;
      }
    });
  }
  warnOnIncompatibleInputShape(t) {
    if (this.batchInputShape != null)
      if (t.length !== this.batchInputShape.length)
        console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(t)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);
      else {
        let e = !1;
        this.batchInputShape.forEach((s, r) => {
          s != null && t[r] != null && t[r] !== s && (e = !0);
        }), e && console.warn(`The shape of the input tensor (${JSON.stringify(t)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`);
      }
  }
  get outputShape() {
    if (this.inboundNodes == null || this.inboundNodes.length === 0)
      throw new ms(`The layer ${this.name} has never been called and thus has no defined output shape.`);
    const t = [];
    for (const e of this.inboundNodes) {
      const s = JSON.stringify(e.outputShapes);
      t.indexOf(s) === -1 && t.push(s);
    }
    if (t.length === 1) {
      const e = this.inboundNodes[0].outputShapes;
      return Array.isArray(e) && Array.isArray(e[0]) && e.length === 1 ? e[0] : e;
    } else
      throw new ms(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`);
  }
  countParams() {
    if (!this.built)
      throw new Kn(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);
    return Du(this.weights);
  }
  build(t) {
    this.built = !0;
  }
  getWeights(t = !1) {
    return Kf(t ? this.trainableWeights : this.weights);
  }
  setWeights(t) {
    A(() => {
      const e = this.weights;
      if (e.length !== t.length)
        throw new O(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${t.length}, but the layer was expecting ${e.length} weights. Provided weights: ${t}...`);
      if (e.length === 0)
        return;
      const s = [], r = Kf(e);
      for (let o = 0; o < r.length; ++o) {
        const i = r[o], a = e[o], l = t[o];
        if (!Nt(i.shape, l.shape))
          throw new O(`Layer weight shape ${i.shape} not compatible with provided weight shape ${l.shape}`);
        s.push([a, l]);
      }
      Py(s);
    });
  }
  addWeight(t, e, s, r, o, i, a, l) {
    if (this._addedWeightNames.indexOf(t) !== -1)
      throw new O(`Duplicate weight name ${t} for layer ${this.name}`);
    this._addedWeightNames.push(t), s == null && (s = "float32"), this.fastWeightInitDuringBuild && (r = l != null ? l() : Qt("zeros"));
    const c = r.apply(e, s), u = new KI(c, s, t, i, a);
    return c.dispose(), o != null && this.addLoss(() => o.apply(u.read())), i == null && (i = !0), i ? this._trainableWeights.push(u) : this._nonTrainableWeights.push(u), u;
  }
  setFastWeightInitDuringBuild(t) {
    this.fastWeightInitDuringBuild = t;
  }
  addLoss(t) {
    t == null || Array.isArray(t) && t.length === 0 || (t = Bt(t), this._losses !== void 0 && this._losses !== null && this.losses.push(...t));
  }
  computeOutputShape(t) {
    return t;
  }
  computeMask(t, e) {
    if (!this.supportsMasking) {
      if (e != null)
        if (Array.isArray(e))
          e.forEach((s) => {
            if (s != null)
              throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);
          });
        else
          throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);
      return null;
    }
    return e;
  }
  addInboundNode(t, e, s, r, o, i, a = null) {
    const l = Bt(t);
    e = Bt(e), s = Bt(s), r = Bt(r), o = Lu(o), i = Lu(i);
    const c = [], u = [], h = [];
    for (const d of l)
      c.push(d.sourceLayer), u.push(d.nodeIndex), h.push(d.tensorIndex);
    new hp({
      outboundLayer: this,
      inboundLayers: c,
      nodeIndices: u,
      tensorIndices: h,
      inputTensors: l,
      outputTensors: e,
      inputMasks: s,
      outputMasks: r,
      inputShapes: o,
      outputShapes: i
    }, a);
    for (let d = 0; d < e.length; d++)
      e[d].sourceLayer = this, e[d].nodeIndex = this.inboundNodes.length - 1, e[d].tensorIndex = d;
  }
  getConfig() {
    const t = { name: this.name, trainable: this.trainable };
    return this.batchInputShape != null && (t.batchInputShape = this.batchInputShape), this.dtype != null && (t.dtype = this.dtype), t;
  }
  disposeWeights() {
    return this.weights.forEach((t) => t.dispose()), this.weights.length;
  }
  assertNotDisposed() {
    if (this._refCount === 0)
      throw new Error(`Layer '${this.name}' is already disposed.`);
  }
  dispose() {
    if (!this.built)
      throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);
    if (this._refCount === null)
      throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);
    this.assertNotDisposed();
    let t = 0;
    return --this._refCount === 0 && (t = this.disposeWeights()), { refCountAfterDispose: this._refCount, numDisposedVariables: t };
  }
}
function y3(n) {
  n = Bt(n);
  const t = [];
  for (const e of n)
    t.push(e.shape);
  return qe(t);
}
function b3(n) {
  return "float32";
}
function ZI(n, t, e) {
  if ((t == null || e != null && e > 0) && (t = n.sourceLayer, e = n.nodeIndex), t.inboundNodes.length === 0)
    return [n];
  {
    const s = t.inboundNodes[e];
    if (s.inboundLayers.length === 0)
      return s.inputTensors;
    {
      const r = [];
      for (let o = 0; o < s.inboundLayers.length; o++) {
        const i = s.inputTensors[o], a = s.inboundLayers[o], l = s.nodeIndices[o], c = ZI(i, a, l);
        for (const u of c)
          r.indexOf(u) === -1 && r.push(u);
      }
      return r;
    }
  }
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class oa extends Et {
  constructor(t) {
    if (super({
      dtype: t.dtype,
      name: t.name != null ? t.name : np("input").toString()
    }), t.batchSize == null && (t.batchSize = null), t.sparse == null && (t.sparse = !1), this.trainable = !1, this.built = !0, this.sparse = t.sparse, t.inputShape != null && t.batchInputShape != null)
      throw new O("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");
    let e = t.batchInputShape;
    if (e == null) {
      if (t.inputShape == null)
        throw new O("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");
      e = [t.batchSize].concat(t.inputShape);
    } else if (t.batchSize != null)
      throw new O("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");
    const s = t.dtype || "float32";
    this.batchInputShape = e, this.dtype = s, this.inputSpec = [{ shape: e }];
    const r = new ns(this.dtype, this.batchInputShape, this, [], {}, this.name);
    r.nodeIndex = 0, r.tensorIndex = 0, new hp({
      outboundLayer: this,
      inboundLayers: [],
      nodeIndices: [],
      tensorIndices: [],
      inputTensors: [r],
      outputTensors: [r],
      inputMasks: [null],
      outputMasks: [null],
      inputShapes: [e],
      outputShapes: [e]
    });
  }
  apply(t, e) {
    throw new O(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`);
  }
  dispose() {
    return { refCountAfterDispose: this._refCount, numDisposedVariables: 0 };
  }
  getConfig() {
    return {
      batchInputShape: this.batchInputShape,
      dtype: this.dtype,
      sparse: this.sparse,
      name: this.name
    };
  }
}
oa.className = "InputLayer";
Y(oa);
function BI(n) {
  if (n.batchShape == null && n.shape == null)
    throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");
  if (n.batchShape != null && n.shape != null)
    throw new O("Please provide either a `shape` or `batchShape` argument to Input, but not both.");
  let t = n.batchShape;
  n.shape != null && t == null && (t = [null].concat(n.shape));
  let e = n.dtype;
  return e == null && (e = "float32"), new oa({
    batchInputShape: t,
    name: n.name,
    dtype: e,
    sparse: n.sparse
  }).inboundNodes[0].outputTensors[0];
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function x3(n, t) {
  if (n.dtype == null || n.dtype === t.dtype)
    return t;
  try {
    return et(t, n.dtype);
  } catch {
    throw new O(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${n.name}' (${n.dtype}).`);
  }
}
class ar {
  constructor(t) {
    if (this.id2Value = {}, this.id2Mask = {}, this.name2Id = {}, t instanceof ar)
      for (const e in t.id2Value)
        this.id2Value[e] = t.id2Value[e], e in t.id2Mask && (this.id2Mask[e] = t.id2Mask[e]);
    else {
      if (t == null)
        return;
      for (const e of t)
        this.add(e.key, e.value);
    }
  }
  add(t, e, s) {
    if (this.id2Value[t.id] == null)
      this.id2Value[t.id] = x3(t, e), this.name2Id[t.name] = t.id, s != null && (this.id2Mask[t.id] = s);
    else
      throw new O(`Duplicate key: name=${t.name}, id=${t.id}`);
    return this;
  }
  addFeed(t) {
    this.add(t.key, t.value);
  }
  hasKey(t) {
    return this.id2Value[t.id] != null;
  }
  names() {
    return Object.keys(this.name2Id);
  }
  getValue(t) {
    if (t instanceof ns) {
      if (this.id2Value[t.id] == null)
        throw new O(`Nonexistent key: ${t.name}`);
      return this.id2Value[t.id];
    } else {
      const e = this.name2Id[t];
      if (e == null)
        throw new O(`Feed dict has no SymbolicTensor name: ${t}`);
      return this.id2Value[e];
    }
  }
  getMask(t) {
    if (t instanceof ns) {
      if (this.id2Value[t.id] == null)
        throw new O(`Nonexistent key: ${t.name}`);
      return this.id2Mask[t.id];
    } else {
      const e = this.name2Id[t];
      if (e == null)
        throw new O(`Feed dict has no SymbolicTensor name: ${t}`);
      return this.id2Mask[e];
    }
  }
  disposeMasks() {
    this.id2Mask != null && xt(this.id2Mask);
  }
}
const Gu = new FI(), Fu = new FI();
function w3(n) {
  Gu != null && Gu.setMaxEntries(n), Fu != null && Fu.setMaxEntries(n);
}
function Ea(n, t, e, s) {
  const r = e == null ? !1 : e.training, o = Array.isArray(n), i = o ? n : [n], a = i.map((f) => f.name), l = [], c = t.names();
  for (const f of a)
    c.indexOf(f) !== -1 ? l.push(t.getValue(f)) : l.push(null);
  s != null && (s.maxNumTensors = -1 / 0, s.minNumTensors = 1 / 0);
  const u = a.join(",") + "|" + t.names().sort().join(",");
  let h = Gu.get(u), d;
  if (h == null) {
    const f = I3(i, t);
    h = f.sorted, d = f.recipientCounts, Gu.put(u, h), Fu.put(u, d);
  }
  d = {}, r || Object.assign(d, Fu.get(u));
  const p = new ar(t);
  for (let f = 0; f < h.length; ++f) {
    if (s != null) {
      const $ = Za().numTensors;
      $ > s.maxNumTensors && (s.maxNumTensors = $), $ < s.minNumTensors && (s.minNumTensors = $);
    }
    const m = h[f], g = m.sourceLayer;
    if (g instanceof oa)
      continue;
    const y = [], b = [], w = [];
    let x = !1;
    for (const $ of m.inputs) {
      const R = p.getValue($), F = p.getMask($);
      y.push(R), b.push(F), F != null && (x = !0), r || (d[$.name]--, d[$.name] === 0 && !t.hasKey($) && a.indexOf($.name) === -1 && !R.isDisposed && $.sourceLayer.stateful !== !0 && w.push(R));
    }
    x && (e = e || {}, e.mask = b[0]);
    const S = Bt(g.apply(y, e));
    let v = null;
    g.supportsMasking && (v = g.computeMask(y, b));
    const T = v3(m), N = Array.isArray(T) ? T : [T];
    for (let $ = 0; $ < N.length; ++$) {
      p.hasKey(N[$]) || p.add(N[$], S[$], Array.isArray(v) ? v[0] : v);
      const R = a.indexOf(N[$].name);
      R !== -1 && (l[R] = S[$]);
    }
    r || xt(w);
  }
  return p.disposeMasks(), o ? l : l[0];
}
function I3(n, t) {
  C(n != null && n.length > 0, () => "Expected at least one fetch, got none");
  let e = [], s = {};
  if (n.length === 1) {
    const r = qb(n[0], t);
    e = r.sorted, s = r.recipientMap;
  } else {
    const r = /* @__PURE__ */ new Set();
    for (const o of n) {
      const { sorted: i, recipientMap: a } = qb(o, t);
      for (const l of i)
        r.has(l.name) || (e.push(l), r.add(l.name));
      for (const l in a)
        s[l] == null && (s[l] = /* @__PURE__ */ new Set()), a[l].forEach((c) => s[l].add(c));
    }
  }
  return {
    sorted: e,
    recipientCounts: S3(s)
  };
}
function S3(n) {
  const t = {};
  for (const e in n)
    t[e] = n[e].size;
  return t;
}
function qb(n, t) {
  const e = /* @__PURE__ */ new Set(), s = [], r = {};
  for (const a of t.names())
    e.add(a);
  const o = [], i = [];
  for (o.push(n); o.length > 0; ) {
    const a = o[o.length - 1];
    if (e.has(a.name)) {
      o.pop();
      continue;
    }
    const l = i[i.length - 1] === o.length - 1;
    if (a.inputs.length === 0 || l)
      o.pop(), s.push(a), e.add(a.name), l && i.pop();
    else {
      i.push(o.length - 1);
      for (const c of a.inputs)
        r[c.name] == null && (r[c.name] = /* @__PURE__ */ new Set()), r[c.name].add(a.name), !e.has(c.name) && o.push(c);
    }
  }
  return { sorted: s, recipientMap: r };
}
function v3(n) {
  let t;
  if (n.sourceLayer.inboundNodes.length === 1)
    t = n.sourceLayer.output;
  else {
    let e = null;
    for (let s = 0; s < n.sourceLayer.inboundNodes.length; ++s)
      for (const r of n.sourceLayer.inboundNodes[s].outputTensors)
        if (r.id === n.id) {
          e = s;
          break;
        }
    t = n.sourceLayer.getOutputAt(e);
  }
  return t;
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const C3 = V();
C3.registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES", () => 100, w3);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function Xy(n, t) {
  return A(() => Fe(at(D(n, n), t, !0)));
}
class Gc extends po {
  getConfig() {
    return {};
  }
}
class _y extends Gc {
  constructor(t) {
    super(), this.defaultMaxValue = 2, this.defaultAxis = 0, this.maxValue = t.maxValue != null ? t.maxValue : this.defaultMaxValue, this.axis = t.axis != null ? t.axis : this.defaultAxis;
  }
  apply(t) {
    return A(() => {
      const e = Xy(t, this.axis), s = en(e, 0, this.maxValue);
      return D(t, ht(s, U(we(), e)));
    });
  }
  getConfig() {
    return { maxValue: this.maxValue, axis: this.axis };
  }
}
_y.className = "MaxNorm";
Y(_y);
class Ky extends Gc {
  constructor(t) {
    super(), this.defaultAxis = 0, this.axis = t.axis != null ? t.axis : this.defaultAxis;
  }
  apply(t) {
    return A(() => ht(t, U(we(), Xy(t, this.axis))));
  }
  getConfig() {
    return { axis: this.axis };
  }
}
Ky.className = "UnitNorm";
Y(Ky);
class Zy extends Gc {
  apply(t) {
    return us(t);
  }
}
Zy.className = "NonNeg";
Y(Zy);
class By extends Gc {
  constructor(t) {
    super(), this.defaultMinValue = 0, this.defaultMaxValue = 1, this.defaultRate = 1, this.defaultAxis = 0, this.minValue = t.minValue != null ? t.minValue : this.defaultMinValue, this.maxValue = t.maxValue != null ? t.maxValue : this.defaultMaxValue, this.rate = t.rate != null ? t.rate : this.defaultRate, this.axis = t.axis != null ? t.axis : this.defaultAxis;
  }
  apply(t) {
    return A(() => {
      const e = Xy(t, this.axis), s = U(D(this.rate, en(e, this.minValue, this.maxValue)), D(1 - this.rate, e));
      return D(t, ht(s, U(we(), e)));
    });
  }
  getConfig() {
    return {
      minValue: this.minValue,
      maxValue: this.maxValue,
      rate: this.rate,
      axis: this.axis
    };
  }
}
By.className = "MinMaxNorm";
Y(By);
const tx = {
  maxNorm: "MaxNorm",
  minMaxNorm: "MinMaxNorm",
  nonNeg: "NonNeg",
  unitNorm: "UnitNorm"
};
function Ie(n) {
  return Ly(n);
}
function ex(n, t = {}) {
  return $c(n, Nn.getMap().classNameMap, t, "constraint");
}
function Se(n) {
  if (n == null)
    return null;
  if (typeof n == "string") {
    const e = { className: n in tx ? tx[n] : n, config: {} };
    return ex(e);
  } else
    return n instanceof Gc ? n : ex(n);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function k3(n) {
  return new _y(n);
}
function T3(n) {
  return new Ky(n);
}
function N3() {
  return new Zy();
}
function $3(n) {
  return new By(n);
}
const R3 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  maxNorm: k3,
  unitNorm: T3,
  nonNeg: N3,
  minMaxNorm: $3
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function E3() {
  return new Fy();
}
function L3() {
  return new rp();
}
function D3(n) {
  return new Oy(n);
}
function G3(n) {
  return new Ay(n);
}
function F3(n) {
  return new zy(n);
}
function O3(n) {
  return new Wy(n);
}
function A3(n) {
  return new Vy(n);
}
function z3(n) {
  return new sn(n);
}
function W3(n) {
  return new op(n);
}
function V3(n) {
  return new ip(n);
}
function M3(n) {
  return new ap(n);
}
function P3(n) {
  return new lp(n);
}
function X3(n) {
  return new cp(n);
}
function _3(n) {
  return new up(n);
}
function K3(n) {
  return new My(n);
}
const Z3 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  zeros: E3,
  ones: L3,
  constant: D3,
  randomUniform: G3,
  randomNormal: F3,
  truncatedNormal: O3,
  identity: A3,
  varianceScaling: z3,
  glorotUniform: W3,
  glorotNormal: V3,
  heNormal: M3,
  heUniform: P3,
  leCunNormal: X3,
  leCunUniform: _3,
  orthogonal: K3
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
async function or(n) {
  if (n == null)
    return;
  const t = [], e = [], s = [];
  for (const r in n) {
    const o = n[r];
    if (typeof o != "number") {
      const i = o;
      t.push(i.data()), e.push(r), s.push(i);
    }
  }
  if (t.length > 0) {
    const r = await Promise.all(t);
    for (let o = 0; o < r.length; ++o)
      n[e[o]] = r[o][0];
    xt(s);
  }
}
function HI(n) {
  if (n != null)
    for (const t in n) {
      const e = n[t];
      typeof e != "number" && e.dispose();
    }
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
var nx;
(function(n) {
  n[n.SILENT = 0] = "SILENT", n[n.VERBOSE = 1] = "VERBOSE";
})(nx || (nx = {}));
const B3 = 125;
class Ko {
  constructor() {
    this.validationData = null;
  }
  setParams(t) {
    this.params = t;
  }
  async onEpochBegin(t, e) {
  }
  async onEpochEnd(t, e) {
  }
  async onBatchBegin(t, e) {
  }
  async onBatchEnd(t, e) {
  }
  async onTrainBegin(t) {
  }
  async onTrainEnd(t) {
  }
  setModel(t) {
  }
}
class UI {
  constructor(t, e = 10) {
    t == null && (t = []), this.callbacks = t, this.queueLength = e;
  }
  append(t) {
    this.callbacks.push(t);
  }
  setParams(t) {
    for (const e of this.callbacks)
      e.setParams(t);
  }
  setModel(t) {
    for (const e of this.callbacks)
      e.setModel(t);
  }
  async onEpochBegin(t, e) {
    e == null && (e = {});
    for (const s of this.callbacks)
      await s.onEpochBegin(t, e);
  }
  async onEpochEnd(t, e) {
    e == null && (e = {});
    for (const s of this.callbacks)
      await s.onEpochEnd(t, e);
  }
  async onBatchBegin(t, e) {
    e == null && (e = {});
    for (const s of this.callbacks)
      await s.onBatchBegin(t, e);
  }
  async onBatchEnd(t, e) {
    e == null && (e = {});
    for (const s of this.callbacks)
      await s.onBatchEnd(t, e);
  }
  async onTrainBegin(t) {
    t == null && (t = {});
    for (const e of this.callbacks)
      await e.onTrainBegin(t);
  }
  async onTrainEnd(t) {
    t == null && (t = {});
    for (const e of this.callbacks)
      await e.onTrainEnd(t);
  }
}
class H3 extends Ko {
  constructor() {
    super();
  }
  async onEpochBegin(t) {
    this.seen = 0, this.totals = {};
  }
  async onBatchEnd(t, e) {
    e == null && (e = {});
    const s = e.size == null ? 0 : e.size;
    this.seen += s;
    for (const r in e) {
      const o = e[r];
      if (typeof o == "number")
        this.totals.hasOwnProperty(r) || (this.totals[r] = 0), this.totals[r] = this.totals[r] + o * s;
      else {
        let i;
        r in this.totals ? i = this.totals[r] : this.totals[r] = 0;
        const a = A(() => U(this.totals[r], D(o, s)));
        this.totals[r] = a, i != null && i.dispose();
      }
    }
  }
  async onEpochEnd(t, e) {
    if (e != null)
      for (const s of this.params.metrics)
        this.totals[s] != null && (typeof this.totals[s] == "number" ? e[s] = this.totals[s] / this.seen : A(() => {
          const r = D(ht(1, this.seen), this.totals[s]);
          e[s] = r, this.totals[s].dispose(), ce(e[s]);
        }));
  }
}
class YI extends Ko {
  async onTrainBegin(t) {
    this.epoch = [], this.history = {};
  }
  async onEpochEnd(t, e) {
    e == null && (e = {}), this.epoch.push(t);
    for (const s in e)
      this.history[s] == null && (this.history[s] = []), this.history[s].push(e[s]);
  }
  async syncData() {
    const t = [], e = [], s = [];
    for (const o in this.history) {
      const i = this.history[o];
      for (let a = 0; a < i.length; ++a)
        if (typeof i[a] != "number") {
          const l = i[a];
          t.push(l.data()), e.push(o), s.push(a);
        }
    }
    const r = await Promise.all(t);
    for (let o = 0; o < r.length; ++o)
      this.history[e[o]][s[o]].dispose(), this.history[e[o]][s[o]] = r[o][0];
  }
}
class jI extends Ko {
  constructor(t, e) {
    if (super(), this.currentEpoch = 0, this.nowFunc = t.nowFunc, this.nextFrameFunc = t.nextFrameFunc || Cc, this.yieldEvery = e || "auto", this.yieldEvery === "auto" && (this.yieldEvery = B3), this.yieldEvery === "never" && t.onYield != null)
      throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");
    wu(this.yieldEvery) && (this.maybeWait = BG(this.maybeWait.bind(this), this.yieldEvery, this.nowFunc)), this.trainBegin = t.onTrainBegin, this.trainEnd = t.onTrainEnd, this.epochBegin = t.onEpochBegin, this.epochEnd = t.onEpochEnd, this.batchBegin = t.onBatchBegin, this.batchEnd = t.onBatchEnd, this.yield = t.onYield;
  }
  async maybeWait(t, e, s) {
    const r = [];
    this.yield != null && (await or(s), r.push(this.yield(t, e, s))), r.push(this.nextFrameFunc()), await Promise.all(r);
  }
  async onEpochBegin(t, e) {
    this.currentEpoch = t, this.epochBegin != null && (await or(e), await this.epochBegin(t, e));
  }
  async onEpochEnd(t, e) {
    const s = [];
    this.epochEnd != null && (await or(e), s.push(this.epochEnd(t, e))), this.yieldEvery === "epoch" && s.push(this.nextFrameFunc()), await Promise.all(s);
  }
  async onBatchBegin(t, e) {
    this.batchBegin != null && (await or(e), await this.batchBegin(t, e));
  }
  async onBatchEnd(t, e) {
    const s = [];
    this.batchEnd != null && (await or(e), s.push(this.batchEnd(t, e))), this.yieldEvery === "batch" ? s.push(this.nextFrameFunc()) : wu(this.yieldEvery) && s.push(this.maybeWait(this.currentEpoch, t, e)), await Promise.all(s);
  }
  async onTrainBegin(t) {
    this.trainBegin != null && (await or(t), await this.trainBegin(t));
  }
  async onTrainEnd(t) {
    this.trainEnd != null && (await or(t), await this.trainEnd(t));
  }
}
function JI(n, t) {
  return n == null && (n = {}), n instanceof Ko ? [n] : Array.isArray(n) && n[0] instanceof Ko ? n : Bt(n).map((s) => new jI(s, t));
}
class kn {
  constructor() {
  }
  static registerCallbackConstructor(t, e) {
    C(t >= 0 && Number.isInteger(t), () => `Verbosity level is expected to be an integer >= 0, but got ${t}`), kn.checkForDuplicate(e), kn.constructors[t] == null && (kn.constructors[t] = []), kn.constructors[t].push(e);
  }
  static checkForDuplicate(t) {
    for (const e in kn.constructors)
      kn.constructors[+e].forEach((r) => {
        if (r === t)
          throw new O("Duplicate callback constructor.");
      });
  }
  static clear() {
    kn.constructors = {};
  }
  static createCallbacks(t) {
    const e = [];
    for (const s in kn.constructors) {
      const r = +s;
      t >= r && e.push(...kn.constructors[r]);
    }
    return e.map((s) => new s());
  }
}
kn.constructors = {};
function QI(n, t, e, s, r, o, i, a, l) {
  const c = new YI(), u = [
    new H3(),
    ...kn.createCallbacks(t)
  ];
  n != null && u.push(...n), u.push(c);
  const h = new UI(u);
  return h.setParams({
    epochs: e,
    initialEpoch: s,
    samples: r,
    steps: o,
    batchSize: i,
    verbose: t,
    doValidation: a,
    metrics: l
  }), { callbackList: h, history: c };
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function rs(n, t = {}, e = !1) {
  return $c(n, Nn.getMap().classNameMap, t, "layer", e);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function Ou(n, t) {
  return A(() => {
    n.dtype !== "float32" && (n = et(n, "float32"));
    const e = at(Lc(n), t, !0), s = fo(e.shape, we()), r = Fe($s(e, s));
    return ht(n, r);
  });
}
function xo(n, t) {
  return A(() => ne(Lc(it(t, n)), -1));
}
function dp(n, t) {
  return A(() => ne(me(it(t, n)), -1));
}
function ia(n, t) {
  return A(() => {
    const e = it(n, t), s = en(me(n), we(), Number.MAX_VALUE), r = me(ht(e, s));
    return D(100, ne(r, -1));
  });
}
function U3(n, t) {
  return A(() => {
    const e = en(t, we(), Number.MAX_VALUE), s = xn(U(1, e)), r = en(n, we(), Number.MAX_VALUE), o = xn(U(1, r));
    return ne(Lc(it(s, o)), -1);
  });
}
function Y3(n, t) {
  return A(() => {
    const e = $s(0, it(1, D(n, t)));
    return ne(Lc(e), -1);
  });
}
function j3(n, t) {
  return A(() => {
    const e = $s(0, it(1, D(n, t)));
    return ne(e, -1);
  });
}
function J3(n, t) {
  return A(() => {
    const e = at(D(n, t), -1), s = Bn(D(it(1, n), t), -1);
    return $s(0, U(1, it(s, e)));
  });
}
function Q3(n, t) {
  return A(() => {
    const e = Math.log(2), s = it(t, n), r = it(U(s, mo(D(-2, s))), e);
    return ne(r, -1);
  });
}
function ja(n, t, e = !1) {
  return A(() => {
    if (e)
      t = wc(t);
    else {
      const s = at(t, t.shape.length - 1, !0);
      t = ht(t, s);
    }
    return t = en(t, we(), 1 - we()), Yt(at(D(et(n, "float32"), xn(t)), t.shape.length - 1));
  });
}
function Au(n, t, e = !1) {
  return A(() => {
    const s = et(qi(r3(n)), "int32");
    t = en(t, we(), 1 - we());
    const r = t.shape, o = G(Wo(s, r[r.length - 1]), r);
    return ja(o, t, e);
  });
}
function q3(n, t) {
  if (!Nt(n.shape, t.shape))
    throw new O(`logits and labels must have the same shape, but got shapes ${JSON.stringify(n.shape)} and ${JSON.stringify(t.shape)}`);
  return A(() => {
    const e = us(t), s = Yt(me(t));
    return U(it(e, D(t, n)), dc(bn(s)));
  });
}
function pp(n, t) {
  return A(() => {
    let e;
    return e = en(t, we(), 1 - we()), e = xn(ht(e, it(1, e))), ne(q3(n, e), -1);
  });
}
function tF(n, t) {
  return A(() => {
    const e = en(n, we(), 1), s = en(t, we(), 1);
    return at(D(n, xn(ht(e, s))), -1);
  });
}
function eF(n, t) {
  return A(() => {
    const e = xn(U(we(), t));
    return ne(it(t, D(n, e)), -1);
  });
}
function Hy(n, t) {
  return A(() => {
    const e = Ou(n, -1), s = Ou(t, -1), r = D(e, s);
    return Yt(at(r, -1));
  });
}
const zu = {
  meanSquaredError: xo,
  meanAbsoluteError: dp,
  meanAbsolutePercentageError: ia,
  meanSquaredLogarithmicError: U3,
  squaredHinge: Y3,
  hinge: j3,
  categoricalHinge: J3,
  logcosh: Q3,
  categoricalCrossentropy: ja,
  sparseCategoricalCrossentropy: Au,
  binaryCrossentropy: pp,
  kullbackLeiblerDivergence: tF,
  poisson: eF,
  cosineProximity: Hy
};
function Pp(n) {
  if (typeof n == "string") {
    if (n in zu)
      return zu[n];
    let t = `Unknown loss ${n}`;
    throw n.toLowerCase().includes("softmaxcrossentropy") && (t = `Unknown loss ${n}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`), new O(t);
  } else
    return n;
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function Uy(n, t) {
  return A(() => {
    const e = D(0.5, wn(t)), s = Rc(an(t, e), n.dtype);
    return ne(yn(n, s), -1);
  });
}
function Yy(n, t) {
  return A(() => Rc(yn(qr(n, -1), qr(t, -1)), "float32"));
}
function qI(n, t) {
  return A(() => et(at(Hn(yn(n, 1), yn(t, 1))), "float32"));
}
function nF(n, t) {
  return A(() => et(at(Hn(yn(n, 1), yn(t, 0))), "float32"));
}
function sF(n, t) {
  return A(() => et(at(Hn(yn(n, 0), yn(t, 1))), "float32"));
}
function tS(n, t) {
  return A(() => {
    const e = qI(n, t), s = sF(n, t), r = U(e, s);
    return et(Me(an(r, 0), ht(e, r), 0), "float32");
  });
}
function rF(n, t) {
  return A(() => {
    const e = qI(n, t), s = nF(n, t), r = U(e, s);
    return et(Me(an(r, 0), ht(e, r), 0), "float32");
  });
}
function eS(n, t) {
  return pp(n, t);
}
function nS(n, t) {
  return n.rank === t.rank && (n = $r(n, [n.rank - 1])), t = qr(t, -1), t.dtype !== n.dtype && (t = et(t, n.dtype)), et(yn(n, t), "float32");
}
const oF = xo, iF = xo, aF = dp, lF = dp, cF = ia, uF = ia, jy = ja, hF = Hy, sS = Au, Wu = {
  binaryAccuracy: Uy,
  categoricalAccuracy: Yy,
  precision: tS,
  categoricalCrossentropy: jy,
  sparseCategoricalCrossentropy: sS,
  mse: oF,
  MSE: iF,
  mae: aF,
  MAE: lF,
  mape: cF,
  MAPE: uF,
  cosine: hF
};
function dF(n) {
  if (typeof n == "string" && n in Wu)
    return Wu[n];
  if (typeof n != "string" && n != null)
    return n;
  throw new O(`Unknown metric ${n}`);
}
function Qc(n) {
  if (gs(n !== null, `Unknown LossOrMetricFn ${n}`), typeof n == "string")
    return n;
  {
    let t;
    for (const e of Object.keys(zu))
      if (zu[e] === n) {
        t = e;
        break;
      }
    if (t !== void 0)
      return t;
    for (const e of Object.keys(Wu))
      if (Wu[e] === n) {
        t = e;
        break;
      }
    return t !== void 0 ? t : n.name;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function pF(n) {
  const t = {
    Adagrad: () => Or.adagrad(0.01),
    Adadelta: () => Or.adadelta(1, 0.95, we()),
    Adam: () => Or.adam(1e-3, 0.9, 0.999, we()),
    Adamax: () => Or.adamax(2e-3, 0.9, 0.999, we(), 0),
    RMSProp: () => Or.rmsprop(1e-3, 0.9, 0, we()),
    SGD: () => Or.sgd(0.01)
  };
  if (t.adagrad = t.Adagrad, t.adadelta = t.Adadelta, t.adam = t.Adam, t.adamax = t.Adamax, t.rmsprop = t.RMSProp, t.sgd = t.SGD, n in t)
    return t[n]();
  throw new O(`Unknown Optimizer ${n}`);
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const sx = 1 * 1024 * 1024;
function rx(n, t, e = !1) {
  if (n == null || typeof n != "object" || Object.getPrototypeOf(n) !== Object.prototype || !Zf(n))
    throw new Error("User-defined metadata is expected to be a JSON object, but is not.");
  if (e) {
    const s = JSON.stringify(n);
    s.length > sx && console.warn(`User-defined metadata of model "${t}" is too large in size (length=${s.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= ${sx}.`);
  }
}
function Zf(n) {
  if (n === null)
    return !0;
  if (typeof n == "object")
    if (Object.getPrototypeOf(n) === Object.prototype) {
      const t = Object.keys(n);
      for (const e of t)
        if (typeof e != "string" || !Zf(n[e]))
          return !1;
      return !0;
    } else if (Array.isArray(n)) {
      for (const t of n)
        if (!Zf(t))
          return !1;
      return !0;
    } else
      return !1;
  else {
    const t = typeof n;
    return t === "string" || t === "number" || t === "boolean";
  }
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function fF(n, t, e, s = console.log) {
  const r = gF(n), o = ["Layer (type)", "Input Shape", "Output shape", "Param #"];
  r ? (t = t || 90, e = e || [0.32, 0.61, 0.89, 1]) : (t = t || 115, e = e || [0.24, 0.48, 0.7, 0.8, 1]), e[e.length - 1] <= 1 && (e = e.map((u) => Math.floor(t * u)));
  let i;
  if (!r) {
    o.push("Receives inputs"), i = [];
    for (const u in n.nodesByDepth)
      i.push(...n.nodesByDepth[u]);
  }
  s("_".repeat(t)), Vu(o, e, s), s("=".repeat(t));
  const a = n.layers;
  for (let u = 0; u < a.length; ++u)
    r ? yF(a[u], e, s) : bF(a[u], e, i, s), s((u === a.length - 1 ? "=" : "_").repeat(t));
  n.checkTrainableWeightsConsistency();
  const l = mF(n), c = Du(n.nonTrainableWeights);
  s(`Total params: ${l + c}`), s(`Trainable params: ${l}`), s(`Non-trainable params: ${c}`), s("_".repeat(t));
}
function mF(n) {
  let t;
  return n.collectedTrainableWeights != null ? t = Du(n.collectedTrainableWeights) : t = Du(n.trainableWeights), t;
}
function gF(n) {
  let t = !0;
  const e = [], s = [];
  for (const r in n.nodesByDepth)
    e.push(n.nodesByDepth[r]);
  for (const r of e) {
    if (r.length > 1 || r.length === 1 && r[0].inboundLayers.length > 1) {
      t = !1;
      break;
    }
    s.push(...r);
  }
  if (t)
    for (const r of n.layers) {
      let o = !1;
      for (const i of r.inboundNodes)
        if (s.indexOf(i) !== -1)
          if (o) {
            t = !1;
            break;
          } else
            o = !0;
      if (!t)
        break;
    }
  return t;
}
function Vu(n, t, e = console.log) {
  let s = "";
  for (let r = 0; r < n.length; ++r)
    r > 0 && (s = s.slice(0, s.length - 1) + " "), s += n[r], s = s.slice(0, t[r]), s += " ".repeat(t[r] - s.length);
  e(s);
}
function yF(n, t, e) {
  let s, r;
  try {
    r = n.inboundNodes.map((l) => JSON.stringify(l.inputShapes)).join(",");
  } catch {
    r = "multiple";
  }
  try {
    s = JSON.stringify(n.outputShape);
  } catch {
    s = "multiple";
  }
  const o = n.name, i = n.getClassName(), a = [
    `${o} (${i})`,
    r,
    s,
    n.countParams().toString()
  ];
  Vu(a, t, e);
}
function bF(n, t, e, s) {
  let r, o;
  try {
    o = n.inboundNodes.map((h) => JSON.stringify(h.inputShapes)).join(",");
  } catch {
    o = "multiple";
  }
  try {
    r = JSON.stringify(n.outputShape);
  } catch {
    r = "multiple";
  }
  const i = [];
  for (const h of n.inboundNodes)
    if (!(e != null && e.length > 0 && e.indexOf(h) === -1))
      for (let d = 0; d < h.inboundLayers.length; ++d) {
        const p = h.inboundLayers[d].name, f = h.nodeIndices[d], m = h.tensorIndices[d];
        i.push(`${p}[${f}][${m}]`);
      }
  const a = n.name, l = n.getClassName(), c = i.length === 0 ? "" : i[0], u = [
    `${a} (${l})`,
    o,
    r,
    n.countParams().toString(),
    c
  ];
  Vu(u, t, s);
  for (let h = 1; h < i.length; ++h)
    Vu(["", "", "", "", i[h]], t, s);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function rS(n, t, e) {
  return (n === "inboundNodes" || n === "outputLayers" || n === "inputLayers") && t === 0 && typeof e == "string";
}
function Ja(n, t) {
  if (n === null)
    return null;
  if (typeof n == "string")
    return zr(n);
  if (typeof n == "number" || typeof n == "boolean")
    return n;
  if (n instanceof Array) {
    const e = [], s = n.length;
    for (let r = 0; r < s; ++r) {
      const o = n[r];
      rS(t, r, o) ? e.push(o) : e.push(Ja(o, t));
    }
    return e;
  } else {
    const e = {};
    for (const s of Object.keys(n)) {
      const r = n[s];
      if (s === "name" && typeof r == "string")
        e[s] = r;
      else {
        const o = zr(s);
        e[o] = Ja(r, o);
      }
    }
    return e;
  }
}
function Bf(n, t) {
  if (n == null)
    return null;
  if (typeof n == "string")
    return Ls(n);
  if (typeof n == "number" || typeof n == "boolean")
    return n;
  if (n instanceof Array) {
    const e = [], s = n.length;
    for (let r = 0; r < s; ++r) {
      const o = n[r];
      rS(t, r, o) ? e.push(o) : e.push(Bf(o, t));
    }
    return e;
  } else {
    const e = {};
    for (const s of Object.keys(n)) {
      const r = n[s], o = Ls(s);
      (s === "name" || s === "className") && typeof r == "string" ? e[o] = r : e[o] = Bf(r, s);
    }
    return e;
  }
}
/** @license See the LICENSE file. */
const fp = "3.21.0";
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class qn extends Et {
  constructor(t) {
    if (super({}), this.containerNodes = /* @__PURE__ */ new Set(), this.name = t.name, this.name == null) {
      const b = this.getClassName().toLowerCase();
      this.name = np(b);
    }
    if (this.supportsMasking = !1, this.trainable_ = !0, Array.isArray(t.inputs) ? this.inputs = t.inputs.slice() : this.inputs = [t.inputs], Array.isArray(t.outputs) ? this.outputs = t.outputs.slice() : this.outputs = [t.outputs], dr(this.inputs).length !== this.inputs.length)
      throw new O(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map((b) => b.name)}`);
    dr(this.outputs).length !== this.outputs.length && console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map((b) => b.name)}`), this.inputLayers = [], this.inputLayersNodeIndices = [], this.inputLayersTensorIndices = [], this.outputLayers = [], this.outputLayersNodeIndices = [], this.outputLayersTensorIndices = [], this.layers = [], this.internalContainerRefs = [];
    for (const b of this.outputs) {
      const w = b.sourceLayer, x = b.nodeIndex, S = b.tensorIndex;
      this.outputLayers.push(w), this.outputLayersNodeIndices.push(x), this.outputLayersTensorIndices.push(S);
    }
    for (const b of this.inputs) {
      const w = b.sourceLayer, x = b.nodeIndex, S = b.tensorIndex;
      gs(x === 0, "input layer has >1 nodes"), gs(S === 0, "input layer has >1 tensors"), this.inputLayers.push(w), this.inputLayersNodeIndices.push(x), this.inputLayersTensorIndices.push(S);
    }
    this.inputNames = [], this.outputNames = [], this.feedInputShapes = [], this.feedInputNames = [], this.feedOutputNames = [];
    for (let b = 0; b < this.inputLayers.length; b++) {
      const w = this.inputLayers[b];
      if (!(w instanceof oa))
        throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${t.inputs}. Input ${b} (0-based) originates from layer type ${w.getClassName()}.`);
      this.inputNames.push(w.name), this.feedInputShapes.push(w.batchInputShape), this.feedInputNames.push(w.name);
    }
    for (const b of this.outputLayers)
      this.outputNames.push(b.name);
    this.internalInputShapes = this.inputs.map((b) => b.shape), this.internalOutputShapes = this.outputs.map((b) => b.shape);
    const e = {}, s = {}, r = {}, o = {}, i = {}, a = [], l = (b, w, x, S, v, T) => {
      (S == null || v == null || T == null) && (S = b.sourceLayer, v = b.nodeIndex, T = b.tensorIndex);
      const N = S.inboundNodes[v];
      if (x.indexOf(N) !== -1)
        throw new Kn(`The tensor ${b.name} at layer "${S.name}" is part of a cycle.`);
      if (w.indexOf(N) !== -1)
        return;
      this.containerNodes.add(qn.nodeKey(S, v)), S.id in i || (i[S.id] = Object.keys(i).length), x.indexOf(N) === -1 && x.push(N);
      const $ = N.inboundLayers.length;
      for (let R = 0; R < $; R++) {
        const F = N.inputTensors[R], z = N.inboundLayers[R], W = N.nodeIndices[R], M = N.tensorIndices[R];
        l(F, w, x, z, W, M);
      }
      for (w.push(N); x.indexOf(N) >= 0; )
        x.splice(x.indexOf(N), 1);
      a.push(N);
    }, c = [], u = [];
    for (const b of this.outputs)
      l(b, c, u);
    const h = a.slice().reverse();
    for (const b of h) {
      s[b.id] = b, b.id in e || (e[b.id] = 0);
      let w = e[b.id];
      const x = r[b.outboundLayer.id] == null ? 0 : r[b.outboundLayer.id];
      w = Math.max(w, x), r[b.outboundLayer.id] = w, o[b.outboundLayer.id] = b.outboundLayer, e[b.id] = w;
      for (let S = 0; S < b.inboundLayers.length; S++) {
        const v = b.inboundLayers[S], T = b.nodeIndices[S], N = v.inboundNodes[T], $ = e[N.id] == null ? 0 : e[N.id];
        e[N.id] = Math.max(w + 1, $), s[N.id] = N;
      }
    }
    const d = {};
    for (const b in e) {
      const w = e[b];
      w in d || (d[w] = []), d[w].push(s[b]);
    }
    const p = {};
    for (const b in r) {
      const w = r[b];
      w in p || (p[w] = []), p[w].push(o[b]);
    }
    let f = Object.keys(p).map((b) => parseInt(b, 10)).sort(Yc);
    this.layers = [];
    for (const b of f) {
      const w = p[b];
      w.sort((x, S) => {
        const v = i[x.id], T = i[S.id];
        return v < T ? -1 : v > T ? 1 : 0;
      });
      for (const x of w)
        x instanceof qn && this.internalContainerRefs.push(x), this.layers.push(x);
    }
    this.layersByDepth = p, f = Object.keys(d).map((b) => parseInt(b, 10)).sort(Yc);
    const m = this.inputs.slice(), g = [];
    for (const b of f)
      for (const w of d[b]) {
        const x = w.outboundLayer;
        if (x != null) {
          for (const S of w.inputTensors)
            if (m.indexOf(S) === -1)
              throw new Kn(`Graph disconnected: cannot obtain value for tensor ${S} at layer "${x.name}". The following previous layers were accessed without issue: ${g}`);
          for (const S of w.outputTensors)
            m.push(S);
          g.push(x.name);
        }
      }
    this.nodesByDepth = d;
    const y = this.layers.map((b) => b.name);
    for (const b of y) {
      const w = y.filter((x) => x === b).length;
      if (w !== 1)
        throw new Kn(`The name "${b}" is used ${w} times in the model. All layer names should be unique. Layer names: ` + JSON.stringify(y));
    }
    this.outboundNodes = [], this.inboundNodes = [], new hp({
      outboundLayer: this,
      inboundLayers: [],
      nodeIndices: [],
      tensorIndices: [],
      inputTensors: this.inputs,
      outputTensors: this.outputs,
      inputMasks: this.inputs.map((b) => null),
      outputMasks: this.outputs.map((b) => null),
      inputShapes: this.inputs.map((b) => b.shape),
      outputShapes: this.outputs.map((b) => b.shape)
    }), this.built = !0, this._refCount = 1;
  }
  assertNotDisposed() {
    if (this._refCount === 0)
      throw new Error(`Container '${this.name}' is already disposed.`);
  }
  dispose() {
    this.assertNotDisposed();
    const t = { refCountAfterDispose: null, numDisposedVariables: 0 };
    if (--this._refCount === 0) {
      for (const e of this.layers)
        t.numDisposedVariables += e.dispose().numDisposedVariables;
      for (const e of this.internalContainerRefs)
        t.numDisposedVariables += e.dispose().numDisposedVariables;
    }
    return t.refCountAfterDispose = this._refCount, t;
  }
  get trainable() {
    return this.trainable_;
  }
  set trainable(t) {
    this.layers.forEach((e) => {
      e._trainableWeights.forEach((s) => s.trainable = t);
    }), this.trainable_ = t;
  }
  get trainableWeights() {
    if (this._trainableWeights.length > 0)
      throw new O("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");
    if (!this.trainable)
      return [];
    let t = [];
    for (const e of this.layers)
      t = t.concat(e.trainableWeights);
    return t;
  }
  get nonTrainableWeights() {
    const t = [];
    for (const e of this.layers)
      t.push(...e.nonTrainableWeights);
    if (!this.trainable) {
      const e = [];
      for (const s of this.layers)
        e.push(...s.trainableWeights);
      return e.concat(t);
    }
    return t;
  }
  get weights() {
    return this.trainableWeights.concat(this.nonTrainableWeights);
  }
  loadWeights(t, e = !0) {
    const s = {};
    let r = 0;
    for (const i of this.layers)
      for (const a of i.weights) {
        if (s[a.originalName] != null)
          throw new O(`Duplicate weight name: ${a.originalName}`);
        s[a.originalName] = a, r++;
      }
    const o = [];
    for (const i in t) {
      let a = i;
      if (s[i] == null) {
        const l = i.split("/");
        a = l.slice(0, -2).concat([l[l.length - 1]]).join("/");
      }
      if (s[a] != null)
        o.push([s[a], t[i]]);
      else if (e)
        throw new O(`Provided weight data has no target variable: ${i}`);
      delete s[a];
    }
    if (e) {
      const i = [];
      for (const a in s)
        i.push(a);
      if (i.length > 0)
        throw new O(`${i.length} of ${r} weights are not set: ${i}`);
    }
    Py(o);
  }
  updatedConfig() {
    const t = this.getConfig(), e = {};
    return e.className = this.getClassName(), e.config = t, e.kerasVersion = `tfjs-layers ${fp}`, e.backend = "TensorFlow.js", e;
  }
  toJSON(t, e = !0) {
    const s = Bf(this.updatedConfig());
    return e ? JSON.stringify(s) : s;
  }
  call(t, e) {
    return A(() => {
      t = Bt(t);
      const s = new ar();
      for (let r = 0; r < this.inputs.length; ++r)
        s.add(this.inputs[r], t[r]);
      return Ea(this.outputs, s, e);
    });
  }
  computeMask(t, e) {
    return A(() => {
      t = Bt(t);
      let s;
      return e == null ? s = no(null, t.length) : s = Bt(e), this.runInternalGraph(t, s)[1];
    });
  }
  computeOutputShape(t) {
    const e = Lu(t);
    if (e.length !== this.inputLayers.length)
      throw new O(`Invalid inputShape argument ${t}: model has ${this.inputLayers.length} tensor inputs.`);
    const s = {};
    for (let a = 0; a < e.length; a++) {
      const l = this.inputLayers[a], c = e[a], u = l.name + "_0_0";
      s[u] = c;
    }
    const r = Object.keys(this.nodesByDepth).map((a) => parseInt(a, 10)).sort(Yc);
    if (r.length > 1)
      for (const a of r) {
        const l = this.nodesByDepth[a];
        for (const c of l) {
          const u = c.outboundLayer;
          if (this.inputLayers.map((m) => m.id).indexOf(u.id) !== -1)
            continue;
          const h = [];
          for (let m = 0; m < c.inboundLayers.length; m++) {
            const g = c.inboundLayers[m], y = c.nodeIndices[m], b = c.tensorIndices[m], w = `${g.name}_${y}_${b}`, x = s[w];
            h.push(x);
          }
          const d = u.computeOutputShape(qe(h)), p = Lu(d), f = u.inboundNodes.indexOf(c);
          for (let m = 0; m < p.length; m++) {
            const g = `${u.name}_${f}_${m}`;
            s[g] = p[m];
          }
        }
      }
    const o = [], i = [];
    for (let a = 0; a < this.outputLayers.length; a++) {
      const l = this.outputLayers[a], c = this.outputLayersNodeIndices[a], u = this.outputLayersTensorIndices[a], h = `${l.name}_${c}_${u}`;
      i.push(h);
    }
    for (let a = 0; a < i.length; a++) {
      const l = i[a];
      gs(l in s), o.push(s[l]);
    }
    return qe(o);
  }
  runInternalGraph(t, e) {
    e == null && (e = no(null, t.length));
    const s = {};
    for (let l = 0; l < this.inputs.length; ++l) {
      const c = this.inputs[l], u = t[l], h = e[l];
      s[c.id] = [u, h];
    }
    const r = Object.keys(this.nodesByDepth).map((l) => parseInt(l, 10)).sort(Yc);
    for (const l of r) {
      const c = this.nodesByDepth[l];
      for (const u of c) {
        const h = u.outboundLayer, d = u.inputTensors, p = u.outputTensors, f = new Array();
        for (const m of d)
          m.id in s && f.push(s[m.id]);
        if (f.length === d.length) {
          let m = {}, g, y, b, w;
          if (u.callArgs != null && (m = u.callArgs), f.length === 1) {
            const [x, S] = f[0];
            m.mask == null && (m.mask = S), b = Bt(h.call(x, m)), w = Bt(h.computeMask(x, S)), g = [x], y = [S];
          } else
            g = f.map((x) => x[0]), y = f.map((x) => x[1]), m.mask == null && (m.mask = y), b = Bt(h.call(g, m)), w = Bt(h.computeMask(g, y));
          if (h.activityRegularizer)
            throw new wt("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");
          for (let x = 0; x < p.length; ++x) {
            const S = p[x], v = b[x], T = w[x];
            s[S.id] = [v, T];
          }
        }
      }
    }
    const o = [], i = [], a = [];
    for (const l of this.outputs) {
      gs(l.id in s, `Could not compute output ${l.name} : ${l.id}`);
      const [c, u] = s[l.id];
      a.push(c.shape), o.push(c), i.push(u);
    }
    return [o, i, a];
  }
  buildNodeConversionMap(t) {
    const e = {};
    let s;
    for (const r of this.layers) {
      s = r instanceof qn ? 1 : 0;
      for (let o = 0; o < r.inboundNodes.length; o++) {
        const i = qn.nodeKey(r, o);
        this.containerNodes.has(i) && (e[i] = s, s += 1);
      }
    }
    return e;
  }
  getLayer(t, e) {
    if (e != null) {
      if (this.layers.length <= e)
        throw new O(`Was asked to retrieve layer at index ${e}, but model only has ${this.layers.length} layer(s).`);
      return this.layers[e];
    } else if (t == null)
      throw new O("Provide either a layer name or layer index");
    for (const s of this.layers)
      if (s.name === t)
        return s;
    throw new O(`No such layer: ${t}`);
  }
  calculateLosses() {
    return A(() => {
      const t = [];
      for (const e of this.layers)
        for (let s = 0; s < e.inboundNodes.length; ++s) {
          const r = qn.nodeKey(e, s);
          this.containerNodes.has(r) && t.push(...e.calculateLosses());
        }
      return t;
    });
  }
  getConfig() {
    const t = { name: this.name }, e = this.buildNodeConversionMap(this.layers), s = [];
    for (const i of this.layers) {
      const a = i.getClassName(), l = i.getConfig(), c = [];
      for (let h = 0; h < i.inboundNodes.length; h++) {
        const d = i.inboundNodes[h], p = qn.nodeKey(i, h);
        let f = {};
        if (this.containerNodes.has(p)) {
          if (d.callArgs)
            try {
              JSON.stringify(d.callArgs), f = d.callArgs;
            } catch {
              console.warn(`Layer ${i.name} was passed non-serializable keyword arguments: ${d.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`), f = {};
            }
          if (d.inboundLayers.length > 0) {
            const m = [];
            for (let g = 0; g < d.inboundLayers.length; g++) {
              const y = d.inboundLayers[g], b = d.nodeIndices[g], w = d.tensorIndices[g], x = qn.nodeKey(y, b);
              let S = e[x];
              S == null && (S = 0), m.push([y.name, S, w, f]);
            }
            c.push(m);
          }
        }
      }
      const u = {};
      u.name = i.name, u.className = a, u.config = l, u.inboundNodes = c, s.push(u);
    }
    t.layers = s;
    const r = [];
    for (let i = 0; i < this.inputLayers.length; i++) {
      const a = this.inputLayers[i], l = this.inputLayersNodeIndices[i], c = qn.nodeKey(a, l);
      if (!this.containerNodes.has(c))
        continue;
      let u = e[c];
      u == null && (u = 0);
      const h = this.inputLayersTensorIndices[i];
      r.push([a.name, u, h]);
    }
    t.inputLayers = r;
    const o = [];
    for (let i = 0; i < this.outputLayers.length; i++) {
      const a = this.outputLayers[i], l = this.outputLayersNodeIndices[i], c = qn.nodeKey(a, l);
      if (!this.containerNodes.has(c))
        continue;
      let u = e[c];
      u == null && (u = 0);
      const h = this.outputLayersTensorIndices[i];
      o.push([a.name, u, h]);
    }
    return t.outputLayers = o, t;
  }
  static fromConfig(t, e, s = {}, r = !1) {
    const o = {}, i = {};
    function a(g, y) {
      g.name in i ? i[g.name].push(y) : i[g.name] = [y];
    }
    function l(g, y) {
      const b = [];
      let w;
      for (const x of y) {
        const S = x[0], v = x[1], T = x[2];
        if (w = x[3] == null ? {} : x[3], !(S in o)) {
          a(g, y);
          return;
        }
        const N = o[S];
        if (N.inboundNodes.length <= v) {
          a(g, y);
          return;
        }
        const $ = N.inboundNodes[v];
        b.push($.outputTensors[T]);
      }
      b.length > 0 && g.apply(qe(b), w);
    }
    function c(g) {
      const y = g.name, b = rs(g, e.customObjects != null ? e.customObjects : {});
      b.setFastWeightInitDuringBuild(r), o[y] = b, g.inboundNodes.forEach((x) => {
        if (!(x instanceof Array))
          throw new O(`Corrupted configuration, expected array for nodeData: ${x}`);
        a(b, x);
      });
    }
    const u = e.name, h = e.layers;
    for (const g of h)
      c(g);
    for (; !ZG(i); )
      for (const g of h) {
        const y = o[g.name];
        if (y.name in i) {
          const b = i[y.name];
          delete i[y.name];
          for (const w of b)
            l(y, w);
        }
      }
    const d = [], p = [], f = e.inputLayers;
    for (const g of f) {
      const y = g[0], b = g[1], w = g[2];
      gs(y in o);
      const S = o[y].inboundNodes[b].outputTensors;
      d.push(S[w]);
    }
    const m = e.outputLayers;
    for (const g of m) {
      const y = g[0], b = g[1], w = g[2];
      gs(y in o);
      const S = o[y].inboundNodes[b].outputTensors;
      p.push(S[w]);
    }
    return new t({ inputs: d, outputs: p, name: u });
  }
  get stateful() {
    if (this._stateful)
      throw new O("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");
    for (const t of this.layers)
      if (t.stateful)
        return !0;
    return !1;
  }
  resetStates() {
    A(() => {
      this.layers.forEach((t) => {
        t.stateful && t.resetStates();
      });
    });
  }
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function xF(n, t, e) {
  const s = t.length;
  if (n == null || Array.isArray(n) && n.length === 0)
    return t.map((r) => null);
  if (s === 1)
    return Array.isArray(n) && n.length === 1 ? n : typeof n == "object" && t[0] in n ? [n[t[0]]] : [n];
  if (Array.isArray(n)) {
    if (n.length !== s)
      throw new Error(`Provided ${e} is an array of ${n.length} element(s), but the model has ${s} outputs. Make sure a set of weights is provided for each model output.`);
    return n;
  } else if (typeof n == "object" && Object.keys(n).length > 0 && typeof n[Object.keys(n)[0]] == "object") {
    const r = [];
    return t.forEach((o) => {
      o in n ? r.push(n[o]) : r.push(null);
    }), r;
  } else
    throw new Error(`The model has multiple (${s}) outputs, so ${e} must be either an array with ${s} elements or an object with ${t} keys. Provided ${e} not understood: ${JSON.stringify(n)}`);
}
function oS(n, t) {
  return xF(n, t, "classWeight");
}
async function iS(n, t, e, s) {
  if (t != null || s != null)
    throw new Error("Support sampleWeight is not implemented yet");
  if (e != null) {
    const r = A(() => {
      if (n.shape.length === 1)
        return ws(n);
      if (n.shape.length === 2) {
        if (n.shape[1] > 1)
          return qr(n, 1);
        if (n.shape[1] === 1)
          return G(n, [n.shape[0]]);
        throw new Error(`Encountered unexpected last-dimension size (${n.shape[1]}) during handling of class weights. The size is expected to be >= 1.`);
      } else
        throw new Error(`Unexpected rank of target (y) tensor (${n.rank}) during handling of class weights. The rank is expected to be 1 or 2.`);
    }), o = Array.from(await r.data());
    xt(r);
    const i = [];
    return o.forEach((a) => {
      if (e[a] == null)
        throw new Error(`classWeight must contain all classes in the training data. The class ${a} exists in the data but not in classWeight`);
      i.push(e[a]);
    }), Ve(i, "float32");
  } else
    return null;
}
function wF(n, t) {
  return D(n, t);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const IF = 32;
function aS(n, t) {
  let e, s;
  const r = t;
  e = r.xs, s = r.ys, C(e != null && s != null, () => `A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`);
  const o = ox("input", n.inputNames, e), i = ox("output", n.outputNames, s), a = o[0].shape[0];
  C(o.length === n.inputs.length, () => `LayersModel has ${n.inputs.length} inputs, but the dataset provides ${o.length} inputs.  (Expected input keys: ${JSON.stringify(n.inputNames)})`), C(i.length === n.outputs.length, () => `LayersModel has ${n.outputs.length} outputs, but the dataset provides ${i.length} outputs.  (Expected output keys: ${JSON.stringify(n.outputNames)})`);
  for (let l = 0; l < o.length; l++)
    C(o[l].shape[0] === a, () => `Batch size mismatch: input ${n.inputNames[l]} has ${o[l].shape[0]}; expected  ${a} based on input ${n.inputNames[0]}.`);
  for (let l = 0; l < i.length; l++)
    C(i[l].shape[0] === a, () => `Batch size mismatch: output ${n.outputNames[l]} has ${i[l].shape[0]}; expected  ${a} based on input ${n.inputNames[0]}.`);
  return { xs: o, ys: i };
}
function ox(n, t, e) {
  if (e instanceof Lt)
    return [e];
  if (Array.isArray(e))
    return C(e.length === t.length, () => `Received an array of ${e.length} Tensors, but expected ${t.length} to match the ${n} keys ${t}.`), e;
  {
    const s = [];
    for (const r of t) {
      if (e[r] == null)
        throw new O(`The feature data generated by the dataset lacks the required ${n} key '${r}'.`);
      s.push(e[r]);
    }
    return s;
  }
}
function SF(n) {
  if (n.length === 3)
    throw new wt("Validation with sample weights is not implemented yet.");
  return { xs: n[0], ys: n[1] };
}
async function vF(n, t, e) {
  const s = e.batchesPerEpoch != null;
  if (C(n.optimizer != null, () => "You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."), C(e != null, () => "For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."), C(e.epochs != null && e.epochs > 0 && Number.isInteger(e.epochs), () => `For fitDataset(), config.epochs is expected to be a positive integer, but got ${e.epochs}`), C(!s || e.batchesPerEpoch > 0 && Number.isInteger(e.batchesPerEpoch), () => `For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${e.batchesPerEpoch}`), C(
    e.validationSplit == null,
    () => "`validationSplit` is not supported by `fitDataset()`. Use validationData instead."
  ), n.isTraining)
    throw new Error("Cannot start training because another fit() call is ongoing.");
  n.isTraining = !0;
  try {
    const r = e.validationData != null;
    let o, i;
    if (r)
      if (ix(e.validationData))
        C(e.validationBatches == null || e.validationBatches > 0 && Number.isInteger(e.validationBatches), () => `For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${e.validationBatches}`);
      else {
        const g = SF(e.validationData);
        o = g.xs, i = g.ys;
      }
    const a = n.makeTrainFunction(), l = n.getDedupedMetricsNames();
    let c;
    r ? c = l.slice().concat(l.map((g) => "val_" + g)) : c = l.slice();
    const u = JI(e.callbacks, e.yieldEvery), h = e.verbose == null ? 1 : e.verbose, { callbackList: d, history: p } = QI(
      u,
      h,
      e.epochs,
      null,
      null,
      CF(t, e),
      null,
      r,
      c
    );
    d.setModel(n), n.history = p, await d.onTrainBegin(), n.stopTraining_ = !1;
    let f = e.initialEpoch == null ? 0 : e.initialEpoch, m = await t.iterator();
    for (; f < e.epochs; ) {
      const g = {};
      await d.onEpochBegin(f);
      let y = 0, b = 0;
      for (s || (m = await t.iterator()); !s || y < e.batchesPerEpoch; ) {
        const w = await m.next();
        if (s && w.done) {
          console.warn(`You provided \`batchesPerEpoch\` as ${e.batchesPerEpoch}, but your dataset iterator ran out of data after ${y} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, ${e.batchesPerEpoch * e.epochs} batches). You may need to use the repeat() function when building your dataset.`);
          break;
        }
        if (w.value != null) {
          const { xs: x, ys: S } = aS(n, w.value), v = {};
          v.batch = b, v.size = x[0].shape[0], await d.onBatchBegin(b, v);
          const T = [];
          if (e.classWeight != null) {
            const R = oS(e.classWeight, n.outputNames);
            for (let F = 0; F < R.length; ++F)
              T.push(await iS(S[F], null, R[F]));
          }
          const N = x.concat(S).concat(T), $ = a(N);
          xt(N);
          for (let R = 0; R < l.length; ++R) {
            const F = l[R], z = $[R];
            v[F] = z, ce(z);
          }
          await d.onBatchEnd(b, v), HI(v), b++, y++;
        }
        if (s ? y >= e.batchesPerEpoch : w.done) {
          if (r) {
            let x;
            ix(e.validationData) ? x = Bt(await n.evaluateDataset(e.validationData, { batches: e.validationBatches })) : x = Bt(n.evaluate(o, i, {
              batchSize: e.validationBatchSize == null ? IF : e.validationBatchSize,
              verbose: 0
            }));
            for (let S = 0; S < n.metricsNames.length; ++S)
              g[`val_${n.metricsNames[S]}`] = x[S];
          }
          break;
        }
        if (n.stopTraining_)
          break;
      }
      if (await d.onEpochEnd(f, g), f++, n.stopTraining_)
        break;
    }
    return await d.onTrainEnd(), await n.history.syncData(), n.history;
  } finally {
    n.isTraining = !1;
  }
}
function CF(n, t) {
  let e = null;
  return t.batchesPerEpoch != null ? e = t.batchesPerEpoch : Number.isFinite(n.size) && (e = n.size), e;
}
function ix(n) {
  return typeof n.iterator == "function";
}
function kF(n) {
  return typeof n.next == "function";
}
async function TF(n, t, e) {
  e = e || {};
  const s = e.batches != null, r = n.testFunction;
  let o = [];
  if (e.verbose > 0)
    throw new wt("Verbose mode is not implemented yet.");
  C(!s || e.batches > 0 && Number.isInteger(e.batches), () => `Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(e.batches)}`);
  const i = kF(t) ? t : await t.iterator();
  let a = 0, l = 0;
  for (; !s || l < e.batches; ) {
    const c = await i.next();
    if (o = A(() => {
      if (c.value) {
        const { xs: u, ys: h } = aS(n, c.value), d = u.concat(h), p = A(() => r(d));
        if (xt(d), l === 0)
          for (let m = 0; m < p.length; ++m)
            o.push(ft(0));
        const f = d[0].shape[0];
        for (let m = 0; m < p.length; ++m) {
          const g = p[m], y = o[m];
          o[m] = A(() => U(o[m], D(f, g))), l > 0 && xt(y);
        }
        xt(p), a += f, ++l;
      }
      return o;
    }), c.done) {
      s && console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${e.batches} batches). You may need to use the repeat() function when building your dataset.`);
      break;
    }
  }
  for (let c = 0; c < o.length; ++c) {
    const u = o[c];
    o[c] = ht(o[c], a), xt(u);
  }
  return qe(o);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function Hf(n) {
  C(n > 0 && Number.isInteger(n), () => `batchSize is required to be a positive integer, but got ${n}`);
}
function La(n, t, e) {
  return n == null ? [null] : Array.isArray(n) ? n.map((s) => Ur(s, t, e - t)) : Ur(n, t, e - t);
}
function Jy(n, t) {
  return A(() => n == null ? null : Array.isArray(n) ? n.map((e) => Jy(e, t)) : XI(n, t.dtype === "int32" ? t : et(t, "int32")));
}
function Uf(n, t) {
  const e = [];
  let s = 0, r = null;
  for (; s < n; )
    r = s + t, r >= n && (r = n), e.push([s, r]), s = r;
  return e;
}
async function NF(n, t, e, s, r, o, i, a, l, c, u, h, d, p, f) {
  r == null && (r = 32), o == null && (o = 1), u == null && (u = !0), d == null && (d = 0);
  let m = !1;
  if (l != null && c != null && (m = !0), f != null && (m = !0, p == null))
    throw new O("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");
  const g = n.checkNumSamples(e, r, p, "steps_per_epoch");
  let y;
  g != null && (y = is(0, g)), i == null && (i = 1);
  const { callbackList: b, history: w } = QI(a, i, o, d, g, p, r, m, h);
  b.setModel(n), n.history = w, await b.onTrainBegin(), n.stopTraining_ = !1;
  for (let x = d; x < o; ++x) {
    await b.onEpochBegin(x);
    const S = {};
    if (p != null)
      throw new wt("stepsPerEpoch mode is not implemented yet.");
    {
      if (u === "batch")
        throw new wt("batch shuffling is not implemneted yet");
      u && gm(y);
      const v = Ve(y), T = Uf(g, r);
      for (let N = 0; N < T.length; ++N) {
        const $ = {};
        if (await b.onBatchBegin(N, $), A(() => {
          const R = T[N][0], F = T[N][1], z = Ur(v, R, F - R);
          $.batch = N, $.size = F - R;
          const W = Jy(e, z), M = t(W);
          for (let X = 0; X < s.length; ++X) {
            const _ = s[X], B = M[X];
            $[_] = B, ce(B);
          }
          if (N === T.length - 1 && m) {
            const X = n.testLoop(l, c, r);
            for (let _ = 0; _ < s.length; ++_) {
              const B = s[_], Z = X[_];
              ce(Z), S["val_" + B] = Z;
            }
          }
        }), await b.onBatchEnd(N, $), HI($), n.stopTraining_)
          break;
      }
      v.dispose();
    }
    if (await b.onEpochEnd(x, S), n.stopTraining_)
      break;
  }
  return await b.onTrainEnd(), await n.history.syncData(), n.history;
}
async function $F(n, t, e, s = {}) {
  if (n.isTraining)
    throw new Error("Cannot start training because another fit() call is ongoing.");
  n.isTraining = !0;
  let r, o, i, a, l, c, u, h, d;
  try {
    const p = s.batchSize == null ? 32 : s.batchSize;
    Hf(p);
    const f = !1, m = await n.standardizeUserData(t, e, s.sampleWeight, s.classWeight, f, p);
    r = m[0], o = m[1], d = m[2];
    let g = !1, y;
    if (s.validationData != null && s.validationData.length > 0) {
      if (g = !0, s.validationData.length === 2)
        l = s.validationData[0], c = s.validationData[1];
      else
        throw s.validationData.length === 3 ? new wt("validationData including sample weights is not supported yet.") : new O(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${s.validationData} is invalid.`);
      const $ = !0, R = await n.standardizeUserData(l, c, null, null, $, p);
      u = R[0], h = R[1], y = u.concat(h);
    } else if (s.validationSplit != null && s.validationSplit > 0 && s.validationSplit < 1) {
      g = !0;
      const $ = Math.floor(r[0].shape[0] * (1 - s.validationSplit)), R = r[0].shape[0];
      u = La(r, $, R), i = r, r = La(r, 0, $), h = La(o, $, R), a = o, o = La(o, 0, $), y = u.concat(h);
    } else
      s.validationSteps != null && (g = !0);
    const b = r.concat(o).concat(d);
    n.checkTrainableWeightsConsistency();
    const w = n.makeTrainFunction(), x = n.getDedupedMetricsNames();
    let S, v;
    g ? (n.makeTestFunction(), S = n.testFunction, v = x.slice().concat(x.map(($) => "val_" + $))) : (S = null, y = [], v = x.slice());
    const T = JI(s.callbacks, s.yieldEvery);
    return await NF(n, w, b, x, p, s.epochs, s.verbose, T, S, y, s.shuffle, v, s.initialEpoch, null, null);
  } finally {
    n.isTraining = !1, es(r, t), es(o, e), es(i, t), es(a, e), es(u, l), es(h, c), d != null && xt(d);
  }
}
function lS(n) {
  const t = [];
  n instanceof Lt && (n = [n]);
  for (let e = 0; e < n.length; ++e) {
    const s = n[e];
    if (s.rank === 1)
      t.push(Ec(s, 1));
    else {
      if (s.rank === 0)
        throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");
      t.push(s);
    }
  }
  return t;
}
function es(n, t) {
  if (n == null)
    return;
  const e = [];
  if (t instanceof Lt)
    e.push(t.id);
  else if (Array.isArray(t))
    t.forEach((r) => e.push(r.id));
  else if (t != null)
    for (const r in t) {
      const o = t[r];
      e.push(o.id);
    }
  const s = [];
  if (n instanceof Lt)
    e.indexOf(n.id) === -1 && s.push(n);
  else if (Array.isArray(n))
    n.forEach((r) => {
      e.indexOf(r.id) === -1 && s.push(r);
    });
  else if (n != null)
    for (const r in n) {
      const o = n[r];
      e.indexOf(o.id) === -1 && s.push(o);
    }
  s.forEach((r) => {
    r.isDisposed || r.dispose();
  });
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function RF(n) {
  return n instanceof Lt;
}
function Yf(n) {
  return Array.isArray(n);
}
function ax(n) {
  return !RF(n) && !Yf(n);
}
function lx(n, t, e, s = !0, r = "") {
  if (t == null || t.length === 0) {
    if (n != null) {
      let i = !1;
      if (Yf(n) && n.length > 0)
        i = !0;
      else if (ax(n)) {
        for (const a in n)
          if (n.hasOwnProperty(a)) {
            i = !0;
            break;
          }
      } else
        i = !0;
      if (i)
        throw new O(`Error when checking model ${r} expected no data, but got ${n}`);
    }
    return [];
  }
  if (n == null)
    return t.map((i) => null);
  let o;
  if (ax(n)) {
    n = n, o = [];
    for (const i of t) {
      if (n[i] == null)
        throw new O(`No data provided for "${i}". Need data for each key in: ${t}`);
      o.push(n[i]);
    }
  } else if (Yf(n)) {
    if (n = n, n.length !== t.length)
      throw new O(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${n}`);
    o = n;
  } else {
    if (n = n, t.length > 1)
      throw new O(`The model ${r} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${n.shape}`);
    o = [n];
  }
  if (o = lS(o), e != null)
    for (let i = 0; i < t.length; ++i) {
      if (e[i] == null)
        continue;
      const a = o[i];
      if (a.shape.length !== e[i].length)
        throw new O(`Error when checking ${r}: expected ${t[i]} to have ${e[i].length} dimension(s). but got array with shape ${a.shape}`);
      for (let l = 0; l < e[i].length; ++l) {
        if (l === 0 && !s)
          continue;
        const c = a.shape[l], u = e[i][l];
        if (u != null && u >= 0 && c !== u)
          throw new O(`${r} expected a batch of elements where each example has shape [${e[i].slice(1, e[i].length)}] (i.e.,tensor shape [*,${e[i].slice(1, e[i].length)}]) but the ${r} received an input with ${a.shape[0]} examples, each with shape [${a.shape.slice(1, a.shape.length)}] (tensor shape [${a.shape}])`);
      }
    }
  return o;
}
function EF(n, t, e) {
  const s = dr(n.map((o) => o.shape[0]));
  s.sort();
  const r = dr(t.map((o) => o.shape[0]));
  if (r.sort(), s.length > 1)
    throw new O(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(n.map((o) => o.shape))}`);
  if (r.length > 1)
    throw new O(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map((o) => o.shape))}`);
  if (s.length > 0 && r.length > 0 && !Nt(s, r))
    throw new O(`Input Tensors should have the same number of samples as target Tensors. Found ${s[0]} input sample(s) and ${r[0]} target sample(s).`);
}
function LF(n, t, e) {
  const s = [
    xo,
    pp,
    ja
  ];
  for (let r = 0; r < n.length; ++r) {
    const o = n[r], i = t[r], a = e[r];
    if (i != null) {
      if (i === ja && o.shape[o.shape.length - 1] === 1)
        throw new O(`You are passing a target array of shape ${o.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);
      if (s.indexOf(i) !== -1) {
        const l = o.shape.slice(1), c = a.slice(1);
        for (let u = 0; u < l.length; ++u) {
          const h = l[u], d = c[u];
          if (d != null && h !== d)
            throw new O(`A target Tensor with shape ${o.shape} was passed for an output of shape ${a}, while using a loss function that expects targets to have the same shape as the output.`);
        }
      }
    }
  }
}
function cx(n, t, e, s = !0, r = "") {
  let o;
  if (Array.isArray(n)) {
    if (n.length !== t.length)
      throw new O(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${n.length} Tensors(s).`);
    o = n;
  } else {
    if (t.length > 1)
      throw new O(`The model expects ${t.length} ${r} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(n.shape)}.`);
    o = [n];
  }
  if (e != null)
    for (let i = 0; i < t.length; ++i) {
      if (e[i] == null)
        continue;
      const a = o[i];
      if (a.shape.length !== e[i].length)
        throw new O(`Error when checking ${r}: expected ${t[i]} to have ${e[i].length} dimension(s), but got array with shape ${JSON.stringify(a.shape)}`);
      for (let l = 0; l < e[i].length; ++l) {
        if (l === 0 && !s)
          continue;
        const c = a.shape[l], u = e[i][l];
        if (u != null && u !== c)
          throw new O(`Error when checking ${r}: expected ${t[i]} to have shape ${JSON.stringify(e[i])} but got array with shape ${JSON.stringify(a.shape)}.`);
      }
    }
}
function DF(n, t) {
  if (n == null || Array.isArray(n) && n.length === 0)
    return t.map((s) => []);
  let e;
  if (typeof n == "string" || typeof n == "function")
    e = [n];
  else if (Array.isArray(n) || typeof n == "object")
    e = n;
  else
    throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${n}`);
  if (Array.isArray(e))
    return t.map((s) => e);
  {
    const s = [];
    for (const r of t) {
      let o = e.hasOwnProperty(r) ? e[r] : [];
      Array.isArray(o) || (o = [o]), s.push(o);
    }
    return s;
  }
}
const GF = "layers-model";
class As extends qn {
  constructor(t) {
    super(t), this.isTraining = !1;
  }
  summary(t, e, s = console.log) {
    if (!this.built)
      throw new O("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");
    fF(this, t, e, s);
  }
  compile(t) {
    if (t.loss == null && (t.loss = []), this.loss = t.loss, typeof t.optimizer == "string")
      this.optimizer_ = pF(t.optimizer), this.isOptimizerOwned = !0;
    else {
      if (!(t.optimizer instanceof Qs))
        throw new O("User-defined optimizer must be an instance of tf.Optimizer.");
      this.optimizer_ = t.optimizer, this.isOptimizerOwned = !1;
    }
    let e = [];
    if (!Array.isArray(t.loss) && typeof t.loss != "string" && typeof t.loss != "function") {
      t.loss = t.loss;
      for (const i in t.loss)
        if (this.outputNames.indexOf(i) === -1)
          throw new O(`Unknown entry in loss dictionary: "${i}". Only expected the following keys: ${this.outputNames}`);
      for (const i of this.outputNames)
        t.loss[i] == null && console.warn(`Output "${i}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${i} during training`), e.push(Pp(t.loss[i]));
    } else if (Array.isArray(t.loss)) {
      if (t.loss.length !== this.outputs.length)
        throw new O(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${t.loss}.`);
      e = t.loss.map((a) => Pp(a));
    } else {
      const i = Pp(t.loss);
      this.outputs.forEach((a) => {
        e.push(i);
      });
    }
    this.lossFunctions = e, this.feedOutputNames = [], this.feedOutputShapes = [], this.feedLossFns = [];
    for (let i = 0; i < this.outputs.length; ++i) {
      const a = this.internalOutputShapes[i], l = this.outputNames[i];
      this.feedOutputNames.push(l), this.feedOutputShapes.push(a), this.feedLossFns.push(this.lossFunctions[i]);
    }
    const s = [];
    this.metrics = t.metrics, this.metricsNames = ["loss"], this.metricsTensors = [], Hr("loss", () => {
      for (let i = 0; i < this.outputs.length; ++i) {
        if (s.indexOf(i) !== -1)
          continue;
        const a = this.lossFunctions[i];
        this.outputs.length > 1 && (this.metricsTensors.push([a, i]), this.metricsNames.push(this.outputNames[i] + "_loss"));
      }
    });
    const r = DF(t.metrics, this.outputNames), o = (i, a, l) => {
      this.outputNames.length > 1 && (a = this.outputNames[i] + "_" + a), this.metricsNames.push(a), this.metricsTensors.push([l, i]);
    };
    Hr("metric", () => {
      for (let i = 0; i < this.outputs.length; ++i) {
        if (s.indexOf(i) !== -1)
          continue;
        const a = r[i];
        ((c) => {
          const u = "";
          let h, d, p;
          for (const f of c) {
            if (typeof f == "string" && ["accuracy", "acc", "crossentropy", "ce"].indexOf(f) !== -1) {
              const g = this.internalOutputShapes[i];
              g[g.length - 1] === 1 || this.lossFunctions[i] === pp ? ["accuracy", "acc"].indexOf(f) !== -1 ? d = Uy : ["crossentropy", "ce"].indexOf(f) !== -1 && (d = eS) : this.lossFunctions[i] === Au ? ["accuracy", "acc"].indexOf(f) !== -1 ? d = nS : ["crossentropy", "ce"].indexOf(f) !== -1 && (d = sS) : ["accuracy", "acc"].indexOf(f) !== -1 ? d = Yy : ["crossentropy", "ce"].indexOf(f) !== -1 && (d = jy);
              let y;
              ["accuracy", "acc"].indexOf(f) !== -1 ? y = "acc" : ["crossentropy", "ce"].indexOf(f) !== -1 && (y = "ce"), p = d, h = u + y;
            } else
              p = dF(f), h = u + Qc(f);
            let m;
            Hr(h, () => {
              m = p;
            }), o(i, h, m);
          }
        })(a);
      }
    }), this.collectedTrainableWeights = this.trainableWeights;
  }
  checkTrainableWeightsConsistency() {
    this.collectedTrainableWeights != null && this.trainableWeights.length !== this.collectedTrainableWeights.length && console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?");
  }
  evaluate(t, e, s = {}) {
    const r = s.batchSize == null ? 32 : s.batchSize;
    Hf(r);
    const o = !0, i = this.standardizeUserDataXY(t, e, o, r);
    try {
      const a = i[0].concat(i[1]);
      this.makeTestFunction();
      const l = this.testFunction, c = this.testLoop(l, a, r, s.verbose, s.steps);
      return qe(c);
    } finally {
      es(i[0], t), es(i[1], e);
    }
  }
  async evaluateDataset(t, e) {
    return this.makeTestFunction(), TF(this, t, e);
  }
  checkNumSamples(t, e, s, r = "steps") {
    let o;
    if (s != null) {
      if (o = null, e != null)
        throw new O(`If ${r} is set, batchSize must be null or undefined.Got batchSize = ${e}`);
    } else if (t != null)
      Array.isArray(t) ? o = t[0].shape[0] : o = t.shape[0];
    else
      throw new O(`Either the input data should have a defined shape, or ${r} shoud be specified.`);
    return o;
  }
  execute(t, e) {
    if (Array.isArray(e) && e.length === 0)
      throw new O("`outputs` is an empty Array, which is not allowed.");
    const s = Array.isArray(e), r = s ? e : [e], o = this.retrieveSymbolicTensors(r), i = new ar();
    if (t instanceof Lt && (t = [t]), Array.isArray(t)) {
      if (t.length !== this.inputs.length)
        throw new O(`The number of inputs provided (${t.length}) does not match the number of inputs of this model (${this.inputs.length}).`);
      for (let l = 0; l < this.inputs.length; ++l)
        i.add(this.inputs[l], t[l]);
    } else
      for (const l of this.inputs) {
        const c = t[l.name];
        if (c == null)
          throw new O(`No value is provided for the model's input ${l.name}`);
        i.add(l, c);
      }
    const a = Ea(o, i);
    return s ? a : a[0];
  }
  retrieveSymbolicTensors(t) {
    const e = no(null, t.length);
    let s = t.length;
    for (const r of this.layers) {
      const o = Array.isArray(r.output) ? r.output : [r.output], i = o.map((a) => a.name);
      for (let a = 0; a < t.length; ++a) {
        const l = i.indexOf(t[a]);
        if (l !== -1 && (e[a] = o[l], s--), s === 0)
          break;
      }
      if (s === 0)
        break;
    }
    if (s > 0) {
      const r = [];
      throw e.forEach((o, i) => {
        o == null && r.push(t[i]);
      }), new O(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(r)}`);
    }
    return e;
  }
  predictLoop(t, e = 32, s = !1) {
    return A(() => {
      const r = this.checkNumSamples(t);
      if (s)
        throw new wt("Verbose predictLoop() is not implemented yet.");
      const o = Uf(r, e), i = this.outputs.map((a) => []);
      for (let a = 0; a < o.length; ++a)
        A(() => {
          const c = o[a][0], u = o[a][1], h = La(t, c, u), d = [];
          if (Array.isArray(h))
            for (let f = 0; f < h.length; ++f)
              d.push({ key: this.inputs[f], value: h[f] });
          else
            d.push({ key: this.inputs[0], value: h });
          const p = new ar(d);
          return Ea(this.outputs, p);
        }).forEach((c, u) => i[u].push(c));
      return qe(i.map((a) => he(a, 0)));
    });
  }
  predict(t, e = {}) {
    const s = lS(t);
    cx(s, this.inputNames, this.feedInputShapes, !1);
    try {
      const r = e.batchSize == null ? 32 : e.batchSize;
      return Hf(r), this.predictLoop(s, r);
    } finally {
      es(s, t);
    }
  }
  predictOnBatch(t) {
    cx(t, this.inputNames, this.feedInputShapes, !0);
    const e = (Array.isArray(t) ? t[0] : t).shape[0];
    return this.predictLoop(t, e);
  }
  standardizeUserDataXY(t, e, s = !0, r) {
    if (this.optimizer_ == null)
      throw new Kn("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");
    const o = [];
    for (let i = 0; i < this.feedOutputShapes.length; ++i) {
      const a = this.feedOutputShapes[i];
      this.feedLossFns[i] === Au ? o.push(a.slice(0, a.length - 1).concat([1])) : o.push(a);
    }
    if (t = lx(t, this.feedInputNames, this.feedInputShapes, !1, "input"), e = lx(e, this.feedOutputNames, o, !1, "target"), EF(t, e), LF(e, this.feedLossFns, this.feedOutputShapes), this.stateful && r != null && r > 0 && t[0].shape[0] % r !== 0)
      throw new O(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${r}. Found: ${t[0].shape[0]} sample(s).`);
    return [t, e];
  }
  async standardizeUserData(t, e, s, r, o = !0, i) {
    const [a, l] = this.standardizeUserDataXY(t, e, o, i);
    if (s != null)
      throw new Error("sample weight is not supported yet.");
    let c = null;
    if (r != null) {
      const u = oS(r, this.outputNames);
      c = [];
      for (let h = 0; h < u.length; ++h)
        c.push(await iS(l[h], null, u[h]));
    }
    return [a, l, c];
  }
  testLoop(t, e, s, r = 0, o) {
    return A(() => {
      const i = this.checkNumSamples(e, s, o, "steps"), a = [];
      if (r > 0)
        throw new wt("Verbose mode is not implemented yet.");
      if (o != null)
        throw new wt("steps mode in testLoop() is not implemented yet");
      {
        const l = Uf(i, s), c = Ve(is(0, i));
        for (let u = 0; u < l.length; ++u) {
          const h = l[u][0], d = l[u][1], p = Ur(c, h, d - h), f = Jy(e, p), m = t(f);
          if (u === 0)
            for (let g = 0; g < m.length; ++g)
              a.push(ft(0));
          for (let g = 0; g < m.length; ++g) {
            const y = m[g];
            a[g] = U(a[g], D(d - h, y));
          }
        }
        for (let u = 0; u < a.length; ++u)
          a[u] = ht(a[u], i);
      }
      return a;
    });
  }
  getDedupedMetricsNames() {
    const t = this.metricsNames, e = [];
    for (let s = 0; s < t.length; ++s) {
      const r = t[s];
      let o = r;
      if (Hb(t, r) > 1) {
        const i = Hb(t.slice(0, s), r);
        o += `_${i}`;
      }
      e.push(o);
    }
    return e;
  }
  makeTrainFunction() {
    return (t) => {
      const e = [], s = t.slice(0, this.inputs.length), r = t.slice(this.inputs.length, this.inputs.length + this.outputs.length), o = t.slice(this.inputs.length + this.outputs.length, this.inputs.length + this.outputs.length * 2), i = [], a = () => {
        const h = [];
        for (let m = 0; m < this.inputs.length; ++m)
          h.push({ key: this.inputs[m], value: s[m] });
        const d = new ar(h), p = Ea(this.outputs, d, { training: !0 });
        let f;
        for (let m = 0; m < this.lossFunctions.length; ++m) {
          const g = this.lossFunctions[m];
          let y = g(r[m], p[m]);
          o[m] != null && (y = wF(y, o[m]));
          const b = ne(y);
          e.push(b), m === 0 ? f = y : f = U(f, y);
        }
        for (let m = 0; m < this.metricsTensors.length; ++m) {
          let g;
          if (this.outputs.length > 1 && m < this.outputs.length)
            g = e[m];
          else {
            const y = this.metricsTensors[m][0], b = this.metricsTensors[m][1];
            g = ne(y(r[b], p[b]));
          }
          ce(g), i.push(g);
        }
        return f = ne(f), this.calculateLosses().forEach((m) => {
          f = U(f, m);
        }), f;
      }, l = this.collectedTrainableWeights.map((h) => h.read()), c = !0;
      return [this.optimizer_.minimize(a, c, l)].concat(i);
    };
  }
  makeTestFunction() {
    this.testFunction = (t) => A(() => {
      const e = [];
      let s;
      const r = t.slice(0, this.inputs.length), o = t.slice(this.inputs.length, this.inputs.length + this.outputs.length), i = [];
      for (let c = 0; c < this.inputs.length; ++c)
        i.push({ key: this.inputs[c], value: r[c] });
      const a = new ar(i), l = Ea(this.outputs, a);
      for (let c = 0; c < this.lossFunctions.length; ++c) {
        const u = this.lossFunctions[c], h = ne(u(o[c], l[c]));
        c === 0 ? s = h : s = U(s, h), e.push(s);
      }
      for (let c = 0; c < this.metricsTensors.length; ++c) {
        const u = this.metricsTensors[c][0], h = this.metricsTensors[c][1], d = ne(u(o[h], l[h]));
        e.push(d);
      }
      return e;
    });
  }
  async fit(t, e, s = {}) {
    return $F(this, t, e, s);
  }
  async fitDataset(t, e) {
    return vF(this, t, e);
  }
  async trainOnBatch(t, e) {
    const s = await this.standardizeUserData(t, e), r = s[0], o = s[1], a = this.makeTrainFunction()(r.concat(o)), l = [];
    for (const c of a) {
      const u = await c.data();
      l.push(u[0]);
    }
    return xt(a), es(s[0], t), es(s[1], e), qe(l);
  }
  getNamedWeights(t) {
    const e = [], s = t != null && t.trainableOnly, r = s ? this.trainableWeights : this.weights, o = this.getWeights(s);
    for (let i = 0; i < r.length; ++i)
      s && !r[i].trainable || e.push({ name: r[i].originalName, tensor: o[i] });
    return e;
  }
  set stopTraining(t) {
    this.stopTraining_ = t;
  }
  get stopTraining() {
    return this.stopTraining_;
  }
  get optimizer() {
    return this.optimizer_;
  }
  set optimizer(t) {
    this.optimizer_ !== t && (this.optimizer_ = t, this.isOptimizerOwned = !1);
  }
  dispose() {
    const t = super.dispose();
    if (t.refCountAfterDispose === 0 && this.optimizer != null && this.isOptimizerOwned) {
      const e = Za().numTensors;
      this.optimizer_.dispose(), t.numDisposedVariables += e - Za().numTensors;
    }
    return t;
  }
  getLossIdentifiers() {
    let t;
    if (typeof this.loss == "string")
      t = Ls(this.loss);
    else if (Array.isArray(this.loss)) {
      for (const e of this.loss)
        if (typeof e != "string")
          throw new Error("Serialization of non-string loss is not supported.");
      t = this.loss.map((e) => Ls(e));
    } else {
      const e = Object.keys(this.loss);
      t = {};
      const s = this.loss;
      for (const r of e)
        if (typeof s[r] == "string")
          t[r] = Ls(s[r]);
        else
          throw new Error("Serialization of non-string loss is not supported.");
    }
    return t;
  }
  getMetricIdentifiers() {
    if (typeof this.metrics == "string" || typeof this.metrics == "function")
      return [Ls(Qc(this.metrics))];
    if (Array.isArray(this.metrics))
      return this.metrics.map((t) => Ls(Qc(t)));
    {
      const t = {};
      for (const e in this.metrics)
        t[e] = Ls(Qc(this.metrics[e]));
      return t;
    }
  }
  getTrainingConfig() {
    return {
      loss: this.getLossIdentifiers(),
      metrics: this.getMetricIdentifiers(),
      optimizer_config: {
        class_name: this.optimizer.getClassName(),
        config: this.optimizer.getConfig()
      }
    };
  }
  loadTrainingConfig(t) {
    if (t.weighted_metrics != null)
      throw new Error("Loading weight_metrics is not supported yet.");
    if (t.loss_weights != null)
      throw new Error("Loading loss_weights is not supported yet.");
    if (t.sample_weight_mode != null)
      throw new Error("Loading sample_weight_mode is not supported yet.");
    const e = Ja(t.optimizer_config), s = rs(e);
    let r;
    if (typeof t.loss == "string")
      r = zr(t.loss);
    else if (Array.isArray(t.loss))
      r = t.loss.map((i) => zr(i));
    else if (t.loss != null) {
      r = {};
      for (const i in t.loss)
        r[i] = zr(t.loss[i]);
    }
    let o;
    if (Array.isArray(t.metrics))
      o = t.metrics.map((i) => zr(i));
    else if (t.metrics != null) {
      o = {};
      for (const i in t.metrics)
        o[i] = zr(t.metrics[i]);
    }
    this.compile({ loss: r, metrics: o, optimizer: s });
  }
  async save(t, e) {
    if (typeof t == "string") {
      const c = X1(t);
      if (c.length === 0)
        throw new O(`Cannot find any save handlers for URL '${t}'`);
      if (c.length > 1)
        throw new O(`Found more than one (${c.length}) save handlers for URL '${t}'`);
      t = c[0];
    }
    if (t.save == null)
      throw new O("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");
    const s = await Lf(this.getNamedWeights(e)), r = !1, o = null, a = {
      modelTopology: this.toJSON(o, r),
      format: GF,
      generatedBy: `TensorFlow.js tfjs-layers v${fp}`,
      convertedBy: null
    };
    if ((e == null ? !1 : e.includeOptimizer) && this.optimizer != null) {
      a.trainingConfig = this.getTrainingConfig();
      const c = "optimizer", { data: u, specs: h } = await Lf(await this.optimizer.getWeights(), c);
      s.specs.push(...h), s.data = ad([s.data, u]);
    }
    return this.userDefinedMetadata != null && (rx(this.userDefinedMetadata, this.name, !0), a.userDefinedMetadata = this.userDefinedMetadata), a.weightData = s.data, a.weightSpecs = s.specs, t.save(a);
  }
  setUserDefinedMetadata(t) {
    rx(t, this.name), this.userDefinedMetadata = t;
  }
  getUserDefinedMetadata() {
    return this.userDefinedMetadata;
  }
}
As.className = "Model";
Y(As);
class cS extends As {
}
cS.className = "Functional";
Y(cS);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
async function FF(n, t) {
  "modelTopology" in n || (n = { modelTopology: n }), n = n;
  let e = n.modelTopology;
  e.model_config != null && (e = e.model_config);
  const s = Ja(e), r = rs(s, t);
  if (n.weightsManifest != null) {
    const o = await Q1(n.weightsManifest, n.pathPrefix, r.weights.map((a) => a.originalName)), i = {};
    for (const a of r.weights)
      i[a.originalName] = o[a.originalName];
    r.loadWeights(i), xt(o);
  }
  return r;
}
async function OF(n, t) {
  if (t == null && (t = {}), typeof n == "string") {
    const e = _1(n, t);
    if (e.length === 0)
      e.push(ew(n, t));
    else if (e.length > 1)
      throw new O(`Found more than one (${e.length}) load handlers for URL '${n}'`);
    n = e[0];
  }
  return AF(n, void 0, t);
}
async function AF(n, t, e) {
  if (e == null && (e = {}), n.load == null)
    throw new O("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");
  const s = await n.load();
  let r = s.modelTopology;
  r.model_config != null && (r = r.model_config);
  const o = e.strict == null ? !0 : e.strict, i = s.weightData != null && s.weightSpecs != null && o, a = rs(Ja(r), t, i), l = s.trainingConfig;
  if (l != null && a.loadTrainingConfig(l), s.userDefinedMetadata != null && a.setUserDefinedMetadata(s.userDefinedMetadata), s.weightData != null) {
    if (s.weightSpecs == null)
      throw new O("LayersModel artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed.");
    const { modelWeights: c, optimizerWeights: u } = zF(s.weightData, s.weightSpecs);
    a.loadWeights(c, o), a.optimizer != null && u.length > 0 && await a.optimizer.setWeights(u), xt(c), xt(u.map((h) => h.tensor));
  }
  return a;
}
function zF(n, t) {
  const e = Rm(n, t), s = {}, r = [];
  return t.forEach((o) => {
    o.group === "optimizer" ? r.push({ name: o.name, tensor: e[o.name] }) : s[o.name] = e[o.name];
  }), { modelWeights: s, optimizerWeights: r };
}
class so extends As {
  constructor(t) {
    if (super({ inputs: [], outputs: [] }), t = t || {}, this.trainable = !0, this.built = !1, this.name = t.name != null ? t.name : np("sequential_"), t.layers != null)
      for (const e of t.layers)
        this.add(e);
  }
  checkShape(t) {
    if (t.inboundNodes[0].outputTensors[0].shape.some((s) => s < 0))
      throw new O(`Negative dimension size caused by adding layer ${t.name} with input shape [${t.inboundNodes[0].inputTensors[0].shape}]`);
  }
  add(t) {
    const e = t instanceof so || t instanceof As;
    let s;
    if (e) {
      if (s = t, s.outputs.length !== 1)
        throw new O("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");
      if (s.inputs.length !== 1)
        throw new O("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.");
    }
    if (this.outputs.length === 0) {
      if (t.inboundNodes.length === 0) {
        if (t.batchInputShape == null)
          throw new O("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");
        const r = BI({
          batchShape: t.batchInputShape,
          dtype: t.dtype,
          name: t.name + "_input"
        });
        t.apply(r);
      }
      if (e)
        this.outputs = s.outputs, this.inputs = s.inputs;
      else {
        if (t.inboundNodes.length !== 1)
          throw new O(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${t.name} which has ${t.inboundNodes.length} pre-existing inbound connections.`);
        if (t.inboundNodes[0].outputTensors.length !== 1)
          throw new O("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");
        this.checkShape(t), this.outputs = [t.inboundNodes[0].outputTensors[0]], this.inputs = ZI(this.outputs[0]);
      }
      this.inboundNodes = [], new hp({
        outboundLayer: this,
        inboundLayers: [],
        nodeIndices: [],
        tensorIndices: [],
        inputTensors: this.inputs,
        outputTensors: this.outputs,
        inputMasks: no(null, this.inputs.length),
        outputMasks: [null],
        inputShapes: this.inputs.map((r) => r.shape),
        outputShapes: this.outputs[0].shape
      });
    } else {
      const r = t.apply(this.outputs[0]);
      if (Array.isArray(r))
        throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");
      this.checkShape(t), this.outputs = [r], this.inboundNodes[0].outputTensors = this.outputs, this.inboundNodes[0].outputShapes = [this.outputs[0].shape];
    }
    this.layers.push(t), this.built = !1;
  }
  pop() {
    if (this.layers.length === 0)
      throw new TypeError("There are no layers in the model.");
    if (this.layers.pop(), this.layers.length === 0)
      this.outputs = [], this.inboundNodes = [], this.outboundNodes = [];
    else {
      const t = this.layers.length - 1;
      this.layers[t].outboundNodes = [], this.outputs = [this.layers[t].output], this.inboundNodes[0].outputTensors = this.outputs, this.inboundNodes[0].outputShapes = [this.outputs[0].shape];
    }
  }
  call(t, e) {
    return this.model == null && this.build(), this.model.call(t, e);
  }
  build(t) {
    if (Ot(t), this.inputs.length === 0 || this.outputs.length === 0)
      throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");
    this.model = new As({
      inputs: this.inputs,
      outputs: this.outputs[0],
      name: this.name + "_model"
    }), this.model.trainable = this.trainable, this.supportsMasking = this.model.supportsMasking, this.inputLayers = this.model.inputLayers, this.inputLayersNodeIndices = this.model.inputLayersNodeIndices, this.inputLayersTensorIndices = this.model.inputLayersTensorIndices, this.outputLayers = this.model.outputLayers, this.outputLayersNodeIndices = this.model.outputLayersNodeIndices, this.outputLayersTensorIndices = this.model.outputLayersTensorIndices, this.nodesByDepth = this.model.nodesByDepth, this.containerNodes = this.model.containerNodes, this.outputNames = this.model.outputNames, this.inputNames = this.model.inputNames, this.built = !0;
  }
  countParams() {
    return this.built || this.build(), super.countParams();
  }
  summary(t, e, s = console.log) {
    this.built || this.build(), super.summary(t, e, s);
  }
  setWeights(t) {
    this.model == null && this.build(), this.model.setWeights(t);
  }
  evaluate(t, e, s = {}) {
    if (!this.built)
      throw new Kn("The model needs to be compiled before being used.");
    return this.model.evaluate(t, e, s);
  }
  async evaluateDataset(t, e) {
    if (!this.built)
      throw new Kn("The model needs to be compiled before being used.");
    return this.model.evaluateDataset(t, e);
  }
  predict(t, e = {}) {
    return this.model == null && this.build(), this.model.predict(t, e);
  }
  predictOnBatch(t) {
    return this.model == null && this.build(), this.model.predictOnBatch(t);
  }
  compile(t) {
    this.build(), this.model.compile(t), this.optimizer_ = this.model.optimizer, this.isOptimizerOwned = this.model.isOptimizerOwned, this.loss = this.model.loss, this.metrics = this.model.metrics, this.metricsTensors = this.model.metricsTensors, this.metricsNames = this.model.metricsNames;
  }
  get optimizer() {
    return this.model == null ? void 0 : this.model.optimizer;
  }
  set optimizer(t) {
    this.model.optimizer = t;
  }
  async fit(t, e, s = {}) {
    if (!this.built)
      throw new Kn("The model needs to be compiled before being used.");
    return this.model.fit(t, e, s);
  }
  async fitDataset(t, e) {
    if (!this.built)
      throw new Kn("The model needs to be compiled before being used.");
    return this.model.fitDataset(t, e);
  }
  async trainOnBatch(t, e) {
    return this.model.trainOnBatch(t, e);
  }
  static fromConfig(t, e, s = {}, r = !1) {
    let o, i = {};
    if (e instanceof Array) {
      if (e[0].className == null || e[0].className === "Merge")
        throw new O("Legacy serialization format not supported yet.");
      o = e;
    } else
      C(e.layers != null, () => "When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."), o = e.layers, delete e.layers, i = e;
    const a = new t(i);
    if (!(a instanceof so))
      throw new wt(`Sequential.fromConfig called on non-Sequential input: ${a}`);
    for (const l of o) {
      const u = rs(l, void 0, r);
      r && u.setFastWeightInitDuringBuild(!0), a.add(u);
    }
    return a;
  }
  set stopTraining(t) {
    if (this.model == null)
      throw new O("Cannot set the stopTraining property of a sequential model before it is compiled.");
    this.model.stopTraining = t;
  }
  get stopTraining() {
    if (this.model == null)
      throw new O("Cannot get the stopTraining property of a sequential model before it is compiled.");
    return this.model.stopTraining;
  }
  getConfig() {
    const t = [];
    for (const e of this.layers) {
      const s = {};
      s.className = e.getClassName(), s.config = e.getConfig(), t.push(s);
    }
    return { name: this.name, layers: t };
  }
}
so.className = "Sequential";
Y(so);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function WF(n) {
  return new As(n);
}
function VF(n) {
  return new so(n);
}
function MF(n, t) {
  return t == null && (t = {}), OF(n, t);
}
function uS(n) {
  return BI(n);
}
function PF(n, t) {
  kn.registerCallbackConstructor(n, t);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class ln extends po {
  getConfig() {
    return {};
  }
}
class hS extends ln {
  apply(t, e = 1) {
    return i3(t, e);
  }
}
hS.className = "elu";
Y(hS);
class dS extends ln {
  apply(t) {
    return Rd(t);
  }
}
dS.className = "selu";
Y(dS);
class pS extends ln {
  apply(t) {
    return us(t);
  }
}
pS.className = "relu";
Y(pS);
class fS extends ln {
  apply(t) {
    return A(() => ea(6, us(t)));
  }
}
fS.className = "relu6";
Y(fS);
class mS extends ln {
  apply(t) {
    return t;
  }
}
mS.className = "linear";
Y(mS);
class gS extends ln {
  apply(t) {
    return ss(t);
  }
}
gS.className = "sigmoid";
Y(gS);
class yS extends ln {
  apply(t) {
    return l3(t);
  }
}
yS.className = "hardSigmoid";
Y(yS);
class bS extends ln {
  apply(t) {
    return mo(t);
  }
}
bS.className = "softplus";
Y(bS);
class xS extends ln {
  apply(t) {
    return a3(t);
  }
}
xS.className = "softsign";
Y(xS);
class wS extends ln {
  apply(t) {
    return to(t);
  }
}
wS.className = "tanh";
Y(wS);
class Qy extends ln {
  apply(t, e = -1) {
    return wc(t, e);
  }
}
Qy.className = "softmax";
Y(Qy);
class IS extends ln {
  apply(t, e = -1) {
    return Id(t, e);
  }
}
IS.className = "logSoftmax";
Y(IS);
class SS extends ln {
  apply(t, e = 1) {
    return A(() => D(ss(D(t, e)), t));
  }
}
SS.className = "swish";
Y(SS);
class vS extends ln {
  apply(t) {
    return A(() => D(t, to(mo(t))));
  }
}
vS.className = "mish";
Y(vS);
function xr(n) {
  return n.getClassName();
}
function Xp(n, t = {}) {
  return $c(n, Nn.getMap().classNameMap, t, "activation");
}
function wr(n) {
  if (n == null) {
    const t = {};
    return t.className = "linear", t.config = {}, Xp(t);
  }
  if (typeof n == "string") {
    const t = {};
    return t.className = n, t.config = {}, Xp(t);
  } else
    return n instanceof ln ? n : Xp(n);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function qy(n) {
  if (n != null && typeof n != "object")
    throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${n}`);
}
class CS extends po {
}
class Fc extends CS {
  constructor(t) {
    super(), qy(t), this.l1 = t == null || t.l1 == null ? 0.01 : t.l1, this.l2 = t == null || t.l2 == null ? 0.01 : t.l2, this.hasL1 = this.l1 !== 0, this.hasL2 = this.l2 !== 0;
  }
  apply(t) {
    return A(() => {
      let e = ge([1]);
      return this.hasL1 && (e = U(e, at(D(this.l1, me(t))))), this.hasL2 && (e = U(e, at(D(this.l2, Lc(t))))), G(e, []);
    });
  }
  getConfig() {
    return { l1: this.l1, l2: this.l2 };
  }
  static fromConfig(t, e) {
    return new t({ l1: e.l1, l2: e.l2 });
  }
}
Fc.className = "L1L2";
Y(Fc);
function XF(n) {
  return qy(n), new Fc({ l1: n != null ? n.l1 : null, l2: 0 });
}
function _F(n) {
  return qy(n), new Fc({ l2: n != null ? n.l2 : null, l1: 0 });
}
const ux = {
  l1l2: "L1L2"
};
function Vt(n) {
  return Ly(n);
}
function hx(n, t = {}) {
  return $c(n, Nn.getMap().classNameMap, t, "regularizer");
}
function qt(n) {
  if (n == null)
    return null;
  if (typeof n == "string") {
    const e = { className: n in ux ? ux[n] : n, config: {} };
    return hx(e);
  } else
    return n instanceof CS ? n : hx(n);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class t0 extends Et {
  constructor(t) {
    super(t == null ? {} : t), this.supportsMasking = !0, t != null && (this.maxValue = t.maxValue);
  }
  call(t, e) {
    t = It(t);
    let s = us(t);
    return this.maxValue != null && (s = en(s, 0, this.maxValue)), s;
  }
  computeOutputShape(t) {
    return t;
  }
  getConfig() {
    const t = { maxValue: this.maxValue }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
t0.className = "ReLU";
Y(t0);
class e0 extends Et {
  constructor(t) {
    super(t == null ? {} : t), this.DEFAULT_ALPHA = 0.3, t == null && (t = {}), this.alpha = t.alpha == null ? this.DEFAULT_ALPHA : t.alpha;
  }
  call(t, e) {
    const s = It(t);
    return hc(s, this.alpha);
  }
  computeOutputShape(t) {
    return t;
  }
  getConfig() {
    const t = { alpha: this.alpha }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
e0.className = "LeakyReLU";
Y(e0);
class n0 extends Et {
  constructor(t) {
    if (super(t == null ? {} : t), this.DEFAULT_ALPHA_INITIALIZER = "zeros", t == null && (t = {}), this.supportsMasking = !0, this.alphaInitializer = Qt(t.alphaInitializer || this.DEFAULT_ALPHA_INITIALIZER), this.alphaRegularizer = qt(t.alphaRegularizer), this.alphaConstraint = Se(t.alphaConstraint), t.sharedAxes == null)
      this.sharedAxes = null;
    else if (Array.isArray(t.sharedAxes))
      this.sharedAxes = t.sharedAxes;
    else if (typeof t.sharedAxes == "number")
      this.sharedAxes = [t.sharedAxes];
    else
      throw new O(`Expected sharedAxes to be a number or an array of numbers, but got ${t.sharedAxes}`);
  }
  build(t) {
    t = Ot(t);
    const e = t.slice(1);
    if (this.sharedAxes != null)
      for (const r of this.sharedAxes)
        e[r - 1] = 1;
    this.alpha = this.addWeight("alpha", e, "float32", this.alphaInitializer, this.alphaRegularizer, !0, this.alphaConstraint);
    const s = {};
    if (this.sharedAxes != null)
      for (let r = 1; r < t.length; ++r)
        s[r] = t[r];
    this.inputSpec = [new ye({
      ndim: t.length,
      axes: s
    })], this.built = !0;
  }
  call(t, e) {
    return t = It(t), yc(t, this.alpha.read());
  }
  getConfig() {
    const t = {
      alphaInitializer: se(this.alphaInitializer),
      alphaRegularizer: Vt(this.alphaRegularizer),
      alphaConstraint: Ie(this.alphaConstraint),
      sharedAxes: this.sharedAxes
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
n0.className = "PReLU";
Y(n0);
class s0 extends Et {
  constructor(t) {
    if (super(t == null ? {} : t), this.DEFAULT_ALPHA = 1, t == null && (t = {}), t.alpha != null && t.alpha !== this.DEFAULT_ALPHA)
      throw new wt(`Non-default alpha value (${t.alpha}) is not supported by the ELU layer yet.`);
    this.alpha = t.alpha == null ? this.DEFAULT_ALPHA : t.alpha;
  }
  call(t, e) {
    const s = It(t);
    return Ji(s);
  }
  computeOutputShape(t) {
    return t;
  }
  getConfig() {
    const t = { alpha: this.alpha }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
s0.className = "ELU";
Y(s0);
class r0 extends Et {
  constructor(t) {
    super(t == null ? {} : t), this.DEFAULT_THETA = 1, t == null && (t = {}), this.theta = t.theta == null ? this.DEFAULT_THETA : t.theta;
  }
  call(t, e) {
    const s = It(t);
    return D(s, et(an(s, this.theta), "float32"));
  }
  computeOutputShape(t) {
    return t;
  }
  getConfig() {
    const t = { theta: this.theta }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
r0.className = "ThresholdedReLU";
Y(r0);
class o0 extends Et {
  constructor(t) {
    super(t == null ? {} : t), this.DEFAULT_AXIS = 1, t == null && (t = {}), this.softmax = new Qy().apply, this.axis = t.axis == null ? this.DEFAULT_AXIS : t.axis;
  }
  call(t, e) {
    const s = It(t);
    return this.softmax(s, this.axis);
  }
  computeOutputShape(t) {
    return t;
  }
  getConfig() {
    const t = { axis: this.axis }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
o0.className = "Softmax";
Y(o0);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function Go(n, t, e) {
  if (typeof n == "number")
    return no(n, t);
  if (n.length !== t)
    throw new O(`The ${e} argument must be an integer or tuple of ${t} integers. Received: ${n.length} elements.`);
  for (let s = 0; s < t; ++s) {
    const r = n[s];
    if (!n3(r))
      throw new O(`The ${e} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(n)} including a non-integer number ${r}`);
  }
  return n;
}
function os(n, t, e, s, r = 1) {
  if (n == null)
    return n;
  const o = t + (t - 1) * (r - 1);
  let i;
  return e === "same" ? i = n : i = n - o + 1, Math.floor((i + s - 1) / s);
}
function ys(n, t, e, s) {
  if (n == null)
    return null;
  if (s === "valid")
    n = n * t + br([e - t, 0]);
  else if (s === "same")
    n = n * t;
  else
    throw new O(`Unsupport padding mode: ${s}.`);
  return n;
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function i0(n, t) {
  return A(() => (fe(t), t === "channelsFirst" ? kt(n, [0, 2, 3, 1]) : n));
}
function kS(n, t) {
  return A(() => (fe(t), t === "channelsFirst" ? kt(n, [0, 2, 3, 4, 1]) : n));
}
function KF(n, t, e, s = 1, r = "valid", o, i = 1) {
  return A(() => {
    if (o == null && (o = as()), fe(o), n.shape.length !== 3)
      throw new O(`The input of a conv1dWithBias operation should be 3, but is ${n.shape.length} instead.`);
    if (t.shape.length !== 3)
      throw new O(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);
    if (e != null && e.shape.length !== 1)
      throw new O(`The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`);
    if (o === "channelsFirst" && (n = kt(n, [0, 2, 1])), r === "causal")
      throw new wt("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");
    let a = fd(n, t, s, r === "same" ? "same" : "valid", "NWC", i);
    return e != null && (a = hs(a, e)), a;
  });
}
function dx(n, t, e, s = [1, 1], r = "valid", o, i, a = null) {
  return A(() => {
    if (o == null && (o = as()), fe(o), n.rank !== 3 && n.rank !== 4)
      throw new O(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${n.rank}.`);
    if (t.rank !== 3 && t.rank !== 4)
      throw new O(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${n.rank}.`);
    let l = i0(n, o);
    if (r === "causal")
      throw new wt("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");
    return l = uI({
      x: l,
      filter: t,
      strides: s,
      pad: r === "same" ? "same" : "valid",
      dilations: i,
      dataFormat: "NHWC",
      bias: e,
      activation: a
    }), o === "channelsFirst" && (l = kt(l, [0, 3, 1, 2])), l;
  });
}
function ZF(n, t, e, s = [1, 1, 1], r = "valid", o, i) {
  return A(() => {
    if (o == null && (o = as()), fe(o), n.rank !== 4 && n.rank !== 5)
      throw new O(`conv3dWithBias expects input to be of rank 4 or 5, but received ${n.rank}.`);
    if (t.rank !== 4 && t.rank !== 5)
      throw new O(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${n.rank}.`);
    let a = kS(n, o);
    if (r === "causal")
      throw new wt("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");
    return a = fg(a, t, s, r === "same" ? "same" : "valid", "NDHWC", i), e != null && (a = hs(a, e)), o === "channelsFirst" && (a = kt(a, [0, 4, 1, 2, 3])), a;
  });
}
class mp extends Et {
  constructor(t, e) {
    if (super(e), this.bias = null, this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_BIAS_INITIALIZER = "zeros", mp.verifyArgs(e), this.rank = t, Te(this.rank, "rank"), this.rank !== 1 && this.rank !== 2 && this.rank !== 3)
      throw new wt(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);
    if (this.kernelSize = Go(e.kernelSize, t, "kernelSize"), this.strides = Go(e.strides == null ? 1 : e.strides, t, "strides"), this.padding = e.padding == null ? "valid" : e.padding, Gn(this.padding), this.dataFormat = e.dataFormat == null ? "channelsLast" : e.dataFormat, fe(this.dataFormat), this.activation = wr(e.activation), this.useBias = e.useBias == null ? !0 : e.useBias, this.biasInitializer = Qt(e.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.biasConstraint = Se(e.biasConstraint), this.biasRegularizer = qt(e.biasRegularizer), this.activityRegularizer = qt(e.activityRegularizer), this.dilationRate = Go(e.dilationRate == null ? 1 : e.dilationRate, t, "dilationRate"), this.rank === 1 && Array.isArray(this.dilationRate) && this.dilationRate.length !== 1)
      throw new O(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);
    if (this.rank === 2) {
      if (typeof this.dilationRate == "number")
        this.dilationRate = [this.dilationRate, this.dilationRate];
      else if (this.dilationRate.length !== 2)
        throw new O(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`);
    } else if (this.rank === 3) {
      if (typeof this.dilationRate == "number")
        this.dilationRate = [this.dilationRate, this.dilationRate, this.dilationRate];
      else if (this.dilationRate.length !== 3)
        throw new O(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`);
    }
  }
  static verifyArgs(t) {
    if (gs("kernelSize" in t, "required key 'kernelSize' not in config"), typeof t.kernelSize != "number" && !Dy(t.kernelSize, "number", 1, 3))
      throw new O(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(t.kernelSize)}.`);
  }
  getConfig() {
    const t = {
      kernelSize: this.kernelSize,
      strides: this.strides,
      padding: this.padding,
      dataFormat: this.dataFormat,
      dilationRate: this.dilationRate,
      activation: xr(this.activation),
      useBias: this.useBias,
      biasInitializer: se(this.biasInitializer),
      biasRegularizer: Vt(this.biasRegularizer),
      activityRegularizer: Vt(this.activityRegularizer),
      biasConstraint: Ie(this.biasConstraint)
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
class aa extends mp {
  constructor(t, e) {
    super(t, e), this.kernel = null, aa.verifyArgs(e), this.filters = e.filters, Te(this.filters, "filters"), this.kernelInitializer = Qt(e.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.kernelConstraint = Se(e.kernelConstraint), this.kernelRegularizer = qt(e.kernelRegularizer);
  }
  build(t) {
    t = Ot(t);
    const e = this.dataFormat === "channelsFirst" ? 1 : t.length - 1;
    if (t[e] == null)
      throw new O(`The channel dimension of the input should be defined. Found ${t[e]}`);
    const s = t[e], r = this.kernelSize.concat([s, this.filters]);
    this.kernel = this.addWeight("kernel", r, null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.filters], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint)), this.inputSpec = [{ ndim: this.rank + 2, axes: { [e]: s } }], this.built = !0;
  }
  call(t, e) {
    return A(() => {
      t = It(t);
      let s;
      const r = this.bias == null ? null : this.bias.read(), o = AI(this.activation.getClassName());
      if (o != null && this.rank === 2)
        s = dx(t, this.kernel.read(), r, this.strides, this.padding, this.dataFormat, this.dilationRate, o);
      else {
        if (this.rank === 1)
          s = KF(t, this.kernel.read(), r, this.strides[0], this.padding, this.dataFormat, this.dilationRate[0]);
        else if (this.rank === 2)
          s = dx(t, this.kernel.read(), r, this.strides, this.padding, this.dataFormat, this.dilationRate);
        else if (this.rank === 3)
          s = ZF(t, this.kernel.read(), r, this.strides, this.padding, this.dataFormat, this.dilationRate);
        else
          throw new wt("convolutions greater than 3D are not implemented yet.");
        this.activation != null && (s = this.activation.apply(s));
      }
      return s;
    });
  }
  computeOutputShape(t) {
    t = Ot(t);
    const e = [], s = this.dataFormat === "channelsLast" ? t.slice(1, t.length - 1) : t.slice(2);
    for (let o = 0; o < s.length; ++o) {
      const i = os(s[o], this.kernelSize[o], this.padding, this.strides[o], typeof this.dilationRate == "number" ? this.dilationRate : this.dilationRate[o]);
      e.push(i);
    }
    let r = [t[0]];
    return this.dataFormat === "channelsLast" ? (r = r.concat(e), r.push(this.filters)) : (r.push(this.filters), r = r.concat(e)), r;
  }
  getConfig() {
    const t = {
      filters: this.filters,
      kernelInitializer: se(this.kernelInitializer),
      kernelRegularizer: Vt(this.kernelRegularizer),
      kernelConstraint: Ie(this.kernelConstraint)
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
  static verifyArgs(t) {
    if (!("filters" in t) || typeof t.filters != "number" || t.filters < 1)
      throw new O(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(t.filters)}`);
  }
}
class la extends aa {
  constructor(t) {
    super(2, t), la.verifyArgs(t);
  }
  getConfig() {
    const t = super.getConfig();
    return delete t.rank, t;
  }
  static verifyArgs(t) {
    if (typeof t.kernelSize != "number" && !Dy(t.kernelSize, "number", 1, 2))
      throw new O(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(t.kernelSize)}.`);
  }
}
la.className = "Conv2D";
Y(la);
class ca extends aa {
  constructor(t) {
    super(3, t), ca.verifyArgs(t);
  }
  getConfig() {
    const t = super.getConfig();
    return delete t.rank, t;
  }
  static verifyArgs(t) {
    if (typeof t.kernelSize != "number" && !(Array.isArray(t.kernelSize) && (t.kernelSize.length === 1 || t.kernelSize.length === 3)))
      throw new O(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(t.kernelSize)}.`);
  }
}
ca.className = "Conv3D";
Y(ca);
class a0 extends la {
  constructor(t) {
    if (super(t), this.inputSpec = [new ye({ ndim: 4 })], this.padding !== "same" && this.padding !== "valid")
      throw new O(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`);
  }
  build(t) {
    if (t = Ot(t), t.length !== 4)
      throw new O("Input should have rank 4; Received input shape: " + JSON.stringify(t));
    const e = this.dataFormat === "channelsFirst" ? 1 : t.length - 1;
    if (t[e] == null)
      throw new O("The channel dimension of the inputs should be defined. Found `None`.");
    const s = t[e], r = this.kernelSize.concat([this.filters, s]);
    this.kernel = this.addWeight("kernel", r, "float32", this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.filters], "float32", this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint)), this.inputSpec = [new ye({ ndim: 4, axes: { [e]: s } })], this.built = !0;
  }
  call(t, e) {
    return A(() => {
      let s = It(t);
      if (s.shape.length !== 4)
        throw new O(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${s.shape.length}`);
      const r = s.shape, o = r[0];
      let i, a;
      this.dataFormat === "channelsFirst" ? (i = 2, a = 3) : (i = 1, a = 2);
      const l = r[i], c = r[a], u = this.kernelSize[0], h = this.kernelSize[1], d = this.strides[0], p = this.strides[1], f = ys(l, d, u, this.padding), m = ys(c, p, h, this.padding), g = [o, f, m, this.filters];
      this.dataFormat !== "channelsLast" && (s = kt(s, [0, 2, 3, 1]));
      let y = md(s, this.kernel.read(), g, this.strides, this.padding);
      return this.dataFormat !== "channelsLast" && (y = kt(y, [0, 3, 1, 2])), this.bias != null && (y = hs(y, this.bias.read(), this.dataFormat)), this.activation != null && (y = this.activation.apply(y)), y;
    });
  }
  computeOutputShape(t) {
    t = Ot(t);
    const e = t.slice();
    let s, r, o;
    this.dataFormat === "channelsFirst" ? (s = 1, r = 2, o = 3) : (s = 3, r = 1, o = 2);
    const i = this.kernelSize[0], a = this.kernelSize[1], l = this.strides[0], c = this.strides[1];
    return e[s] = this.filters, e[r] = ys(e[r], l, i, this.padding), e[o] = ys(e[o], c, a, this.padding), e;
  }
  getConfig() {
    const t = super.getConfig();
    return delete t.dilationRate, t;
  }
}
a0.className = "Conv2DTranspose";
Y(a0);
class l0 extends ca {
  constructor(t) {
    if (super(t), this.inputSpec = [new ye({ ndim: 5 })], this.padding !== "same" && this.padding !== "valid")
      throw new O(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`);
  }
  build(t) {
    if (t = Ot(t), t.length !== 5)
      throw new O("Input should have rank 5; Received input shape: " + JSON.stringify(t));
    const e = this.dataFormat === "channelsFirst" ? 1 : t.length - 1;
    if (t[e] == null)
      throw new O("The channel dimension of the inputs should be defined. Found `None`.");
    const s = t[e], r = this.kernelSize.concat([this.filters, s]);
    this.kernel = this.addWeight("kernel", r, "float32", this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.filters], "float32", this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint)), this.inputSpec = [new ye({ ndim: 5, axes: { [e]: s } })], this.built = !0;
  }
  call(t, e) {
    return A(() => {
      let s = It(t);
      if (s.shape.length !== 5)
        throw new O(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${s.shape.length}`);
      const r = s.shape, o = r[0];
      let i, a, l;
      this.dataFormat === "channelsFirst" ? (l = 2, i = 3, a = 4) : (l = 1, i = 2, a = 3);
      const c = r[l], u = r[i], h = r[a], d = this.kernelSize[0], p = this.kernelSize[1], f = this.kernelSize[2], m = this.strides[0], g = this.strides[1], y = this.strides[2], b = ys(c, m, d, this.padding), w = ys(u, g, p, this.padding), x = ys(h, y, f, this.padding), S = [o, b, w, x, this.filters];
      this.dataFormat !== "channelsLast" && (s = kt(s, [0, 2, 3, 4, 1]));
      let v = mg(s, this.kernel.read(), S, this.strides, this.padding);
      return this.dataFormat !== "channelsLast" && (v = kt(v, [0, 4, 1, 2, 3])), this.bias !== null && (v = hs(v, this.bias.read(), this.dataFormat)), this.activation !== null && (v = this.activation.apply(v)), v;
    });
  }
  computeOutputShape(t) {
    t = Ot(t);
    const e = t.slice();
    let s, r, o, i;
    this.dataFormat === "channelsFirst" ? (s = 1, r = 2, o = 3, i = 4) : (s = 4, r = 1, o = 2, i = 3);
    const a = this.kernelSize[0], l = this.kernelSize[1], c = this.kernelSize[2], u = this.strides[0], h = this.strides[1], d = this.strides[2];
    return e[s] = this.filters, e[r] = ys(e[r], u, a, this.padding), e[o] = ys(e[o], h, l, this.padding), e[i] = ys(e[i], d, c, this.padding), e;
  }
  getConfig() {
    const t = super.getConfig();
    return delete t.dilationRate, t;
  }
}
l0.className = "Conv3DTranspose";
Y(l0);
class TS extends aa {
  constructor(t, e) {
    if (super(t, e), this.DEFAULT_DEPTHWISE_INITIALIZER = "glorotUniform", this.DEFAULT_POINTWISE_INITIALIZER = "glorotUniform", this.depthwiseKernel = null, this.pointwiseKernel = null, e.filters == null)
      throw new O("The `filters` configuration field is required by SeparableConv, but is unspecified.");
    if (e.kernelInitializer != null || e.kernelRegularizer != null || e.kernelConstraint != null)
      throw new O("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");
    if (e.padding != null && e.padding !== "same" && e.padding !== "valid")
      throw new O(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(e.padding)}`);
    this.depthMultiplier = e.depthMultiplier == null ? 1 : e.depthMultiplier, this.depthwiseInitializer = Qt(e.depthwiseInitializer || this.DEFAULT_DEPTHWISE_INITIALIZER), this.depthwiseRegularizer = qt(e.depthwiseRegularizer), this.depthwiseConstraint = Se(e.depthwiseConstraint), this.pointwiseInitializer = Qt(e.depthwiseInitializer || this.DEFAULT_POINTWISE_INITIALIZER), this.pointwiseRegularizer = qt(e.pointwiseRegularizer), this.pointwiseConstraint = Se(e.pointwiseConstraint);
  }
  build(t) {
    if (t = Ot(t), t.length < this.rank + 2)
      throw new O(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank + 2}, but received input shape: ${JSON.stringify(t)}`);
    const e = this.dataFormat === "channelsFirst" ? 1 : t.length - 1;
    if (t[e] == null || t[e] < 0)
      throw new O(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(t[e])}`);
    const s = t[e], r = this.kernelSize.concat([s, this.depthMultiplier]), o = [];
    for (let a = 0; a < this.rank; ++a)
      o.push(1);
    o.push(s * this.depthMultiplier, this.filters);
    const i = !0;
    this.depthwiseKernel = this.addWeight("depthwise_kernel", r, "float32", this.depthwiseInitializer, this.depthwiseRegularizer, i, this.depthwiseConstraint), this.pointwiseKernel = this.addWeight("pointwise_kernel", o, "float32", this.pointwiseInitializer, this.pointwiseRegularizer, i, this.pointwiseConstraint), this.useBias ? this.bias = this.addWeight("bias", [this.filters], "float32", this.biasInitializer, this.biasRegularizer, i, this.biasConstraint) : this.bias = null, this.inputSpec = [new ye({ ndim: this.rank + 2, axes: { [e]: s } })], this.built = !0;
  }
  call(t, e) {
    return A(() => {
      t = It(t);
      let s;
      if (this.rank === 1)
        throw new wt("1D separable convolution is not implemented yet.");
      return this.rank === 2 && (this.dataFormat === "channelsFirst" && (t = kt(t, [0, 2, 3, 1])), s = Ed(t, this.depthwiseKernel.read(), this.pointwiseKernel.read(), this.strides, this.padding, this.dilationRate, "NHWC")), this.useBias && (s = hs(s, this.bias.read(), this.dataFormat)), this.activation != null && (s = this.activation.apply(s)), this.dataFormat === "channelsFirst" && (s = kt(s, [0, 3, 1, 2])), s;
    });
  }
  getConfig() {
    const t = super.getConfig();
    return delete t.rank, delete t.kernelInitializer, delete t.kernelRegularizer, delete t.kernelConstraint, t.depthwiseInitializer = se(this.depthwiseInitializer), t.pointwiseInitializer = se(this.pointwiseInitializer), t.depthwiseRegularizer = Vt(this.depthwiseRegularizer), t.pointwiseRegularizer = Vt(this.pointwiseRegularizer), t.depthwiseConstraint = Ie(this.depthwiseConstraint), t.pointwiseConstraint = Ie(this.pointwiseConstraint), t;
  }
}
TS.className = "SeparableConv";
class c0 extends TS {
  constructor(t) {
    super(2, t);
  }
}
c0.className = "SeparableConv2D";
Y(c0);
class Oc extends aa {
  constructor(t) {
    super(1, t), Oc.verifyArgs(t), this.inputSpec = [{ ndim: 3 }];
  }
  getConfig() {
    const t = super.getConfig();
    return delete t.rank, delete t.dataFormat, t;
  }
  static verifyArgs(t) {
    if (typeof t.kernelSize != "number" && !Dy(t.kernelSize, "number", 1, 1))
      throw new O(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(t.kernelSize)}.`);
  }
}
Oc.className = "Conv1D";
Y(Oc);
class u0 extends Et {
  constructor(t) {
    super(t), typeof t.cropping == "number" ? this.cropping = [[t.cropping, t.cropping], [t.cropping, t.cropping]] : typeof t.cropping[0] == "number" ? this.cropping = [
      [t.cropping[0], t.cropping[0]],
      [t.cropping[1], t.cropping[1]]
    ] : this.cropping = t.cropping, this.dataFormat = t.dataFormat === void 0 ? "channelsLast" : t.dataFormat, this.inputSpec = [{ ndim: 4 }];
  }
  computeOutputShape(t) {
    return this.dataFormat === "channelsFirst" ? [
      t[0],
      t[1],
      t[2] - this.cropping[0][0] - this.cropping[0][1],
      t[3] - this.cropping[1][0] - this.cropping[1][1]
    ] : [
      t[0],
      t[1] - this.cropping[0][0] - this.cropping[0][1],
      t[2] - this.cropping[1][0] - this.cropping[1][1],
      t[3]
    ];
  }
  call(t, e) {
    return A(() => {
      if (t = It(t), this.dataFormat === "channelsLast") {
        const s = Jc(t, this.cropping[0][0], t.shape[1] - this.cropping[0][0] - this.cropping[0][1], 2);
        return Jc(s, this.cropping[1][0], t.shape[2] - this.cropping[1][1] - this.cropping[1][0], 3);
      } else {
        const s = Jc(t, this.cropping[0][0], t.shape[2] - this.cropping[0][0] - this.cropping[0][1], 3);
        return Jc(s, this.cropping[1][0], t.shape[3] - this.cropping[1][1] - this.cropping[1][0], 4);
      }
    });
  }
  getConfig() {
    const t = { cropping: this.cropping, dataFormat: this.dataFormat }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
u0.className = "Cropping2D";
Y(u0);
class h0 extends Et {
  constructor(t) {
    super(t), this.DEFAULT_SIZE = [2, 2], this.inputSpec = [{ ndim: 4 }], this.size = t.size == null ? this.DEFAULT_SIZE : t.size, this.dataFormat = t.dataFormat == null ? "channelsLast" : t.dataFormat, fe(this.dataFormat), this.interpolation = t.interpolation == null ? "nearest" : t.interpolation, qG(this.interpolation);
  }
  computeOutputShape(t) {
    if (this.dataFormat === "channelsFirst") {
      const e = t[2] == null ? null : this.size[0] * t[2], s = t[3] == null ? null : this.size[1] * t[3];
      return [t[0], t[1], e, s];
    } else {
      const e = t[1] == null ? null : this.size[0] * t[1], s = t[2] == null ? null : this.size[1] * t[2];
      return [t[0], e, s, t[3]];
    }
  }
  call(t, e) {
    return A(() => {
      let s = It(t);
      const r = s.shape;
      if (this.dataFormat === "channelsFirst") {
        s = kt(s, [0, 2, 3, 1]);
        const o = this.size[0] * r[2], i = this.size[1] * r[3], a = this.interpolation === "nearest" ? Xr.resizeNearestNeighbor(s, [o, i]) : Xr.resizeBilinear(s, [o, i]);
        return kt(a, [0, 3, 1, 2]);
      } else {
        const o = this.size[0] * r[1], i = this.size[1] * r[2];
        return this.interpolation === "nearest" ? Xr.resizeNearestNeighbor(s, [o, i]) : Xr.resizeBilinear(s, [o, i]);
      }
    });
  }
  getConfig() {
    const t = {
      size: this.size,
      dataFormat: this.dataFormat,
      interpolation: this.interpolation
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
h0.className = "UpSampling2D";
Y(h0);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function BF(n, t, e = [1, 1], s = "valid", r, o) {
  return A(() => {
    r == null && (r = as()), fe(r);
    let i = i0(n, r);
    if (n.rank !== 4)
      throw new O(`Input for depthwiseConv2d is required to be 4-D, but is instead ${n.rank}-D`);
    if (t.rank !== 4)
      throw new O(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);
    return i = ji(i, t, e, s === "same" ? "same" : "valid", "NHWC", o), r === "channelsFirst" && (i = kt(i, [0, 3, 1, 2])), i;
  });
}
class d0 extends mp {
  constructor(t) {
    super(2, t), this.depthwiseKernel = null, this.depthMultiplier = t.depthMultiplier == null ? 1 : t.depthMultiplier, this.depthwiseInitializer = Qt(t.depthwiseInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.depthwiseConstraint = Se(t.depthwiseConstraint), this.depthwiseRegularizer = qt(t.depthwiseRegularizer);
  }
  build(t) {
    if (t = Ot(t), t.length < 4)
      throw new O(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(t)}.`);
    const e = this.dataFormat === "channelsFirst" ? 1 : 3;
    if (t[e] == null || t[e] < 0)
      throw new O(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${t[e]}).`);
    const s = t[e], r = [
      this.kernelSize[0],
      this.kernelSize[1],
      s,
      this.depthMultiplier
    ];
    this.depthwiseKernel = this.addWeight("depthwise_kernel", r, null, this.depthwiseInitializer, this.depthwiseRegularizer, !0, this.depthwiseConstraint), this.useBias ? this.bias = this.addWeight("bias", [s * this.depthMultiplier], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint) : this.bias = null, this.built = !0;
  }
  call(t, e) {
    return A(() => {
      t = It(t);
      let s = BF(t, this.depthwiseKernel.read(), this.strides, this.padding, this.dataFormat, null);
      return this.useBias && (s = hs(s, this.bias.read(), this.dataFormat)), this.activation != null && (s = this.activation.apply(s)), s;
    });
  }
  computeOutputShape(t) {
    t = Ot(t);
    const e = this.dataFormat === "channelsFirst" ? t[2] : t[1], s = this.dataFormat === "channelsFirst" ? t[3] : t[2], r = this.dataFormat === "channelsFirst" ? t[1] * this.depthMultiplier : t[3] * this.depthMultiplier, o = os(e, this.kernelSize[0], this.padding, this.strides[0]), i = os(s, this.kernelSize[1], this.padding, this.strides[1]);
    return this.dataFormat === "channelsFirst" ? [t[0], r, o, i] : [t[0], o, i, r];
  }
  getConfig() {
    const t = super.getConfig();
    return t.depthMultiplier = this.depthMultiplier, t.depthwiseInitializer = se(this.depthwiseInitializer), t.depthwiseRegularizer = Vt(this.depthwiseRegularizer), t.depthwiseConstraint = Ie(this.depthwiseRegularizer), t;
  }
}
d0.className = "DepthwiseConv2D";
Y(d0);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function NS(n, t, e, s) {
  if (Array.isArray(n)) {
    if (t != null || e != null)
      throw new O("When inputs is an array, neither initialState or constants should be provided");
    s != null && (e = n.slice(n.length - s, n.length), n = n.slice(0, n.length - s)), n.length > 1 && (t = n.slice(1, n.length)), n = n[0];
  }
  function r(o) {
    return o == null || Array.isArray(o) ? o : [o];
  }
  return t = r(t), e = r(e), { inputs: n, initialState: t, constants: e };
}
function $S(n, t, e, s = !1, r, o, i = !1, a = !1) {
  return A(() => {
    const l = t.shape.length;
    if (l < 3)
      throw new O(`Input should be at least 3D, but is ${l}D.`);
    const c = [1, 0].concat(is(2, l));
    if (t = kt(t, c), o != null)
      throw new wt("The rnn() functoin of the deeplearn.js backend does not support constants yet.");
    i && console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."), r != null && (r = et(et(r, "bool"), "float32"), r.rank === l - 1 && (r = Qe(r, -1)), r = kt(r, c)), s && (t = Dn(t, 0), r != null && (r = Dn(r, 0)));
    const u = [];
    let h, d = e;
    const p = t.shape[0], f = Un(t);
    let m;
    r != null && (m = Un(r));
    for (let y = 0; y < p; ++y) {
      const b = f[y], w = A(() => n(b, d));
      if (r == null)
        h = w[0], d = w[1];
      else {
        const x = A(() => {
          const S = m[y], v = it(wn(S), S), T = U(D(w[0], S), D(d[0], v)), N = d.map(($, R) => U(D(w[1][R], S), D($, v)));
          return { output: T, newStates: N };
        });
        h = x.output, d = x.newStates;
      }
      a && u.push(h);
    }
    let g;
    return a && (g = nn(u, 1)), [h, g, d];
  });
}
class ds extends Et {
  constructor(t) {
    super(t);
    let e;
    if (t.cell == null)
      throw new O("cell property is missing for the constructor of RNN.");
    if (Array.isArray(t.cell) ? e = new bp({ cells: t.cell }) : e = t.cell, e.stateSize == null)
      throw new O("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");
    this.cell = e, this.returnSequences = t.returnSequences == null ? !1 : t.returnSequences, this.returnState = t.returnState == null ? !1 : t.returnState, this.goBackwards = t.goBackwards == null ? !1 : t.goBackwards, this._stateful = t.stateful == null ? !1 : t.stateful, this.unroll = t.unroll == null ? !1 : t.unroll, this.supportsMasking = !0, this.inputSpec = [new ye({ ndim: 3 })], this.stateSpec = null, this.states_ = null, this.numConstants = null, this.keptStates = [];
  }
  getStates() {
    if (this.states_ == null) {
      const t = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;
      return is(0, t).map((e) => null);
    } else
      return this.states_;
  }
  setStates(t) {
    this.states_ = t;
  }
  computeOutputShape(t) {
    _f(t) && (t = t[0]), t = t;
    let e = this.cell.stateSize;
    Array.isArray(e) || (e = [e]);
    const s = e[0];
    let r;
    if (this.returnSequences ? r = [t[0], t[1], s] : r = [t[0], s], this.returnState) {
      const o = [];
      for (const i of e)
        o.push([t[0], i]);
      return [r].concat(o);
    } else
      return r;
  }
  computeMask(t, e) {
    return A(() => {
      Array.isArray(e) && (e = e[0]);
      const s = this.returnSequences ? e : null;
      if (this.returnState) {
        const r = this.states.map((o) => null);
        return [s].concat(r);
      } else
        return s;
    });
  }
  get states() {
    if (this.states_ == null) {
      const t = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1, e = [];
      for (let s = 0; s < t; ++s)
        e.push(null);
      return e;
    } else
      return this.states_;
  }
  set states(t) {
    this.states_ = t;
  }
  build(t) {
    if (this.numConstants != null)
      throw new wt("Constants support is not implemented in RNN yet.");
    _f(t) && (t = t[0]), t = t;
    const e = this.stateful ? t[0] : null, s = t.slice(2);
    this.inputSpec[0] = new ye({ shape: [e, null, ...s] });
    const r = [t[0]].concat(t.slice(2));
    this.cell.build(r);
    let o;
    if (Array.isArray(this.cell.stateSize) ? o = this.cell.stateSize : o = [this.cell.stateSize], this.stateSpec != null) {
      if (!Nt(this.stateSpec.map((i) => i.shape[i.shape.length - 1]), o))
        throw new O(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`);
    } else
      this.stateSpec = o.map((i) => new ye({ shape: [null, i] }));
    this.stateful && this.resetStates();
  }
  resetStates(t, e = !1) {
    A(() => {
      if (!this.stateful)
        throw new ms("Cannot call resetStates() on an RNN Layer that is not stateful.");
      const s = this.inputSpec[0].shape[0];
      if (s == null)
        throw new O("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");
      if (this.states_ == null)
        Array.isArray(this.cell.stateSize) ? this.states_ = this.cell.stateSize.map((r) => ge([s, r])) : this.states_ = [ge([s, this.cell.stateSize])];
      else if (t == null)
        xt(this.states_), this.keptStates != null && (xt(this.keptStates), this.keptStates = []), Array.isArray(this.cell.stateSize) ? this.states_ = this.cell.stateSize.map((r) => ge([s, r])) : this.states_[0] = ge([s, this.cell.stateSize]);
      else {
        if (Array.isArray(t) || (t = [t]), t.length !== this.states_.length)
          throw new O(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${t.length} state value(s). Input received: ${t}`);
        e === !0 ? this.keptStates.push(this.states_.slice()) : xt(this.states_);
        for (let r = 0; r < this.states_.length; ++r) {
          const o = t[r], i = Array.isArray(this.cell.stateSize) ? this.cell.stateSize[r] : this.cell.stateSize, a = [s, i];
          if (!Nt(o.shape, a))
            throw new O(`State ${r} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${o.shape}`);
          this.states_[r] = o;
        }
      }
      this.states_ = this.states_.map((r) => ce(r.clone()));
    });
  }
  apply(t, e) {
    let s = e == null ? null : e.initialState, r = e == null ? null : e.constants;
    e == null && (e = {});
    const o = NS(t, s, r, this.numConstants);
    t = o.inputs, s = o.initialState, r = o.constants;
    let i = [], a = [];
    if (s != null) {
      e.initialState = s, i = i.concat(s), this.stateSpec = [];
      for (const c of s)
        this.stateSpec.push(new ye({ shape: c.shape }));
      a = a.concat(this.stateSpec);
    }
    if (r != null && (e.constants = r, i = i.concat(r), this.numConstants = r.length), i[0] instanceof ns) {
      const c = [t].concat(i), u = this.inputSpec.concat(a), h = this.inputSpec;
      this.inputSpec = u;
      const d = super.apply(c, e);
      return this.inputSpec = h, d;
    } else
      return super.apply(t, e);
  }
  call(t, e) {
    return A(() => {
      const s = e == null ? null : e.mask, r = e == null ? null : e.training;
      let o = e == null ? null : e.initialState;
      t = It(t), o == null && (this.stateful ? o = this.states_ : o = this.getInitialState(t));
      const i = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;
      if (o.length !== i)
        throw new O(`RNN Layer has ${i} state(s) but was passed ${o.length} initial state(s).`);
      this.unroll && console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");
      const a = { training: r }, c = $S((f, m) => {
        const g = this.cell.call([f].concat(m), a);
        return [g[0], g.slice(1)];
      }, t, o, this.goBackwards, s, null, this.unroll, this.returnSequences), u = c[0], h = c[1], d = c[2];
      this.stateful && this.resetStates(d, r);
      const p = this.returnSequences ? h : u;
      return this.returnState ? [p].concat(d) : p;
    });
  }
  getInitialState(t) {
    return A(() => {
      let e = ge(t.shape);
      return e = at(e, [1, 2]), e = Ec(e), Array.isArray(this.cell.stateSize) ? this.cell.stateSize.map((s) => s > 1 ? Pf(e, [1, s]) : e) : this.cell.stateSize > 1 ? [Pf(e, [1, this.cell.stateSize])] : [e];
    });
  }
  get trainableWeights() {
    return this.trainable ? this.cell.trainableWeights : [];
  }
  get nonTrainableWeights() {
    return this.trainable ? this.cell.nonTrainableWeights : this.cell.weights;
  }
  setFastWeightInitDuringBuild(t) {
    super.setFastWeightInitDuringBuild(t), this.cell != null && this.cell.setFastWeightInitDuringBuild(t);
  }
  getConfig() {
    const t = super.getConfig(), e = {
      returnSequences: this.returnSequences,
      returnState: this.returnState,
      goBackwards: this.goBackwards,
      stateful: this.stateful,
      unroll: this.unroll
    };
    this.numConstants != null && (e.numConstants = this.numConstants);
    const s = this.cell.getConfig();
    return this.getClassName() === ds.className && (e.cell = {
      className: this.cell.getClassName(),
      config: s
    }), Object.assign({}, s, t, e);
  }
  static fromConfig(t, e, s = {}) {
    const r = e.cell, o = rs(r, s);
    return new t(Object.assign(e, { cell: o }));
  }
}
ds.className = "RNN";
Y(ds);
class Ac extends Et {
}
class gp extends Ac {
  constructor(t) {
    super(t), this.DEFAULT_ACTIVATION = "tanh", this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_RECURRENT_INITIALIZER = "orthogonal", this.DEFAULT_BIAS_INITIALIZER = "zeros", this.units = t.units, Te(this.units, "units"), this.activation = wr(t.activation == null ? this.DEFAULT_ACTIVATION : t.activation), this.useBias = t.useBias == null ? !0 : t.useBias, this.kernelInitializer = Qt(t.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.recurrentInitializer = Qt(t.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER), this.biasInitializer = Qt(t.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.kernelRegularizer = qt(t.kernelRegularizer), this.recurrentRegularizer = qt(t.recurrentRegularizer), this.biasRegularizer = qt(t.biasRegularizer), this.kernelConstraint = Se(t.kernelConstraint), this.recurrentConstraint = Se(t.recurrentConstraint), this.biasConstraint = Se(t.biasConstraint), this.dropout = _o([1, br([0, t.dropout == null ? 0 : t.dropout])]), this.recurrentDropout = _o([
      1,
      br([0, t.recurrentDropout == null ? 0 : t.recurrentDropout])
    ]), this.dropoutFunc = t.dropoutFunc, this.stateSize = this.units, this.dropoutMask = null, this.recurrentDropoutMask = null;
  }
  build(t) {
    t = Ot(t), this.kernel = this.addWeight("kernel", [t[t.length - 1], this.units], null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.recurrentKernel = this.addWeight("recurrent_kernel", [this.units, this.units], null, this.recurrentInitializer, this.recurrentRegularizer, !0, this.recurrentConstraint), this.useBias ? this.bias = this.addWeight("bias", [this.units], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint) : this.bias = null, this.built = !0;
  }
  call(t, e) {
    return A(() => {
      if (t = t, t.length !== 2)
        throw new O(`SimpleRNNCell expects 2 input Tensors, got ${t.length}.`);
      let s = t[1];
      t = t[0];
      const r = e.training == null ? !1 : e.training;
      0 < this.dropout && this.dropout < 1 && this.dropoutMask == null && (this.dropoutMask = Ir({
        ones: () => wn(t),
        rate: this.dropout,
        training: r,
        dropoutFunc: this.dropoutFunc
      })), 0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null && (this.recurrentDropoutMask = Ir({
        ones: () => wn(s),
        rate: this.recurrentDropout,
        training: r,
        dropoutFunc: this.dropoutFunc
      }));
      let o;
      const i = this.dropoutMask, a = this.recurrentDropoutMask;
      i != null ? o = Ss(D(t, i), this.kernel.read()) : o = Ss(t, this.kernel.read()), this.bias != null && (o = hs(o, this.bias.read())), a != null && (s = D(s, a));
      let l = U(o, Ss(s, this.recurrentKernel.read()));
      return this.activation != null && (l = this.activation.apply(l)), [l, l];
    });
  }
  getConfig() {
    const t = super.getConfig(), e = {
      units: this.units,
      activation: xr(this.activation),
      useBias: this.useBias,
      kernelInitializer: se(this.kernelInitializer),
      recurrentInitializer: se(this.recurrentInitializer),
      biasInitializer: se(this.biasInitializer),
      kernelRegularizer: Vt(this.kernelRegularizer),
      recurrentRegularizer: Vt(this.recurrentRegularizer),
      biasRegularizer: Vt(this.biasRegularizer),
      activityRegularizer: Vt(this.activityRegularizer),
      kernelConstraint: Ie(this.kernelConstraint),
      recurrentConstraint: Ie(this.recurrentConstraint),
      biasConstraint: Ie(this.biasConstraint),
      dropout: this.dropout,
      recurrentDropout: this.recurrentDropout
    };
    return Object.assign({}, t, e);
  }
}
gp.className = "SimpleRNNCell";
Y(gp);
class p0 extends ds {
  constructor(t) {
    t.cell = new gp(t), super(t);
  }
  call(t, e) {
    return A(() => {
      this.cell.dropoutMask != null && (xt(this.cell.dropoutMask), this.cell.dropoutMask = null), this.cell.recurrentDropoutMask != null && (xt(this.cell.recurrentDropoutMask), this.cell.recurrentDropoutMask = null);
      const s = e == null ? null : e.mask, r = e == null ? null : e.training, o = e == null ? null : e.initialState;
      return super.call(t, { mask: s, training: r, initialState: o });
    });
  }
  static fromConfig(t, e) {
    return new t(e);
  }
}
p0.className = "SimpleRNN";
Y(p0);
class yp extends Ac {
  constructor(t) {
    if (super(t), this.DEFAULT_ACTIVATION = "tanh", this.DEFAULT_RECURRENT_ACTIVATION = "hardSigmoid", this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_RECURRENT_INITIALIZER = "orthogonal", this.DEFAULT_BIAS_INITIALIZER = "zeros", t.resetAfter)
      throw new O("GRUCell does not support reset_after parameter set to true.");
    this.units = t.units, Te(this.units, "units"), this.activation = wr(t.activation === void 0 ? this.DEFAULT_ACTIVATION : t.activation), this.recurrentActivation = wr(t.recurrentActivation === void 0 ? this.DEFAULT_RECURRENT_ACTIVATION : t.recurrentActivation), this.useBias = t.useBias == null ? !0 : t.useBias, this.kernelInitializer = Qt(t.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.recurrentInitializer = Qt(t.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER), this.biasInitializer = Qt(t.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.kernelRegularizer = qt(t.kernelRegularizer), this.recurrentRegularizer = qt(t.recurrentRegularizer), this.biasRegularizer = qt(t.biasRegularizer), this.kernelConstraint = Se(t.kernelConstraint), this.recurrentConstraint = Se(t.recurrentConstraint), this.biasConstraint = Se(t.biasConstraint), this.dropout = _o([1, br([0, t.dropout == null ? 0 : t.dropout])]), this.recurrentDropout = _o([
      1,
      br([0, t.recurrentDropout == null ? 0 : t.recurrentDropout])
    ]), this.dropoutFunc = t.dropoutFunc, this.implementation = t.implementation, this.stateSize = this.units, this.dropoutMask = null, this.recurrentDropoutMask = null;
  }
  build(t) {
    t = Ot(t);
    const e = t[t.length - 1];
    this.kernel = this.addWeight("kernel", [e, this.units * 3], null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.recurrentKernel = this.addWeight("recurrent_kernel", [this.units, this.units * 3], null, this.recurrentInitializer, this.recurrentRegularizer, !0, this.recurrentConstraint), this.useBias ? this.bias = this.addWeight("bias", [this.units * 3], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint) : this.bias = null, this.built = !0;
  }
  call(t, e) {
    return A(() => {
      if (t = t, t.length !== 2)
        throw new O(`GRUCell expects 2 input Tensors (inputs, h, c), got ${t.length}.`);
      const s = e.training == null ? !1 : e.training;
      let r = t[1];
      t = t[0], 0 < this.dropout && this.dropout < 1 && this.dropoutMask == null && (this.dropoutMask = Ir({
        ones: () => wn(t),
        rate: this.dropout,
        training: s,
        count: 3,
        dropoutFunc: this.dropoutFunc
      })), 0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null && (this.recurrentDropoutMask = Ir({
        ones: () => wn(r),
        rate: this.recurrentDropout,
        training: s,
        count: 3,
        dropoutFunc: this.dropoutFunc
      }));
      const o = this.dropoutMask, i = this.recurrentDropoutMask;
      let a, l, c;
      0 < this.dropout && this.dropout < 1 && (t = D(t, o[0]));
      let u = Ss(t, this.kernel.read());
      this.useBias && (u = hs(u, this.bias.read())), 0 < this.recurrentDropout && this.recurrentDropout < 1 && (r = D(r, i[0]));
      const h = this.recurrentKernel.read(), [d, p] = tn(h, [2 * this.units, this.units], h.rank - 1), f = Ss(r, d), [m, g, y] = tn(u, 3, u.rank - 1), [b, w] = tn(f, 2, f.rank - 1);
      a = this.recurrentActivation.apply(U(m, b)), l = this.recurrentActivation.apply(U(g, w));
      const x = Ss(D(l, r), p);
      c = this.activation.apply(U(y, x));
      const S = U(D(a, r), D(U(1, Yt(a)), c));
      return [S, S];
    });
  }
  getConfig() {
    const t = super.getConfig(), e = {
      units: this.units,
      activation: xr(this.activation),
      recurrentActivation: xr(this.recurrentActivation),
      useBias: this.useBias,
      kernelInitializer: se(this.kernelInitializer),
      recurrentInitializer: se(this.recurrentInitializer),
      biasInitializer: se(this.biasInitializer),
      kernelRegularizer: Vt(this.kernelRegularizer),
      recurrentRegularizer: Vt(this.recurrentRegularizer),
      biasRegularizer: Vt(this.biasRegularizer),
      activityRegularizer: Vt(this.activityRegularizer),
      kernelConstraint: Ie(this.kernelConstraint),
      recurrentConstraint: Ie(this.recurrentConstraint),
      biasConstraint: Ie(this.biasConstraint),
      dropout: this.dropout,
      recurrentDropout: this.recurrentDropout,
      implementation: this.implementation,
      resetAfter: !1
    };
    return Object.assign({}, t, e);
  }
}
yp.className = "GRUCell";
Y(yp);
class f0 extends ds {
  constructor(t) {
    t.implementation === 0 && console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."), t.cell = new yp(t), super(t);
  }
  call(t, e) {
    return A(() => {
      this.cell.dropoutMask != null && (xt(this.cell.dropoutMask), this.cell.dropoutMask = null), this.cell.recurrentDropoutMask != null && (xt(this.cell.recurrentDropoutMask), this.cell.recurrentDropoutMask = null);
      const s = e == null ? null : e.mask, r = e == null ? null : e.training, o = e == null ? null : e.initialState;
      return super.call(t, { mask: s, training: r, initialState: o });
    });
  }
  static fromConfig(t, e) {
    return e.implmentation === 0 && (e.implementation = 1), new t(e);
  }
}
f0.className = "GRU";
Y(f0);
class zc extends Ac {
  constructor(t) {
    super(t), this.DEFAULT_ACTIVATION = "tanh", this.DEFAULT_RECURRENT_ACTIVATION = "hardSigmoid", this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_RECURRENT_INITIALIZER = "orthogonal", this.DEFAULT_BIAS_INITIALIZER = "zeros", this.units = t.units, Te(this.units, "units"), this.activation = wr(t.activation === void 0 ? this.DEFAULT_ACTIVATION : t.activation), this.recurrentActivation = wr(t.recurrentActivation === void 0 ? this.DEFAULT_RECURRENT_ACTIVATION : t.recurrentActivation), this.useBias = t.useBias == null ? !0 : t.useBias, this.kernelInitializer = Qt(t.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.recurrentInitializer = Qt(t.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER), this.biasInitializer = Qt(t.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.unitForgetBias = t.unitForgetBias, this.kernelRegularizer = qt(t.kernelRegularizer), this.recurrentRegularizer = qt(t.recurrentRegularizer), this.biasRegularizer = qt(t.biasRegularizer), this.kernelConstraint = Se(t.kernelConstraint), this.recurrentConstraint = Se(t.recurrentConstraint), this.biasConstraint = Se(t.biasConstraint), this.dropout = _o([1, br([0, t.dropout == null ? 0 : t.dropout])]), this.recurrentDropout = _o([
      1,
      br([0, t.recurrentDropout == null ? 0 : t.recurrentDropout])
    ]), this.dropoutFunc = t.dropoutFunc, this.implementation = t.implementation, this.stateSize = [this.units, this.units], this.dropoutMask = null, this.recurrentDropoutMask = null;
  }
  build(t) {
    var e;
    t = Ot(t);
    const s = t[t.length - 1];
    this.kernel = this.addWeight("kernel", [s, this.units * 4], null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.recurrentKernel = this.addWeight("recurrent_kernel", [this.units, this.units * 4], null, this.recurrentInitializer, this.recurrentRegularizer, !0, this.recurrentConstraint);
    let r;
    if (this.useBias) {
      if (this.unitForgetBias) {
        const o = this.biasInitializer, i = this.units;
        r = new (e = class extends jn {
          apply(l, c) {
            const u = o.apply([i]), h = new rp().apply([i]), d = o.apply([i * 2]);
            return Yb(Yb(u, h), d);
          }
        }, e.className = "CustomInit", e)();
      } else
        r = this.biasInitializer;
      this.bias = this.addWeight("bias", [this.units * 4], null, r, this.biasRegularizer, !0, this.biasConstraint);
    } else
      this.bias = null;
    this.built = !0;
  }
  call(t, e) {
    return A(() => {
      const s = e.training == null ? !1 : e.training;
      if (t = t, t.length !== 3)
        throw new O(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${t.length}.`);
      let r = t[1];
      const o = t[2];
      t = t[0], 0 < this.dropout && this.dropout < 1 && this.dropoutMask == null && (this.dropoutMask = Ir({
        ones: () => wn(t),
        rate: this.dropout,
        training: s,
        count: 4,
        dropoutFunc: this.dropoutFunc
      })), 0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null && (this.recurrentDropoutMask = Ir({
        ones: () => wn(r),
        rate: this.recurrentDropout,
        training: s,
        count: 4,
        dropoutFunc: this.dropoutFunc
      }));
      const i = this.dropoutMask, a = this.recurrentDropoutMask;
      let l, c, u, h;
      0 < this.dropout && this.dropout < 1 && (t = D(t, i[0]));
      let d = Ss(t, this.kernel.read());
      0 < this.recurrentDropout && this.recurrentDropout < 1 && (r = D(r, a[0])), d = U(d, Ss(r, this.recurrentKernel.read())), this.useBias && (d = hs(d, this.bias.read()));
      const [p, f, m, g] = tn(d, 4, d.rank - 1);
      l = this.recurrentActivation.apply(p), c = this.recurrentActivation.apply(f), u = U(D(c, o), D(l, this.activation.apply(m))), h = this.recurrentActivation.apply(g);
      const y = D(h, this.activation.apply(u));
      return [y, y, u];
    });
  }
  getConfig() {
    const t = super.getConfig(), e = {
      units: this.units,
      activation: xr(this.activation),
      recurrentActivation: xr(this.recurrentActivation),
      useBias: this.useBias,
      kernelInitializer: se(this.kernelInitializer),
      recurrentInitializer: se(this.recurrentInitializer),
      biasInitializer: se(this.biasInitializer),
      unitForgetBias: this.unitForgetBias,
      kernelRegularizer: Vt(this.kernelRegularizer),
      recurrentRegularizer: Vt(this.recurrentRegularizer),
      biasRegularizer: Vt(this.biasRegularizer),
      activityRegularizer: Vt(this.activityRegularizer),
      kernelConstraint: Ie(this.kernelConstraint),
      recurrentConstraint: Ie(this.recurrentConstraint),
      biasConstraint: Ie(this.biasConstraint),
      dropout: this.dropout,
      recurrentDropout: this.recurrentDropout,
      implementation: this.implementation
    };
    return Object.assign({}, t, e);
  }
}
zc.className = "LSTMCell";
Y(zc);
class m0 extends ds {
  constructor(t) {
    t.implementation === 0 && console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."), t.cell = new zc(t), super(t);
  }
  call(t, e) {
    return A(() => {
      this.cell.dropoutMask != null && (xt(this.cell.dropoutMask), this.cell.dropoutMask = null), this.cell.recurrentDropoutMask != null && (xt(this.cell.recurrentDropoutMask), this.cell.recurrentDropoutMask = null);
      const s = e == null ? null : e.mask, r = e == null ? null : e.training, o = e == null ? null : e.initialState;
      return super.call(t, { mask: s, training: r, initialState: o });
    });
  }
  static fromConfig(t, e) {
    return e.implmentation === 0 && (e.implementation = 1), new t(e);
  }
}
m0.className = "LSTM";
Y(m0);
class bp extends Ac {
  constructor(t) {
    super(t), this.cells = t.cells;
  }
  get stateSize() {
    const t = [];
    for (const e of this.cells.slice().reverse())
      Array.isArray(e.stateSize) ? t.push(...e.stateSize) : t.push(e.stateSize);
    return t;
  }
  call(t, e) {
    return A(() => {
      t = t;
      let s = t.slice(1);
      const r = [];
      for (const a of this.cells.slice().reverse())
        Array.isArray(a.stateSize) ? r.push(s.splice(0, a.stateSize.length)) : r.push(s.splice(0, 1));
      r.reverse();
      const o = [];
      let i;
      for (let a = 0; a < this.cells.length; ++a) {
        const l = this.cells[a];
        s = r[a], a === 0 ? i = [t[0]].concat(s) : i = [i[0]].concat(s), i = l.call(i, e), o.push(i.slice(1));
      }
      s = [];
      for (const a of o.slice().reverse())
        s.push(...a);
      return [i[0]].concat(s);
    });
  }
  build(t) {
    _f(t) && (t = t[0]), t = t;
    let e;
    this.cells.forEach((s, r) => {
      Hr(`RNNCell_${r}`, () => {
        s.build(t), Array.isArray(s.stateSize) ? e = s.stateSize[0] : e = s.stateSize, t = [t[0], e];
      });
    }), this.built = !0;
  }
  getConfig() {
    const t = super.getConfig(), e = (o) => ({
      className: o.getClassName(),
      config: o.getConfig()
    }), r = { cells: this.cells.map(e) };
    return Object.assign({}, t, r);
  }
  static fromConfig(t, e, s = {}) {
    const r = [];
    for (const o of e.cells)
      r.push(rs(o, s));
    return new t({ cells: r });
  }
  get trainableWeights() {
    if (!this.trainable)
      return [];
    const t = [];
    for (const e of this.cells)
      t.push(...e.trainableWeights);
    return t;
  }
  get nonTrainableWeights() {
    const t = [];
    for (const e of this.cells)
      t.push(...e.nonTrainableWeights);
    if (!this.trainable) {
      const e = [];
      for (const s of this.cells)
        e.push(...s.trainableWeights);
      return e.concat(t);
    }
    return t;
  }
  getWeights() {
    const t = [];
    for (const e of this.cells)
      t.push(...e.weights);
    return Kf(t);
  }
  setWeights(t) {
    const e = [];
    for (const s of this.cells) {
      const r = s.weights.length, o = t.splice(r);
      for (let i = 0; i < s.weights.length; ++i)
        e.push([s.weights[i], o[i]]);
    }
    Py(e);
  }
}
bp.className = "StackedRNNCells";
Y(bp);
function Ir(n) {
  const { ones: t, rate: e, training: s = !1, count: r = 1, dropoutFunc: o } = n, i = () => o != null ? o(t(), e) : _I(t(), e), a = () => Dc(i, t, s);
  return !r || r <= 1 ? ce(a().clone()) : Array(r).fill(void 0).map(a).map((c) => ce(c.clone()));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
var HF = globalThis && globalThis.__rest || function(n, t) {
  var e = {};
  for (var s in n)
    Object.prototype.hasOwnProperty.call(n, s) && t.indexOf(s) < 0 && (e[s] = n[s]);
  if (n != null && typeof Object.getOwnPropertySymbols == "function")
    for (var r = 0, s = Object.getOwnPropertySymbols(n); r < s.length; r++)
      t.indexOf(s[r]) < 0 && Object.prototype.propertyIsEnumerable.call(n, s[r]) && (e[s[r]] = n[s[r]]);
  return e;
};
class RS extends ds {
  constructor(t) {
    if (t.unroll)
      throw new wt("Unrolling is not possible with convolutional RNNs.");
    if (Array.isArray(t.cell))
      throw new wt("It is not possible at the moment to stack convolutional cells.");
    super(t), this.inputSpec = [new ye({ ndim: 5 })];
  }
  call(t, e) {
    return A(() => {
      if (this.cell.dropoutMask != null && (xt(this.cell.dropoutMask), this.cell.dropoutMask = null), this.cell.recurrentDropoutMask != null && (xt(this.cell.recurrentDropoutMask), this.cell.recurrentDropoutMask = null), e && e.constants)
        throw new O("ConvRNN2D cell does not support constants");
      const s = e == null ? null : e.mask, r = e == null ? null : e.training, o = e == null ? null : e.initialState;
      return super.call(t, { mask: s, training: r, initialState: o });
    });
  }
  computeOutputShape(t) {
    let e = this.computeSingleOutputShape(t);
    return this.returnSequences || (e = [e[0], ...e.slice(2)]), this.returnState && (e = [e, ...Array(2).fill([t[0], ...e.slice(-3)])]), e;
  }
  getInitialState(t) {
    return A(() => {
      const { stateSize: e } = this.cell, s = t.shape, r = this.computeSingleOutputShape(s), o = [r[0], ...r.slice(2)], i = ge(o);
      return Array.isArray(e) ? Array(e.length).fill(i) : [i];
    });
  }
  resetStates(t, e = !1) {
    A(() => {
      if (!this.stateful)
        throw new ms("Cannot call resetStates() on an RNN Layer that is not stateful.");
      const s = this.inputSpec[0].shape, r = this.computeSingleOutputShape(s), o = [r[0], ...r.slice(2)];
      if (s[0] == null)
        throw new O("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");
      if (this.getStates() == null)
        Array.isArray(this.cell.stateSize) ? this.states_ = this.cell.stateSize.map(() => ge(o)) : this.states_ = [ge(o)];
      else if (t == null)
        xt(this.states_), this.keptStates != null && (xt(this.keptStates), this.keptStates = []), Array.isArray(this.cell.stateSize) ? this.states_ = this.cell.stateSize.map(() => ge(o)) : this.states_[0] = ge(o);
      else {
        if (Array.isArray(t) || (t = [t]), t.length !== this.states_.length)
          throw new O(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${t.length} state value(s). Input received: ${t}`);
        e ? this.keptStates.push(this.states_.slice()) : xt(this.states_);
        for (let a = 0; a < this.states_.length; ++a) {
          const l = t[a], c = o;
          if (!Nt(l.shape, c))
            throw new O(`State ${a} is incompatible with layer ${this.name}: expected shape=${c}, received shape=${l.shape}`);
          this.states_[a] = l;
        }
      }
      this.states_ = this.states_.map((a) => ce(a.clone()));
    });
  }
  computeSingleOutputShape(t) {
    const { dataFormat: e, filters: s, kernelSize: r, padding: o, strides: i, dilationRate: a } = this.cell, l = e === "channelsFirst", c = t[l ? 3 : 2], u = t[l ? 4 : 3], h = os(c, r[0], o, i[0], a[0]), d = os(u, r[1], o, i[1], a[1]);
    return [
      ...t.slice(0, 2),
      ...l ? [s, h, d] : [h, d, s]
    ];
  }
}
RS.className = "ConvRNN2D";
class xp extends zc {
  constructor(t) {
    const { filters: e, kernelSize: s, strides: r, padding: o, dataFormat: i, dilationRate: a } = t;
    super(Object.assign({}, t, { units: e })), this.filters = e, Te(this.filters, "filters"), this.kernelSize = Go(s, 2, "kernelSize"), this.kernelSize.forEach((l) => Te(l, "kernelSize")), this.strides = Go(r || 1, 2, "strides"), this.strides.forEach((l) => Te(l, "strides")), this.padding = o || "valid", Gn(this.padding), this.dataFormat = i || "channelsLast", fe(this.dataFormat), this.dilationRate = Go(a || 1, 2, "dilationRate"), this.dilationRate.forEach((l) => Te(l, "dilationRate"));
  }
  build(t) {
    var e;
    t = Ot(t);
    const s = this.dataFormat === "channelsFirst" ? 1 : t.length - 1;
    if (t[s] == null)
      throw new O(`The channel dimension of the input should be defined. Found ${t[s]}`);
    const r = t[s], o = 4, i = this.kernelSize.concat([r, this.filters * o]);
    this.kernel = this.addWeight("kernel", i, null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint);
    const a = this.kernelSize.concat([this.filters, this.filters * o]);
    if (this.recurrentKernel = this.addWeight("recurrent_kernel", a, null, this.recurrentInitializer, this.recurrentRegularizer, !0, this.recurrentConstraint), this.useBias) {
      let l;
      if (this.unitForgetBias) {
        const c = this.biasInitializer, u = this.filters;
        l = new (e = class extends jn {
          apply(d, p) {
            const f = c.apply([u]), m = fn([u]), g = c.apply([u * 2]);
            return Gy([f, m, g]);
          }
        }, e.className = "CustomInit", e)();
      } else
        l = this.biasInitializer;
      this.bias = this.addWeight("bias", [this.filters * o], null, l, this.biasRegularizer, !0, this.biasConstraint);
    }
    this.built = !0;
  }
  call(t, e) {
    return A(() => {
      if (t.length !== 3)
        throw new O(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${t.length}.`);
      const s = e.training || !1, r = t[0], o = t[1], i = t[2], a = 4;
      0 < this.dropout && this.dropout < 1 && this.dropoutMask == null && (this.dropoutMask = Ir({
        ones: () => wn(r),
        rate: this.dropout,
        training: s,
        count: a,
        dropoutFunc: this.dropoutFunc
      }));
      const l = this.dropoutMask, c = (j, J, q) => !J || !J[q] ? j : D(J[q], j);
      let u = c(r, l, 0), h = c(r, l, 1), d = c(r, l, 2), p = c(r, l, 3);
      0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null && (this.recurrentDropoutMask = Ir({
        ones: () => wn(o),
        rate: this.recurrentDropout,
        training: s,
        count: a,
        dropoutFunc: this.dropoutFunc
      }));
      const f = this.recurrentDropoutMask;
      let m = c(o, f, 0), g = c(o, f, 1), y = c(o, f, 2), b = c(o, f, 3);
      const w = 3, [x, S, v, T] = tn(this.kernel.read(), a, w), [N, $, R, F] = this.useBias ? tn(this.bias.read(), a) : [null, null, null, null];
      u = this.inputConv(u, x, N, this.padding), h = this.inputConv(h, S, $, this.padding), d = this.inputConv(d, v, R, this.padding), p = this.inputConv(p, T, F, this.padding);
      const [z, W, M, X] = tn(this.recurrentKernel.read(), a, w);
      m = this.recurrentConv(m, z), g = this.recurrentConv(g, W), y = this.recurrentConv(y, M), b = this.recurrentConv(b, X);
      const _ = this.recurrentActivation.apply(U(u, m)), B = this.recurrentActivation.apply(U(h, g)), Z = U(D(B, i), D(_, this.activation.apply(U(d, y)))), H = D(this.recurrentActivation.apply(U(p, b)), this.activation.apply(Z));
      return [H, H, Z];
    });
  }
  getConfig() {
    const t = super.getConfig(), e = HF(t, ["units"]), s = {
      filters: this.filters,
      kernelSize: this.kernelSize,
      padding: this.padding,
      dataFormat: this.dataFormat,
      dilationRate: this.dilationRate,
      strides: this.strides
    };
    return Object.assign({}, e, s);
  }
  inputConv(t, e, s, r) {
    const o = Xs(t, e, this.strides, r || "valid", this.dataFormat === "channelsFirst" ? "NCHW" : "NHWC", this.dilationRate);
    return s ? hs(o, s, this.dataFormat) : o;
  }
  recurrentConv(t, e) {
    return Xs(t, e, 1, "same", this.dataFormat === "channelsFirst" ? "NCHW" : "NHWC");
  }
}
xp.className = "ConvLSTM2DCell";
Y(xp);
class g0 extends RS {
  constructor(t) {
    const e = new xp(t);
    super(Object.assign({}, t, { cell: e }));
  }
  static fromConfig(t, e) {
    return new t(e);
  }
}
g0.className = "ConvLSTM2D";
Y(g0);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class wp extends Et {
  constructor(t) {
    super(t), this.rate = Math.max(Math.min(t.rate, 1), 0), this.noiseShape = t.noiseShape, this.seed = t.seed, this.supportsMasking = !0;
  }
  getNoiseShape(t) {
    if (this.noiseShape == null)
      return this.noiseShape;
    const e = t.shape, s = [];
    for (let r = 0; r < this.noiseShape.length; ++r)
      s.push(this.noiseShape[r] == null ? e[r] : this.noiseShape[r]);
    return s;
  }
  call(t, e) {
    return A(() => {
      this.invokeCallHook(t, e);
      const s = It(t);
      if (0 < this.rate && this.rate < 1) {
        const r = e.training == null ? !1 : e.training, o = this.getNoiseShape(s);
        return Dc(() => _I(s, this.rate, o, this.seed), () => s, r);
      }
      return t;
    });
  }
  getConfig() {
    const t = {
      rate: this.rate,
      noiseShape: this.noiseShape,
      seed: this.seed
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
  dispose() {
    return super.dispose();
  }
}
wp.className = "Dropout";
Y(wp);
class y0 extends wp {
  constructor(t) {
    super(t), this.inputSpec = [{ ndim: 3 }];
  }
  getNoiseShape(t) {
    const e = t.shape;
    return [e[0], 1, e[2]];
  }
}
y0.className = "SpatialDropout1D";
Y(y0);
class b0 extends Et {
  constructor(t) {
    if (super(t), this.activation = null, this.useBias = !0, this.kernel = null, this.bias = null, this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_BIAS_INITIALIZER = "zeros", t.batchInputShape == null && t.inputShape == null && t.inputDim != null) {
      let e = null;
      t.batchSize != null && (e = t.batchSize), this.batchInputShape = [e, t.inputDim];
    }
    this.units = t.units, Te(this.units, "units"), this.activation = wr(t.activation), t.useBias != null && (this.useBias = t.useBias), this.kernelInitializer = Qt(t.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.biasInitializer = Qt(t.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.kernelConstraint = Se(t.kernelConstraint), this.biasConstraint = Se(t.biasConstraint), this.kernelRegularizer = qt(t.kernelRegularizer), this.biasRegularizer = qt(t.biasRegularizer), this.activityRegularizer = qt(t.activityRegularizer), this.supportsMasking = !0, this.inputSpec = [{ minNDim: 2 }];
  }
  build(t) {
    t = Ot(t);
    const e = t[t.length - 1];
    this.kernel == null && (this.kernel = this.addWeight("kernel", [e, this.units], null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.units], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint))), this.inputSpec = [{ minNDim: 2, axes: { [-1]: e } }], this.built = !0;
  }
  computeOutputShape(t) {
    t = Ot(t);
    const e = t.slice();
    return e[e.length - 1] = this.units, e;
  }
  call(t, e) {
    return A(() => {
      this.invokeCallHook(t, e);
      const s = It(t), r = AI(this.activation.getClassName());
      let o;
      return r != null ? o = Ss(s, this.kernel.read(), r, this.bias ? this.bias.read() : null) : (o = Ss(s, this.kernel.read()), this.bias != null && (o = hs(o, this.bias.read())), this.activation != null && (o = this.activation.apply(o))), o;
    });
  }
  getConfig() {
    const t = {
      units: this.units,
      activation: xr(this.activation),
      useBias: this.useBias,
      kernelInitializer: se(this.kernelInitializer),
      biasInitializer: se(this.biasInitializer),
      kernelRegularizer: Vt(this.kernelRegularizer),
      biasRegularizer: Vt(this.biasRegularizer),
      activityRegularizer: Vt(this.activityRegularizer),
      kernelConstraint: Ie(this.kernelConstraint),
      biasConstraint: Ie(this.biasConstraint)
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
b0.className = "Dense";
Y(b0);
class x0 extends Et {
  constructor(t) {
    t = t || {}, super(t), this.inputSpec = [{ minNDim: 3 }], this.dataFormat = t.dataFormat;
  }
  computeOutputShape(t) {
    t = Ot(t);
    for (const e of t.slice(1))
      if (e == null)
        throw new O(`The shape of the input to "Flatten" is not fully defined (got ${t.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);
    return [t[0], pr(t, 1)];
  }
  call(t, e) {
    return A(() => {
      this.invokeCallHook(t, e);
      let s = It(t);
      if (this.dataFormat === "channelsFirst" && s.rank > 1) {
        const r = [0];
        for (let o = 2; o < s.rank; ++o)
          r.push(o);
        r.push(1), s = kt(s, r);
      }
      return o3(s);
    });
  }
  getConfig() {
    const t = {};
    this.dataFormat != null && (t.dataFormat = this.dataFormat);
    const e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
x0.className = "Flatten";
Y(x0);
class w0 extends Et {
  constructor(t) {
    super(t), this.supportsMasking = !0, this.activation = wr(t.activation);
  }
  call(t, e) {
    return A(() => {
      this.invokeCallHook(t, e);
      const s = It(t);
      return this.activation.apply(s);
    });
  }
  getConfig() {
    const t = { activation: xr(this.activation) }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
w0.className = "Activation";
Y(w0);
class I0 extends Et {
  constructor(t) {
    super(t), this.n = t.n, this.inputSpec = [{ ndim: 2 }];
  }
  computeOutputShape(t) {
    return [t[0], this.n, t[1]];
  }
  call(t, e) {
    return A(() => (t = It(t), s3(t, this.n)));
  }
  getConfig() {
    const t = {
      n: this.n
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
I0.className = "RepeatVector";
Y(I0);
class S0 extends Et {
  constructor(t) {
    super(t), this.targetShape = t.targetShape;
    for (let e = 0; e < this.targetShape.length; ++e)
      this.isUnknown(this.targetShape[e]) && (this.targetShape[e] = null);
  }
  isUnknown(t) {
    return t < 0 || t == null;
  }
  fixUnknownDimension(t, e) {
    const s = "Total size of new array must be unchanged.", r = e.slice();
    let o = 1, i = null;
    for (let l = 0; l < r.length; ++l) {
      const c = r[l];
      if (this.isUnknown(c))
        if (i === null)
          i = l;
        else
          throw new O("Can only specifiy one unknown dimension.");
      else
        o *= c;
    }
    const a = pr(t);
    if (i !== null) {
      if (o === 0 || a % o !== 0)
        throw new O(s);
      r[i] = a / o;
    } else if (a !== o)
      throw new O(s);
    return r;
  }
  computeOutputShape(t) {
    let e = !1;
    for (let s = 0; s < t.length; ++s)
      if (this.isUnknown(t[s])) {
        e = !0;
        break;
      }
    return e ? t.slice(0, 1).concat(this.targetShape) : t.slice(0, 1).concat(this.fixUnknownDimension(t.slice(1), this.targetShape));
  }
  call(t, e) {
    return A(() => {
      this.invokeCallHook(t, e);
      const s = It(t), r = s.shape, o = r.slice(0, 1).concat(this.fixUnknownDimension(r.slice(1), this.targetShape));
      return G(s, o);
    });
  }
  getConfig() {
    const t = {
      targetShape: this.targetShape
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
S0.className = "Reshape";
Y(S0);
class v0 extends Et {
  constructor(t) {
    if (super(t), t.dims == null)
      throw new Error("Required configuration field `dims` is missing during Permute constructor call.");
    if (!Array.isArray(t.dims))
      throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${t.dims} instead.`);
    const e = is(1, t.dims.length + 1);
    if (!Nt(t.dims.slice().sort(), e))
      throw new Error("Invalid permutation `dims`: " + JSON.stringify(t.dims) + " `dims` must contain consecutive integers starting from 1.");
    this.dims = t.dims, this.dimsIncludingBatch = [0].concat(this.dims), this.inputSpec = [new ye({ ndim: this.dims.length + 1 })];
  }
  computeOutputShape(t) {
    t = Ot(t);
    const e = t.slice();
    return this.dims.forEach((s, r) => {
      e[r + 1] = t[s];
    }), e;
  }
  call(t, e) {
    return kt(It(t), this.dimsIncludingBatch);
  }
  getConfig() {
    const t = {
      dims: this.dims
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
v0.className = "Permute";
Y(v0);
class C0 extends Et {
  constructor(t) {
    super(t == null ? {} : t), this.supportsMasking = !0, t != null ? this.maskValue = t.maskValue == null ? 0 : t.maskValue : this.maskValue = 0;
  }
  computeOutputShape(t) {
    return t;
  }
  getConfig() {
    const t = super.getConfig(), e = { maskValue: this.maskValue };
    return Object.assign(e, t), e;
  }
  computeMask(t, e) {
    const s = It(t), r = -1;
    return Ba(eo(s, this.maskValue), r);
  }
  call(t, e) {
    return A(() => {
      this.invokeCallHook(t, e);
      const s = It(t), r = -1, o = !0, i = Ba(eo(s, this.maskValue), r, o);
      return D(s, et(i, s.dtype));
    });
  }
}
C0.className = "Masking";
Y(C0);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class k0 extends Et {
  constructor(t) {
    if (super(t), this.embeddings = null, this.DEFAULT_EMBEDDINGS_INITIALIZER = "randomUniform", t.batchInputShape == null && t.inputShape == null) {
      let e = null;
      t.batchSize != null && (e = t.batchSize), t.inputLength == null ? this.batchInputShape = [e, null] : this.batchInputShape = [e].concat(Bt(t.inputLength));
    }
    this.inputDim = t.inputDim, Te(this.inputDim, "inputDim"), this.outputDim = t.outputDim, Te(this.outputDim, "outputDim"), this.embeddingsInitializer = Qt(t.embeddingsInitializer || this.DEFAULT_EMBEDDINGS_INITIALIZER), this.embeddingsRegularizer = qt(t.embeddingsRegularizer), this.activityRegularizer = qt(t.activityRegularizer), this.embeddingsConstraint = Se(t.embeddingsConstraint), this.maskZero = t.maskZero, this.supportsMasking = t.maskZero, this.inputLength = t.inputLength;
  }
  build(t) {
    this.embeddings = this.addWeight("embeddings", [this.inputDim, this.outputDim], this.dtype, this.embeddingsInitializer, this.embeddingsRegularizer, !0, this.embeddingsConstraint), this.built = !0;
  }
  warnOnIncompatibleInputShape(t) {
  }
  computeMask(t, e) {
    return A(() => this.maskZero ? (t = It(t), eo(t, Rt(t))) : null);
  }
  computeOutputShape(t) {
    if (t = Ot(t), this.inputLength == null)
      return [...t, this.outputDim];
    const e = Bt(this.inputLength);
    if (e.length !== t.length - 1)
      throw new O(`"inputLength" is ${this.inputLength}, but received input shape has shape ${t}`);
    {
      let s = 0;
      for (let r = 0; r < e.length; ++r) {
        const o = e[r], i = t[r + 1];
        if (o != null && i != null && o !== i)
          throw new O(`"inputLength" is ${this.inputLength}, but received input shape has shape ${t}`);
        o == null && (e[s] = i), s++;
      }
    }
    return [t[0], ...e, this.outputDim];
  }
  call(t, e) {
    return A(() => {
      this.invokeCallHook(t, e);
      let s = It(t);
      s.dtype !== "int32" && (s = Rc(s, "int32"));
      const r = XI(this.embeddings.read(), G(s, [s.size]));
      return G(r, Ot(this.computeOutputShape(s.shape)));
    });
  }
  getConfig() {
    const t = {
      inputDim: this.inputDim,
      outputDim: this.outputDim,
      embeddingsInitializer: se(this.embeddingsInitializer),
      embeddingsRegularizer: Vt(this.embeddingsRegularizer),
      activityRegularizer: Vt(this.activityRegularizer),
      embeddingsConstraint: Ie(this.embeddingsConstraint),
      maskZero: this.maskZero,
      inputLength: this.inputLength
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
k0.className = "Embedding";
Y(k0);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class wo extends Et {
  constructor(t) {
    super(t || {}), this.supportsMasking = !0;
  }
  mergeFunction(t) {
    throw new wt();
  }
  computeElementwiseOpOutputShape(t, e) {
    if (t == null || e == null)
      return null;
    if (t.length < e.length)
      return this.computeElementwiseOpOutputShape(e, t);
    if (e.length === 0)
      return t;
    const s = t.slice(0, t.length - e.length);
    for (let r = 0; r < e.length; ++r) {
      const o = t[t.length - e.length + r], i = e[r];
      if (o == null || i == null || o < 0 || i < 0)
        s.push(null);
      else if (o === 1)
        s.push(i);
      else if (i === 1)
        s.push(o);
      else {
        if (o !== i)
          throw new O("Operands could not be broadcast together with shapes " + JSON.stringify(t) + " " + JSON.stringify(e));
        s.push(o);
      }
    }
    return s;
  }
  build(t) {
    if (Array.isArray(t) && !Array.isArray(t[0]) && (t = [Ot(t)]), t = t, t.length < 2)
      throw new O(`A merge layer should be called on an Array of at least 2 inputs. Got ${t.length} input(s).`);
    let e = [];
    for (const o of t)
      o != null && o[0] !== null && e.push(o[0]);
    if (e = dr(e), e.length > 1)
      throw new O(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(t)}.`);
    let s = t[0] == null ? null : t[0].slice(1);
    for (let o = 1; o < t.length; ++o) {
      const i = t[o] == null ? null : t[o].slice(1);
      s = this.computeElementwiseOpOutputShape(s, i);
    }
    const r = t.map((o) => o.length);
    t.indexOf(null) === -1 && dr(r).length === 1 ? this.reshapeRequired = !1 : this.reshapeRequired = !0;
  }
  call(t, e) {
    return A(() => {
      if (t = t, this.reshapeRequired) {
        const s = [], r = t.map((o) => o.rank);
        if (r.indexOf(null) === -1) {
          const o = br(r);
          for (let i of t) {
            const a = i.rank;
            for (let l = 0; l < o - a; ++l)
              i = Ec(i, 1);
            s.push(i);
          }
          return this.mergeFunction(s);
        } else {
          let o = !1;
          for (const l of t) {
            const c = l.rank;
            if (c == null) {
              const u = l.shape, h = u[0], d = u.slice(1).concat([h]);
              let p = G(l, [h].concat(pr(u.slice(1))));
              p = kt(p, [1, 0]), p = G(p, d), s.push(p), o = !0;
            } else if (c > 1) {
              const u = is(1, c).concat([0]);
              s.push(kt(l, u)), o = !0;
            } else
              s.push(l);
          }
          let i = this.mergeFunction(s);
          const a = i.rank;
          if (o) {
            if (a == null) {
              const l = i.shape, c = l.length, u = l[c - 1], h = [u].concat(l.slice(0, l.length - 1));
              i = G(kt(G(i, [-1, u]), [1, 0]), h);
            } else if (a > 1) {
              const l = [a - 1].concat(is(0, a - 1));
              i = kt(i, l);
            }
          }
          return i;
        }
      } else
        return this.mergeFunction(t);
    });
  }
  computeOutputShape(t) {
    t = t;
    let e;
    t[0] == null ? e = null : e = t[0].slice(1);
    for (let r = 1; r < t.length; ++r) {
      const o = t[r] == null ? null : t[r].slice(1);
      e = this.computeElementwiseOpOutputShape(e, o);
    }
    let s = [];
    for (const r of t)
      r != null && r[0] !== null && s.push(r[0]);
    return s = dr(s), s.length === 1 ? e = s.concat(e) : e = [null].concat(e), e;
  }
  computeMask(t, e) {
    return A(() => {
      if (e == null)
        return null;
      if (!Array.isArray(e))
        throw new O("`mask` should be an Array");
      if (!Array.isArray(t))
        throw new O("`inputs` should be an Array");
      if (e.length !== t.length)
        throw new O(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${t.length} vs ${e.length})`);
      if (e.every((r) => r == null))
        return null;
      e = e.map((r) => r == null ? r : Qe(r, 0));
      let s = e[0];
      for (let r = 1; r < e.length - 1; ++r)
        s = Hn(s, e[r]);
      return s;
    });
  }
}
class T0 extends wo {
  constructor(t) {
    super(t);
  }
  mergeFunction(t) {
    return A(() => {
      let e = t[0].clone();
      for (let s = 1; s < t.length; ++s)
        e = U(e, t[s]);
      return e;
    });
  }
}
T0.className = "Add";
Y(T0);
class N0 extends wo {
  constructor(t) {
    super(t);
  }
  mergeFunction(t) {
    return A(() => {
      let e = t[0].clone();
      for (let s = 1; s < t.length; ++s)
        e = D(e, t[s]);
      return e;
    });
  }
}
N0.className = "Multiply";
Y(N0);
class $0 extends wo {
  constructor(t) {
    super(t);
  }
  mergeFunction(t) {
    return A(() => {
      let e = t[0].clone();
      for (let s = 1; s < t.length; ++s)
        e = U(e, t[s]);
      return D(1 / t.length, e);
    });
  }
}
$0.className = "Average";
Y($0);
class R0 extends wo {
  constructor(t) {
    super(t);
  }
  mergeFunction(t) {
    return A(() => {
      let e = t[0];
      for (let s = 1; s < t.length; ++s)
        e = $s(e, t[s]);
      return e;
    });
  }
}
R0.className = "Maximum";
Y(R0);
class E0 extends wo {
  constructor(t) {
    super(t);
  }
  mergeFunction(t) {
    return A(() => {
      let e = t[0];
      for (let s = 1; s < t.length; ++s)
        e = ea(e, t[s]);
      return e;
    });
  }
}
E0.className = "Minimum";
Y(E0);
class L0 extends wo {
  constructor(t) {
    super(t), this.DEFAULT_AXIS = -1, t == null && (t = {}), this.axis = t.axis == null ? this.DEFAULT_AXIS : t.axis, this.supportsMasking = !0, this.reshapeRequired = !1;
  }
  build(t) {
    if (!(Array.isArray(t) && Array.isArray(t[0])) || t.length === 1)
      throw new O("A `Concatenate` layer should be called on a list of at least 2 inputs");
    t = t;
    let e = !0;
    for (const r of t)
      if (r != null) {
        e = !1;
        break;
      }
    if (e)
      return;
    const s = [];
    for (let r = 0; r < t.length; ++r) {
      const o = t[r].slice();
      o.splice(this.axis, 1);
      let i = !1;
      for (const a of s)
        if (Nt(a, o)) {
          i = !0;
          break;
        }
      i || s.push(o);
    }
    if (s.length > 1)
      throw new O("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: " + JSON.stringify(t));
  }
  mergeFunction(t) {
    return A(() => Gy(t, this.axis));
  }
  computeOutputShape(t) {
    if (!(Array.isArray(t) && Array.isArray(t[0])))
      throw new O("A `Concatenate` layer should be called on a list of inputs.");
    const e = t, s = e[0].slice(), r = this.axis < 0 ? s.length + this.axis : this.axis;
    for (const o of e.slice(1)) {
      if (s[r] == null || o[r] == null) {
        s[r] = null;
        break;
      }
      s[r] += o[r];
    }
    return s;
  }
  computeMask(t, e) {
    if (e == null)
      return null;
    if (!Array.isArray(e))
      throw new O("`mask` should be an array for Concatenate");
    if (!Array.isArray(t))
      throw new O("`inputs` should be an array for Concatenate");
    if (e.length !== t.length)
      throw new O(`Mismatch in the length of mask (${e.length}) and the legnth of inputs (${t.length})`);
    return A(() => {
      let s = !0;
      if (e.forEach((i) => {
        if (i != null) {
          s = !1;
          return;
        }
      }), s)
        return null;
      const r = [];
      for (let i = 0; i < t.length; ++i)
        e[i] == null ? r.push(et(wn(t[i]), "bool")) : e[i].rank < t[i].rank ? r.push(Qe(e[i], -1)) : r.push(e[i]);
      const o = he(r, this.axis);
      return pd(o, -1, !1);
    });
  }
  getConfig() {
    const t = {
      axis: this.axis
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
L0.className = "Concatenate";
Y(L0);
function Sa(n, t) {
  for (; n < 0; )
    n += t;
  return n;
}
function UF(n, t, e) {
  if (n.shape.length > 3 || t.shape.length > 3)
    throw new wt("batchDot is not implemented for tensors of 4D or higher rank yet");
  if (C(n.shape.length >= 2, () => `batchDot requires the rank of x to be >= 2, but got ${n.shape.length}`), C(n.shape.length >= 2, () => `batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`), typeof e == "number" && (e = [e, e]), n.dtype === "complex64" || t.dtype === "complex64")
    throw new wt("batchDot is not implemented for complex64-type Tensors yet.");
  const s = n.shape.length, r = t.shape.length;
  e == null && (e = [s - 1, r - 2]);
  const o = e;
  return A(() => {
    let i;
    if (s > r) {
      i = s - r;
      const l = [];
      for (let c = 0; c < i; ++c)
        l.push(1);
      t = G(t, t.shape.concat(l));
    } else if (r > s) {
      i = r - s;
      const l = [];
      for (let c = 0; c < i; ++c)
        l.push(1);
      n = G(n, n.shape.concat(l));
    } else
      i = 0;
    let a;
    if (n.shape.length === 2 && t.shape.length === 2)
      o[0] === o[1] ? a = at(D(n, t), o[0]) : a = at(D(kt(n, [1, 0]), t), o[1]);
    else {
      const l = o[0] !== n.shape.length - 1, c = o[1] === t.shape.length - 1;
      a = Ct(n, t, l, c);
    }
    if (i > 0) {
      let l;
      s > r ? l = s + r - 3 : l = s - 1;
      const c = [];
      for (let u = l; u < l + i; ++u)
        c.push(u);
      a = $r(a, c);
    }
    return a.shape.length === 1 && (a = Qe(a, 1)), a;
  });
}
class D0 extends wo {
  constructor(t) {
    super(t), this.axes = t.axes, this.normalize = t.normalize == null ? !1 : t.normalize, this.supportsMasking = !0, this.reshapeRequired = !1;
  }
  build(t) {
    C(Array.isArray(t) && t.length === 2 && Array.isArray(t[0]) && Array.isArray(t[1]), () => "A `Dot` layer should be called on a list of exactly 2 inputs.");
    const e = t[0], s = t[1];
    if (e.length > 3 || s.length > 3)
      throw new wt("Dot layer does not support tensors of 4D or higher rank yet.");
    const r = this.interpretAxes(e, s);
    if (e[r[0]] !== s[r[1]])
      throw new O(`Dimension incompatibility: ${e[r[0]]} !== ${s[r[1]]}`);
  }
  mergeFunction(t) {
    if (t.length !== 2)
      throw new O(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${t.length} input(s).`);
    let e = t[0], s = t[1], r;
    return Array.isArray(this.axes) ? r = this.axes.map((o, i) => Sa(o, t[i].shape.length)) : r = [
      Sa(this.axes, e.shape.length),
      Sa(this.axes, s.shape.length)
    ], this.normalize && (e = Ou(e, r[0]), s = Ou(s, r[1])), UF(e, s, r);
  }
  interpretAxes(t, e) {
    let s;
    return Array.isArray(this.axes) ? s = this.axes : s = [
      Sa(this.axes, t.length),
      Sa(this.axes, e.length)
    ], s;
  }
  computeOutputShape(t) {
    C(Array.isArray(t) && t.length === 2 && Array.isArray(t[0]) && Array.isArray(t[1]), () => "A `Dot` layer should be called on a list of exactly 2 inputs.");
    const e = t[0].slice(), s = t[1].slice();
    if (e.length > 3 || s.length > 3)
      throw new wt("Dot layer does not support tensors of 4D or higher rank yet.");
    const r = this.interpretAxes(e, s);
    e.splice(r[0], 1), s.splice(r[1], 1), s.splice(0, 1);
    const o = e.concat(s);
    return o.length === 1 && o.push(1), o;
  }
  computeMask(t, e) {
    return null;
  }
  getConfig() {
    const t = {
      axes: this.axes,
      normalize: this.normalize
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
D0.className = "Dot";
Y(D0);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class G0 extends Et {
  constructor(t) {
    super(t), this.supportsMasking = !0, this.stddev = t.stddev;
  }
  computeOutputShape(t) {
    return t;
  }
  getConfig() {
    const t = super.getConfig(), e = { stddev: this.stddev };
    return Object.assign(e, t), e;
  }
  call(t, e) {
    return A(() => {
      this.invokeCallHook(t, e);
      const s = It(t);
      return Dc(() => U(sp(s.shape, 0, this.stddev), s), () => s, e.training || !1);
    });
  }
}
G0.className = "GaussianNoise";
Y(G0);
class F0 extends Et {
  constructor(t) {
    super(t), this.supportsMasking = !0, this.rate = t.rate;
  }
  computeOutputShape(t) {
    return t;
  }
  getConfig() {
    const t = super.getConfig(), e = { rate: this.rate };
    return Object.assign(e, t), e;
  }
  call(t, e) {
    return A(() => {
      this.invokeCallHook(t, e);
      const s = It(t);
      return this.rate > 0 && this.rate < 1 ? Dc(() => {
        const o = Math.sqrt(this.rate / (1 - this.rate));
        return D(s, sp(s.shape, 1, o));
      }, () => s, e.training || !1) : s;
    });
  }
}
F0.className = "GaussianDropout";
Y(F0);
class O0 extends Et {
  constructor(t) {
    super(t), this.supportsMasking = !0, this.rate = t.rate, this.noiseShape = t.noiseShape;
  }
  _getNoiseShape(t) {
    return this.noiseShape || It(t).shape;
  }
  computeOutputShape(t) {
    return t;
  }
  getConfig() {
    const t = super.getConfig(), e = { rate: this.rate };
    return Object.assign(e, t), e;
  }
  call(t, e) {
    return A(() => {
      if (this.rate < 1 && this.rate > 0) {
        const s = this._getNoiseShape(t);
        return Dc(() => {
          const o = It(t), i = 1.6732632423543772, a = 1.0507009873554805, l = -i * a;
          let c = Tr(sa(s), this.rate);
          c = Rc(c, "float32");
          const u = ((1 - this.rate) * (1 + this.rate * l ** 2)) ** -0.5, h = -u * l * this.rate, d = U(D(o, c), D(U(c, -1), l));
          return U(D(d, u), h);
        }, () => It(t), e.training || !1);
      }
      return t;
    });
  }
}
O0.className = "AlphaDropout";
Y(O0);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function Qa(n, t, e, s, r, o = 1e-3) {
  let i;
  if (n.rank === 2)
    i = rg(n, t, e, s, r, o);
  else if (n.rank === 3)
    i = og(n, t, e, s, r, o);
  else if (n.rank === 4)
    i = ig(n, t, e, s, r, o);
  else
    throw new wt(`batchNormalization is not implemented for array of rank ${n.rank} yet`);
  return i;
}
function YF(n, t, e, s, r = 1e-3) {
  return A(() => {
    const o = mc(n, s), i = o.mean, a = o.variance;
    return [Qa(n, i, a, e, t, r), i, a];
  });
}
function jF(n, t, e, s, r = 1e-3) {
  return A(() => {
    const o = mc(n, s), i = o.mean, a = o.variance, l = [];
    for (const f of is(0, n.rank))
      s.indexOf(f) !== -1 ? l.push(1) : l.push(n.shape[f]);
    const c = G(i, l), u = G(a, l), h = t == null ? null : G(t, l), d = e == null ? null : G(e, l);
    return [Qa(n, c, u, d, h, r), i, a];
  });
}
function JF(n, t, e, s, r = 1e-3) {
  return Nt(s.slice().sort(), is(0, n.rank - 1)) ? YF(n, t, e, s, r) : jF(n, t, e, s, r);
}
class A0 extends Et {
  constructor(t) {
    t == null && (t = {}), super(t), this.supportsMasking = !0, this.axis = t.axis == null ? -1 : t.axis, this.momentum = t.momentum == null ? 0.99 : t.momentum, this.epsilon = t.epsilon == null ? 1e-3 : t.epsilon, this.center = t.center == null ? !0 : t.center, this.scale = t.scale == null ? !0 : t.scale, this.betaInitializer = Qt(t.betaInitializer || "zeros"), this.gammaInitializer = Qt(t.gammaInitializer || "ones"), this.movingMeanInitializer = Qt(t.movingMeanInitializer || "zeros"), this.movingVarianceInitializer = Qt(t.movingVarianceInitializer || "ones"), this.betaConstraint = Se(t.betaConstraint), this.gammaConstraint = Se(t.gammaConstraint), this.betaRegularizer = qt(t.betaRegularizer), this.gammaRegularizer = qt(t.gammaRegularizer);
  }
  build(t) {
    t = Ot(t);
    const e = this.axis >= 0 ? this.axis : this.axis + t.length, s = t[e];
    if (s == null)
      throw new O(`Axis ${e} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(t)}.`);
    this.inputSpec = [new ye({ ndim: t.length, axes: { [e]: s } })];
    const r = [s];
    this.scale && (this.gamma = this.addWeight("gamma", r, null, this.gammaInitializer, this.gammaRegularizer, !0, this.gammaConstraint)), this.center && (this.beta = this.addWeight("beta", r, null, this.betaInitializer, this.betaRegularizer, !0, this.betaConstraint)), this.movingMean = this.addWeight("moving_mean", r, null, this.movingMeanInitializer, null, !1), this.movingVariance = this.addWeight("moving_variance", r, null, this.movingVarianceInitializer, null, !1), this.built = !0;
  }
  call(t, e) {
    return A(() => {
      const s = e.training == null ? !1 : e.training, r = It(t), o = r.shape, i = o.length, a = is(0, i), l = this.axis >= 0 ? this.axis : this.axis + i;
      a.splice(l, 1);
      const c = no(1, i);
      c[l] = o[l];
      const u = a.slice();
      u.sort();
      const h = !Nt(u, is(0, i).slice(0, i - 1)), d = () => {
        if (h) {
          const b = G(this.movingMean.read(), c), w = G(this.movingVariance.read(), c), x = this.center ? G(this.beta.read(), c) : null, S = this.scale ? G(this.gamma.read(), c) : null;
          return Qa(r, b, w, x, S, this.epsilon);
        } else
          return Qa(r, this.movingMean.read(), this.movingVariance.read(), this.beta == null ? null : this.beta.read(), this.gamma == null ? null : this.gamma.read(), this.epsilon);
      };
      if (!s)
        return d();
      const [p, f, m] = JF(r, this.gamma.read(), this.beta.read(), a, this.epsilon), g = (b, w, x) => {
        A(() => {
          const S = 1 - x, v = b.read(), T = D(it(v, w), S);
          b.write(it(v, T));
        });
      };
      return (() => {
        g(this.movingMean, f, this.momentum), g(this.movingVariance, m, this.momentum);
      })(), p;
    });
  }
  getConfig() {
    const t = {
      axis: this.axis,
      momentum: this.momentum,
      epsilon: this.epsilon,
      center: this.center,
      scale: this.scale,
      betaInitializer: se(this.betaInitializer),
      gammaInitializer: se(this.gammaInitializer),
      movingMeanInitializer: se(this.movingMeanInitializer),
      movingVarianceInitializer: se(this.movingVarianceInitializer),
      betaRegularizer: Vt(this.betaRegularizer),
      gammaRegularizer: Vt(this.gammaRegularizer),
      betaConstraint: Ie(this.betaConstraint),
      gammaConstraint: Ie(this.gammaConstraint)
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
A0.className = "BatchNormalization";
Y(A0);
class z0 extends Et {
  constructor(t) {
    if (t == null && (t = {}), super(t), this.axis = t.axis == null ? -1 : t.axis, typeof this.axis == "number") {
      if (!Number.isInteger(this.axis))
        throw new Error(`Expected axis to be an integer, but received ${this.axis}`);
    } else if (Array.isArray(this.axis)) {
      for (const e of this.axis)
        if (!Number.isInteger(e))
          throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`);
    } else
      throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);
    this.epsilon = t.epsilon == null ? 1e-3 : t.epsilon, this.center = t.center == null ? !0 : t.center, this.scale = t.scale == null ? !0 : t.scale, this.betaInitializer = Qt(t.betaInitializer || "zeros"), this.gammaInitializer = Qt(t.gammaInitializer || "ones"), this.betaRegularizer = qt(t.betaRegularizer), this.gammaRegularizer = qt(t.gammaRegularizer), this.supportsMasking = !0;
  }
  build(t) {
    t = Ot(t);
    const e = t.length;
    typeof this.axis == "number" && (this.axis = [this.axis]);
    for (let o = 0; o < this.axis.length; ++o)
      this.axis[o] < 0 && (this.axis[o] += e);
    for (const o of this.axis)
      if (o < 0 || o >= e)
        throw new Error(`Invalid axis: ${o}`);
    if (this.axis.length !== dr(this.axis).length)
      throw new Error(`Found duplicate axes in: ${this.axis}`);
    const s = this.axis.map((o) => t[o]), r = !0;
    this.scale ? this.gamma = this.addWeight("gamma", s, "float32", this.gammaInitializer, this.gammaRegularizer, r) : this.gamma = null, this.center ? this.beta = this.addWeight("beta", s, "float32", this.betaInitializer, this.betaRegularizer, r) : this.beta = null, this.built = !0;
  }
  call(t, e) {
    const s = It(t), r = s.shape, o = r.length;
    return A(() => {
      let { mean: a, variance: l } = mc(s, this.axis, !0);
      const c = no(1, o);
      for (const m of this.axis)
        c[m] = r[m];
      const u = (m) => m != null && m.shape.length !== o ? G(m, c) : m;
      let h = this.scale ? u(this.gamma.read()) : null, d = this.center ? u(this.beta.read()) : null;
      const p = [], f = [];
      for (let m = 0; m < o; ++m)
        this.axis.indexOf(m) !== -1 ? (p.push(r[m]), f.push(1)) : (p.push(1), f.push(r[m]));
      return a = $n(a, p), l = $n(l, p), h != null && (h = $n(h, f)), d != null && (d = $n(d, f)), Qa(s, a, l, d, h, this.epsilon);
    });
  }
  getConfig() {
    const t = {
      axis: this.axis,
      epsilon: this.epsilon,
      center: this.center,
      scale: this.scale,
      betaInitializer: se(this.betaInitializer),
      gammaInitializer: se(this.gammaInitializer),
      betaRegularizer: Vt(this.betaRegularizer),
      gammaRegularizer: Vt(this.gammaRegularizer)
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
z0.className = "LayerNormalization";
Y(z0);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function QF(n, t, e) {
  return A(() => {
    if (n.rank !== 4)
      throw new O(`temporalPadding expects input tensor to be 4-D, but received a ${n.rank}-D tensor.`);
    if (t == null && (t = [[1, 1], [1, 1]]), t.length !== 2 || t[0].length !== 2 || t[1].length !== 2)
      throw new O("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");
    if (e == null && (e = as()), e !== "channelsLast" && e !== "channelsFirst")
      throw new O(`Unknown data format: ${e}. Supported data formats are 'channelsLast' and 'channelsFirst.`);
    let s;
    return e === "channelsFirst" ? s = [[0, 0], [0, 0], t[0], t[1]] : s = [[0, 0], t[0], t[1], [0, 0]], js(n, s);
  });
}
class W0 extends Et {
  constructor(t) {
    if (t == null && (t = {}), super(t), this.dataFormat = t.dataFormat == null ? as() : t.dataFormat, t.padding == null)
      this.padding = [[1, 1], [1, 1]];
    else if (typeof t.padding == "number")
      this.padding = [[t.padding, t.padding], [t.padding, t.padding]];
    else {
      if (t.padding = t.padding, t.padding.length !== 2)
        throw new O(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${t.padding.length} array.`);
      let e, s;
      if (typeof t.padding[0] == "number")
        e = [t.padding[0], t.padding[0]], s = [t.padding[1], t.padding[1]];
      else {
        if (t.padding = t.padding, t.padding[0].length !== 2)
          throw new O(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${t.padding[0].length} array.`);
        if (e = t.padding[0], t.padding[1].length !== 2)
          throw new O(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${t.padding[1].length} array.`);
        s = t.padding[1];
      }
      this.padding = [e, s];
    }
    this.inputSpec = [new ye({ ndim: 4 })];
  }
  computeOutputShape(t) {
    t = Ot(t);
    let e, s;
    return this.dataFormat === "channelsFirst" ? (t[2] != null && t[2] >= 0 ? e = t[2] + this.padding[0][0] + this.padding[0][1] : e = null, t[3] != null && t[3] >= 0 ? s = t[3] + this.padding[1][0] + this.padding[1][1] : s = null, [t[0], t[1], e, s]) : (t[1] != null && t[1] >= 0 ? e = t[1] + this.padding[0][0] + this.padding[0][1] : e = null, t[2] != null && t[2] >= 0 ? s = t[2] + this.padding[1][0] + this.padding[1][1] : s = null, [t[0], e, s, t[3]]);
  }
  call(t, e) {
    return A(() => QF(It(t), this.padding, this.dataFormat));
  }
  getConfig() {
    const t = {
      padding: this.padding,
      dataFormat: this.dataFormat
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
W0.className = "ZeroPadding2D";
Y(W0);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function Ip(n, t, e, s, r, o) {
  return A(() => {
    fe(r), WI(o), Gn(s), e == null && (e = [1, 1]), s == null && (s = "valid"), r == null && (r = as()), o == null && (o = "max"), n = i0(n, r);
    let i;
    const a = s === "same" ? "same" : "valid";
    return o === "max" ? i = fc(n, t, e, a) : i = lc(
      n,
      t,
      e,
      a
    ), r === "channelsFirst" && (i = kt(i, [0, 3, 1, 2])), i;
  });
}
function ES(n, t, e, s, r, o) {
  return A(() => {
    fe(r), WI(o), Gn(s), e == null && (e = [1, 1, 1]), s == null && (s = "valid"), r == null && (r = as()), o == null && (o = "max"), n = kS(n, r);
    let i;
    const a = s === "same" ? "same" : "valid";
    return o === "max" ? i = Eg(n, t, e, a) : i = sg(n, t, e, a), r === "channelsFirst" && (i = kt(i, [0, 4, 1, 2, 3])), i;
  });
}
class LS extends Et {
  constructor(t) {
    if (t.poolSize == null && (t.poolSize = 2), super(t), typeof t.poolSize == "number")
      this.poolSize = [t.poolSize];
    else if (Array.isArray(t.poolSize) && t.poolSize.length === 1 && typeof t.poolSize[0] == "number")
      this.poolSize = t.poolSize;
    else
      throw new O(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(t.poolSize)}`);
    if (Te(this.poolSize, "poolSize"), t.strides == null)
      this.strides = this.poolSize;
    else if (typeof t.strides == "number")
      this.strides = [t.strides];
    else if (Array.isArray(t.strides) && t.strides.length === 1 && typeof t.strides[0] == "number")
      this.strides = t.strides;
    else
      throw new O(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(t.strides)}`);
    Te(this.strides, "strides"), this.padding = t.padding == null ? "valid" : t.padding, Gn(this.padding), this.inputSpec = [new ye({ ndim: 3 })];
  }
  computeOutputShape(t) {
    t = Ot(t);
    const e = os(t[1], this.poolSize[0], this.padding, this.strides[0]);
    return [t[0], e, t[2]];
  }
  call(t, e) {
    return A(() => {
      this.invokeCallHook(t, e), t = Ec(It(t), 2);
      const s = this.poolingFunction(It(t), [this.poolSize[0], 1], [this.strides[0], 1], this.padding, "channelsLast");
      return $r(s, [2]);
    });
  }
  getConfig() {
    const t = {
      poolSize: this.poolSize,
      padding: this.padding,
      strides: this.strides
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
class V0 extends LS {
  constructor(t) {
    super(t);
  }
  poolingFunction(t, e, s, r, o) {
    return fe(o), Gn(r), Ip(t, e, s, r, o, "max");
  }
}
V0.className = "MaxPooling1D";
Y(V0);
class M0 extends LS {
  constructor(t) {
    super(t);
  }
  poolingFunction(t, e, s, r, o) {
    return fe(o), Gn(r), Ip(t, e, s, r, o, "avg");
  }
}
M0.className = "AveragePooling1D";
Y(M0);
class DS extends Et {
  constructor(t) {
    if (t.poolSize == null && (t.poolSize = [2, 2]), super(t), this.poolSize = Array.isArray(t.poolSize) ? t.poolSize : [t.poolSize, t.poolSize], t.strides == null)
      this.strides = this.poolSize;
    else if (Array.isArray(t.strides)) {
      if (t.strides.length !== 2)
        throw new O(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${t.strides.length}.`);
      this.strides = t.strides;
    } else
      this.strides = [t.strides, t.strides];
    Te(this.poolSize, "poolSize"), Te(this.strides, "strides"), this.padding = t.padding == null ? "valid" : t.padding, this.dataFormat = t.dataFormat == null ? "channelsLast" : t.dataFormat, fe(this.dataFormat), Gn(this.padding), this.inputSpec = [new ye({ ndim: 4 })];
  }
  computeOutputShape(t) {
    t = Ot(t);
    let e = this.dataFormat === "channelsFirst" ? t[2] : t[1], s = this.dataFormat === "channelsFirst" ? t[3] : t[2];
    return e = os(e, this.poolSize[0], this.padding, this.strides[0]), s = os(s, this.poolSize[1], this.padding, this.strides[1]), this.dataFormat === "channelsFirst" ? [t[0], t[1], e, s] : [t[0], e, s, t[3]];
  }
  call(t, e) {
    return A(() => (this.invokeCallHook(t, e), this.poolingFunction(It(t), this.poolSize, this.strides, this.padding, this.dataFormat)));
  }
  getConfig() {
    const t = {
      poolSize: this.poolSize,
      padding: this.padding,
      strides: this.strides,
      dataFormat: this.dataFormat
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
class P0 extends DS {
  constructor(t) {
    super(t);
  }
  poolingFunction(t, e, s, r, o) {
    return fe(o), Gn(r), Ip(t, e, s, r, o, "max");
  }
}
P0.className = "MaxPooling2D";
Y(P0);
class X0 extends DS {
  constructor(t) {
    super(t);
  }
  poolingFunction(t, e, s, r, o) {
    return fe(o), Gn(r), Ip(t, e, s, r, o, "avg");
  }
}
X0.className = "AveragePooling2D";
Y(X0);
class GS extends Et {
  constructor(t) {
    if (t.poolSize == null && (t.poolSize = [2, 2, 2]), super(t), this.poolSize = Array.isArray(t.poolSize) ? t.poolSize : [t.poolSize, t.poolSize, t.poolSize], t.strides == null)
      this.strides = this.poolSize;
    else if (Array.isArray(t.strides)) {
      if (t.strides.length !== 3)
        throw new O(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${t.strides.length}.`);
      this.strides = t.strides;
    } else
      this.strides = [t.strides, t.strides, t.strides];
    Te(this.poolSize, "poolSize"), Te(this.strides, "strides"), this.padding = t.padding == null ? "valid" : t.padding, this.dataFormat = t.dataFormat == null ? "channelsLast" : t.dataFormat, fe(this.dataFormat), Gn(this.padding), this.inputSpec = [new ye({ ndim: 5 })];
  }
  computeOutputShape(t) {
    t = Ot(t);
    let e = this.dataFormat === "channelsFirst" ? t[2] : t[1], s = this.dataFormat === "channelsFirst" ? t[3] : t[2], r = this.dataFormat === "channelsFirst" ? t[4] : t[3];
    return e = os(e, this.poolSize[0], this.padding, this.strides[0]), s = os(s, this.poolSize[1], this.padding, this.strides[1]), r = os(r, this.poolSize[2], this.padding, this.strides[2]), this.dataFormat === "channelsFirst" ? [t[0], t[1], e, s, r] : [t[0], e, s, r, t[4]];
  }
  call(t, e) {
    return A(() => (this.invokeCallHook(t, e), this.poolingFunction(It(t), this.poolSize, this.strides, this.padding, this.dataFormat)));
  }
  getConfig() {
    const t = {
      poolSize: this.poolSize,
      padding: this.padding,
      strides: this.strides,
      dataFormat: this.dataFormat
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
class _0 extends GS {
  constructor(t) {
    super(t);
  }
  poolingFunction(t, e, s, r, o) {
    return fe(o), Gn(r), ES(t, e, s, r, o, "max");
  }
}
_0.className = "MaxPooling3D";
Y(_0);
class K0 extends GS {
  constructor(t) {
    super(t);
  }
  poolingFunction(t, e, s, r, o) {
    return fe(o), Gn(r), ES(t, e, s, r, o, "avg");
  }
}
K0.className = "AveragePooling3D";
Y(K0);
class FS extends Et {
  constructor(t) {
    super(t), this.inputSpec = [new ye({ ndim: 3 })];
  }
  computeOutputShape(t) {
    return [t[0], t[2]];
  }
  call(t, e) {
    throw new wt();
  }
}
class Z0 extends FS {
  constructor(t) {
    super(t || {});
  }
  call(t, e) {
    return A(() => {
      const s = It(t);
      return ne(s, 1);
    });
  }
}
Z0.className = "GlobalAveragePooling1D";
Y(Z0);
class B0 extends FS {
  constructor(t) {
    super(t || {});
  }
  call(t, e) {
    return A(() => {
      const s = It(t);
      return Bn(s, 1);
    });
  }
}
B0.className = "GlobalMaxPooling1D";
Y(B0);
class OS extends Et {
  constructor(t) {
    super(t), this.dataFormat = t.dataFormat == null ? "channelsLast" : t.dataFormat, fe(this.dataFormat), this.inputSpec = [new ye({ ndim: 4 })];
  }
  computeOutputShape(t) {
    return t = t, this.dataFormat === "channelsLast" ? [t[0], t[3]] : [t[0], t[1]];
  }
  call(t, e) {
    throw new wt();
  }
  getConfig() {
    const t = { dataFormat: this.dataFormat }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
class H0 extends OS {
  call(t, e) {
    return A(() => {
      const s = It(t);
      return this.dataFormat === "channelsLast" ? ne(s, [1, 2]) : ne(s, [2, 3]);
    });
  }
}
H0.className = "GlobalAveragePooling2D";
Y(H0);
class U0 extends OS {
  call(t, e) {
    return A(() => {
      const s = It(t);
      return this.dataFormat === "channelsLast" ? Bn(s, [1, 2]) : Bn(s, [2, 3]);
    });
  }
}
U0.className = "GlobalMaxPooling2D";
Y(U0);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class AS extends Et {
  constructor(t) {
    super(t), this.layer = t.layer;
  }
  build(t) {
    this.built = !0;
  }
  get trainable() {
    return this.layer != null ? this.layer.trainable : !1;
  }
  set trainable(t) {
    this.layer != null && (this.layer.trainable = t);
  }
  get trainableWeights() {
    return this.layer.trainableWeights;
  }
  get nonTrainableWeights() {
    return this.layer.nonTrainableWeights;
  }
  get updates() {
    return this.layer._updates;
  }
  get losses() {
    return this.layer.losses;
  }
  getWeights() {
    return this.layer.getWeights();
  }
  setWeights(t) {
    this.layer.setWeights(t);
  }
  getConfig() {
    const t = {
      layer: {
        className: this.layer.getClassName(),
        config: this.layer.getConfig()
      }
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
  setFastWeightInitDuringBuild(t) {
    super.setFastWeightInitDuringBuild(t), this.layer != null && this.layer.setFastWeightInitDuringBuild(t);
  }
  static fromConfig(t, e, s = {}) {
    const r = e.layer, o = rs(r, s);
    delete e.layer;
    const i = { layer: o };
    return Object.assign(i, e), new t(i);
  }
}
class Y0 extends AS {
  constructor(t) {
    super(t), this.supportsMasking = !0;
  }
  build(t) {
    if (t = Ot(t), t.length < 3)
      throw new O(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(t)}`);
    this.inputSpec = [{ shape: t }];
    const e = [t[0]].concat(t.slice(2));
    this.layer.built || (this.layer.build(e), this.layer.built = !0), super.build(t);
  }
  computeOutputShape(t) {
    t = Ot(t);
    const e = [t[0]].concat(t.slice(2)), s = this.layer.computeOutputShape(e), r = t[1];
    return [s[0], r].concat(s.slice(1));
  }
  call(t, e) {
    return A(() => (t = It(t), $S((i, a) => [It(this.layer.call(i, e)), []], t, [], !1, null, null, !1, !0)[1]));
  }
}
Y0.className = "TimeDistributed";
Y(Y0);
function qF(n) {
  bo(QG, "BidirectionalMergeMode", n);
}
const tO = "concat";
class j0 extends AS {
  constructor(t) {
    super(t);
    const e = t.layer.getConfig(), s = {};
    s.className = t.layer.getClassName(), s.config = e, this.forwardLayer = rs(s), e.goBackwards = e.goBackwards !== !0;
    const r = {};
    if (r.className = t.layer.getClassName(), r.config = e, this.backwardLayer = rs(r), this.forwardLayer.name = "forward_" + this.forwardLayer.name, this.backwardLayer.name = "backward_" + this.backwardLayer.name, this.mergeMode = t.mergeMode === void 0 ? tO : t.mergeMode, qF(this.mergeMode), t.weights)
      throw new wt("weights support is not implemented for Bidirectional layer yet.");
    this._stateful = t.layer.stateful, this.returnSequences = t.layer.returnSequences, this.returnState = t.layer.returnState, this.supportsMasking = !0, this._trainable = !0, this.inputSpec = t.layer.inputSpec, this.numConstants = null;
  }
  get trainable() {
    return this._trainable;
  }
  set trainable(t) {
    this._trainable = t, this.forwardLayer != null && (this.forwardLayer.trainable = t), this.backwardLayer != null && (this.backwardLayer.trainable = t);
  }
  getWeights() {
    return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights());
  }
  setWeights(t) {
    const e = t.length, s = Math.floor(e / 2);
    this.forwardLayer.setWeights(t.slice(0, s)), this.backwardLayer.setWeights(t.slice(s));
  }
  computeOutputShape(t) {
    let e = this.forwardLayer.computeOutputShape(t);
    Array.isArray(e) && Array.isArray(e[0]) || (e = [e]), e = e;
    let s, r, o;
    return this.returnState && (o = e.slice(1)), s = e[0], s = s, this.mergeMode === "concat" ? (s[s.length - 1] *= 2, r = [s]) : this.mergeMode == null ? r = [s, s.slice()] : r = [s], this.returnState ? this.mergeMode == null ? r.concat(o).concat(o.slice()) : [s].concat(o).concat(o.slice()) : qe(r);
  }
  apply(t, e) {
    let s = e == null ? null : e.initialState, r = e == null ? null : e.constants;
    e == null && (e = {});
    const o = NS(t, s, r, this.numConstants);
    if (t = o.inputs, s = o.initialState, r = o.constants, Array.isArray(t) && (s = t.slice(1), t = t[0]), (s == null || s.length === 0) && r == null)
      return super.apply(t, e);
    const i = [], a = [];
    if (s != null) {
      const c = s.length;
      if (c % 2 > 0)
        throw new O("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");
      e.initialState = s, i.push(...s);
      const u = s.map((h) => new ye({ shape: h.shape }));
      this.forwardLayer.stateSpec = u.slice(0, c / 2), this.backwardLayer.stateSpec = u.slice(c / 2), a.push(...u);
    }
    if (r != null)
      throw new wt("Support for constants in Bidirectional layers is not implemented yet.");
    const l = i[0] instanceof ns;
    for (const c of i)
      if (c instanceof ns !== l)
        throw new O("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");
    if (l) {
      const c = [t].concat(i), u = this.inputSpec.concat(a), h = this.inputSpec;
      this.inputSpec = u;
      const d = super.apply(c, e);
      return this.inputSpec = h, d;
    } else
      return super.apply(t, e);
  }
  call(t, e) {
    return A(() => {
      const s = e.initialState;
      let r, o;
      if (s == null)
        r = this.forwardLayer.call(t, e), o = this.backwardLayer.call(t, e);
      else {
        const l = s.slice(0, s.length / 2), c = s.slice(s.length / 2);
        r = this.forwardLayer.call(t, Object.assign(e, { initialState: l })), o = this.backwardLayer.call(t, Object.assign(e, { initialState: c }));
      }
      let i;
      this.returnState && (Array.isArray(r) && (i = r.slice(1).concat(o.slice(1))), r = r[0], o = o[0]), this.returnSequences && (o = Dn(o, 1));
      let a;
      return this.mergeMode === "concat" ? a = Gy([r, o]) : this.mergeMode === "sum" ? a = U(r, o) : this.mergeMode === "ave" ? a = D(0.5, U(r, o)) : this.mergeMode === "mul" ? a = D(r, o) : this.mergeMode == null && (a = [r, o]), this.returnState ? this.mergeMode == null ? a.concat(i) : [a].concat(i) : a;
    });
  }
  resetStates(t) {
    this.forwardLayer.resetStates(), this.backwardLayer.resetStates();
  }
  build(t) {
    Hr(this.forwardLayer.name, () => {
      this.forwardLayer.build(t);
    }), Hr(this.backwardLayer.name, () => {
      this.backwardLayer.build(t);
    }), this.built = !0;
  }
  computeMask(t, e) {
    Array.isArray(e) && (e = e[0]);
    let s;
    if (this.returnSequences ? this.mergeMode == null ? s = [e, e] : s = e : this.mergeMode == null ? s = [null, null] : s = null, this.returnState) {
      const o = this.forwardLayer.states.map((i) => null);
      return Array.isArray(s) ? s.concat(o).concat(o) : [s].concat(o).concat(o);
    } else
      return s;
  }
  get trainableWeights() {
    return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights);
  }
  get nonTrainableWeights() {
    return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights);
  }
  setFastWeightInitDuringBuild(t) {
    super.setFastWeightInitDuringBuild(t), this.forwardLayer != null && this.forwardLayer.setFastWeightInitDuringBuild(t), this.backwardLayer != null && this.backwardLayer.setFastWeightInitDuringBuild(t);
  }
  getConfig() {
    const t = {
      mergeMode: this.mergeMode
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
  static fromConfig(t, e) {
    const s = rs(e.layer);
    if (delete e.layer, e.numConstants != null)
      throw new wt("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");
    const r = e;
    return r.layer = s, new t(r);
  }
}
j0.className = "Bidirectional";
Y(j0);
/**
 * @license
 * Copyright 2022 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class J0 extends Et {
  constructor(t) {
    super(t), this.scale = t.scale, t.offset ? this.offset = t.offset : this.offset = 0;
  }
  getConfig() {
    const t = {
      scale: this.scale,
      offset: this.offset
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
  call(t, e) {
    return A(() => (t = It(t), t.dtype !== "float32" && (t = Rc(t, "float32")), U(D(t, this.scale), this.offset)));
  }
}
J0.className = "Rescaling";
Y(J0);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function eO(n) {
  return new oa(n);
}
function nO(n) {
  return new s0(n);
}
function sO(n) {
  return new t0(n);
}
function rO(n) {
  return new e0(n);
}
function oO(n) {
  return new n0(n);
}
function iO(n) {
  return new o0(n);
}
function aO(n) {
  return new r0(n);
}
function lO(n) {
  return new Oc(n);
}
function cO(n) {
  return new la(n);
}
function uO(n) {
  return new a0(n);
}
function hO(n) {
  return new ca(n);
}
function dO(n) {
  return new l0(n);
}
function pO(n) {
  return new c0(n);
}
function fO(n) {
  return new u0(n);
}
function mO(n) {
  return new h0(n);
}
function gO(n) {
  return new d0(n);
}
function yO(n) {
  return new w0(n);
}
function bO(n) {
  return new b0(n);
}
function xO(n) {
  return new wp(n);
}
function wO(n) {
  return new y0(n);
}
function IO(n) {
  return new x0(n);
}
function SO(n) {
  return new I0(n);
}
function vO(n) {
  return new S0(n);
}
function CO(n) {
  return new v0(n);
}
function kO(n) {
  return new k0(n);
}
function TO(n) {
  return new T0(n);
}
function NO(n) {
  return new $0(n);
}
function $O(n) {
  return new L0(n);
}
function RO(n) {
  return new R0(n);
}
function EO(n) {
  return new E0(n);
}
function LO(n) {
  return new N0(n);
}
function DO(n) {
  return new D0(n);
}
function GO(n) {
  return new A0(n);
}
function FO(n) {
  return new z0(n);
}
function OO(n) {
  return new W0(n);
}
function Q0(n) {
  return new M0(n);
}
function AO(n) {
  return Q0(n);
}
function zO(n) {
  return Q0(n);
}
function q0(n) {
  return new X0(n);
}
function WO(n) {
  return q0(n);
}
function VO(n) {
  return q0(n);
}
function tb(n) {
  return new K0(n);
}
function MO(n) {
  return tb(n);
}
function PO(n) {
  return tb(n);
}
function XO(n) {
  return new Z0(n);
}
function _O(n) {
  return new H0(n);
}
function zS(n) {
  return new B0(n);
}
function WS(n) {
  return new U0(n);
}
function VS(n) {
  return new V0(n);
}
function MS(n) {
  return new P0(n);
}
function KO(n) {
  return new _0(n);
}
function ZO(n) {
  return new f0(n);
}
function BO(n) {
  return new yp(n);
}
function HO(n) {
  return new m0(n);
}
function UO(n) {
  return new zc(n);
}
function YO(n) {
  return new p0(n);
}
function jO(n) {
  return new gp(n);
}
function JO(n) {
  return new g0(n);
}
function QO(n) {
  return new xp(n);
}
function qO(n) {
  return new ds(n);
}
function tA(n) {
  return new bp(n);
}
function eA(n) {
  return new j0(n);
}
function nA(n) {
  return new Y0(n);
}
const sA = zS, rA = WS, oA = VS, iA = MS;
function aA(n) {
  return new G0(n);
}
function lA(n) {
  return new F0(n);
}
function cA(n) {
  return new O0(n);
}
function uA(n) {
  return new C0(n);
}
function hA(n) {
  return new J0(n);
}
const dA = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  inputLayer: eO,
  elu: nO,
  reLU: sO,
  leakyReLU: rO,
  prelu: oO,
  softmax: iO,
  thresholdedReLU: aO,
  conv1d: lO,
  conv2d: cO,
  conv2dTranspose: uO,
  conv3d: hO,
  conv3dTranspose: dO,
  separableConv2d: pO,
  cropping2D: fO,
  upSampling2d: mO,
  depthwiseConv2d: gO,
  activation: yO,
  dense: bO,
  dropout: xO,
  spatialDropout1d: wO,
  flatten: IO,
  repeatVector: SO,
  reshape: vO,
  permute: CO,
  embedding: kO,
  add: TO,
  average: NO,
  concatenate: $O,
  maximum: RO,
  minimum: EO,
  multiply: LO,
  dot: DO,
  batchNormalization: GO,
  layerNormalization: FO,
  zeroPadding2d: OO,
  averagePooling1d: Q0,
  avgPool1d: AO,
  avgPooling1d: zO,
  averagePooling2d: q0,
  avgPool2d: WO,
  avgPooling2d: VO,
  averagePooling3d: tb,
  avgPool3d: MO,
  avgPooling3d: PO,
  globalAveragePooling1d: XO,
  globalAveragePooling2d: _O,
  globalMaxPooling1d: zS,
  globalMaxPooling2d: WS,
  maxPooling1d: VS,
  maxPooling2d: MS,
  maxPooling3d: KO,
  gru: ZO,
  gruCell: BO,
  lstm: HO,
  lstmCell: UO,
  simpleRNN: YO,
  simpleRNNCell: jO,
  convLstm2d: JO,
  convLstm2dCell: QO,
  rnn: qO,
  stackedRNNCells: tA,
  bidirectional: eA,
  timeDistributed: nA,
  globalMaxPool1d: sA,
  globalMaxPool2d: rA,
  maxPool1d: oA,
  maxPool2d: iA,
  Layer: Et,
  RNN: ds,
  RNNCell: Ac,
  input: uS,
  gaussianNoise: aA,
  gaussianDropout: lA,
  alphaDropout: cA,
  masking: uA,
  rescaling: hA
}, Symbol.toStringTag, { value: "Module" }));
function pA(n, t) {
  return Uy(n, t);
}
function fA(n, t) {
  return eS(n, t);
}
function mA(n, t) {
  return nS(n, t);
}
function gA(n, t) {
  return Yy(n, t);
}
function yA(n, t) {
  return jy(n, t);
}
function bA(n, t) {
  return tS(n, t);
}
function xA(n, t) {
  return rF(n, t);
}
function wA(n, t) {
  return Hy(n, t);
}
function IA(n, t) {
  return dp(n, t);
}
function SA(n, t) {
  return ia(n, t);
}
function vA(n, t) {
  return ia(n, t);
}
function CA(n, t) {
  return ia(n, t);
}
function kA(n, t) {
  return xo(n, t);
}
function TA(n, t) {
  return xo(n, t);
}
function NA(n, t) {
  return xo(n, t);
}
const $A = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  binaryAccuracy: pA,
  binaryCrossentropy: fA,
  sparseCategoricalAccuracy: mA,
  categoricalAccuracy: gA,
  categoricalCrossentropy: yA,
  precision: bA,
  recall: xA,
  cosineProximity: wA,
  meanAbsoluteError: IA,
  meanAbsolutePercentageError: SA,
  MAPE: vA,
  mape: CA,
  meanSquaredError: kA,
  MSE: TA,
  mse: NA
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const RA = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  modelFromJSON: FF
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function EA(n) {
  return new Fc(n);
}
function LA(n) {
  return XF(n);
}
function DA(n) {
  return _F(n);
}
const GA = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  l1l2: EA,
  l1: LA,
  l2: DA
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class PS extends Ko {
  constructor() {
    super(...arguments), this.model = null;
  }
  setModel(t) {
    if (!(t instanceof As))
      throw new Error("model must be a LayersModel, not some other Container");
    this.model = t;
  }
}
function qc(n, t) {
  return n < t;
}
function px(n, t) {
  return n > t;
}
class XS extends PS {
  constructor(t) {
    if (super(), t == null && (t = {}), t.restoreBestWeights)
      throw new wt("restoreBestWeights = True is not implemented in EarlyStopping yet.");
    this.monitor = t.monitor || "val_loss", this.minDelta = Math.abs(t.minDelta || 0), this.patience = t.patience || 0, this.verbose = t.verbose || 0, this.mode = t.mode || "auto", this.baseline = t.baseline, ["auto", "min", "max"].indexOf(this.mode) === -1 && (console.warn(`EarlyStopping mode '${this.mode}' is invalid. Falling back to mode 'auto'.`), this.mode = "auto"), this.mode === "min" ? this.monitorFunc = qc : this.mode === "max" ? this.monitorFunc = px : this.monitor.indexOf("acc") !== -1 ? this.monitorFunc = px : this.monitorFunc = qc, this.monitorFunc === qc && (this.minDelta *= -1);
  }
  async onTrainBegin(t) {
    this.wait = 0, this.stoppedEpoch = 0, this.baseline != null ? this.best = this.baseline : this.best = this.monitorFunc === qc ? 1 / 0 : -1 / 0;
  }
  async onEpochEnd(t, e) {
    await or(e);
    const s = this.getMonitorValue(e);
    s != null && (this.monitorFunc(s - this.minDelta, this.best) ? (this.best = s, this.wait = 0) : (this.wait++, this.wait >= this.patience && (this.stoppedEpoch = t, this.model.stopTraining = !0)));
  }
  async onTrainEnd(t) {
    this.stoppedEpoch > 0 && this.verbose && console.log(`Epoch ${this.stoppedEpoch}: early stopping.`);
  }
  getMonitorValue(t) {
    t == null && (t = {});
    const e = t[this.monitor];
    return e == null && console.warn(`Metric for EarlyStopping ${this.monitor} is not available. Available metrics are: ${Object.keys(t)}`), e;
  }
}
function FA(n) {
  return new XS(n);
}
const OA = { earlyStopping: FA };
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const AA = V();
AA.registerFlag("KEEP_INTERMEDIATE_TENSORS", () => !1, (n) => {
  n && console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.");
});
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
var Wn;
(function(n) {
  n[n.DT_INVALID = 0] = "DT_INVALID", n[n.DT_FLOAT = 1] = "DT_FLOAT", n[n.DT_DOUBLE = 2] = "DT_DOUBLE", n[n.DT_INT32 = 3] = "DT_INT32", n[n.DT_UINT8 = 4] = "DT_UINT8", n[n.DT_INT16 = 5] = "DT_INT16", n[n.DT_INT8 = 6] = "DT_INT8", n[n.DT_STRING = 7] = "DT_STRING", n[n.DT_COMPLEX64 = 8] = "DT_COMPLEX64", n[n.DT_INT64 = 9] = "DT_INT64", n[n.DT_BOOL = 10] = "DT_BOOL", n[n.DT_QINT8 = 11] = "DT_QINT8", n[n.DT_QUINT8 = 12] = "DT_QUINT8", n[n.DT_QINT32 = 13] = "DT_QINT32", n[n.DT_BFLOAT16 = 14] = "DT_BFLOAT16", n[n.DT_QINT16 = 15] = "DT_QINT16", n[n.DT_QUINT16 = 16] = "DT_QUINT16", n[n.DT_UINT16 = 17] = "DT_UINT16", n[n.DT_COMPLEX128 = 18] = "DT_COMPLEX128", n[n.DT_HALF = 19] = "DT_HALF", n[n.DT_RESOURCE = 20] = "DT_RESOURCE", n[n.DT_VARIANT = 21] = "DT_VARIANT", n[n.DT_UINT32 = 22] = "DT_UINT32", n[n.DT_UINT64 = 23] = "DT_UINT64", n[n.DT_FLOAT_REF = 101] = "DT_FLOAT_REF", n[n.DT_DOUBLE_REF = 102] = "DT_DOUBLE_REF", n[n.DT_INT32_REF = 103] = "DT_INT32_REF", n[n.DT_UINT8_REF = 104] = "DT_UINT8_REF", n[n.DT_INT16_REF = 105] = "DT_INT16_REF", n[n.DT_INT8_REF = 106] = "DT_INT8_REF", n[n.DT_STRING_REF = 107] = "DT_STRING_REF", n[n.DT_COMPLEX64_REF = 108] = "DT_COMPLEX64_REF", n[n.DT_INT64_REF = 109] = "DT_INT64_REF", n[n.DT_BOOL_REF = 110] = "DT_BOOL_REF", n[n.DT_QINT8_REF = 111] = "DT_QINT8_REF", n[n.DT_QUINT8_REF = 112] = "DT_QUINT8_REF", n[n.DT_QINT32_REF = 113] = "DT_QINT32_REF", n[n.DT_BFLOAT16_REF = 114] = "DT_BFLOAT16_REF", n[n.DT_QINT16_REF = 115] = "DT_QINT16_REF", n[n.DT_QUINT16_REF = 116] = "DT_QUINT16_REF", n[n.DT_UINT16_REF = 117] = "DT_UINT16_REF", n[n.DT_COMPLEX128_REF = 118] = "DT_COMPLEX128_REF", n[n.DT_HALF_REF = 119] = "DT_HALF_REF", n[n.DT_RESOURCE_REF = 120] = "DT_RESOURCE_REF", n[n.DT_VARIANT_REF = 121] = "DT_VARIANT_REF", n[n.DT_UINT32_REF = 122] = "DT_UINT32_REF", n[n.DT_UINT64_REF = 123] = "DT_UINT64_REF";
})(Wn || (Wn = {}));
var fx;
(function(n) {
  (function(t) {
    t[t.LEGACY = 0] = "LEGACY", t[t.V1 = 1] = "V1", t[t.V2 = 2] = "V2";
  })(n.CheckpointFormatVersion || (n.CheckpointFormatVersion = {}));
})(fx || (fx = {}));
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const eb = {};
function zA(n, t) {
  const e = {
    tfOpName: n,
    category: "custom",
    inputs: [],
    attrs: [],
    customExecutor: t
  };
  eb[n] = e;
}
function _S(n) {
  return eb[n];
}
function WA(n) {
  delete eb[n];
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function I(n, t, e, s, r) {
  const o = t.inputParams[n];
  if (o && o.inputIndexStart !== void 0) {
    const a = o.inputIndexStart, l = o.inputIndexEnd === 0 ? void 0 : o.inputIndexEnd === void 0 ? a + 1 : o.inputIndexEnd;
    if (o.type === "tensor")
      return Ze(t.inputNames[o.inputIndexStart], e, s, r);
    if (o.type === "tensors")
      return t.inputNames.slice(a, l).map((d) => Ze(d, e, s, r));
    const c = Ze(t.inputNames.slice(a)[0], e, s, r), u = c.dataSync();
    return o.type === "number" ? u[0] : En(c.shape, u);
  }
  const i = t.attrParams[n];
  return i && i.value;
}
function Ze(n, t, e, s) {
  const [r, o] = un(n);
  if (s != null) {
    const a = s.getHashTableHandleByName(r);
    if (a != null)
      return a;
  }
  const i = e.currentContextIds.find((a) => !!t[Mu(r, a)]);
  return i !== void 0 ? t[Mu(r, i)][o] : void 0;
}
function VA(n, t, e) {
  return t[Mu(n, e.currentContextId)];
}
function bs(n, t) {
  const [e, s, r] = un(n);
  return [
    Mu(e, t && t.currentContextId),
    s,
    r
  ];
}
function Mu(n, t) {
  return t ? `${n}-${t}` : n;
}
function un(n) {
  const t = n.split(":");
  if (t.length === 1)
    return [n, 0, void 0];
  const e = t[0], s = t.length === 3 ? t[1] : void 0, r = Number(t[t.length - 1]);
  return [e, r, s];
}
function gu(n, t, e) {
  let s = I("pad", n, t, e);
  if (s === "explicit") {
    s = I("explicitPaddings", n, t, e);
    const r = [[0, 0], [0, 0], [0, 0], [0, 0]];
    for (let o = 0; o < 4; o++)
      r[o][0] = s[o * 2], r[o][1] = s[o * 2 + 1];
    return r;
  }
  return s;
}
function Ds(n) {
  return n.kept ? n : ws(n);
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const MA = [
  {
    tfOpName: "Add",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "AddV2",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "AddN",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        end: 0,
        name: "tensors",
        type: "tensors"
      }
    ]
  },
  {
    tfOpName: "BiasAdd",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Sub",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "RealDiv",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Div",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "DivNoNan",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "FloorDiv",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Mul",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Maximum",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Minimum",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Pow",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "SquaredDifference",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Mod",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "FloorMod",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  }
], PA = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: MA
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const XA = [
  {
    tfOpName: "Abs",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Acos",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Asin",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Atan",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Atan2",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "y",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Ceil",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "ClipByValue",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "clipValueMin",
        type: "number"
      },
      {
        start: 2,
        name: "clipValueMax",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Complex",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "real",
        type: "tensor"
      },
      {
        start: 1,
        name: "imag",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "ComplexAbs",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Cos",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Cosh",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Elu",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Exp",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Floor",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Log",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Imag",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "Tout",
        name: "outputType",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Neg",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Real",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "Tout",
        name: "outputType",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Prelu",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "alpha",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Relu",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Relu6",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Selu",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Sigmoid",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Sin",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Sinh",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Sqrt",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Rsqrt",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Square",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Tan",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Tanh",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Sign",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Round",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Expm1",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Log1p",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Reciprocal",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Softplus",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Asinh",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Acosh",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Atanh",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Erf",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Prod",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axes",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "keep_dims",
        name: "keepDims",
        type: "bool",
        notSupported: !0
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "LeakyRelu",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "alpha",
        name: "alpha",
        type: "number",
        defaultValue: 0.2
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "IsNan",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  }
], _A = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: XA
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const KA = [
  {
    tfOpName: "EmptyTensorList",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "elementShape",
        type: "shape"
      },
      {
        start: 1,
        name: "maxNumElements",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "element_dtype",
        name: "elementDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "LoopCond",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "pred",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "Switch",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "data",
        type: "tensor"
      },
      {
        start: 1,
        name: "pred",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "Merge",
    category: "control",
    inputs: [
      {
        start: 0,
        end: 0,
        name: "tensors",
        type: "tensors"
      }
    ]
  },
  {
    tfOpName: "Enter",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensor",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "frame_name",
        name: "frameName",
        type: "string"
      },
      {
        tfName: "is_constant",
        name: "isConstant",
        type: "bool"
      }
    ]
  },
  {
    tfOpName: "Exit",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensor",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "NextIteration",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensor",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "TensorArrayV3",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "size",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "dtype",
        name: "dtype",
        type: "dtype"
      },
      {
        tfName: "element_shape",
        name: "elementShape",
        type: "shape"
      },
      {
        tfName: "dynamic_size",
        name: "dynamicSize",
        type: "bool"
      },
      {
        tfName: "clear_after_read",
        name: "clearAfterRead",
        type: "bool"
      },
      {
        tfName: "identical_element_shapes",
        name: "identicalElementShapes",
        type: "bool"
      },
      {
        tfName: "tensor_array_name",
        name: "name",
        type: "string"
      }
    ]
  },
  {
    tfOpName: "TensorArrayWriteV3",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorArrayId",
        type: "tensor"
      },
      {
        start: 1,
        name: "index",
        type: "number"
      },
      {
        start: 2,
        name: "tensor",
        type: "tensor"
      },
      {
        start: 3,
        name: "flowIn",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "TensorArrayReadV3",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorArrayId",
        type: "tensor"
      },
      {
        start: 1,
        name: "index",
        type: "number"
      },
      {
        start: 2,
        name: "flowIn",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "dtype",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "TensorArrayGatherV3",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorArrayId",
        type: "tensor"
      },
      {
        start: 1,
        name: "indices",
        type: "number[]"
      },
      {
        start: 2,
        name: "flowIn",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "dtype",
        name: "dtype",
        type: "dtype"
      },
      {
        tfName: "element_shape",
        name: "elementShape",
        type: "shape"
      }
    ]
  },
  {
    tfOpName: "TensorArrayScatterV3",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorArrayId",
        type: "tensor"
      },
      {
        start: 1,
        name: "indices",
        type: "number[]"
      },
      {
        start: 2,
        name: "tensor",
        type: "tensor"
      },
      {
        start: 3,
        name: "flowIn",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorArrayConcatV3",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorArrayId",
        type: "tensor"
      },
      {
        start: 1,
        name: "flowIn",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "dtype",
        name: "dtype",
        type: "dtype"
      },
      {
        tfName: "element_shape_except0",
        name: "elementShapeExcept0",
        type: "shape",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "TensorArraySplitV3",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorArrayId",
        type: "tensor"
      },
      {
        start: 1,
        name: "tensor",
        type: "tensor"
      },
      {
        start: 2,
        name: "lengths",
        type: "number[]"
      },
      {
        start: 3,
        name: "flowIn",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorArraySizeV3",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorArrayId",
        type: "tensor"
      },
      {
        start: 1,
        name: "flowIn",
        type: "number"
      }
    ]
  },
  {
    tfOpName: "TensorArrayCloseV3",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorArrayId",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "StatelessIf",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "cond",
        type: "tensor"
      },
      {
        start: 1,
        end: 0,
        name: "args",
        type: "tensors"
      }
    ],
    attrs: [
      {
        tfName: "then_branch",
        name: "thenBranch",
        type: "func"
      },
      {
        tfName: "else_branch",
        name: "elseBranch",
        type: "func"
      }
    ]
  },
  {
    tfOpName: "If",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "cond",
        type: "tensor"
      },
      {
        start: 1,
        end: 0,
        name: "args",
        type: "tensors"
      }
    ],
    attrs: [
      {
        tfName: "then_branch",
        name: "thenBranch",
        type: "func"
      },
      {
        tfName: "else_branch",
        name: "elseBranch",
        type: "func"
      }
    ]
  },
  {
    tfOpName: "StatelessWhile",
    category: "control",
    inputs: [
      {
        start: 0,
        end: 0,
        name: "args",
        type: "tensors"
      }
    ],
    attrs: [
      {
        tfName: "cond",
        name: "cond",
        type: "func"
      },
      {
        tfName: "body",
        name: "body",
        type: "func"
      }
    ]
  },
  {
    tfOpName: "While",
    category: "control",
    inputs: [
      {
        start: 0,
        end: 0,
        name: "args",
        type: "tensors"
      }
    ],
    attrs: [
      {
        tfName: "cond",
        name: "cond",
        type: "func"
      },
      {
        tfName: "body",
        name: "body",
        type: "func"
      }
    ]
  },
  {
    tfOpName: "TensorListScatter",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensor",
        type: "tensor"
      },
      {
        start: 1,
        name: "indices",
        type: "number[]"
      },
      {
        start: 2,
        name: "elementShape",
        type: "shape"
      }
    ],
    attrs: [
      {
        tfName: "element_dtype",
        name: "elementDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorListScatterV2",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensor",
        type: "tensor"
      },
      {
        start: 1,
        name: "indices",
        type: "number[]"
      },
      {
        start: 2,
        name: "elementShape",
        type: "shape"
      },
      {
        start: 3,
        name: "numElements",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "element_dtype",
        name: "elementDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorListGather",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorListId",
        type: "tensor"
      },
      {
        start: 1,
        name: "indices",
        type: "number[]"
      },
      {
        start: 2,
        name: "elementShape",
        type: "shape"
      }
    ],
    attrs: [
      {
        tfName: "element_dtype",
        name: "elementDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorListGetItem",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorListId",
        type: "tensor"
      },
      {
        start: 1,
        name: "index",
        type: "number"
      },
      {
        start: 2,
        name: "elementShape",
        type: "shape"
      }
    ],
    attrs: [
      {
        tfName: "element_dtype",
        name: "elementDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorListSetItem",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorListId",
        type: "tensor"
      },
      {
        start: 1,
        name: "index",
        type: "number"
      },
      {
        start: 2,
        name: "tensor",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "element_dtype",
        name: "elementDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorListReserve",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "elementShape",
        type: "shape"
      },
      {
        start: 1,
        name: "numElements",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "element_dtype",
        name: "elementDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorListFromTensor",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensor",
        type: "tensor"
      },
      {
        start: 1,
        name: "elementShape",
        type: "shape"
      }
    ],
    attrs: [
      {
        tfName: "element_dtype",
        name: "elementDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorListStack",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorListId",
        type: "tensor"
      },
      {
        start: 1,
        name: "elementShape",
        type: "shape"
      }
    ],
    attrs: [
      {
        tfName: "element_dtype",
        name: "elementDType",
        type: "dtype"
      },
      {
        tfName: "num_elements",
        name: "numElements",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorListSplit",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensor",
        type: "tensor"
      },
      {
        start: 1,
        name: "elementShape",
        type: "shape"
      },
      {
        start: 2,
        name: "lengths",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "element_dtype",
        name: "elementDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorListConcat",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorListId",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "element_shape",
        name: "elementShape",
        type: "shape"
      },
      {
        tfName: "element_dtype",
        name: "elementDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorListConcatV2",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorListId",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "element_shape",
        name: "elementShape",
        type: "shape"
      },
      {
        tfName: "element_dtype",
        name: "elementDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorListPopBack",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorListId",
        type: "tensor"
      },
      {
        start: 1,
        name: "elementShape",
        type: "shape"
      }
    ],
    attrs: [
      {
        tfName: "element_dtype",
        name: "elementDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorListPushBack",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorListId",
        type: "tensor"
      },
      {
        start: 1,
        name: "tensor",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "element_dtype",
        name: "elementDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorListLength",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorListId",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "TensorListResize",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorListId",
        type: "tensor"
      },
      {
        start: 1,
        name: "size",
        type: "number"
      }
    ]
  }
], ZA = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: KA
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const BA = [
  {
    tfOpName: "AvgPool",
    category: "convolution",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "strides",
        name: "strides",
        type: "number[]"
      },
      {
        tfName: "padding",
        name: "pad",
        type: "string"
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        notSupported: !0
      },
      {
        tfName: "ksize",
        name: "kernelSize",
        type: "number[]"
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "MaxPool",
    category: "convolution",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "strides",
        name: "strides",
        type: "number[]"
      },
      {
        tfName: "padding",
        name: "pad",
        type: "string"
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        notSupported: !0
      },
      {
        tfName: "ksize",
        name: "kernelSize",
        type: "number[]"
      },
      {
        tfName: "explicit_paddings",
        name: "explicitPaddings",
        type: "number[]",
        defaultValue: [],
        notSupported: !0
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "MaxPoolWithArgmax",
    category: "convolution",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "strides",
        name: "strides",
        type: "number[]"
      },
      {
        tfName: "padding",
        name: "pad",
        type: "string"
      },
      {
        tfName: "ksize",
        name: "kernelSize",
        type: "number[]"
      },
      {
        tfName: "include_batch_in_index",
        name: "includeBatchInIndex",
        type: "bool"
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "AvgPool3D",
    category: "convolution",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "strides",
        name: "strides",
        type: "number[]"
      },
      {
        tfName: "padding",
        name: "pad",
        type: "string"
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        notSupported: !0
      },
      {
        tfName: "ksize",
        name: "kernelSize",
        type: "number[]"
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "MaxPool3D",
    category: "convolution",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "strides",
        name: "strides",
        type: "number[]"
      },
      {
        tfName: "padding",
        name: "pad",
        type: "string"
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        notSupported: !0
      },
      {
        tfName: "ksize",
        name: "kernelSize",
        type: "number[]"
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Conv1D",
    category: "convolution",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "filter",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "stride",
        name: "stride",
        type: "number"
      },
      {
        tfName: "padding",
        name: "pad",
        type: "string"
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        defaultValue: "NWC"
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "dilation",
        name: "dilation",
        type: "number",
        defaultValue: 1
      }
    ]
  },
  {
    tfOpName: "Conv2D",
    category: "convolution",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "filter",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "strides",
        name: "strides",
        type: "number[]"
      },
      {
        tfName: "padding",
        name: "pad",
        type: "string"
      },
      {
        tfName: "useCudnnOnGpu",
        name: "useCudnnOnGpu",
        type: "bool"
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        defaultValue: "NHWC"
      },
      {
        tfName: "explicit_paddings",
        name: "explicitPaddings",
        type: "number[]",
        defaultValue: []
      },
      {
        tfName: "dilations",
        name: "dilations",
        type: "number[]"
      }
    ]
  },
  {
    tfOpName: "_FusedConv2D",
    category: "convolution",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "filter",
        type: "tensor"
      },
      {
        start: 2,
        end: 0,
        name: "args",
        type: "tensors"
      }
    ],
    attrs: [
      {
        tfName: "num_args",
        name: "numArgs",
        type: "number"
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "strides",
        name: "strides",
        type: "number[]"
      },
      {
        tfName: "padding",
        name: "pad",
        type: "string"
      },
      {
        tfName: "explicit_paddings",
        name: "explicitPaddings",
        type: "number[]",
        defaultValue: []
      },
      {
        tfName: "use_cudnn_on_gpu",
        name: "useCudnnOnGpu",
        type: "bool",
        defaultValue: !0
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        defaultValue: "NHWC"
      },
      {
        tfName: "dilations",
        name: "dilations",
        type: "number[]",
        defaultValue: [
          1,
          1,
          1,
          1
        ]
      },
      {
        tfName: "fused_ops",
        name: "fusedOps",
        type: "string[]",
        defaultValue: []
      },
      {
        tfName: "epsilon",
        name: "epsilon",
        type: "number",
        defaultValue: 1e-4
      },
      {
        tfName: "leakyrelu_alpha",
        name: "leakyreluAlpha",
        type: "number",
        defaultValue: 0.2
      }
    ]
  },
  {
    tfOpName: "Conv2DBackpropInput",
    category: "convolution",
    inputs: [
      {
        start: 2,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "filter",
        type: "tensor"
      },
      {
        start: 0,
        name: "outputShape",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "strides",
        name: "strides",
        type: "number[]"
      },
      {
        tfName: "padding",
        name: "pad",
        type: "string"
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        notSupported: !0
      },
      {
        tfName: "explicit_paddings",
        name: "explicitPaddings",
        type: "number[]",
        defaultValue: []
      },
      {
        tfName: "dilations",
        name: "dilations",
        type: "number[]",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "DepthwiseConv2d",
    category: "convolution",
    inputs: [
      {
        start: 0,
        name: "input",
        type: "tensor"
      },
      {
        start: 1,
        name: "filter",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "strides",
        name: "strides",
        type: "number[]"
      },
      {
        tfName: "padding",
        name: "pad",
        type: "string"
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        defaultValue: "NHWC"
      },
      {
        tfName: "explicit_paddings",
        name: "explicitPaddings",
        type: "number[]",
        defaultValue: []
      },
      {
        tfName: "dilations",
        name: "dilations",
        type: "number[]"
      }
    ]
  },
  {
    tfOpName: "DepthwiseConv2dNative",
    category: "convolution",
    inputs: [
      {
        start: 0,
        name: "input",
        type: "tensor"
      },
      {
        start: 1,
        name: "filter",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "strides",
        name: "strides",
        type: "number[]"
      },
      {
        tfName: "padding",
        name: "pad",
        type: "string"
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        defaultValue: "NHWC"
      },
      {
        tfName: "explicit_paddings",
        name: "explicitPaddings",
        type: "number[]",
        defaultValue: []
      },
      {
        tfName: "dilations",
        name: "dilations",
        type: "number[]"
      }
    ]
  },
  {
    tfOpName: "FusedDepthwiseConv2dNative",
    category: "convolution",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "filter",
        type: "tensor"
      },
      {
        start: 2,
        end: 0,
        name: "args",
        type: "tensors"
      }
    ],
    attrs: [
      {
        tfName: "num_args",
        name: "numArgs",
        type: "number"
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "strides",
        name: "strides",
        type: "number[]"
      },
      {
        tfName: "padding",
        name: "pad",
        type: "string"
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        defaultValue: "NHWC"
      },
      {
        tfName: "dilations",
        name: "dilations",
        type: "number[]",
        defaultValue: [
          1,
          1,
          1,
          1
        ]
      },
      {
        tfName: "fused_ops",
        name: "fusedOps",
        type: "string[]",
        defaultValue: []
      },
      {
        tfName: "explicit_paddings",
        name: "explicitPaddings",
        type: "number[]",
        defaultValue: []
      }
    ]
  },
  {
    tfOpName: "Conv3D",
    category: "convolution",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "filter",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "strides",
        name: "strides",
        type: "number[]"
      },
      {
        tfName: "padding",
        name: "pad",
        type: "string"
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        defaultValue: "NHWC"
      },
      {
        tfName: "dilations",
        name: "dilations",
        type: "number[]"
      }
    ]
  },
  {
    tfOpName: "Dilation2D",
    category: "convolution",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "filter",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "strides",
        name: "strides",
        type: "number[]"
      },
      {
        tfName: "rates",
        name: "dilations",
        type: "number[]"
      },
      {
        tfName: "padding",
        name: "pad",
        type: "string"
      }
    ]
  }
], HA = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: BA
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const UA = [
  {
    tfOpName: "Fill",
    category: "creation",
    inputs: [
      {
        start: 0,
        name: "shape",
        type: "number[]"
      },
      {
        start: 1,
        name: "value",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "LinSpace",
    category: "creation",
    inputs: [
      {
        start: 0,
        name: "start",
        type: "number"
      },
      {
        start: 1,
        name: "stop",
        type: "number"
      },
      {
        start: 2,
        name: "num",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "OneHot",
    category: "creation",
    inputs: [
      {
        start: 0,
        name: "indices",
        type: "tensor"
      },
      {
        start: 1,
        name: "depth",
        type: "number"
      },
      {
        start: 2,
        name: "onValue",
        type: "number",
        defaultValue: 1
      },
      {
        start: 3,
        name: "offValue",
        type: "number",
        defaultValue: 0
      }
    ],
    attrs: [
      {
        tfName: "axis",
        name: "axis",
        type: "number",
        notSupported: !0
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "Ones",
    category: "creation",
    inputs: [
      {
        start: 0,
        name: "shape",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "OnesLike",
    category: "creation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "dtype",
        name: "dtype",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "RandomStandardNormal",
    category: "creation",
    inputs: [
      {
        start: 0,
        name: "shape",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "seed",
        name: "seed",
        type: "number",
        defaultValue: 0
      },
      {
        tfName: "seed2",
        name: "seed2",
        type: "number",
        defaultValue: 0,
        notSupported: !0
      },
      {
        tfName: "dtype",
        name: "dtype",
        type: "dtype"
      },
      {
        tfName: "T",
        name: "T",
        type: "number",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "RandomUniform",
    category: "creation",
    inputs: [
      {
        start: 0,
        name: "shape",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "minval",
        name: "minval",
        type: "number",
        defaultValue: 0
      },
      {
        tfName: "maxval",
        name: "maxval",
        type: "number",
        defaultValue: 1
      },
      {
        tfName: "dtype",
        name: "dtype",
        type: "dtype"
      },
      {
        tfName: "seed",
        name: "seed",
        type: "number",
        defaultValue: 0
      },
      {
        tfName: "seed2",
        name: "seed2",
        type: "number",
        defaultValue: 0,
        notSupported: !0
      },
      {
        tfName: "T",
        name: "T",
        type: "number",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Range",
    category: "creation",
    inputs: [
      {
        start: 0,
        name: "start",
        type: "number"
      },
      {
        start: 1,
        name: "stop",
        type: "number"
      },
      {
        start: 2,
        name: "step",
        type: "number",
        defaultValue: 0
      }
    ],
    attrs: [
      {
        tfName: "Tidx",
        name: "dtype",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TruncatedNormal",
    category: "creation",
    inputs: [
      {
        start: 0,
        name: "shape",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "means",
        name: "mean",
        type: "number",
        defaultValue: 0
      },
      {
        tfName: "stddev",
        name: "stdDev",
        type: "number",
        defaultValue: 1
      },
      {
        tfName: "seed",
        name: "seed",
        type: "number"
      },
      {
        tfName: "seed2",
        name: "seed2",
        type: "number",
        defaultValue: 0,
        notSupported: !0
      },
      {
        tfName: "dtype",
        name: "dtype",
        type: "dtype"
      },
      {
        tfName: "T",
        name: "T",
        type: "number",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Zeros",
    category: "creation",
    inputs: [
      {
        start: 0,
        name: "shape",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "ZerosLike",
    category: "creation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "Multinomial",
    category: "creation",
    inputs: [
      {
        start: 0,
        name: "logits",
        type: "tensor"
      },
      {
        start: 1,
        name: "numSamples",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "seed",
        name: "seed",
        type: "number"
      },
      {
        tfName: "seed2",
        name: "seed2",
        type: "number"
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype"
      },
      {
        tfName: "output_dtype",
        name: "output_dtype",
        type: "dtype"
      }
    ]
  }
], YA = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: UA
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const jA = [
  {
    tfOpName: "NonMaxSuppressionV2",
    category: "dynamic",
    inputs: [
      {
        start: 0,
        name: "boxes",
        type: "tensor"
      },
      {
        start: 1,
        name: "scores",
        type: "tensor"
      },
      {
        start: 2,
        name: "maxOutputSize",
        type: "number"
      },
      {
        start: 3,
        name: "iouThreshold",
        type: "number"
      }
    ]
  },
  {
    tfOpName: "NonMaxSuppressionV3",
    category: "dynamic",
    inputs: [
      {
        start: 0,
        name: "boxes",
        type: "tensor"
      },
      {
        start: 1,
        name: "scores",
        type: "tensor"
      },
      {
        start: 2,
        name: "maxOutputSize",
        type: "number"
      },
      {
        start: 3,
        name: "iouThreshold",
        type: "number"
      },
      {
        start: 4,
        name: "scoreThreshold",
        type: "number"
      }
    ]
  },
  {
    tfOpName: "NonMaxSuppressionV4",
    category: "dynamic",
    inputs: [
      {
        start: 0,
        name: "boxes",
        type: "tensor"
      },
      {
        start: 1,
        name: "scores",
        type: "tensor"
      },
      {
        start: 2,
        name: "maxOutputSize",
        type: "number"
      },
      {
        start: 3,
        name: "iouThreshold",
        type: "number"
      },
      {
        start: 4,
        name: "scoreThreshold",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "T_threshold",
        name: "threshold",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "pad_to_max_output_size",
        name: "padToMaxOutputSize",
        type: "bool"
      }
    ]
  },
  {
    tfOpName: "NonMaxSuppressionV5",
    category: "dynamic",
    inputs: [
      {
        start: 0,
        name: "boxes",
        type: "tensor"
      },
      {
        start: 1,
        name: "scores",
        type: "tensor"
      },
      {
        start: 2,
        name: "maxOutputSize",
        type: "number"
      },
      {
        start: 3,
        name: "iouThreshold",
        type: "number"
      },
      {
        start: 4,
        name: "scoreThreshold",
        type: "number"
      },
      {
        start: 5,
        name: "softNmsSigma",
        type: "number"
      }
    ]
  },
  {
    tfOpName: "Where",
    category: "dynamic",
    inputs: [
      {
        start: 0,
        name: "condition",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "ListDiff",
    category: "dynamic",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "y",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  }
], JA = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: jA
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const QA = [
  {
    tfOpName: "LowerBound",
    category: "evaluation",
    inputs: [
      {
        start: 0,
        name: "sortedSequence",
        type: "tensor"
      },
      {
        start: 1,
        name: "values",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "TopKV2",
    category: "evaluation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "k",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "sorted",
        name: "sorted",
        type: "bool"
      }
    ]
  },
  {
    tfOpName: "UpperBound",
    category: "evaluation",
    inputs: [
      {
        start: 0,
        name: "sortedSequence",
        type: "tensor"
      },
      {
        start: 1,
        name: "values",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "Unique",
    category: "evaluation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "UniqueV2",
    category: "evaluation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number"
      }
    ]
  }
], qA = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: QA
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const tz = [
  {
    tfOpName: "PlaceholderWithDefault",
    category: "graph",
    inputs: [
      {
        start: 0,
        name: "default",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "shape",
        name: "shape",
        type: "shape"
      },
      {
        tfName: "dtype",
        name: "dtype",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "Placeholder",
    category: "graph",
    attrs: [
      {
        tfName: "shape",
        name: "shape",
        type: "shape"
      },
      {
        tfName: "dtype",
        name: "dtype",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "Const",
    category: "graph"
  },
  {
    tfOpName: "Identity",
    category: "graph",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "IdentityN",
    category: "graph",
    inputs: [
      {
        start: 0,
        end: 0,
        name: "x",
        type: "tensors"
      }
    ]
  },
  {
    tfOpName: "Snapshot",
    category: "graph",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "Rank",
    category: "graph",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "Size",
    category: "graph",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "Shape",
    category: "graph",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "ShapeN",
    category: "graph",
    inputs: [
      {
        start: 0,
        end: 0,
        name: "x",
        type: "tensors"
      }
    ]
  },
  {
    tfOpName: "Print",
    category: "graph",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "data",
        type: "tensors"
      }
    ],
    attrs: [
      {
        tfName: "message",
        name: "message",
        type: "string"
      },
      {
        tfName: "first_n",
        name: "firstN",
        type: "number",
        notSupported: !0
      },
      {
        tfName: "summarize",
        name: "summarize",
        type: "number",
        defaultValue: 3
      }
    ]
  },
  {
    tfOpName: "NoOp",
    category: "graph",
    inputs: []
  },
  {
    tfOpName: "StopGradient",
    category: "graph",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "FakeQuantWithMinMaxVars",
    category: "graph",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "min",
        name: "min",
        type: "number"
      },
      {
        tfName: "max",
        name: "max",
        type: "number"
      }
    ]
  }
], ez = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: tz
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const nz = [
  {
    tfOpName: "HashTable",
    category: "hash_table",
    inputs: [],
    attrs: [
      {
        tfName: "shared_name",
        name: "sharedName",
        type: "string"
      },
      {
        tfName: "use_node_name_sharing",
        name: "useNodeNameSharing",
        type: "bool"
      },
      {
        tfName: "key_dtype",
        name: "keyDType",
        type: "dtype"
      },
      {
        tfName: "value_dtype",
        name: "valueDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "HashTableV2",
    category: "hash_table",
    inputs: [],
    attrs: [
      {
        tfName: "shared_name",
        name: "sharedName",
        type: "string"
      },
      {
        tfName: "use_node_name_sharing",
        name: "useNodeNameSharing",
        type: "bool"
      },
      {
        tfName: "key_dtype",
        name: "keyDType",
        type: "dtype"
      },
      {
        tfName: "value_dtype",
        name: "valueDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "LookupTableImport",
    category: "hash_table",
    inputs: [
      {
        start: 0,
        name: "tableHandle",
        type: "tensor"
      },
      {
        start: 1,
        name: "keys",
        type: "tensor"
      },
      {
        start: 2,
        name: "values",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "Tin",
        name: "tIn",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "Tout",
        name: "tOut",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "LookupTableImportV2",
    category: "hash_table",
    inputs: [
      {
        start: 0,
        name: "tableHandle",
        type: "tensor"
      },
      {
        start: 1,
        name: "keys",
        type: "tensor"
      },
      {
        start: 2,
        name: "values",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "Tin",
        name: "tIn",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "Tout",
        name: "tOut",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "LookupTableFind",
    category: "hash_table",
    inputs: [
      {
        start: 0,
        name: "tableHandle",
        type: "tensor"
      },
      {
        start: 1,
        name: "keys",
        type: "tensor"
      },
      {
        start: 2,
        name: "defaultValue",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "Tin",
        name: "tIn",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "Tout",
        name: "tOut",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "LookupTableFindV2",
    category: "hash_table",
    inputs: [
      {
        start: 0,
        name: "tableHandle",
        type: "tensor"
      },
      {
        start: 1,
        name: "keys",
        type: "tensor"
      },
      {
        start: 2,
        name: "defaultValue",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "Tin",
        name: "tIn",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "Tout",
        name: "tOut",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "LookupTableSize",
    category: "hash_table",
    inputs: [
      {
        start: 0,
        name: "tableHandle",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "LookupTableSizeV2",
    category: "hash_table",
    inputs: [
      {
        start: 0,
        name: "tableHandle",
        type: "tensor"
      }
    ]
  }
], sz = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: nz
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const rz = [
  {
    tfOpName: "ResizeBilinear",
    category: "image",
    inputs: [
      {
        start: 0,
        name: "images",
        type: "tensor"
      },
      {
        start: 1,
        name: "size",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "align_corners",
        name: "alignCorners",
        type: "bool"
      },
      {
        tfName: "half_pixel_centers",
        name: "halfPixelCenters",
        type: "bool"
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "ResizeNearestNeighbor",
    category: "image",
    inputs: [
      {
        start: 0,
        name: "images",
        type: "tensor"
      },
      {
        start: 1,
        name: "size",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "align_corners",
        name: "alignCorners",
        type: "bool"
      },
      {
        tfName: "half_pixel_centers",
        name: "halfPixelCenters",
        type: "bool"
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "CropAndResize",
    category: "image",
    inputs: [
      {
        start: 0,
        name: "image",
        type: "tensor"
      },
      {
        start: 1,
        name: "boxes",
        type: "tensor"
      },
      {
        start: 2,
        name: "boxInd",
        type: "tensor"
      },
      {
        start: 3,
        name: "cropSize",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "method",
        name: "method",
        type: "string"
      },
      {
        tfName: "extrapolation_value",
        name: "extrapolationValue",
        type: "number"
      }
    ]
  },
  {
    tfOpName: "ImageProjectiveTransformV3",
    category: "image",
    inputs: [
      {
        start: 0,
        name: "images",
        type: "tensor"
      },
      {
        start: 1,
        name: "transforms",
        type: "tensor"
      },
      {
        start: 2,
        name: "outputShape",
        type: "number[]"
      },
      {
        start: 3,
        name: "fillValue",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "interpolation",
        name: "interpolation",
        type: "string"
      },
      {
        tfName: "fill_mode",
        name: "fillMode",
        type: "string"
      }
    ]
  }
], oz = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: rz
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const iz = [
  {
    tfOpName: "Equal",
    category: "logical",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "NotEqual",
    category: "logical",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Greater",
    category: "logical",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "GreaterEqual",
    category: "logical",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Less",
    category: "logical",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "LessEqual",
    category: "logical",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "LogicalAnd",
    category: "logical",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "LogicalNot",
    category: "logical",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "LogicalOr",
    category: "logical",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Select",
    category: "logical",
    inputs: [
      {
        start: 0,
        name: "condition",
        type: "tensor"
      },
      {
        start: 1,
        name: "a",
        type: "tensor"
      },
      {
        start: 2,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "SelectV2",
    category: "logical",
    inputs: [
      {
        start: 0,
        name: "condition",
        type: "tensor"
      },
      {
        start: 1,
        name: "a",
        type: "tensor"
      },
      {
        start: 2,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  }
], az = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: iz
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const lz = [
  {
    tfOpName: "_FusedMatMul",
    category: "matrices",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      },
      {
        start: 2,
        end: 0,
        name: "args",
        type: "tensors"
      }
    ],
    attrs: [
      {
        tfName: "num_args",
        name: "numArgs",
        type: "number"
      },
      {
        tfName: "fused_ops",
        name: "fusedOps",
        type: "string[]",
        defaultValue: []
      },
      {
        tfName: "epsilon",
        name: "epsilon",
        type: "number",
        defaultValue: 1e-4
      },
      {
        tfName: "transpose_a",
        name: "transposeA",
        type: "bool",
        defaultValue: !1
      },
      {
        tfName: "transpose_b",
        name: "transposeB",
        type: "bool",
        defaultValue: !1
      },
      {
        tfName: "leakyrelu_alpha",
        name: "leakyreluAlpha",
        type: "number",
        defaultValue: 0.2
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "MatMul",
    category: "matrices",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "transpose_a",
        name: "transposeA",
        type: "bool",
        defaultValue: !1
      },
      {
        tfName: "transpose_b",
        name: "transposeB",
        type: "bool",
        defaultValue: !1
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "BatchMatMul",
    category: "matrices",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "adj_x",
        name: "transposeA",
        type: "bool",
        defaultValue: !1
      },
      {
        tfName: "adj_y",
        name: "transposeB",
        type: "bool",
        defaultValue: !1
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "BatchMatMulV2",
    category: "matrices",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "adj_x",
        name: "transposeA",
        type: "bool",
        defaultValue: !1
      },
      {
        tfName: "adj_y",
        name: "transposeB",
        type: "bool",
        defaultValue: !1
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Transpose",
    category: "matrices",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "perm",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Einsum",
    category: "matrices",
    inputs: [
      {
        start: 0,
        end: 0,
        name: "tensors",
        type: "tensors"
      }
    ],
    attrs: [
      {
        tfName: "equation",
        name: "equation",
        type: "string"
      },
      {
        tfName: "N",
        name: "n",
        type: "number",
        defaultValue: 2
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype"
      }
    ]
  }
], cz = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: lz
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const uz = [
  {
    tfOpName: "EuclideanNorm",
    category: "normalization",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "keep_dims",
        name: "keepDims",
        type: "bool",
        defaultValue: !1
      }
    ]
  },
  {
    tfOpName: "FusedBatchNorm",
    category: "normalization",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "scale",
        type: "tensor"
      },
      {
        start: 2,
        name: "offset",
        type: "tensor"
      },
      {
        start: 3,
        name: "mean",
        type: "tensor"
      },
      {
        start: 4,
        name: "variance",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "epsilon",
        name: "epsilon",
        type: "number",
        defaultValue: 1e-3
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "FusedBatchNormV2",
    category: "normalization",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "scale",
        type: "tensor"
      },
      {
        start: 2,
        name: "offset",
        type: "tensor"
      },
      {
        start: 3,
        name: "mean",
        type: "tensor"
      },
      {
        start: 4,
        name: "variance",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "epsilon",
        name: "epsilon",
        type: "number",
        defaultValue: 1e-3
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "FusedBatchNormV3",
    category: "normalization",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "scale",
        type: "tensor"
      },
      {
        start: 2,
        name: "offset",
        type: "tensor"
      },
      {
        start: 3,
        name: "mean",
        type: "tensor"
      },
      {
        start: 4,
        name: "variance",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "epsilon",
        name: "epsilon",
        type: "number",
        defaultValue: 1e-3
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "LRN",
    category: "normalization",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "depth_radius",
        name: "radius",
        type: "number",
        defaultValue: 5
      },
      {
        tfName: "bias",
        name: "bias",
        type: "number",
        defaultValue: 1
      },
      {
        tfName: "alpha",
        name: "alpha",
        type: "number",
        defaultValue: 1
      },
      {
        tfName: "beta",
        name: "beta",
        type: "number",
        defaultValue: 0.5
      }
    ]
  },
  {
    tfOpName: "Softmax",
    category: "normalization",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "LogSoftmax",
    category: "normalization",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "SparseToDense",
    category: "normalization",
    inputs: [
      {
        start: 0,
        name: "sparseIndices",
        type: "tensor"
      },
      {
        start: 1,
        name: "outputShape",
        type: "number[]"
      },
      {
        start: 2,
        name: "sparseValues",
        type: "tensor"
      },
      {
        start: 3,
        name: "defaultValue",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "validate_indices",
        name: "validateIndices",
        type: "bool",
        defaultValue: !0,
        notSupported: !0
      }
    ]
  }
], hz = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: uz
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const dz = [
  {
    tfOpName: "Bincount",
    category: "reduction",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "size",
        type: "number"
      },
      {
        start: 2,
        name: "weights",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "DenseBincount",
    category: "reduction",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "size",
        type: "number"
      },
      {
        start: 2,
        name: "weights",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "binary_output",
        name: "binaryOutput",
        type: "bool"
      }
    ]
  },
  {
    tfOpName: "Max",
    category: "reduction",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "keep_dims",
        name: "keepDims",
        type: "bool"
      }
    ]
  },
  {
    tfOpName: "Mean",
    category: "reduction",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "keep_dims",
        name: "keepDims",
        type: "bool"
      }
    ]
  },
  {
    tfOpName: "Min",
    category: "reduction",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "keep_dims",
        name: "keepDims",
        type: "bool"
      }
    ]
  },
  {
    tfOpName: "Sum",
    category: "reduction",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "keep_dims",
        name: "keepDims",
        type: "bool"
      }
    ]
  },
  {
    tfOpName: "All",
    category: "reduction",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "keep_dims",
        name: "keepDims",
        type: "bool"
      }
    ]
  },
  {
    tfOpName: "Any",
    category: "reduction",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "keep_dims",
        name: "keepDims",
        type: "bool"
      }
    ]
  },
  {
    tfOpName: "ArgMax",
    category: "reduction",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number"
      }
    ]
  },
  {
    tfOpName: "ArgMin",
    category: "reduction",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number"
      }
    ]
  },
  {
    tfOpName: "Prod",
    category: "reduction",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "keep_dims",
        name: "keepDims",
        type: "bool"
      }
    ]
  },
  {
    tfOpName: "Cumprod",
    category: "reduction",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "exclusive",
        name: "exclusive",
        type: "bool"
      },
      {
        tfName: "reverse",
        name: "reverse",
        type: "bool"
      }
    ]
  },
  {
    tfOpName: "Cumsum",
    category: "reduction",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "exclusive",
        name: "exclusive",
        type: "bool"
      },
      {
        tfName: "reverse",
        name: "reverse",
        type: "bool"
      }
    ]
  }
], pz = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: dz
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const fz = [
  {
    tfOpName: "ConcatV2",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        end: -1,
        name: "tensors",
        type: "tensors"
      },
      {
        start: -1,
        name: "axis",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "N",
        name: "n",
        type: "number",
        defaultValue: 2
      }
    ]
  },
  {
    tfOpName: "Concat",
    category: "slice_join",
    inputs: [
      {
        start: 1,
        end: 0,
        name: "tensors",
        type: "tensors"
      },
      {
        start: 0,
        name: "axis",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "N",
        name: "n",
        type: "number",
        defaultValue: 2
      }
    ]
  },
  {
    tfOpName: "GatherV2",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "indices",
        type: "tensor"
      },
      {
        start: 2,
        name: "axis",
        type: "number",
        defaultValue: 0
      }
    ],
    attrs: [
      {
        tfName: "batch_dims",
        name: "batchDims",
        type: "number",
        defaultValue: 0
      }
    ]
  },
  {
    tfOpName: "Gather",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "indices",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "validate_indices",
        name: "validateIndices",
        type: "bool",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Reverse",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "dims",
        type: "bool[]"
      }
    ]
  },
  {
    tfOpName: "ReverseV2",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number[]"
      }
    ]
  },
  {
    tfOpName: "Slice",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "begin",
        type: "number[]"
      },
      {
        start: 2,
        name: "size",
        type: "number[]"
      }
    ]
  },
  {
    tfOpName: "StridedSlice",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "begin",
        type: "number[]"
      },
      {
        start: 2,
        name: "end",
        type: "number[]"
      },
      {
        start: 3,
        name: "strides",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "begin_mask",
        name: "beginMask",
        type: "number",
        defaultValue: 0
      },
      {
        tfName: "end_mask",
        name: "endMask",
        type: "number",
        defaultValue: 0
      },
      {
        tfName: "new_axis_mask",
        name: "newAxisMask",
        type: "number",
        defaultValue: 0
      },
      {
        tfName: "ellipsis_mask",
        name: "ellipsisMask",
        type: "number",
        defaultValue: 0
      },
      {
        tfName: "shrink_axis_mask",
        name: "shrinkAxisMask",
        type: "number",
        defaultValue: 0
      }
    ]
  },
  {
    tfOpName: "Pack",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        end: 0,
        name: "tensors",
        type: "tensors"
      }
    ],
    attrs: [
      {
        tfName: "axis",
        name: "axis",
        type: "number",
        defaultValue: 0
      }
    ]
  },
  {
    tfOpName: "Unpack",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        name: "tensor",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "axis",
        name: "axis",
        type: "number",
        defaultValue: 0
      },
      {
        tfName: "num",
        name: "num",
        type: "number",
        defaultValue: 0,
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Tile",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "reps",
        type: "number[]"
      }
    ]
  },
  {
    tfOpName: "Split",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        name: "axis",
        type: "number",
        defaultValue: 0
      },
      {
        start: 1,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "num_split",
        name: "numOrSizeSplits",
        type: "number",
        defaultValue: 1
      }
    ]
  },
  {
    tfOpName: "SplitV",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "numOrSizeSplits",
        type: "number[]"
      },
      {
        start: 2,
        name: "axis",
        type: "number",
        defaultValue: 0
      }
    ]
  },
  {
    tfOpName: "ScatterNd",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        name: "indices",
        type: "tensor"
      },
      {
        start: 1,
        name: "values",
        type: "tensor"
      },
      {
        start: 2,
        name: "shape",
        type: "number[]"
      }
    ]
  },
  {
    tfOpName: "GatherNd",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "indices",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "SparseToDense",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        name: "sparseIndices",
        type: "tensor"
      },
      {
        start: 1,
        name: "outputShape",
        type: "number[]"
      },
      {
        start: 2,
        name: "sparseValues",
        type: "tensor"
      },
      {
        start: 3,
        name: "defaultValue",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "validate_indices",
        name: "validateIndices",
        type: "bool",
        defaultValue: !1,
        notSupported: !0
      }
    ]
  }
], mz = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: fz
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const gz = [
  {
    tfOpName: "SparseFillEmptyRows",
    category: "sparse",
    inputs: [
      {
        start: 0,
        name: "indices",
        type: "tensor"
      },
      {
        start: 1,
        name: "values",
        type: "tensor"
      },
      {
        start: 2,
        name: "denseShape",
        type: "tensor"
      },
      {
        start: 3,
        name: "defaultValue",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "SparseReshape",
    category: "sparse",
    inputs: [
      {
        start: 0,
        name: "inputIndices",
        type: "tensor"
      },
      {
        start: 1,
        name: "inputShape",
        type: "tensor"
      },
      {
        start: 2,
        name: "newShape",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "SparseSegmentMean",
    category: "sparse",
    inputs: [
      {
        start: 0,
        name: "data",
        type: "tensor"
      },
      {
        start: 1,
        name: "indices",
        type: "tensor"
      },
      {
        start: 2,
        name: "segmentIds",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "SparseSegmentSum",
    category: "sparse",
    inputs: [
      {
        start: 0,
        name: "data",
        type: "tensor"
      },
      {
        start: 1,
        name: "indices",
        type: "tensor"
      },
      {
        start: 2,
        name: "segmentIds",
        type: "tensor"
      }
    ]
  }
], yz = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: gz
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const bz = [
  {
    tfOpName: "FFT",
    category: "spectral",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "IFFT",
    category: "spectral",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "RFFT",
    category: "spectral",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "fft_length",
        type: "number",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "IRFFT",
    category: "spectral",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "fft_length",
        type: "number",
        notSupported: !0
      }
    ]
  }
], xz = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: bz
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const wz = [
  {
    tfOpName: "StringNGrams",
    category: "string",
    inputs: [
      {
        start: 0,
        name: "data",
        type: "tensor"
      },
      {
        start: 1,
        name: "dataSplits",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "separator",
        name: "separator",
        type: "string"
      },
      {
        tfName: "ngram_widths",
        name: "nGramWidths",
        type: "number[]"
      },
      {
        tfName: "left_pad",
        name: "leftPad",
        type: "string"
      },
      {
        tfName: "right_pad",
        name: "rightPad",
        type: "string"
      },
      {
        tfName: "pad_width",
        name: "padWidth",
        type: "number"
      },
      {
        tfName: "preserve_short_sequences",
        name: "preserveShortSequences",
        type: "bool"
      }
    ],
    outputs: [
      "ngrams",
      "ngrams_splits"
    ]
  },
  {
    tfOpName: "StringSplit",
    category: "string",
    inputs: [
      {
        start: 0,
        name: "input",
        type: "tensor"
      },
      {
        start: 1,
        name: "delimiter",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "skip_empty",
        name: "skipEmpty",
        type: "bool"
      }
    ],
    outputs: [
      "indices",
      "values",
      "shape"
    ]
  },
  {
    tfOpName: "StringToHashBucketFast",
    category: "string",
    inputs: [
      {
        start: 0,
        name: "input",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "num_buckets",
        name: "numBuckets",
        type: "number"
      }
    ]
  }
], Iz = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: wz
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Sz = [
  {
    tfOpName: "Cast",
    category: "transformation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "SrcT",
        name: "sdtype",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "DstT",
        name: "dtype",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "ExpandDims",
    category: "transformation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number"
      }
    ]
  },
  {
    tfOpName: "MirrorPad",
    category: "transformation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "padding",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "mode",
        name: "mode",
        type: "string"
      }
    ]
  },
  {
    tfOpName: "Pad",
    category: "transformation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "padding",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "constant_value",
        name: "constantValue",
        type: "number",
        defaultValue: 0
      }
    ]
  },
  {
    tfOpName: "PadV2",
    category: "transformation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "padding",
        type: "number[]"
      },
      {
        start: 2,
        name: "constantValue",
        type: "number",
        defaultValue: 0
      }
    ]
  },
  {
    tfOpName: "Reshape",
    category: "transformation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "shape",
        type: "number[]"
      }
    ]
  },
  {
    tfOpName: "Squeeze",
    category: "transformation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "axis",
        tfDeprecatedName: "squeeze_dims",
        name: "axis",
        type: "number[]"
      }
    ]
  },
  {
    tfOpName: "SpaceToBatchND",
    category: "transformation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "blockShape",
        type: "number[]"
      },
      {
        start: 2,
        name: "paddings",
        type: "number[]"
      }
    ]
  },
  {
    tfOpName: "BatchToSpaceND",
    category: "transformation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "blockShape",
        type: "number[]"
      },
      {
        start: 2,
        name: "crops",
        type: "number[]"
      }
    ]
  },
  {
    tfOpName: "DepthToSpace",
    category: "transformation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "block_size",
        name: "blockSize",
        type: "number"
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string"
      }
    ]
  },
  {
    tfOpName: "BroadcastTo",
    category: "transformation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "shape",
        type: "number[]"
      }
    ],
    attrs: []
  },
  {
    tfOpName: "BroadcastArgs",
    category: "transformation",
    inputs: [
      {
        start: 0,
        name: "s0",
        type: "tensor"
      },
      {
        start: 1,
        name: "s1",
        type: "tensor"
      }
    ],
    attrs: []
  }
], vz = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: Sz
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class mx {
  static get Instance() {
    return this._instance || (this._instance = new this());
  }
  constructor() {
    const t = [
      PA,
      _A,
      ZA,
      HA,
      YA,
      JA,
      qA,
      ez,
      sz,
      oz,
      az,
      cz,
      hz,
      pz,
      mz,
      yz,
      xz,
      Iz,
      vz
    ], e = [].concat(...t.map((s) => s.json));
    this.opMappers = e.reduce((s, r) => (s[r.tfOpName] = r, s), {});
  }
  transformGraph(t, e = {}) {
    const s = t.node, r = [], o = [], i = [], a = s.reduce((m, g) => (m[g.name] = this.mapNode(g), g.op.startsWith("Placeholder") ? r.push(m[g.name]) : g.op === "Const" ? o.push(m[g.name]) : (g.input == null || g.input.length === 0) && i.push(m[g.name]), m), {});
    let l = [];
    const c = [];
    let u = {}, h = {};
    e != null && (u = this.mapSignatureEntries(e.inputs), h = this.mapSignatureEntries(e.outputs));
    const d = Object.keys(a);
    d.forEach((m) => {
      const g = a[m];
      g.inputNames.forEach((y, b) => {
        const [w, , x] = bs(y), S = a[w];
        if (S.outputs != null) {
          const v = S.outputs.indexOf(x);
          if (v !== -1) {
            const T = `${w}:${v}`;
            g.inputNames[b] = T;
          }
        }
        g.inputs.push(S), S.children.push(g);
      });
    }), Object.keys(h).length === 0 ? d.forEach((m) => {
      const g = a[m];
      g.children.length === 0 && c.push(g);
    }) : Object.keys(h).forEach((m) => {
      const [g] = bs(m), y = a[g];
      y != null && (y.signatureKey = h[m], c.push(y));
    }), Object.keys(u).length > 0 ? Object.keys(u).forEach((m) => {
      const [g] = bs(m), y = a[g];
      y && (y.signatureKey = u[m], l.push(y));
    }) : l = r;
    let p = {};
    t.library != null && t.library.function != null && (p = t.library.function.reduce((m, g) => (m[g.signature.name] = this.mapFunction(g), m), {}));
    const f = { nodes: a, inputs: l, outputs: c, weights: o, placeholders: r, signature: e, functions: p };
    return i.length > 0 && (f.initNodes = i), f;
  }
  mapSignatureEntries(t) {
    return Object.keys(t || {}).reduce((e, s) => (e[t[s].name] = s, e), {});
  }
  mapNode(t) {
    const e = _S(t.op) || this.opMappers[t.op] || {};
    t.attr == null && (t.attr = {});
    const s = {
      name: t.name,
      op: t.op,
      category: e.category,
      inputNames: (t.input || []).map((r) => r.startsWith("^") ? r.slice(1) : r),
      inputs: [],
      children: [],
      inputParams: {},
      attrParams: {},
      rawAttrs: t.attr,
      outputs: e.outputs
    };
    return e.inputs != null && (s.inputParams = e.inputs.reduce((r, o) => (r[o.name] = {
      type: o.type,
      inputIndexStart: o.start,
      inputIndexEnd: o.end
    }, r), {})), e.attrs != null && (s.attrParams = e.attrs.reduce((r, o) => {
      const i = o.type;
      let a;
      switch (o.type) {
        case "string":
          a = jf(t.attr, o.tfName, o.defaultValue), a === void 0 && !!o.tfDeprecatedName && (a = jf(t.attr, o.tfDeprecatedName, o.defaultValue));
          break;
        case "string[]":
          a = sm(t.attr, o.tfName, o.defaultValue), a === void 0 && !!o.tfDeprecatedName && (a = sm(t.attr, o.tfDeprecatedName, o.defaultValue));
          break;
        case "number":
          a = Qf(t.attr, o.tfName, o.defaultValue || 0), a === void 0 && !!o.tfDeprecatedName && (a = Qf(t.attr, o.tfDeprecatedName, o.defaultValue));
          break;
        case "number[]":
          a = nm(t.attr, o.tfName, o.defaultValue), a === void 0 && !!o.tfDeprecatedName && (a = nm(t.attr, o.tfDeprecatedName, o.defaultValue));
          break;
        case "bool":
          a = Jf(t.attr, o.tfName, o.defaultValue), a === void 0 && !!o.tfDeprecatedName && (a = Jf(t.attr, o.tfDeprecatedName, o.defaultValue));
          break;
        case "bool[]":
          a = om(t.attr, o.tfName, o.defaultValue), a === void 0 && !!o.tfDeprecatedName && (a = om(t.attr, o.tfDeprecatedName, o.defaultValue));
          break;
        case "shape":
          a = em(t.attr, o.tfName, o.defaultValue), a === void 0 && !!o.tfDeprecatedName && (a = em(t.attr, o.tfDeprecatedName, o.defaultValue));
          break;
        case "shape[]":
          a = rm(t.attr, o.tfName, o.defaultValue), a === void 0 && !!o.tfDeprecatedName && (a = rm(t.attr, o.tfDeprecatedName, o.defaultValue));
          break;
        case "dtype":
          a = qf(t.attr, o.tfName, o.defaultValue), a === void 0 && !!o.tfDeprecatedName && (a = qf(t.attr, o.tfDeprecatedName, o.defaultValue));
          break;
        case "dtype[]":
          a = tm(t.attr, o.tfName, o.defaultValue), a === void 0 && !!o.tfDeprecatedName && (a = tm(t.attr, o.tfDeprecatedName, o.defaultValue));
          break;
        case "func":
          a = gx(t.attr, o.tfName, o.defaultValue), a === void 0 && !!o.tfDeprecatedName && (a = gx(t.attr, o.tfDeprecatedName, o.defaultValue));
          break;
        case "tensor":
        case "tensors":
          break;
        default:
          throw new Error(`Unsupported param type: ${o.type} for op: ${t.op}`);
      }
      return r[o.name] = { value: a, type: i }, r;
    }, {})), s;
  }
  mapFunction(t) {
    const e = t.nodeDef, s = [], r = [];
    let o = {};
    e != null && (o = e.reduce((h, d) => (h[d.name] = this.mapNode(d), d.op === "Const" && r.push(h[d.name]), h), {}));
    const i = [], a = [];
    t.signature.inputArg.forEach((h) => {
      const [d] = bs(h.name), p = {
        name: d,
        op: "Placeholder",
        inputs: [],
        inputNames: [],
        category: "graph",
        inputParams: {},
        attrParams: { dtype: { value: nb(h.type), type: "dtype" } },
        children: []
      };
      p.signatureKey = h.name, i.push(p), o[d] = p;
    }), Object.keys(o).forEach((h) => {
      const d = o[h];
      d.inputNames.forEach((p, f) => {
        const [m, , g] = bs(p), y = o[m];
        if (y.outputs != null) {
          const b = y.outputs.indexOf(g);
          if (b !== -1) {
            const w = `${m}:${b}`;
            d.inputNames[f] = w;
          }
        }
        d.inputs.push(y), y.children.push(d);
      });
    });
    const c = t.ret;
    t.signature.outputArg.forEach((h) => {
      const [d, p] = bs(c[h.name]), f = o[d];
      f != null && (f.defaultOutput = p, a.push(f));
    });
    const u = this.mapArgsToSignature(t);
    return { nodes: o, inputs: i, outputs: a, weights: r, placeholders: s, signature: u };
  }
  mapArgsToSignature(t) {
    return {
      methodName: t.signature.name,
      inputs: t.signature.inputArg.reduce((e, s) => (e[s.name] = this.mapArgToTensorInfo(s), e), {}),
      outputs: t.signature.outputArg.reduce((e, s) => (e[s.name] = this.mapArgToTensorInfo(s, t.ret), e), {})
    };
  }
  mapArgToTensorInfo(t, e) {
    let s = t.name;
    return e != null && (s = e[s]), { name: s, dtype: t.type };
  }
}
function Cz(n) {
  const t = V().global;
  if (typeof t.atob < "u")
    return t.atob(n);
  if (typeof Buffer < "u")
    return new Buffer(n, "base64").toString();
  throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()");
}
function KS(n, t) {
  const e = Array.isArray(n) ? String.fromCharCode.apply(null, n) : Cz(n);
  return t ? e : e.toLowerCase();
}
function jf(n, t, e, s = !1) {
  const r = n[t];
  return r != null ? KS(r.s, s) : e;
}
function Jf(n, t, e) {
  const s = n[t];
  return s ? s.b : e;
}
function Qf(n, t, e) {
  const s = n[t] || {}, r = s.i != null ? s.i : s.f != null ? s.f : e;
  return typeof r == "number" ? r : parseInt(r, 10);
}
function nb(n) {
  switch (typeof n == "string" && (n = Wn[n]), n) {
    case Wn.DT_FLOAT:
    case Wn.DT_HALF:
      return "float32";
    case Wn.DT_INT32:
    case Wn.DT_INT64:
    case Wn.DT_INT8:
    case Wn.DT_UINT8:
      return "int32";
    case Wn.DT_BOOL:
      return "bool";
    case Wn.DT_DOUBLE:
      return "float32";
    case Wn.DT_STRING:
      return "string";
    default:
      return null;
  }
}
function gx(n, t, e) {
  const s = n[t];
  return s && s.func ? s.func.name : e;
}
function qf(n, t, e) {
  const s = n[t];
  return s && s.type ? nb(s.type) : e;
}
function tm(n, t, e) {
  const s = n[t];
  return s && s.list && s.list.type ? s.list.type.map((r) => nb(r)) : e;
}
function ZS(n) {
  if (!n.unknownRank)
    return n.dim != null ? n.dim.map((t) => typeof t.size == "number" ? t.size : parseInt(t.size, 10)) : [];
}
function em(n, t, e) {
  const s = n[t];
  return s && s.shape ? ZS(s.shape) : e;
}
function nm(n, t, e) {
  const s = n[t];
  return s ? ((s.list.f && s.list.f.length ? s.list.f : s.list.i) || []).map((r) => typeof r == "number" ? r : parseInt(r, 10)) : e;
}
function sm(n, t, e, s = !1) {
  const r = n[t];
  return r && r.list && r.list.s ? r.list.s.map((o) => KS(o, s)) : e;
}
function rm(n, t, e) {
  const s = n[t];
  return s && s.list && s.list.shape ? s.list.shape.map((r) => ZS(r)) : e;
}
function om(n, t, e) {
  const s = n[t];
  return s && s.list && s.list.b ? s.list.b : e;
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class kz {
  constructor(t, e, s) {
    this.node = t, this.tensorMap = e, this.context = s, this.inputs = [], this.attrs = {}, this.inputs = t.inputNames.map((r) => this.getInput(r)), t.rawAttrs != null && (this.attrs = Object.keys(t.rawAttrs).reduce((r, o) => (r[o] = this.getAttr(o), r), {}));
  }
  getInput(t) {
    return Ze(t, this.tensorMap, this.context);
  }
  getAttr(t, e) {
    const s = this.node.rawAttrs[t];
    if (s.tensor != null)
      return Ze(t, this.tensorMap, this.context);
    if (s.i != null || s.f != null)
      return Qf(this.node.rawAttrs, t, e);
    if (s.s != null)
      return jf(this.node.rawAttrs, t, e);
    if (s.b != null)
      return Jf(this.node.rawAttrs, t, e);
    if (s.shape != null)
      return em(this.node.rawAttrs, t, e);
    if (s.type != null)
      return qf(this.node.rawAttrs, t, e);
    if (s.list != null) {
      if (s.list.i != null || s.list.f != null)
        return nm(this.node.rawAttrs, t, e);
      if (s.list.s != null)
        return sm(this.node.rawAttrs, t, e);
      if (s.list.shape != null)
        return rm(this.node.rawAttrs, t, e);
      if (s.list.b != null)
        return om(this.node.rawAttrs, t, e);
      if (s.list.type != null)
        return tm(this.node.rawAttrs, t, e);
    }
    return e;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Pe = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  abs: me,
  acos: Um,
  acosh: Ym,
  add: U,
  addN: gw,
  all: pd,
  any: Ba,
  argMax: qr,
  argMin: jm,
  asin: Jm,
  asinh: Qm,
  atan: qm,
  atan2: tg,
  atanh: eg,
  avgPool: lc,
  avgPool3d: sg,
  basicLSTMCell: yw,
  batchToSpaceND: cc,
  batchNorm: Yi,
  batchNorm2d: rg,
  batchNorm3d: og,
  batchNorm4d: ig,
  bincount: ag,
  broadcastArgs: bw,
  broadcastTo: ur,
  buffer: gt,
  cast: et,
  ceil: lg,
  clipByValue: en,
  clone: ws,
  complex: Ms,
  concat: he,
  concat1d: cg,
  concat2d: ug,
  concat3d: hg,
  concat4d: dg,
  conv1d: fd,
  conv2d: Xs,
  conv2dTranspose: md,
  conv3d: fg,
  conv3dTranspose: mg,
  cos: uc,
  cosh: gd,
  cumprod: Ha,
  cumsum: yd,
  denseBincount: ww,
  depthToSpace: gg,
  depthwiseConv2d: ji,
  diag: Iw,
  dilation2d: yg,
  div: ht,
  divNoNan: bg,
  dot: xg,
  einsum: Sw,
  elu: Ji,
  equal: yn,
  erf: wg,
  euclideanNorm: Sg,
  exp: bn,
  expandDims: Qe,
  expm1: vg,
  eye: bd,
  fill: fo,
  floor: qi,
  floorDiv: dd,
  gather: ta,
  greater: an,
  greaterEqual: Tr,
  imag: ic,
  isFinite: Cg,
  isInf: kg,
  isNaN: Tg,
  leakyRelu: hc,
  less: xd,
  lessEqual: Nr,
  linspace: kw,
  localResponseNormalization: Ng,
  log: xn,
  log1p: dc,
  logSigmoid: $g,
  logSoftmax: Id,
  logSumExp: Sd,
  logicalAnd: Hn,
  logicalNot: pc,
  logicalOr: vd,
  logicalXor: Rg,
  lowerBound: Nw,
  matMul: Ct,
  max: Bn,
  maxPool: fc,
  maxPool3d: Eg,
  maxPoolWithArgmax: $w,
  maximum: $s,
  mean: ne,
  meshgrid: Rw,
  min: Ua,
  minimum: ea,
  mirrorPad: Lg,
  mod: Dg,
  moments: mc,
  mul: D,
  multiRNNCell: Ew,
  multinomial: Lw,
  neg: Yt,
  notEqual: eo,
  oneHot: Wo,
  ones: fn,
  onesLike: wn,
  outerProduct: Dw,
  pad: js,
  pad1d: Gw,
  pad2d: Fw,
  pad3d: Ow,
  pad4d: Aw,
  pool: Gg,
  pow: _s,
  prelu: yc,
  print: Fm,
  prod: Fg,
  raggedGather: zw,
  raggedTensorToTensor: Ww,
  rand: Vw,
  randomGamma: Hw,
  randomNormal: kd,
  randomStandardNormal: Uw,
  randomUniform: sa,
  range: Mo,
  real: Vo,
  reciprocal: Ag,
  relu: us,
  relu6: Td,
  reshape: G,
  reverse: Dn,
  reverse1d: Yw,
  reverse2d: jw,
  reverse3d: Jw,
  reverse4d: Qw,
  round: Nd,
  rsqrt: $d,
  scalar: ft,
  selu: Rd,
  separableConv2d: Ed,
  setdiff1dAsync: qw,
  sigmoid: ss,
  sign: zg,
  sin: Ld,
  sinh: Dd,
  slice: $t,
  slice1d: bc,
  slice2d: Gd,
  slice3d: xc,
  slice4d: Po,
  softmax: wc,
  softplus: mo,
  spaceToBatchND: gc,
  fft: Ic,
  ifft: Xo,
  irfft: Fd,
  rfft: Sc,
  split: tn,
  sqrt: Fe,
  square: Wt,
  squaredDifference: Od,
  squeeze: $r,
  stack: nn,
  step: yo,
  stridedSlice: Wg,
  sub: it,
  sum: at,
  tan: Vg,
  tanh: to,
  tensor: ee,
  tensor1d: Ve,
  tensor2d: hr,
  tensor3d: Vm,
  tensor4d: tI,
  tensor5d: eI,
  tensor6d: nI,
  tile: $n,
  topk: Mg,
  truncatedNormal: Ad,
  unique: Pg,
  unsortedSegmentSum: zd,
  unstack: Un,
  upperBound: sI,
  variable: Xg,
  where: Me,
  whereAsync: _g,
  zeros: ge,
  zerosLike: Rt,
  op: L,
  OP_SCOPE_SUFFIX: $m,
  booleanMaskAsync: rI,
  transpose: kt,
  norm: Qi,
  movingAverage: oI,
  scatterND: iI,
  searchSorted: Cd,
  sparseToDense: aI,
  gatherND: lI,
  dropout: Kg,
  enclosingPowerOfTwo: Zg,
  cosineWindow: Vd,
  inTopKAsync: cI,
  image: Xr,
  linalg: Ug,
  losses: wI,
  spectral: bI,
  fused: pI,
  signal: xI,
  sparse: II,
  string: SI
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Tz = (n, t, e, s = Pe) => {
  switch (n.op) {
    case "BiasAdd":
    case "AddV2":
    case "Add":
      return [s.add(I("a", n, t, e), I("b", n, t, e))];
    case "AddN":
      return [s.addN(I("tensors", n, t, e))];
    case "FloorMod":
    case "Mod":
      return [s.mod(I("a", n, t, e), I("b", n, t, e))];
    case "Mul":
      return [s.mul(I("a", n, t, e), I("b", n, t, e))];
    case "RealDiv":
    case "Div":
      return [s.div(I("a", n, t, e), I("b", n, t, e))];
    case "DivNoNan":
      return [s.divNoNan(I("a", n, t, e), I("b", n, t, e))];
    case "FloorDiv":
      return [s.floorDiv(I("a", n, t, e), I("b", n, t, e))];
    case "Sub":
      return [s.sub(I("a", n, t, e), I("b", n, t, e))];
    case "Minimum":
      return [s.minimum(I("a", n, t, e), I("b", n, t, e))];
    case "Maximum":
      return [s.maximum(I("a", n, t, e), I("b", n, t, e))];
    case "Pow":
      return [s.pow(I("a", n, t, e), I("b", n, t, e))];
    case "SquaredDifference":
      return [s.squaredDifference(I("a", n, t, e), I("b", n, t, e))];
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Nz = (n, t, e, s = Pe) => {
  switch (n.op) {
    case "Abs":
    case "ComplexAbs":
      return [s.abs(I("x", n, t, e))];
    case "Acos":
      return [s.acos(I("x", n, t, e))];
    case "Acosh":
      return [s.acosh(I("x", n, t, e))];
    case "Asin":
      return [s.asin(I("x", n, t, e))];
    case "Asinh":
      return [s.asinh(I("x", n, t, e))];
    case "Atan":
      return [s.atan(I("x", n, t, e))];
    case "Atan2":
      return [s.atan2(I("x", n, t, e), I("y", n, t, e))];
    case "Atanh":
      return [s.atanh(I("x", n, t, e))];
    case "Ceil":
      return [s.ceil(I("x", n, t, e))];
    case "Complex":
      return [s.complex(I("real", n, t, e), I("imag", n, t, e))];
    case "Cos":
      return [s.cos(I("x", n, t, e))];
    case "Cosh":
      return [s.cosh(I("x", n, t, e))];
    case "Elu":
      return [s.elu(I("x", n, t, e))];
    case "Erf":
      return [s.erf(I("x", n, t, e))];
    case "Exp":
      return [s.exp(I("x", n, t, e))];
    case "Expm1":
      return [s.expm1(I("x", n, t, e))];
    case "Floor":
      return [s.floor(I("x", n, t, e))];
    case "Log":
      return [s.log(I("x", n, t, e))];
    case "Log1p":
      return [s.log1p(I("x", n, t, e))];
    case "Imag":
      return [s.imag(I("x", n, t, e))];
    case "Neg":
      return [s.neg(I("x", n, t, e))];
    case "Reciprocal":
      return [s.reciprocal(I("x", n, t, e))];
    case "Real":
      return [s.real(I("x", n, t, e))];
    case "Relu":
      return [s.relu(I("x", n, t, e))];
    case "Round":
      return [s.round(I("x", n, t, e))];
    case "Selu":
      return [s.selu(I("x", n, t, e))];
    case "Sigmoid":
      return [s.sigmoid(I("x", n, t, e))];
    case "Sin":
      return [s.sin(I("x", n, t, e))];
    case "Sign":
      return [s.sign(I("x", n, t, e))];
    case "Sinh":
      return [s.sinh(I("x", n, t, e))];
    case "Softplus":
      return [s.softplus(I("x", n, t, e))];
    case "Sqrt":
      return [s.sqrt(I("x", n, t, e))];
    case "Square":
      return [s.square(I("x", n, t, e))];
    case "Tanh":
      return [s.tanh(I("x", n, t, e))];
    case "Tan":
      return [s.tan(I("x", n, t, e))];
    case "ClipByValue":
      return [s.clipByValue(I("x", n, t, e), I("clipValueMin", n, t, e), I("clipValueMax", n, t, e))];
    case "Relu6":
      return [s.relu6(I("x", n, t, e))];
    case "Rsqrt":
      return [s.rsqrt(Ze(n.inputNames[0], t, e))];
    case "Prod":
      return [s.prod(I("x", n, t, e), I("axes", n, t, e))];
    case "LeakyRelu":
      return [s.leakyRelu(I("x", n, t, e), I("alpha", n, t, e))];
    case "Prelu":
      return [s.prelu(I("x", n, t, e), I("alpha", n, t, e))];
    case "IsNan":
      return [s.isNaN(Ze(n.inputNames[0], t, e))];
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Vn(n, t, e = "") {
  if (!(typeof n == "number" || typeof t == "number")) {
    C(n.length === t.length, () => e + ` Shapes ${n} and ${t} must match`);
    for (let s = 0; s < n.length; s++) {
      const r = n[s], o = t[s];
      C(r < 0 || o < 0 || r === o, () => e + ` Shapes ${n} and ${t} must match`);
    }
  }
}
function yx(n) {
  return !(typeof n == "number" || n.some((t) => t < 0));
}
function va(n, t, e) {
  let s = im(n, e);
  const r = !yx(s);
  if (r && t.length === 0)
    throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${s}`);
  if (r && t.forEach((o) => {
    s = im(o.shape, s);
  }), !yx(s))
    throw new Error(`Non-fully-defined elementShape: ${s}`);
  return s;
}
function im(n, t) {
  if (typeof n == "number")
    return t;
  if (typeof t == "number")
    return n;
  if (n.length !== t.length)
    throw new Error(`Incompatible ranks during merge: ${n} vs. ${t}`);
  const e = [];
  for (let s = 0; s < n.length; ++s) {
    const r = n[s], o = t[s];
    if (r >= 0 && o >= 0 && r !== o)
      throw new Error(`Incompatible shape during merge: ${n} vs. ${t}`);
    e[s] = r >= 0 ? r : o;
  }
  return e;
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class $z {
  constructor(t, e, s, r, o, i, a) {
    this.name = t, this.dtype = e, this.maxSize = s, this.elementShape = r, this.identicalElementShapes = o, this.dynamicSize = i, this.clearAfterRead = a, this.tensors = [], this.closed_ = !1, this.idTensor = ft(0), ce(this.idTensor);
  }
  get id() {
    return this.idTensor.id;
  }
  get closed() {
    return this.closed_;
  }
  clearAndClose(t) {
    this.tensors.forEach((e) => {
      (t == null || !t.has(e.tensor.id)) && e.tensor.dispose();
    }), this.tensors = [], this.closed_ = !0, this.idTensor.dispose();
  }
  size() {
    return this.tensors.length;
  }
  read(t) {
    if (this.closed_)
      throw new Error(`TensorArray ${this.name} has already been closed.`);
    if (t < 0 || t >= this.size())
      throw new Error(`Tried to read from index ${t}, but array size is: ${this.size()}`);
    const e = this.tensors[t];
    if (e.cleared)
      throw new Error(`TensorArray ${this.name}: Could not read index ${t} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);
    return this.clearAfterRead && (e.cleared = !0), e.read = !0, e.tensor;
  }
  readMany(t) {
    return t.map((e) => this.read(e));
  }
  write(t, e) {
    if (this.closed_)
      throw new Error(`TensorArray ${this.name} has already been closed.`);
    if (t < 0 || !this.dynamicSize && t >= this.maxSize)
      throw new Error(`Tried to write to index ${t}, but array is not resizeable and size is: ${this.maxSize}`);
    const s = this.tensors[t] || {};
    if (e.dtype !== this.dtype)
      throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t},
          because the value dtype is ${e.dtype}, but TensorArray dtype is ${this.dtype}.`);
    if (this.size() === 0 && (this.elementShape == null || this.elementShape.length === 0) && (this.elementShape = e.shape), Vn(this.elementShape, e.shape, `TensorArray ${this.name}: Could not write to TensorArray index ${t}.`), s.read)
      throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been read.`);
    if (s.written)
      throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been written.`);
    s.tensor = e, ce(e), s.written = !0, this.tensors[t] = s;
  }
  writeMany(t, e) {
    if (t.length !== e.length)
      throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${t.length} is not the same as tensors size: ${e.length}.`);
    t.forEach((s, r) => this.write(s, e[r]));
  }
  gather(t, e) {
    if (!!e && e !== this.dtype)
      throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${e}`);
    if (t)
      t = t.slice(0, this.size());
    else {
      t = [];
      for (let r = 0; r < this.size(); r++)
        t.push(r);
    }
    if (t.length === 0)
      return ee([], [0].concat(this.elementShape));
    const s = this.readMany(t);
    return Vn(this.elementShape, s[0].shape, "TensorArray shape mismatch: "), nn(s, 0);
  }
  concat(t) {
    if (!!t && t !== this.dtype)
      throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${t}`);
    if (this.size() === 0)
      return ee([], [0].concat(this.elementShape));
    const e = [];
    for (let r = 0; r < this.size(); r++)
      e.push(r);
    const s = this.readMany(e);
    return Vn(this.elementShape, s[0].shape, `TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${s[0].shape})`), he(s, 0);
  }
  scatter(t, e) {
    if (e.dtype !== this.dtype)
      throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);
    if (t.length !== e.shape[0])
      throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);
    const s = Math.max(...t);
    if (!this.dynamicSize && s >= this.maxSize)
      throw new Error(`Max index must be < array size (${s}  vs. ${this.maxSize})`);
    this.writeMany(t, Un(e, 0));
  }
  split(t, e) {
    if (e.dtype !== this.dtype)
      throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);
    let s = 0;
    const r = t.map((l) => (s += l, s));
    if (s !== e.shape[0])
      throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${s}, and tensor's shape is: ${e.shape}`);
    if (!this.dynamicSize && t.length !== this.maxSize)
      throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${t.length}), and the TensorArray is not marked as dynamically resizeable`);
    const o = s === 0 ? 0 : e.size / s, i = [];
    A(() => {
      e = G(e, [1, s, o]);
      for (let l = 0; l < t.length; ++l) {
        const u = [0, l === 0 ? 0 : r[l - 1], 0], h = [1, t[l], o];
        i[l] = G($t(e, u, h), this.elementShape);
      }
      return i;
    });
    const a = [];
    for (let l = 0; l < t.length; l++)
      a[l] = l;
    this.writeMany(a, i);
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ro {
  constructor(t, e, s, r = -1) {
    this.tensors = t, this.elementShape = e, this.elementDtype = s, t != null && t.forEach((o) => {
      if (s !== o.dtype)
        throw new Error(`Invalid data types; op elements ${s}, but list elements ${o.dtype}`);
      Vn(e, o.shape, "TensorList shape mismatch: "), ce(o);
    }), this.idTensor = ft(0), this.maxNumElements = r, ce(this.idTensor);
  }
  get id() {
    return this.idTensor.id;
  }
  copy() {
    return new ro([...this.tensors], this.elementShape, this.elementDtype);
  }
  clearAndClose(t) {
    this.tensors.forEach((e) => {
      (t == null || !t.has(e.id)) && e.dispose();
    }), this.tensors.length = 0, this.idTensor.dispose();
  }
  size() {
    return this.tensors.length;
  }
  stack(t, e, s = -1) {
    if (e !== this.elementDtype)
      throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);
    if (s !== -1 && this.tensors.length !== s)
      throw new Error(`Operation expected a list with ${s} elements but got a list with ${this.tensors.length} elements.`);
    Vn(t, this.elementShape, "TensorList shape mismatch: ");
    const r = va(this.elementShape, this.tensors, t);
    return A(() => {
      const o = this.tensors.map((i) => G(i, r));
      return nn(o, 0);
    });
  }
  popBack(t, e) {
    if (e !== this.elementDtype)
      throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);
    if (this.size() === 0)
      throw new Error("Trying to pop from an empty list.");
    const s = va(this.elementShape, this.tensors, t), r = this.tensors.pop();
    return r.kept = !1, Vn(r.shape, t, "TensorList shape mismatch: "), G(r, s);
  }
  pushBack(t) {
    if (t.dtype !== this.elementDtype)
      throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);
    if (Vn(t.shape, this.elementShape, "TensorList shape mismatch: "), this.maxNumElements === this.size())
      throw new Error("Trying to push element into a full list.");
    ce(t), this.tensors.push(t);
  }
  resize(t) {
    if (t < 0)
      throw new Error(`TensorListResize expects size to be non-negative. Got: ${t}`);
    if (this.maxNumElements !== -1 && t > this.maxNumElements)
      throw new Error(`TensorListResize input size ${t} is greater maxNumElement ${this.maxNumElements}.`);
    const e = new ro([], this.elementShape, this.elementDtype, this.maxNumElements);
    e.tensors.length = t;
    for (let s = 0; s < Math.min(this.tensors.length, t); ++s)
      e.tensors[s] = this.tensors[s];
    return e;
  }
  getItem(t, e, s) {
    if (s !== this.elementDtype)
      throw new Error(`Invalid data types; op elements ${s}, but list elements ${this.elementDtype}`);
    if (t < 0 || t > this.tensors.length)
      throw new Error(`Trying to access element ${t} in a list with ${this.tensors.length} elements.`);
    if (this.tensors[t] == null)
      throw new Error(`element at index ${t} is null.`);
    Vn(this.tensors[t].shape, e, "TensorList shape mismatch: ");
    const r = va(this.elementShape, this.tensors, e);
    return G(this.tensors[t], r);
  }
  setItem(t, e) {
    if (e.dtype !== this.elementDtype)
      throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);
    if (t < 0 || this.maxNumElements !== -1 && t >= this.maxNumElements)
      throw new Error(`Trying to set element ${t} in a list with max ${this.maxNumElements} elements.`);
    Vn(this.elementShape, e.shape, "TensorList shape mismatch: "), ce(e), this.tensors[t] != null && (this.tensors[t].kept = !1), this.tensors[t] = e;
  }
  gather(t, e, s) {
    if (e !== this.elementDtype)
      throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);
    Vn(this.elementShape, s, "TensorList shape mismatch: "), t = t.slice(0, this.size());
    const r = va(this.elementShape, this.tensors, s);
    return t.length === 0 ? ee([], [0].concat(r)) : A(() => {
      const o = t.map((i) => G(this.tensors[i], r));
      return nn(o, 0);
    });
  }
  concat(t, e) {
    if (!!t && t !== this.elementDtype)
      throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${t}`);
    Vn(this.elementShape, e, "TensorList shape mismatch: ");
    const s = va(this.elementShape, this.tensors, e);
    return this.size() === 0 ? ee([], [0].concat(s)) : A(() => {
      const r = this.tensors.map((o) => G(o, s));
      return he(r, 0);
    });
  }
}
function Rz(n, t, e) {
  const s = n.dtype;
  if (n.shape.length < 1)
    throw new Error(`Tensor must be at least a vector, but saw shape: ${n.shape}`);
  if (n.dtype !== e)
    throw new Error(`Invalid data types; op elements ${n.dtype}, but list elements ${e}`);
  const r = n.shape.slice(1);
  Vn(r, t, "TensorList shape mismatch: ");
  const o = Un(n);
  return new ro(o, t, s);
}
function Ez(n, t, e, s) {
  return new ro([], n, t, s);
}
function Lz(n, t, e, s) {
  if (t.length !== n.shape[0])
    throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${n.shape[0]}`);
  const r = Math.max(...t);
  if (s != null && s !== -1 && r >= s)
    throw new Error(`Max index must be < array size (${r}  vs. ${s})`);
  const o = new ro([], e, n.dtype, s), i = Un(n, 0);
  return t.forEach((a, l) => {
    o.setItem(a, i[l]);
  }), o;
}
function Dz(n, t, e) {
  let s = 0;
  const r = t.map((u) => (s += u, s));
  if (s !== n.shape[0])
    throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${s}, and tensor's shape is: ${n.shape}`);
  const o = n.shape.slice(1), i = im(o, e), a = s === 0 ? 0 : n.size / s, l = A(() => {
    const u = [];
    n = G(n, [1, s, a]);
    for (let h = 0; h < t.length; ++h) {
      const p = [0, h === 0 ? 0 : r[h - 1], 0], f = [1, t[h], a];
      u[h] = G($t(n, p, f), i);
    }
    return n.dispose(), u;
  }), c = new ro([], e, n.dtype, t.length);
  for (let u = 0; u < l.length; u++)
    c.setItem(u, l[u]);
  return c;
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Gz = async (n, t, e) => {
  switch (n.op) {
    case "If":
    case "StatelessIf": {
      const s = I("thenBranch", n, t, e), r = I("elseBranch", n, t, e), o = I("cond", n, t, e), i = I("args", n, t, e);
      return (await o.data())[0] ? e.functionMap[s].executeFunctionAsync(i, e.tensorArrayMap, e.tensorListMap) : e.functionMap[r].executeFunctionAsync(i, e.tensorArrayMap, e.tensorListMap);
    }
    case "While":
    case "StatelessWhile": {
      const s = I("body", n, t, e), r = I("cond", n, t, e), o = I("args", n, t, e), i = await e.functionMap[r].executeFunctionAsync(o, e.tensorArrayMap, e.tensorListMap), a = o.map((u) => u.id);
      let l = await i[0].data();
      i.forEach((u) => {
        !u.kept && a.indexOf(u.id) === -1 && u.dispose();
      });
      let c = o;
      for (; l[0]; ) {
        const u = c;
        c = await e.functionMap[s].executeFunctionAsync(c, e.tensorArrayMap, e.tensorListMap);
        const h = c.map((p) => p.id);
        u.forEach((p) => {
          !p.kept && a.indexOf(p.id) === -1 && h.indexOf(p.id) === -1 && p.dispose();
        });
        const d = await e.functionMap[r].executeFunctionAsync(c, e.tensorArrayMap, e.tensorListMap);
        l = await d[0].data(), d.forEach((p) => {
          !p.kept && a.indexOf(p.id) === -1 && h.indexOf(p.id) === -1 && p.dispose();
        });
      }
      return c;
    }
    case "LoopCond": {
      const s = I("pred", n, t, e);
      return [Ds(s)];
    }
    case "Switch": {
      const s = I("pred", n, t, e);
      let r = I("data", n, t, e);
      return r.kept || (r = Ds(r)), (await s.data())[0] ? [void 0, r] : [r, void 0];
    }
    case "Merge": {
      const s = n.inputNames.find((r) => Ze(r, t, e) !== void 0);
      if (s) {
        const r = Ze(s, t, e);
        return [Ds(r)];
      }
      return;
    }
    case "Enter": {
      const s = I("frameName", n, t, e), r = I("tensor", n, t, e);
      return e.enterFrame(s), [Ds(r)];
    }
    case "Exit": {
      const s = I("tensor", n, t, e);
      return e.exitFrame(), [Ds(s)];
    }
    case "NextIteration": {
      const s = I("tensor", n, t, e);
      return e.nextIteration(), [Ds(s)];
    }
    case "TensorArrayV3": {
      const s = I("size", n, t, e), r = I("dtype", n, t, e), o = I("elementShape", n, t, e), i = I("dynamicSize", n, t, e), a = I("clearAfterRead", n, t, e), l = I("identicalElementShapes", n, t, e), c = I("name", n, t, e), u = new $z(c, r, s, o, l, i, a);
      return e.addTensorArray(u), [u.idTensor, ft(1)];
    }
    case "TensorArrayWriteV3": {
      const s = I("tensorArrayId", n, t, e), r = I("index", n, t, e), o = I("tensor", n, t, e), i = e.getTensorArray(s.id);
      return i.write(r, o), [i.idTensor];
    }
    case "TensorArrayReadV3": {
      const s = I("tensorArrayId", n, t, e), r = I("index", n, t, e);
      return [e.getTensorArray(s.id).read(r)];
    }
    case "TensorArrayGatherV3": {
      const s = I("tensorArrayId", n, t, e), r = I("indices", n, t, e), o = I("dtype", n, t, e);
      return [e.getTensorArray(s.id).gather(r, o)];
    }
    case "TensorArrayScatterV3": {
      const s = I("tensorArrayId", n, t, e), r = I("indices", n, t, e), o = I("tensor", n, t, e), i = e.getTensorArray(s.id);
      return i.scatter(r, o), [i.idTensor];
    }
    case "TensorArrayConcatV3": {
      const s = I("tensorArrayId", n, t, e), r = e.getTensorArray(s.id), o = I("dtype", n, t, e);
      return [r.concat(o)];
    }
    case "TensorArraySplitV3": {
      const s = I("tensorArrayId", n, t, e), r = I("tensor", n, t, e), o = I("lengths", n, t, e), i = e.getTensorArray(s.id);
      return i.split(o, r), [i.idTensor];
    }
    case "TensorArraySizeV3": {
      const s = I("tensorArrayId", n, t, e), r = e.getTensorArray(s.id);
      return [ft(r.size(), "int32")];
    }
    case "TensorArrayCloseV3": {
      const s = I("tensorArrayId", n, t, e), r = e.getTensorArray(s.id);
      return r.clearAndClose(), [r.idTensor];
    }
    case "TensorListSetItem": {
      const s = I("tensorListId", n, t, e), r = I("index", n, t, e), o = I("tensor", n, t, e), i = e.getTensorList(s.id);
      return i.setItem(r, o), [i.idTensor];
    }
    case "TensorListGetItem": {
      const s = I("tensorListId", n, t, e), r = I("index", n, t, e), o = I("elementShape", n, t, e), i = I("elementDType", n, t, e);
      return [e.getTensorList(s.id).getItem(r, o, i)];
    }
    case "TensorListScatterV2":
    case "TensorListScatter": {
      const s = I("indices", n, t, e), r = I("tensor", n, t, e), o = I("elementShape", n, t, e), i = I("numElements", n, t, e), a = Lz(r, s, o, i);
      return e.addTensorList(a), [a.idTensor];
    }
    case "TensorListReserve":
    case "EmptyTensorList": {
      const s = I("elementShape", n, t, e), r = I("elementDType", n, t, e);
      let o;
      n.op === "TensorListReserve" ? o = "numElements" : o = "maxNumElements";
      const i = I(o, n, t, e), a = n.op === "TensorListReserve" ? -1 : i, l = Ez(s, r, i, a);
      return e.addTensorList(l), [l.idTensor];
    }
    case "TensorListGather": {
      const s = I("tensorListId", n, t, e), r = I("indices", n, t, e), o = I("elementShape", n, t, e), i = I("elementDType", n, t, e);
      return [e.getTensorList(s.id).gather(r, i, o)];
    }
    case "TensorListStack": {
      const s = I("tensorListId", n, t, e), r = I("elementShape", n, t, e), o = I("elementDType", n, t, e), i = I("numElements", n, t, e);
      return [e.getTensorList(s.id).stack(r, o, i)];
    }
    case "TensorListFromTensor": {
      const s = I("tensor", n, t, e), r = I("elementShape", n, t, e), o = I("elementDType", n, t, e), i = Rz(s, r, o);
      return e.addTensorList(i), [i.idTensor];
    }
    case "TensorListConcat":
    case "TensorListConcatV2": {
      const s = I("tensorListId", n, t, e), r = e.getTensorList(s.id), o = I("dtype", n, t, e), i = I("elementShape", n, t, e);
      return [r.concat(o, i)];
    }
    case "TensorListPushBack": {
      const s = I("tensorListId", n, t, e), r = I("tensor", n, t, e), o = e.getTensorList(s.id);
      return o.pushBack(r), [o.idTensor];
    }
    case "TensorListPopBack": {
      const s = I("tensorListId", n, t, e), r = I("elementShape", n, t, e), o = I("elementDType", n, t, e);
      return [e.getTensorList(s.id).popBack(r, o)];
    }
    case "TensorListSplit": {
      const s = I("tensor", n, t, e), r = I("elementShape", n, t, e), o = I("lengths", n, t, e), i = Dz(s, o, r);
      return e.addTensorList(i), [i.idTensor];
    }
    case "TensorListLength": {
      const s = I("tensorListId", n, t, e), r = e.getTensorList(s.id);
      return [ft(r.size(), "int32")];
    }
    case "TensorListResize": {
      const s = I("tensorListId", n, t, e), r = I("size", n, t, e), i = e.getTensorList(s.id).resize(r);
      return e.addTensorList(i), [i.idTensor];
    }
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function bx(n, t, e) {
  const [s, r] = I("fusedOps", n, t, e), o = s === "biasadd", i = !o, a = r === "prelu", l = s === "fusedbatchnorm", c = I("numArgs", n, t, e);
  if (o) {
    if (a && c !== 2)
      throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");
    if (!a && o && c !== 1)
      throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.");
  }
  if (l)
    throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");
  const u = I("strides", n, t, e), h = gu(n, t, e), d = I("dataFormat", n, t, e).toUpperCase(), p = I("dilations", n, t, e);
  let [f, m] = I("args", n, t, e);
  i && (m = f, f = void 0);
  const g = I("leakyreluAlpha", n, t, e);
  return {
    stride: u,
    pad: h,
    dataFormat: d,
    dilations: p,
    biasArg: f,
    preluArg: m,
    activationFunc: r,
    leakyreluAlpha: g
  };
}
const Fz = (n, t, e, s = Pe) => {
  switch (n.op) {
    case "Conv1D": {
      const r = I("stride", n, t, e), o = I("pad", n, t, e), i = I("dataFormat", n, t, e).toUpperCase(), a = I("dilation", n, t, e);
      return [s.conv1d(I("x", n, t, e), I("filter", n, t, e), r, o, i, a)];
    }
    case "Conv2D": {
      const r = I("strides", n, t, e), o = gu(n, t, e), i = I("dataFormat", n, t, e).toUpperCase(), a = I("dilations", n, t, e);
      return [s.conv2d(I("x", n, t, e), I("filter", n, t, e), [r[1], r[2]], o, i, [a[1], a[2]])];
    }
    case "_FusedConv2D": {
      const { stride: r, pad: o, dataFormat: i, dilations: a, biasArg: l, preluArg: c, activationFunc: u, leakyreluAlpha: h } = bx(n, t, e);
      return [s.fused.conv2d({
        x: I("x", n, t, e),
        filter: I("filter", n, t, e),
        strides: [r[1], r[2]],
        pad: o,
        dataFormat: i,
        dilations: [a[1], a[2]],
        bias: l,
        activation: u,
        preluActivationWeights: c,
        leakyreluAlpha: h
      })];
    }
    case "FusedDepthwiseConv2dNative": {
      const { stride: r, pad: o, dataFormat: i, dilations: a, biasArg: l, preluArg: c, activationFunc: u, leakyreluAlpha: h } = bx(n, t, e);
      return [s.fused.depthwiseConv2d({
        x: I("x", n, t, e),
        filter: I("filter", n, t, e),
        strides: [r[1], r[2]],
        pad: o,
        dataFormat: i,
        dilations: [a[1], a[2]],
        bias: l,
        activation: u,
        preluActivationWeights: c,
        leakyreluAlpha: h
      })];
    }
    case "Conv2DBackpropInput":
    case "Conv2dTranspose": {
      const r = I("outputShape", n, t, e), o = I("strides", n, t, e), i = gu(n, t, e);
      return [s.conv2dTranspose(I("x", n, t, e), I("filter", n, t, e), r, [o[1], o[2]], i)];
    }
    case "DepthwiseConv2dNative":
    case "DepthwiseConv2d": {
      const r = I("strides", n, t, e), o = gu(n, t, e), i = I("dilations", n, t, e), a = I("dataFormat", n, t, e).toUpperCase();
      return [s.depthwiseConv2d(I("input", n, t, e), I("filter", n, t, e), [r[1], r[2]], o, a, [i[1], i[2]])];
    }
    case "Conv3D": {
      const r = I("strides", n, t, e), o = I("pad", n, t, e), i = I("dataFormat", n, t, e).toUpperCase(), a = I("dilations", n, t, e);
      return [s.conv3d(I("x", n, t, e), I("filter", n, t, e), [r[1], r[2], r[3]], o, i, [a[1], a[2], a[3]])];
    }
    case "AvgPool": {
      const r = I("strides", n, t, e), o = I("pad", n, t, e), i = I("kernelSize", n, t, e);
      return [s.avgPool(I("x", n, t, e), [i[1], i[2]], [r[1], r[2]], o)];
    }
    case "MaxPool": {
      const r = I("strides", n, t, e), o = I("pad", n, t, e), i = I("kernelSize", n, t, e);
      return [s.maxPool(I("x", n, t, e), [i[1], i[2]], [r[1], r[2]], o)];
    }
    case "MaxPoolWithArgmax": {
      const r = I("strides", n, t, e), o = I("pad", n, t, e), i = I("kernelSize", n, t, e), a = I("includeBatchInIndex", n, t, e), { result: l, indexes: c } = s.maxPoolWithArgmax(I("x", n, t, e), [i[1], i[2]], [r[1], r[2]], o, a);
      return [l, c];
    }
    case "AvgPool3D": {
      const r = I("strides", n, t, e), o = I("pad", n, t, e), i = I("kernelSize", n, t, e);
      return [s.avgPool3d(I("x", n, t, e), [i[1], i[2], i[3]], [r[1], r[2], r[3]], o)];
    }
    case "MaxPool3D": {
      const r = I("strides", n, t, e), o = I("pad", n, t, e), i = I("kernelSize", n, t, e);
      return [s.maxPool3d(I("x", n, t, e), [i[1], i[2], i[3]], [r[1], r[2], r[3]], o)];
    }
    case "Dilation2D": {
      const r = I("strides", n, t, e), o = I("pad", n, t, e), i = I("dilations", n, t, e), a = r[1], l = r[2], c = i[1], u = i[2];
      return [s.dilation2d(I("x", n, t, e), I("filter", n, t, e), [a, l], o, [c, u], "NHWC")];
    }
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Oz = (n, t, e, s = Pe) => {
  switch (n.op) {
    case "Fill": {
      const r = I("shape", n, t, e), o = I("dtype", n, t, e), i = I("value", n, t, e);
      return [s.fill(r, i, o)];
    }
    case "LinSpace": {
      const r = I("start", n, t, e), o = I("stop", n, t, e), i = I("num", n, t, e);
      return [s.linspace(r, o, i)];
    }
    case "Multinomial": {
      const r = I("logits", n, t, e), o = I("numSamples", n, t, e), i = I("seed", n, t, e);
      return [s.multinomial(r, o, i)];
    }
    case "OneHot": {
      const r = I("indices", n, t, e), o = I("depth", n, t, e), i = I("onValue", n, t, e), a = I("offValue", n, t, e), l = I("dtype", n, t, e);
      return [s.oneHot(r, o, i, a, l)];
    }
    case "Ones":
      return [s.ones(I("shape", n, t, e), I("dtype", n, t, e))];
    case "OnesLike":
      return [s.onesLike(I("x", n, t, e))];
    case "RandomStandardNormal":
      return [s.randomStandardNormal(I("shape", n, t, e), I("dtype", n, t, e), I("seed", n, t, e))];
    case "RandomUniform":
      return [s.randomUniform(
        I("shape", n, t, e),
        I("minval", n, t, e),
        I("maxval", n, t, e),
        I("dtype", n, t, e)
      )];
    case "Range": {
      const r = I("start", n, t, e), o = I("stop", n, t, e), i = I("step", n, t, e);
      return [s.range(r, o, i, I("dtype", n, t, e))];
    }
    case "TruncatedNormal": {
      const r = I("shape", n, t, e), o = I("mean", n, t, e), i = I("stdDev", n, t, e), a = I("seed", n, t, e);
      return [s.truncatedNormal(r, o, i, I("dtype", n, t, e), a)];
    }
    case "Zeros":
      return [s.zeros(I("shape", n, t, e), I("dtype", n, t, e))];
    case "ZerosLike":
      return [s.zerosLike(I("x", n, t, e))];
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _p(n, t, e) {
  const s = I("boxes", n, t, e), r = I("scores", n, t, e), o = I("maxOutputSize", n, t, e), i = I("iouThreshold", n, t, e), a = I("scoreThreshold", n, t, e), l = I("softNmsSigma", n, t, e);
  return {
    boxes: s,
    scores: r,
    maxOutputSize: o,
    iouThreshold: i,
    scoreThreshold: a,
    softNmsSigma: l
  };
}
const Az = async (n, t, e, s, r = Pe) => {
  switch (n.op) {
    case "NonMaxSuppressionV5": {
      const { boxes: o, scores: i, maxOutputSize: a, iouThreshold: l, scoreThreshold: c, softNmsSigma: u } = _p(n, t, e), h = await r.image.nonMaxSuppressionWithScoreAsync(o, i, a, l, c, u);
      return [h.selectedIndices, h.selectedScores];
    }
    case "NonMaxSuppressionV4": {
      const { boxes: o, scores: i, maxOutputSize: a, iouThreshold: l, scoreThreshold: c } = _p(n, t, e), u = I("padToMaxOutputSize", n, t, e), h = await r.image.nonMaxSuppressionPaddedAsync(o, i, a, l, c, u);
      return [h.selectedIndices, h.validOutputs];
    }
    case "NonMaxSuppressionV3":
    case "NonMaxSuppressionV2": {
      const { boxes: o, scores: i, maxOutputSize: a, iouThreshold: l, scoreThreshold: c } = _p(n, t, e);
      return [await r.image.nonMaxSuppressionAsync(o, i, a, l, c)];
    }
    case "Where": {
      const o = r.cast(I("condition", n, t, e), "bool"), i = [await r.whereAsync(o)];
      return o.dispose(), i;
    }
    case "ListDiff":
      return r.setdiff1dAsync(I("x", n, t, e), I("y", n, t, e));
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const zz = (n, t, e, s = Pe) => {
  switch (n.op) {
    case "LowerBound": {
      const r = I("sortedSequence", n, t, e), o = I("values", n, t, e);
      return [s.lowerBound(r, o)];
    }
    case "TopKV2": {
      const r = I("x", n, t, e), o = I("k", n, t, e), i = I("sorted", n, t, e), a = s.topk(r, o, i);
      return [a.values, a.indices];
    }
    case "UpperBound": {
      const r = I("sortedSequence", n, t, e), o = I("values", n, t, e);
      return [s.upperBound(r, o)];
    }
    case "Unique": {
      const r = I("x", n, t, e), o = s.unique(r);
      return [o.values, o.indices];
    }
    case "UniqueV2": {
      const r = I("x", n, t, e), o = I("axis", n, t, e), i = s.unique(r, o);
      return [i.values, i.indices];
    }
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Wz = (n, t, e, s = Pe) => {
  switch (n.op) {
    case "Const":
      return t[n.name];
    case "PlaceholderWithDefault":
      const r = I("default", n, t, e);
      return [Ze(n.name, t, e) || r];
    case "Placeholder":
      return [Ze(n.name, t, e)];
    case "Identity":
    case "StopGradient":
    case "FakeQuantWithMinMaxVars": {
      const u = I("x", n, t, e);
      return [Ds(u)];
    }
    case "IdentityN":
      return I("x", n, t, e).map((u) => Ds(u));
    case "Snapshot":
      const o = I("x", n, t, e);
      return [Ds(o)];
    case "Shape":
      return [s.tensor1d(I("x", n, t, e).shape, "int32")];
    case "ShapeN":
      return I("x", n, t, e).map((u) => s.tensor1d(u.shape));
    case "Size":
      return [s.scalar(I("x", n, t, e).size, "int32")];
    case "Rank":
      return [s.scalar(I("x", n, t, e).rank, "int32")];
    case "NoOp":
      return [s.scalar(1)];
    case "Print":
      const i = I("x", n, t, e), a = I("data", n, t, e), l = I("message", n, t, e), c = I("summarize", n, t, e);
      console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."), console.log(l);
      for (let u = 0; u < a.length; u++)
        console.log(Array.prototype.slice.call(a[u].dataSync()).slice(0, c));
      return [i];
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Vz {
  constructor(t, e) {
    this.keyDType = t, this.valueDType = e, this.handle = ft(0), this.tensorMap = /* @__PURE__ */ new Map(), ce(this.handle);
  }
  get id() {
    return this.handle.id;
  }
  clearAndClose() {
    this.tensorMap.forEach((t) => t.dispose()), this.tensorMap.clear(), this.handle.dispose();
  }
  size() {
    return this.tensorMap.size;
  }
  tensorSize() {
    return ft(this.size(), "int32");
  }
  async import(t, e) {
    this.checkKeyAndValueTensor(t, e);
    const s = await t.data();
    return this.tensorMap.forEach((r) => r.dispose()), this.tensorMap.clear(), A(() => {
      const r = Un(e), o = s.length, i = r.length;
      C(o === i, () => `The number of elements doesn't match, keys has ${o} elements, the values has ${i} elements.`);
      for (let a = 0; a < o; a++) {
        const l = s[a], c = r[a];
        ce(c), this.tensorMap.set(l, c);
      }
      return this.handle;
    });
  }
  async find(t, e) {
    this.checkKeyAndValueTensor(t, e);
    const s = await t.data();
    return A(() => {
      const r = [];
      for (let o = 0; o < s.length; o++) {
        const i = s[o], a = this.findWithDefault(i, e);
        r.push(a);
      }
      return nn(r);
    });
  }
  findWithDefault(t, e) {
    const s = this.tensorMap.get(t);
    return s != null ? s : e;
  }
  checkKeyAndValueTensor(t, e) {
    if (t.dtype !== this.keyDType)
      throw new Error(`Expect key dtype ${this.keyDType}, but got ${t.dtype}`);
    if (e.dtype !== this.valueDType)
      throw new Error(`Expect value dtype ${this.valueDType}, but got ${e.dtype}`);
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Mz = async (n, t, e, s) => {
  switch (n.op) {
    case "HashTable":
    case "HashTableV2": {
      const r = I("keyDType", n, t, e), o = I("valueDType", n, t, e), i = new Vz(r, o);
      return s.addHashTable(n.name, i), [i.handle];
    }
    case "LookupTableImport":
    case "LookupTableImportV2": {
      const r = I("tableHandle", n, t, e, s), o = I("keys", n, t, e), i = I("values", n, t, e);
      return [await s.getHashTableById(r.id).import(o, i)];
    }
    case "LookupTableFind":
    case "LookupTableFindV2": {
      const r = I("tableHandle", n, t, e, s), o = I("keys", n, t, e), i = I("defaultValue", n, t, e);
      return [await s.getHashTableById(r.id).find(o, i)];
    }
    case "LookupTableSize":
    case "LookupTableSizeV2": {
      const r = I("tableHandle", n, t, e, s);
      return [s.getHashTableById(r.id).tensorSize()];
    }
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Pz = (n, t, e, s = Pe) => {
  switch (n.op) {
    case "ResizeBilinear": {
      const r = I("images", n, t, e), o = I("size", n, t, e), i = I("alignCorners", n, t, e), a = I("halfPixelCenters", n, t, e);
      return [s.image.resizeBilinear(r, [o[0], o[1]], i, a)];
    }
    case "ResizeNearestNeighbor": {
      const r = I("images", n, t, e), o = I("size", n, t, e), i = I("alignCorners", n, t, e), a = I("halfPixelCenters", n, t, e);
      return [s.image.resizeNearestNeighbor(r, [o[0], o[1]], i, a)];
    }
    case "CropAndResize": {
      const r = I("image", n, t, e), o = I("boxes", n, t, e), i = I("boxInd", n, t, e), a = I("cropSize", n, t, e), l = I("method", n, t, e), c = I("extrapolationValue", n, t, e);
      return [s.image.cropAndResize(r, o, i, a, l, c)];
    }
    case "ImageProjectiveTransformV3": {
      const r = I("images", n, t, e), o = I("transforms", n, t, e), i = I("outputShape", n, t, e), a = I("fillValue", n, t, e), l = I("interpolation", n, t, e), c = I("fillMode", n, t, e);
      return [s.image.transform(r, o, l.toLowerCase(), c.toLowerCase(), a, i)];
    }
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Xz = (n, t, e, s = Pe) => {
  switch (n.op) {
    case "Equal":
      return [s.equal(I("a", n, t, e), I("b", n, t, e))];
    case "NotEqual":
      return [s.notEqual(I("a", n, t, e), I("b", n, t, e))];
    case "Greater":
      return [s.greater(I("a", n, t, e), I("b", n, t, e))];
    case "GreaterEqual":
      return [s.greaterEqual(I("a", n, t, e), I("b", n, t, e))];
    case "Less":
      return [s.less(I("a", n, t, e), I("b", n, t, e))];
    case "LessEqual":
      return [s.lessEqual(I("a", n, t, e), I("b", n, t, e))];
    case "LogicalAnd":
      return [s.logicalAnd(I("a", n, t, e), I("b", n, t, e))];
    case "LogicalNot":
      return [s.logicalNot(I("a", n, t, e))];
    case "LogicalOr":
      return [s.logicalOr(I("a", n, t, e), I("b", n, t, e))];
    case "Select":
    case "SelectV2":
      return [s.where(I("condition", n, t, e), I("a", n, t, e), I("b", n, t, e))];
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const _z = (n, t, e, s = Pe) => {
  switch (n.op) {
    case "BatchMatMul":
    case "BatchMatMulV2":
    case "MatMul":
      return [s.matMul(I("a", n, t, e), I("b", n, t, e), I("transposeA", n, t, e), I("transposeB", n, t, e))];
    case "Einsum":
      return [s.einsum(I("equation", n, t, e), ...I("tensors", n, t, e))];
    case "Transpose":
      return [s.transpose(I("x", n, t, e), I("perm", n, t, e))];
    case "_FusedMatMul":
      const [r, o] = I("fusedOps", n, t, e), i = r === "biasadd", a = o === "prelu", l = I("numArgs", n, t, e), c = I("leakyreluAlpha", n, t, e);
      if (i) {
        if (a && l !== 2)
          throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");
        if (!a && l !== 1)
          throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.");
      }
      const [u, h] = I("args", n, t, e);
      return [s.fused.matMul({
        a: I("a", n, t, e),
        b: I("b", n, t, e),
        transposeA: I("transposeA", n, t, e),
        transposeB: I("transposeB", n, t, e),
        bias: u,
        activation: o,
        preluActivationWeights: h,
        leakyreluAlpha: c
      })];
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Kz = (n, t, e, s = Pe) => {
  switch (n.op) {
    case "EuclideanNorm":
      return [s.euclideanNorm(I("x", n, t, e), I("axis", n, t, e), I("keepDims", n, t, e))];
    case "FusedBatchNorm":
    case "FusedBatchNormV2":
      return [s.batchNorm(I("x", n, t, e), I("mean", n, t, e), I("variance", n, t, e), I("offset", n, t, e), I("scale", n, t, e), I("epsilon", n, t, e))];
    case "FusedBatchNormV3":
      return [s.batchNorm(I("x", n, t, e), I("mean", n, t, e), I("variance", n, t, e), I("offset", n, t, e), I("scale", n, t, e), I("epsilon", n, t, e))];
    case "LRN":
      return [s.localResponseNormalization(I("x", n, t, e), I("radius", n, t, e), I("bias", n, t, e), I("alpha", n, t, e), I("beta", n, t, e))];
    case "Softmax":
      return [s.softmax(I("x", n, t, e))];
    case "LogSoftmax":
      return [s.logSoftmax(I("x", n, t, e))];
    case "SparseToDense":
      return [s.sparseToDense(I("sparseIndices", n, t, e), I("outputShape", n, t, e), I("sparseValues", n, t, e), I("defaultValue", n, t, e))];
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Zz = (n, t, e, s = Pe) => {
  switch (n.op) {
    case "Max": {
      const a = I("axis", n, t, e), l = I("keepDims", n, t, e);
      return [s.max(I("x", n, t, e), a, l)];
    }
    case "Mean": {
      const a = I("axis", n, t, e), l = I("keepDims", n, t, e);
      return [s.mean(I("x", n, t, e), a, l)];
    }
    case "Min": {
      const a = I("axis", n, t, e), l = I("keepDims", n, t, e);
      return [s.min(I("x", n, t, e), a, l)];
    }
    case "Sum": {
      const a = I("axis", n, t, e), l = I("keepDims", n, t, e);
      return [s.sum(I("x", n, t, e), a, l)];
    }
    case "All": {
      const a = I("axis", n, t, e), l = I("keepDims", n, t, e);
      return [s.all(I("x", n, t, e), a, l)];
    }
    case "Any": {
      const a = I("axis", n, t, e), l = I("keepDims", n, t, e);
      return [s.any(I("x", n, t, e), a, l)];
    }
    case "ArgMax": {
      const a = I("axis", n, t, e);
      return [s.argMax(I("x", n, t, e), a)];
    }
    case "ArgMin": {
      const a = I("axis", n, t, e);
      return [s.argMin(I("x", n, t, e), a)];
    }
    case "Prod": {
      const a = I("axis", n, t, e), l = I("keepDims", n, t, e);
      return [s.prod(I("x", n, t, e), a, l)];
    }
    case "Cumprod": {
      const a = I("axis", n, t, e), l = I("exclusive", n, t, e), c = I("reverse", n, t, e);
      return [s.cumprod(I("x", n, t, e), a, l, c)];
    }
    case "Cumsum": {
      const a = I("axis", n, t, e), l = I("exclusive", n, t, e), c = I("reverse", n, t, e);
      return [s.cumsum(I("x", n, t, e), a, l, c)];
    }
    case "Bincount":
      const r = I("x", n, t, e), o = I("weights", n, t, e), i = I("size", n, t, e);
      return [s.bincount(r, o, i)];
    case "DenseBincount": {
      const a = I("x", n, t, e), l = I("weights", n, t, e), c = I("size", n, t, e), u = I("binaryOutput", n, t, e);
      return [s.denseBincount(a, l, c, u)];
    }
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Bz = (n, t, e, s = Pe) => {
  switch (n.op) {
    case "ConcatV2":
    case "Concat": {
      const r = I("n", n, t, e), o = I("axis", n, t, e);
      let i = I("tensors", n, t, e);
      return i = i.slice(0, r), [s.concat(i, o)];
    }
    case "Gather": {
      const r = I("x", n, t, e), o = I("indices", n, t, e);
      return [s.gather(r, s.cast(o, "int32"), 0)];
    }
    case "GatherV2": {
      const r = I("axis", n, t, e), o = I("batchDims", n, t, e), i = I("x", n, t, e), a = I("indices", n, t, e);
      return [s.gather(i, s.cast(a, "int32"), r, o)];
    }
    case "Reverse": {
      const r = I("dims", n, t, e), o = [];
      for (let a = 0; a < r.length; a++)
        r[a] && o.push(a);
      const i = I("x", n, t, e);
      return [s.reverse(i, o)];
    }
    case "ReverseV2": {
      const r = I("axis", n, t, e), o = I("x", n, t, e);
      return [s.reverse(o, r)];
    }
    case "Slice": {
      const r = I("begin", n, t, e), o = I("size", n, t, e);
      return [s.slice(I("x", n, t, e), r, o)];
    }
    case "StridedSlice": {
      const r = I("begin", n, t, e), o = I("end", n, t, e), i = I("strides", n, t, e), a = I("beginMask", n, t, e), l = I("endMask", n, t, e), c = I("ellipsisMask", n, t, e), u = I("newAxisMask", n, t, e), h = I("shrinkAxisMask", n, t, e), d = I("x", n, t, e);
      return [s.stridedSlice(d, r, o, i, a, l, c, u, h)];
    }
    case "Pack":
      return A(() => {
        const r = I("axis", n, t, e), o = I("tensors", n, t, e), i = o[0].shape, a = s.squeeze(o[0]).shape, l = o.map((c) => {
          const u = Nt(c.shape, i);
          if (!u && !Nt(s.squeeze(c).shape, a))
            throw new Error("the input tensors shape does not match");
          return u ? c : s.reshape(c, i);
        });
        return [s.stack(l, r)];
      });
    case "Unpack": {
      const r = I("axis", n, t, e), o = I("tensor", n, t, e);
      return s.unstack(o, r);
    }
    case "Tile": {
      const r = I("reps", n, t, e);
      return [s.tile(I("x", n, t, e), r)];
    }
    case "Split":
    case "SplitV": {
      const r = I("axis", n, t, e), o = I("numOrSizeSplits", n, t, e), i = I("x", n, t, e);
      return s.split(i, o, r);
    }
    case "ScatterNd": {
      const r = I("indices", n, t, e), o = I("values", n, t, e), i = I("shape", n, t, e);
      return [s.scatterND(r, o, i)];
    }
    case "GatherNd": {
      const r = I("x", n, t, e), o = I("indices", n, t, e);
      return [s.gatherND(r, o)];
    }
    case "SparseToDense": {
      const r = I("sparseIndices", n, t, e), o = I("outputShape", n, t, e), i = I("sparseValues", n, t, e), a = I("defaultValue", n, t, e);
      return [s.sparseToDense(r, i, o, i.dtype === a.dtype ? a : s.cast(a, i.dtype))];
    }
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Hz = (n, t, e, s = Pe) => {
  switch (n.op) {
    case "SparseFillEmptyRows": {
      const { outputIndices: r, outputValues: o, emptyRowIndicator: i, reverseIndexMap: a } = s.sparse.sparseFillEmptyRows(I("indices", n, t, e), I("values", n, t, e), I("denseShape", n, t, e), I("defaultValue", n, t, e));
      return [
        r,
        o,
        i,
        a
      ];
    }
    case "SparseReshape": {
      const { outputIndices: r, outputShape: o } = s.sparse.sparseReshape(I("inputIndices", n, t, e), I("inputShape", n, t, e), I("newShape", n, t, e));
      return [r, o];
    }
    case "SparseSegmentMean":
      return [s.sparse.sparseSegmentMean(I("data", n, t, e), I("indices", n, t, e), I("segmentIds", n, t, e))];
    case "SparseSegmentSum":
      return [s.sparse.sparseSegmentSum(I("data", n, t, e), I("indices", n, t, e), I("segmentIds", n, t, e))];
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Uz = (n, t, e, s = Pe) => {
  switch (n.op) {
    case "FFT":
      return [s.fft(I("x", n, t, e))];
    case "IFFT":
      return [s.ifft(I("x", n, t, e))];
    case "RFFT":
      return [s.rfft(I("x", n, t, e))];
    case "IRFFT":
      return [s.irfft(I("x", n, t, e))];
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Yz = (n, t, e, s = Pe) => {
  switch (n.op) {
    case "StringNGrams": {
      const { nGrams: r, nGramsSplits: o } = s.string.stringNGrams(I("data", n, t, e), I("dataSplits", n, t, e), I("separator", n, t, e), I("nGramWidths", n, t, e), I("leftPad", n, t, e), I("rightPad", n, t, e), I("padWidth", n, t, e), I("preserveShortSequences", n, t, e));
      return [r, o];
    }
    case "StringSplit": {
      const { indices: r, values: o, shape: i } = s.string.stringSplit(I("input", n, t, e), I("delimiter", n, t, e), I("skipEmpty", n, t, e));
      return [r, o, i];
    }
    case "StringToHashBucketFast":
      return [s.string.stringToHashBucketFast(I("input", n, t, e), I("numBuckets", n, t, e))];
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const jz = (n, t, e, s = Pe) => {
  switch (n.op) {
    case "Cast":
      return [s.cast(I("x", n, t, e), I("dtype", n, t, e))];
    case "ExpandDims": {
      const r = I("axis", n, t, e);
      return [s.expandDims(I("x", n, t, e), r)];
    }
    case "Squeeze": {
      const r = I("axis", n, t, e);
      return [s.squeeze(I("x", n, t, e), r)];
    }
    case "Reshape":
      return [s.reshape(I("x", n, t, e), I("shape", n, t, e))];
    case "MirrorPad":
      return [s.mirrorPad(I("x", n, t, e), I("padding", n, t, e), I("mode", n, t, e))];
    case "PadV2":
    case "Pad":
      return [s.pad(I("x", n, t, e), I("padding", n, t, e), I("constantValue", n, t, e))];
    case "SpaceToBatchND": {
      const r = I("blockShape", n, t, e), o = I("paddings", n, t, e);
      return [s.spaceToBatchND(I("x", n, t, e), r, o)];
    }
    case "BatchToSpaceND": {
      const r = I("blockShape", n, t, e), o = I("crops", n, t, e);
      return [s.batchToSpaceND(I("x", n, t, e), r, o)];
    }
    case "DepthToSpace": {
      const r = I("blockSize", n, t, e), o = I("dataFormat", n, t, e).toUpperCase();
      return [s.depthToSpace(I("x", n, t, e), r, o)];
    }
    case "BroadcastTo":
      return [s.broadcastTo(I("x", n, t, e), I("shape", n, t, e))];
    case "BroadcastArgs":
      return [s.broadcastArgs(I("s0", n, t, e), I("s1", n, t, e))];
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function xx(n, t, e, s, r = A) {
  const o = ((i, a, l) => {
    switch (i.category) {
      case "arithmetic":
        return r(() => Tz(i, a, l));
      case "basic_math":
        return r(() => Nz(i, a, l));
      case "control":
        return Gz(i, a, l);
      case "convolution":
        return r(() => Fz(i, a, l));
      case "creation":
        return r(() => Oz(i, a, l));
      case "dynamic":
        return Az(i, a, l);
      case "evaluation":
        return r(() => zz(i, a, l));
      case "image":
        return r(() => Pz(i, a, l));
      case "graph":
        return r(() => Wz(i, a, l));
      case "logical":
        return r(() => Xz(i, a, l));
      case "matrices":
        return r(() => _z(i, a, l));
      case "normalization":
        return r(() => Kz(i, a, l));
      case "reduction":
        return r(() => Zz(i, a, l));
      case "slice_join":
        return r(() => Bz(i, a, l));
      case "sparse":
        return r(() => Hz(i, a, l));
      case "spectral":
        return r(() => Uz(i, a, l));
      case "string":
        return r(() => Yz(i, a, l));
      case "transformation":
        return r(() => jz(i, a, l));
      case "hash_table":
        return Mz(i, a, l, s);
      case "custom":
        const c = _S(i.op);
        if (c && c.customExecutor)
          return c.customExecutor(new kz(i, a, l));
        throw TypeError(`Custom op ${i.op} is not registered.`);
      default:
        throw TypeError(`Unknown op '${i.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`);
    }
  })(n, t, e);
  return gr(o) ? o.then((i) => [].concat(i)) : [].concat(o);
}
class wx {
  constructor(t = {}, e = {}, s = {}, r = {}) {
    this.weightMap = t, this.tensorArrayMap = e, this.tensorListMap = s, this.functionMap = r, this.rootContext = { id: 0, frameName: "", iterationId: 0 }, this.contexts = [this.rootContext], this.lastId = 0, this.generateCurrentContextIds();
  }
  newFrame(t, e) {
    return { id: t, frameName: e, iterationId: 0 };
  }
  set currentContext(t) {
    this.contexts !== t && (this.contexts = t, this.generateCurrentContextIds());
  }
  get currentContext() {
    return this.contexts;
  }
  get currentContextId() {
    return this._currentContextIds[0];
  }
  get currentContextIds() {
    return this._currentContextIds;
  }
  generateCurrentContextIds() {
    const t = [];
    for (let e = 0; e < this.contexts.length - 1; e++) {
      const s = this.contexts.slice(0, this.contexts.length - e);
      t.push(this.contextIdforContexts(s));
    }
    t.push(""), this._currentContextIds = t;
  }
  contextIdforContexts(t) {
    return t ? t.map((e) => e.id === 0 && e.iterationId === 0 ? "" : `${e.frameName}-${e.iterationId}`).join("/") : "";
  }
  enterFrame(t) {
    this.contexts && (this.lastId++, this.contexts = this.contexts.slice(), this.contexts.push(this.newFrame(this.lastId, t)), this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)));
  }
  exitFrame() {
    if (this.contexts && this.contexts.length > 1)
      this.contexts = this.contexts.slice(), this.contexts.splice(-1), this.currentContextIds.shift();
    else
      throw new Error("Cannot exit frame, the context is empty");
  }
  nextIteration() {
    if (this.contexts && this.contexts.length > 0) {
      this.contexts = this.contexts.slice(), this.lastId++;
      const t = Object.assign({}, this.contexts[this.contexts.length - 1]);
      t.iterationId += 1, t.id = this.lastId, this.contexts.splice(-1, 1, t), this._currentContextIds.splice(0, 1, this.contextIdforContexts(this.contexts));
    } else
      throw new Error("Cannot increase frame iteration, the context is empty");
  }
  getWeight(t) {
    return this.weightMap[t];
  }
  addTensorArray(t) {
    this.tensorArrayMap[t.id] = t;
  }
  getTensorArray(t) {
    return this.tensorArrayMap[t];
  }
  addTensorList(t) {
    this.tensorListMap[t.id] = t;
  }
  getTensorList(t) {
    return this.tensorListMap[t];
  }
  dispose(t) {
    for (const e in this.tensorArrayMap)
      this.tensorArrayMap[e].clearAndClose(t);
    for (const e in this.tensorListMap)
      this.tensorListMap[e].clearAndClose(t);
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ix(n, t, e, s) {
  const r = /* @__PURE__ */ new Set(), o = [];
  let i = null, a = null;
  const l = /* @__PURE__ */ new Set(), c = Object.keys(n).map((d) => un(d)[0]);
  let u = [];
  s != null && (u = s.map((d) => un(d.name)[0]));
  const h = [...t];
  for (; h.length > 0; ) {
    const d = h.pop();
    if ((BS(d) || eW(d) || nW(d)) && i == null && (i = d, a = i.children.map((p) => p.name).filter((p) => r.has(p))), r.add(d.name), e[d.name] == null && c.indexOf(d.name) === -1 && u.indexOf(d.name) === -1) {
      if (d.inputs.length === 0) {
        o.push(d.name);
        continue;
      }
      d.inputs.forEach((p) => {
        l.has(p.name) || (l.add(p.name), h.push(p));
      });
    }
  }
  return { inputs: n, outputs: t, usedNodes: r, missingInputs: o, dynamicNode: i, syncInputs: a };
}
function Jz(n, t, e) {
  const { usedNodes: s, inputs: r } = e, o = [], i = Object.keys(r).map((u) => un(u)[0]).map((u) => n.nodes[u]), a = n.initNodes;
  i.forEach((u) => {
    s.has(u.name) && o.push(u);
  }), n.weights.forEach((u) => {
    s.has(u.name) && o.push(u);
  }), a != null && a.forEach((u) => {
    s.has(u.name) && o.push(u);
  });
  const l = /* @__PURE__ */ new Set(), c = [];
  for (; o.length > 0; ) {
    const u = o.pop();
    l.add(u.name), t[u.name] || c.push(u), u.children.forEach((h) => {
      !l.has(h.name) && s.has(h.name) && h.inputs.every((d) => l.has(d.name)) && o.push(h);
    });
  }
  return c;
}
const Qz = [
  "Switch",
  "Merge",
  "Enter",
  "Exit",
  "NextIteration",
  "StatelessIf",
  "StatelessWhile",
  "if",
  "While"
], qz = [
  "NonMaxSuppressionV2",
  "NonMaxSuppressionV3",
  "NonMaxSuppressionV5",
  "Where"
], tW = [
  "HashTable",
  "HashTableV2",
  "LookupTableImport",
  "LookupTableImportV2",
  "LookupTableFind",
  "LookupTableFindV2",
  "LookupTableSize",
  "LookupTableSizeV2"
];
function BS(n) {
  return Qz.indexOf(n.op) >= 0;
}
function eW(n) {
  return qz.indexOf(n.op) >= 0;
}
function nW(n) {
  return tW.indexOf(n.op) >= 0;
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Pu {
  constructor(t, e) {
    this.graph = t, this.parent = e, this.compiledMap = /* @__PURE__ */ new Map(), this._weightMap = {}, this.SEPERATOR = ",", this._functions = {}, this._functionExecutorMap = {}, this.intermediateTensors = {}, this.keepTensorForDebug = !1, this._outputs = t.outputs, this._inputs = t.inputs, this._initNodes = t.initNodes, this._signature = t.signature, this._functions = t.functions, t.functions != null && Object.keys(t.functions).forEach((s) => {
      this._functionExecutorMap[s] = new Pu(t.functions[s], this);
    });
  }
  get weightIds() {
    return this.parent ? this.parent.weightIds : this._weightIds;
  }
  get functionExecutorMap() {
    return this.parent ? this.parent.functionExecutorMap : this._functionExecutorMap;
  }
  get weightMap() {
    return this.parent ? this.parent.weightMap : this._weightMap;
  }
  set weightMap(t) {
    const e = Object.keys(t).map((s) => t[s].map((r) => r.id));
    this._weightIds = [].concat(...e), this._weightMap = t;
  }
  set resourceManager(t) {
    this._resourceManager = t;
  }
  get inputs() {
    return this._inputs.map((t) => ({
      name: t.name,
      shape: t.attrParams.shape ? t.attrParams.shape.value : void 0,
      dtype: t.attrParams.dtype ? t.attrParams.dtype.value : void 0
    }));
  }
  get outputs() {
    return this._outputs.map((t) => ({
      name: t.name,
      shape: t.attrParams.shape ? t.attrParams.shape.value : void 0,
      dtype: t.attrParams.dtype ? t.attrParams.dtype.value : void 0
    }));
  }
  get inputNodes() {
    return this._inputs.map((t) => t.signatureKey || t.name);
  }
  get outputNodes() {
    return this._outputs.map((t) => {
      const e = t.signatureKey || t.name;
      return t.defaultOutput ? `${e}:${t.defaultOutput}` : e;
    });
  }
  get functions() {
    return Object.keys(this._functions).reduce((t, e) => (t[e] = this._functions[e].signature, t), {});
  }
  getCompilationKey(t, e) {
    const s = t.map((o) => o.name).sort(), r = e.map((o) => o.name).sort();
    return s.join(this.SEPERATOR) + "--" + r.join(this.SEPERATOR);
  }
  compile(t, e) {
    const s = Ix(t, e, this.weightMap, this._initNodes), { missingInputs: r, dynamicNode: o, syncInputs: i } = s;
    if (o != null)
      throw new Error(`This execution contains the node '${o.name}', which has the dynamic op '${o.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${i}]`);
    if (r.length > 0) {
      const a = e.map((c) => c.name), l = Object.keys(t);
      throw new Error(`Cannot compute the outputs [${a}] from the provided inputs [${l}]. Missing the following inputs: [${r}]`);
    }
    return Jz(this.graph, this.weightMap, s);
  }
  execute(t, e) {
    t = this.mapInputs(t);
    const s = Object.keys(t).sort();
    this.checkInputs(t), this.checkInputShapeAndType(t), e = this.mapOutputs(e), this.checkOutputs(e);
    const r = s.map((h) => this.graph.nodes[un(h)[0]]), o = e.map((h) => un(h)[0]);
    let i = o.map((h) => this.graph.nodes[h]);
    this.resetIntermediateTensors(), i.length === 0 && (i = this._outputs);
    const a = this.getCompilationKey(r, i);
    let l = this.compiledMap.get(a);
    l == null && (l = this.compile(t, i), this.compiledMap.set(a, l));
    const c = {}, u = {};
    return A(() => {
      const h = new wx(this.weightMap, c, u, this.functionExecutorMap), d = Object.assign({}, this.weightMap);
      Object.keys(t).forEach((m) => {
        const [g, y] = un(m), b = [];
        b[y] = t[m], d[g] = b;
      });
      const p = this.getFrozenTensorIds(d), f = {};
      for (let m = 0; m < l.length; m++) {
        const g = l[m];
        if (!d[g.name]) {
          const y = xx(g, d, h, this._resourceManager);
          if (gr(y))
            throw new Error(`The execution of the op '${g.op}' returned a promise. Please use model.executeAsync() instead.`);
          d[g.name] = y, this.checkTensorForDisposal(g.name, g, d, h, p, o, f);
        }
      }
      return this.parent == null && h.dispose(p), e.map((m) => Ze(m, d, h));
    });
  }
  getFrozenTensorIds(t) {
    const e = [].concat.apply([], Object.keys(t).map((s) => t[s]).map((s) => s.map((r) => r.id)));
    return new Set(e);
  }
  checkTensorForDisposal(t, e, s, r, o, i, a) {
    e.category === "control" || i.indexOf(t) !== -1 || (s[t].forEach((l) => {
      l != null && (a[l.id] = (a[l.id] || 0) + e.children.length);
    }), e.inputs.forEach((l) => {
      if (l.category !== "control") {
        const c = VA(l.name, s, r);
        c != null && c.forEach((u) => {
          if (u && !u.kept && !o.has(u.id)) {
            const h = a[u.id];
            if (h === 1) {
              if (!this.keepTensorForDebug)
                u.dispose();
              else {
                const [d, p] = bs(e.name, r);
                this.intermediateTensors[d] ? this.intermediateTensors[d][p] = u : (this.intermediateTensors[d] = [], this.intermediateTensors[d][p] = u);
              }
              delete a[u.id];
            } else
              h != null && a[u.id]--;
          }
        });
      }
    }));
  }
  async executeAsync(t, e) {
    return this._executeAsync(t, e);
  }
  disposeIntermediateTensors() {
    !this.intermediateTensors || (Object.keys(this.intermediateTensors).forEach((t) => this.intermediateTensors[t].forEach((e) => e.dispose())), this.disposeTensorsMap());
  }
  disposeTensorsMap() {
    !this.tensorsMap || Object.keys(this.tensorsMap).forEach((t) => {
      this.tensorsMap[t].forEach((s) => {
        s && !s.kept && !s.isDisposed && !this.keepIds.has(s.id) && s.dispose();
      });
    });
  }
  getIntermediateTensors() {
    return this.tensorsMap;
  }
  resetIntermediateTensors() {
    for (const t in this.intermediateTensors)
      this.intermediateTensors[t].forEach((e) => e.dispose()), delete this.intermediateTensors[t];
  }
  async _executeAsync(t, e, s = !1, r = {}, o = {}) {
    s || (t = this.mapInputs(t), this.checkInputs(t), this.checkInputShapeAndType(t), e = this.mapOutputs(e), this.checkOutputs(e));
    try {
      this.keepTensorForDebug = V().getBool("KEEP_INTERMEDIATE_TENSORS");
    } catch (u) {
      console.warn(u.message);
    }
    this.resetIntermediateTensors();
    const i = new wx(this.weightMap, r, o, this.functionExecutorMap);
    this.tensorsMap = await this.executeWithControlFlow(t, i, e, s);
    const a = e.map((u) => Ze(u, this.tensorsMap, i)), l = a.map((u) => u.id), c = Object.keys(t).map((u) => t[u].id);
    return this.keepIds = /* @__PURE__ */ new Set([...l, ...c, ...this.weightIds]), this.keepTensorForDebug || this.disposeTensorsMap(), this.parent == null && i.dispose(this.keepIds), a;
  }
  async executeFunctionAsync(t, e, s) {
    const r = t.reduce((o, i, a) => (o[this.inputs[a].name] = i, o), {});
    return this._executeAsync(r, this.outputNodes, !0, e, s);
  }
  async executeWithControlFlow(t, e, s, r) {
    const o = Object.keys(t), i = o.map((w) => this.graph.nodes[un(w)[0]]), a = s.map((w) => un(w)[0]);
    let l = a.map((w) => this.graph.nodes[w]);
    l.length === 0 && (l = this._outputs);
    const { usedNodes: c, missingInputs: u, dynamicNode: h, syncInputs: d } = Ix(t, l, this.weightMap, this._initNodes), p = [
      ...i,
      ...this.graph.weights,
      ...this._initNodes || []
    ].map((w) => ({ node: w, contexts: e.currentContext })), f = Object.assign({}, this.weightMap);
    Object.keys(t).forEach((w) => {
      const [x, S] = un(w), v = [];
      v[S] = t[w], f[x] = v;
    });
    const m = {}, g = this.getFrozenTensorIds(f), y = {};
    for (; p.length > 0; ) {
      const w = this.processStack(i, p, e, f, y, g, a, m, c);
      await Promise.all(w);
    }
    h == null && !r && console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");
    const b = l.filter((w) => !BS(w) && !Ze(w.name, f, e)).map((w) => w.name);
    if (b.length > 0) {
      let w = "";
      throw h != null && (w = `Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${d}]`), new Error(`Cannot compute the outputs [${b}] from the provided inputs [${o}]. Consider providing the following inputs: [${u}]. ${w}`);
    }
    return f;
  }
  processStack(t, e, s, r, o, i, a, l, c) {
    const u = [];
    for (; e.length > 0; ) {
      const h = e.pop();
      s.currentContext = h.contexts;
      let d = "";
      if (h.node.op === "Enter" && I("isConstant", h.node, r, s) && ([d] = bs(h.node.name, s)), r[h.node.name] == null) {
        const p = xx(h.node, r, s, this._resourceManager);
        d || ([d] = bs(h.node.name, s));
        const f = s.currentContext;
        gr(p) ? u.push(p.then((m) => (r[d] = m, s.currentContext = f, this.checkTensorForDisposal(d, h.node, r, s, i, a, l), this.processChildNodes(h.node, e, s, r, o, c), m))) : (r[d] = p, this.checkTensorForDisposal(d, h.node, r, s, i, a, l), this.processChildNodes(h.node, e, s, r, o, c));
      } else
        this.processChildNodes(h.node, e, s, r, o, c);
    }
    return u;
  }
  processChildNodes(t, e, s, r, o, i) {
    t.children.forEach((a) => {
      const [l] = bs(a.name, s);
      o[l] || !i.has(a.name) || (a.op === "Merge" ? a.inputNames.some((c) => !!Ze(c, r, s)) && (o[l] = !0, e.push({ contexts: s.currentContext, node: a })) : a.inputNames.every((c) => !!Ze(c, r, s)) && (o[l] = !0, e.push({ contexts: s.currentContext, node: a })));
    });
  }
  dispose() {
    Object.keys(this.weightMap).forEach((t) => this.weightMap[t].forEach((e) => e.dispose()));
  }
  checkInputShapeAndType(t) {
    Object.keys(t).forEach((e) => {
      const s = t[e], [r] = un(e), o = this.graph.nodes[r];
      if (o.attrParams.shape && o.attrParams.shape.value) {
        const i = o.attrParams.shape.value, a = i.length === s.shape.length && s.shape.every((l, c) => i[c] === -1 || i[c] === l);
        C(a, () => `The shape of dict['${o.name}'] provided in model.execute(dict) must be [${i}], but was [${s.shape}]`);
      }
      o.attrParams.dtype && o.attrParams.dtype.value && C(s.dtype === o.attrParams.dtype.value, () => `The dtype of dict['${o.name}'] provided in model.execute(dict) must be ${o.attrParams.dtype.value}, but was ${s.dtype}`);
    });
  }
  mapInputs(t) {
    const e = {};
    for (const s in t)
      if (this._signature != null && this._signature.inputs != null && this._signature.inputs[s] != null) {
        const r = this._signature.inputs[s];
        e[r.name] = t[s];
      } else
        e[s] = t[s];
    return e;
  }
  checkInputs(t) {
    const e = Object.keys(t).filter((s) => {
      const [r] = un(s);
      return this.graph.nodes[r] == null;
    });
    if (e.length > 0)
      throw new Error(`The dict provided in model.execute(dict) has keys: [${e}] that are not part of graph`);
  }
  mapOutputs(t) {
    return t.map((e) => this._signature != null && this._signature.outputs != null && this._signature.outputs[e] != null ? this._signature.outputs[e].name : e, {});
  }
  checkOutputs(t) {
    t.forEach((e) => {
      const [s] = un(e);
      if (!this.graph.nodes[s])
        throw new Error(`The output '${e}' is not found in the graph`);
    });
  }
}
class sW {
  constructor(t = {}, e = {}) {
    this.hashTableNameToHandle = t, this.hashTableMap = e;
  }
  addHashTable(t, e) {
    this.hashTableNameToHandle[t] = e.handle, this.hashTableMap[e.id] = e;
  }
  getHashTableHandleByName(t) {
    return this.hashTableNameToHandle[t];
  }
  getHashTableById(t) {
    return this.hashTableMap[t];
  }
  dispose() {
    for (const t in this.hashTableMap)
      this.hashTableMap[t].clearAndClose(), delete this.hashTableMap[t];
    for (const t in this.hashTableNameToHandle)
      this.hashTableNameToHandle[t].dispose(), delete this.hashTableNameToHandle[t];
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const rW = "?tfjs-format=file", oW = "model.json";
class sb {
  constructor(t, e = {}, s = zm) {
    this.modelUrl = t, this.loadOptions = e, this.version = "n/a", this.io = s, e == null && (this.loadOptions = {}), this.resourceManager = new sW();
  }
  get modelVersion() {
    return this.version;
  }
  get inputNodes() {
    return this.executor.inputNodes;
  }
  get outputNodes() {
    return this.executor.outputNodes;
  }
  get inputs() {
    return this.executor.inputs;
  }
  get outputs() {
    return this.executor.outputs;
  }
  get weights() {
    return this.executor.weightMap;
  }
  get metadata() {
    return this.artifacts.userDefinedMetadata;
  }
  get modelSignature() {
    return this.signature;
  }
  get modelStructuredOutputKeys() {
    return this.structuredOutputKeys;
  }
  findIOHandler() {
    const t = this.modelUrl;
    if (t.load != null)
      this.handler = t;
    else if (this.loadOptions.requestInit != null)
      this.handler = this.io.browserHTTPRequest(t, this.loadOptions);
    else {
      const e = this.io.getLoadHandlers(t, this.loadOptions);
      if (e.length === 0)
        e.push(this.io.browserHTTPRequest(t, this.loadOptions));
      else if (e.length > 1)
        throw new Error(`Found more than one (${e.length}) load handlers for URL '${[t]}'`);
      this.handler = e[0];
    }
  }
  load() {
    if (this.findIOHandler(), this.handler.load == null)
      throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");
    const t = this.handler.load();
    return gr(t) ? t.then((e) => this.loadSync(e)) : this.loadSync(t);
  }
  loadSync(t) {
    this.artifacts = t;
    const e = this.artifacts.modelTopology;
    let s = this.artifacts.signature;
    if (this.artifacts.userDefinedMetadata != null) {
      const o = this.artifacts.userDefinedMetadata;
      o.signature != null && (s = o.signature), o.structuredOutputKeys != null && (this.structuredOutputKeys = o.structuredOutputKeys);
    }
    this.signature = s, this.version = `${e.versions.producer}.${e.versions.minConsumer}`;
    const r = this.io.decodeWeights(this.artifacts.weightData, this.artifacts.weightSpecs);
    if (this.executor = new Pu(mx.Instance.transformGraph(e, this.signature)), this.executor.weightMap = this.convertTensorMapToTensorsMap(r), this.executor.resourceManager = this.resourceManager, t.modelInitializer != null && t.modelInitializer.node != null) {
      const o = mx.Instance.transformGraph(t.modelInitializer);
      this.initializer = new Pu(o), this.initializer.weightMap = this.executor.weightMap, this.initializer.resourceManager = this.resourceManager, this.initializer.executeAsync({}, []);
    }
    return !0;
  }
  async save(t, e) {
    if (typeof t == "string") {
      const s = this.io.getSaveHandlers(t);
      if (s.length === 0)
        throw new Error(`Cannot find any save handlers for URL '${t}'`);
      if (s.length > 1)
        throw new Error(`Found more than one (${s.length}) save handlers for URL '${t}'`);
      t = s[0];
    }
    if (t.save == null)
      throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");
    return t.save(this.artifacts);
  }
  predict(t, e) {
    const s = this.execute(t, this.outputNodes);
    if (this.structuredOutputKeys) {
      const r = s instanceof Lt ? [s] : s, o = {};
      return r.forEach((i, a) => o[this.structuredOutputKeys[a]] = i), o;
    }
    return s;
  }
  normalizeInputs(t) {
    if (!(t instanceof Lt) && !Array.isArray(t))
      return t;
    if (t = Array.isArray(t) ? t : [t], t.length !== this.inputNodes.length)
      throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${t.length} input tensors.`);
    return this.inputNodes.reduce((e, s, r) => (e[s] = t[r], e), {});
  }
  normalizeOutputs(t) {
    return t = t || this.outputNodes, Array.isArray(t) ? t : [t];
  }
  execute(t, e) {
    t = this.normalizeInputs(t), e = this.normalizeOutputs(e);
    const s = this.executor.execute(t, e);
    return s.length > 1 ? s : s[0];
  }
  async executeAsync(t, e) {
    t = this.normalizeInputs(t), e = this.normalizeOutputs(e);
    const s = await this.executor.executeAsync(t, e);
    return s.length > 1 ? s : s[0];
  }
  getIntermediateTensors() {
    return this.executor.getIntermediateTensors();
  }
  disposeIntermediateTensors() {
    this.executor.disposeIntermediateTensors();
  }
  convertTensorMapToTensorsMap(t) {
    return Object.keys(t).reduce((e, s) => (e[s] = [t[s]], e), {});
  }
  dispose() {
    this.executor.dispose(), this.initializer && this.initializer.dispose(), this.resourceManager.dispose();
  }
}
async function iW(n, t = {}, e = zm) {
  if (n == null)
    throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");
  t == null && (t = {}), t.fromTFHub && typeof n == "string" && (n = lW(n));
  const s = new sb(n, t, e);
  return await s.load(), s;
}
function aW(n) {
  if (n == null)
    throw new Error("modelUrl in loadGraphModelSync() cannot be null. Please provide model artifacts or an IOHandler that loads the model");
  let t;
  if (n instanceof Array) {
    const [s, r] = n;
    if (!s)
      throw new Error("modelJSON must be the first element of the array");
    if (!r || !(r instanceof ArrayBuffer))
      throw new Error("An ArrayBuffer of weights must be the second element of the array");
    if (!("modelTopology" in s))
      throw new Error("Model JSON is missing 'modelTopology'");
    if (!("weightsManifest" in s))
      throw new Error("Model JSON is missing 'weightsManifest'");
    const o = Gm(s.weightsManifest), i = Lm(s, o, r);
    t = Ru(i);
  } else if ("load" in n)
    t = n;
  else if ("modelTopology" in n && "weightSpecs" in n && "weightData" in n)
    t = Ru(n);
  else
    throw new Error("Unknown model format");
  const e = new sb(t);
  return e.load(), e;
}
function lW(n) {
  return n.endsWith("/") || (n = n + "/"), `${n}${oW}${rW}`;
}
/** @license See the LICENSE file. */
const HS = "3.21.0";
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
function cW(n, t) {
  return Xu(n, t);
}
function Xu(n, t, e = /* @__PURE__ */ new Map(), s = /* @__PURE__ */ new Set()) {
  if (n == null)
    return null;
  if (typeof Blob == "function" && n instanceof Blob)
    return n.slice();
  if (s.has(n))
    throw new Error("Circular references are not supported.");
  if (e.has(n))
    return e.get(n);
  const r = t(n);
  if (r.recurse && r.value !== null)
    throw new Error("A deep map function may not return both a value and recurse=true.");
  if (r.recurse)
    if (Zo(n)) {
      const o = Array.isArray(n) ? [] : {};
      s.add(n);
      for (const i in n) {
        const a = n[i], l = Xu(a, t, e, s);
        o[i] = l;
      }
      return s.delete(n), n.__proto__ && (o.__proto__ = n.__proto__), o;
    } else
      throw new Error(`Can't recurse into non-iterable type: ${n}`);
  else
    return e.set(n, r.value), r.value;
}
function uW(n, t = YS) {
  return US(n, t);
}
function US(n, t, e = /* @__PURE__ */ new Set()) {
  const s = n[0];
  if (e.has(s))
    throw new Error("Circular references are not supported.");
  const r = t(n);
  if (r.recurse && r.value !== null)
    throw new Error("A deep zip function may not return both a value and recurse=true.");
  if (r.recurse)
    if (Zo(s)) {
      const o = Array.isArray(s) ? [] : {};
      e.add(s);
      for (const i in s) {
        const a = n.map((c) => c[i]), l = US(a, t, e);
        o[i] = l;
      }
      return e.delete(s), o;
    } else
      throw new Error(`Can't recurse into non-iterable type: ${s}`);
  else
    return r.value;
}
function YS(n) {
  return n === null ? null : Zo(n[0]) ? { value: null, recurse: !0 } : { value: n, recurse: !1 };
}
async function jS(n, t) {
  const e = /* @__PURE__ */ new Map();
  Xu(n, t, e);
  for (const r of Array.from(e.keys())) {
    const o = e.get(r);
    if (gr(o)) {
      const i = await o;
      e.set(r, i);
    }
  }
  return Xu(n, t, e);
}
function Zo(n) {
  let t = !1;
  if (V().get("IS_BROWSER"))
    t = n instanceof TextDecoder;
  else {
    const { StringDecoder: e } = require("string_decoder");
    t = n instanceof e;
  }
  return n != null && !ArrayBuffer.isView(n) && (Array.isArray(n) || typeof n == "object" && !(n instanceof Lt) && !(n instanceof Promise) && !t);
}
function hW(n) {
  return n == null || dW(n) || Array.isArray(n) || typeof n == "object" && n instanceof Lt || De(n);
}
function dW(n) {
  return n === null || typeof n != "object" && typeof n != "function";
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
function pW(n) {
  return cW(n, fW);
}
function fW(n) {
  return n instanceof Lt ? { value: n.clone(), recurse: !1 } : Zo(n) ? { value: null, recurse: !0 } : { value: n, recurse: !1 };
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
class JS {
  constructor(t) {
    if (this.capacity = t, this.begin = 0, this.end = 0, t == null)
      throw new RangeError("Can't create a ring buffer of unknown capacity.");
    if (t < 1)
      throw new RangeError("Can't create ring buffer of capacity < 1.");
    this.data = new Array(t), this.doubledCapacity = 2 * t;
  }
  wrap(t) {
    for (; t < 0; )
      t += this.doubledCapacity;
    return t % this.doubledCapacity;
  }
  get(t) {
    if (t < 0)
      throw new RangeError("Can't get item at a negative index.");
    return this.data[t % this.capacity];
  }
  set(t, e) {
    if (t < 0)
      throw new RangeError("Can't set item at a negative index.");
    this.data[t % this.capacity] = e;
  }
  length() {
    let t = this.end - this.begin;
    return t < 0 && (t = this.doubledCapacity + t), t;
  }
  isFull() {
    return this.length() === this.capacity;
  }
  isEmpty() {
    return this.length() === 0;
  }
  push(t) {
    if (this.isFull())
      throw new RangeError("Ring buffer is full.");
    this.set(this.end, t), this.end = this.wrap(this.end + 1);
  }
  pushAll(t) {
    for (const e of t)
      this.push(e);
  }
  pop() {
    if (this.isEmpty())
      throw new RangeError("Ring buffer is empty.");
    this.end = this.wrap(this.end - 1);
    const t = this.get(this.end);
    return this.set(this.end, void 0), t;
  }
  unshift(t) {
    if (this.isFull())
      throw new RangeError("Ring buffer is full.");
    this.begin = this.wrap(this.begin - 1), this.set(this.begin, t);
  }
  shift() {
    if (this.isEmpty())
      throw new RangeError("Ring buffer is empty.");
    const t = this.get(this.begin);
    return this.set(this.begin, void 0), this.begin = this.wrap(this.begin + 1), t;
  }
  shuffleExcise(t) {
    if (this.isEmpty())
      throw new RangeError("Ring buffer is empty.");
    const e = this.wrap(this.begin + t), s = this.get(e);
    return this.set(e, this.pop()), s;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
class Sp extends JS {
  constructor() {
    super(Sp.INITIAL_CAPACITY);
  }
  isFull() {
    return !1;
  }
  push(t) {
    super.isFull() && this.expand(), super.push(t);
  }
  unshift(t) {
    super.isFull() && this.expand(), super.unshift(t);
  }
  expand() {
    const t = this.capacity * 2, e = new Array(t), s = this.length();
    for (let r = 0; r < s; r++)
      e[r] = this.get(this.wrap(this.begin + r));
    this.data = e, this.capacity = t, this.doubledCapacity = 2 * this.capacity, this.begin = 0, this.end = s;
  }
}
Sp.INITIAL_CAPACITY = 32;
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
function QS(n) {
  return new yW(n);
}
function rb(n) {
  return new bW(n);
}
function mW(n, t) {
  return new qS(n, t);
}
function gW(n, t = lr.FAIL) {
  return new NW(n, t);
}
class Ne {
  async toArray() {
    const t = [];
    let e = await this.next();
    for (; !e.done; )
      t.push(e.value), e = await this.next();
    return t;
  }
  async toArrayForTest() {
    const t = this.prefetch(100), e = [];
    let s = await t.next();
    for (; !s.done; )
      e.push(s.value), s = await t.next();
    return e;
  }
  async resolveFully() {
    let t = await this.next();
    for (; !t.done; )
      t = await this.next();
  }
  async resolveWhile(t) {
    let e = await this.next(), s = t(e.value);
    for (; !e.done && s; )
      e = await this.next(), s = t(e.value);
  }
  handleErrors(t) {
    return new kW(this, t);
  }
  filter(t) {
    return new vW(this, t);
  }
  map(t) {
    return new CW(this, t);
  }
  mapAsync(t) {
    return new Sx(this, t);
  }
  serialMapAsync(t) {
    return new Sx(this, t).serial();
  }
  flatmap(t) {
    return new TW(this, t);
  }
  async forEachAsync(t) {
    return this.map(t).resolveFully();
  }
  async serialForEach(t) {
    return this.serialMapAsync(t).resolveWhile((e) => e === !0);
  }
  rowMajorBatch(t, e = !0) {
    return new SW(this, t, e);
  }
  columnMajorBatch(t, e = !0, s = YS) {
    return this.rowMajorBatch(t, e).map((o) => uW(o, s));
  }
  concatenate(t, e) {
    return new qS(QS([this, t]), e);
  }
  take(t) {
    return t < 0 || t == null ? this : new IW(this, t);
  }
  skip(t) {
    return t < 0 || t == null ? this : new wW(this, t);
  }
  prefetch(t) {
    return new tv(this, t);
  }
  shuffle(t, e) {
    return new $W(this, t, e);
  }
  serial() {
    return new xW(this);
  }
}
class yW extends Ne {
  constructor(t) {
    super(), this.items = t, this.trav = 0;
  }
  summary() {
    return `Array of ${this.items.length} items`;
  }
  async next() {
    if (this.trav >= this.items.length)
      return { value: null, done: !0 };
    const t = this.items[this.trav];
    return this.trav++, { value: pW(t), done: !1 };
  }
}
class bW extends Ne {
  constructor(t) {
    super(), this.nextFn = t;
  }
  summary() {
    return "Function call";
  }
  async next() {
    try {
      return this.nextFn();
    } catch (t) {
      throw t.message = `Error thrown while iterating through a dataset: ${t.message}`, t;
    }
  }
}
class xW extends Ne {
  constructor(t) {
    super(), this.upstream = t, this.lastRead = Promise.resolve({ value: null, done: !1 });
  }
  summary() {
    return `${this.upstream.summary()} -> Serial`;
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  async serialNext() {
    return this.upstream.next();
  }
}
class wW extends Ne {
  constructor(t, e) {
    super(), this.upstream = t, this.maxCount = e, this.count = 0, this.lastRead = Promise.resolve({ value: null, done: !1 });
  }
  summary() {
    return `${this.upstream.summary()} -> Skip`;
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  async serialNext() {
    for (; this.count++ < this.maxCount; ) {
      const t = await this.upstream.next();
      if (t.done)
        return t;
      xt(t.value);
    }
    return this.upstream.next();
  }
}
class IW extends Ne {
  constructor(t, e) {
    super(), this.upstream = t, this.maxCount = e, this.count = 0;
  }
  summary() {
    return `${this.upstream.summary()} -> Take`;
  }
  async next() {
    return this.count++ >= this.maxCount ? { value: null, done: !0 } : this.upstream.next();
  }
}
class SW extends Ne {
  constructor(t, e, s = !0) {
    super(), this.upstream = t, this.batchSize = e, this.enableSmallLastBatch = s, this.lastRead = Promise.resolve({ value: null, done: !1 });
  }
  summary() {
    return `${this.upstream.summary()} -> RowMajorBatch`;
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  async serialNext() {
    const t = [];
    for (; t.length < this.batchSize; ) {
      const e = await this.upstream.next();
      if (e.done)
        return this.enableSmallLastBatch && t.length > 0 ? { value: t, done: !1 } : { value: null, done: !0 };
      t.push(e.value);
    }
    return { value: t, done: !1 };
  }
}
class vW extends Ne {
  constructor(t, e) {
    super(), this.upstream = t, this.predicate = e, this.lastRead = Promise.resolve({ value: null, done: !1 });
  }
  summary() {
    return `${this.upstream.summary()} -> Filter`;
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  async serialNext() {
    for (; ; ) {
      const t = await this.upstream.next();
      if (t.done || this.predicate(t.value))
        return t;
      xt(t.value);
    }
  }
}
class CW extends Ne {
  constructor(t, e) {
    super(), this.upstream = t, this.transform = e;
  }
  summary() {
    return `${this.upstream.summary()} -> Map`;
  }
  async next() {
    const t = await this.upstream.next();
    if (t.done)
      return { value: null, done: !0 };
    const e = Vs(t.value), s = this.transform(t.value), r = Vs(s);
    for (const o of e)
      id(o, r) || o.dispose();
    return { value: s, done: !1 };
  }
}
class kW extends Ne {
  constructor(t, e) {
    super(), this.upstream = t, this.handler = e, this.count = 0, this.lastRead = Promise.resolve({ value: null, done: !1 });
  }
  summary() {
    return `${this.upstream.summary()} -> handleErrors`;
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  async serialNext() {
    for (; ; )
      try {
        return await this.upstream.next();
      } catch (t) {
        if (!this.handler(t))
          return { value: null, done: !0 };
      }
  }
}
class Sx extends Ne {
  constructor(t, e) {
    super(), this.upstream = t, this.transform = e;
  }
  summary() {
    return `${this.upstream.summary()} -> AsyncMap`;
  }
  async next() {
    const t = await this.upstream.next();
    if (t.done)
      return { value: null, done: !0 };
    const e = Vs(t.value), s = await this.transform(t.value), r = Vs(s);
    for (const o of e)
      id(o, r) || o.dispose();
    return { value: s, done: !1 };
  }
}
class ob extends Ne {
  constructor() {
    super(), this.outputQueue = new Sp(), this.lastRead = Promise.resolve({ value: null, done: !1 });
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  async serialNext() {
    for (; this.outputQueue.length() === 0; )
      if (!await this.pump())
        return { value: null, done: !0 };
    return { value: this.outputQueue.shift(), done: !1 };
  }
}
class TW extends ob {
  constructor(t, e) {
    super(), this.upstream = t, this.transform = e;
  }
  summary() {
    return `${this.upstream.summary()} -> Flatmap`;
  }
  async pump() {
    const t = await this.upstream.next();
    if (t.done)
      return !1;
    const e = Vs(t.value), s = this.transform(t.value), r = Vs(s);
    this.outputQueue.pushAll(s);
    for (const o of e)
      id(o, r) || o.dispose();
    return !0;
  }
}
class qS extends Ne {
  constructor(t, e) {
    super(), this.baseErrorHandler = e, this.lastRead = null, this.iterator = null, this.moreIterators = t;
  }
  summary() {
    return "TODO: fill in upstream of chained summaries -> Chained";
  }
  async next() {
    return this.lastRead = this.readFromChain(this.lastRead), this.lastRead;
  }
  async readFromChain(t) {
    if (await t, this.iterator == null) {
      const s = await this.moreIterators.next();
      if (s.done)
        return { value: null, done: !0 };
      this.iterator = s.value, this.baseErrorHandler != null && (this.iterator = this.iterator.handleErrors(this.baseErrorHandler));
    }
    const e = await this.iterator.next();
    return e.done ? (this.iterator = null, this.readFromChain(t)) : e;
  }
}
var lr;
(function(n) {
  n[n.FAIL = 0] = "FAIL", n[n.SHORTEST = 1] = "SHORTEST", n[n.LONGEST = 2] = "LONGEST";
})(lr || (lr = {}));
class NW extends Ne {
  constructor(t, e = lr.FAIL) {
    super(), this.iterators = t, this.mismatchMode = e, this.count = 0, this.currentPromise = null;
  }
  summary() {
    return "{TODO: fill in upstream of zip summaries} -> Zip";
  }
  async nextState(t) {
    await t;
    let e = 0, s = 0;
    function r(i) {
      return i instanceof Ne ? {
        value: i.next().then((l) => (e++, l.done && s++, l.value)),
        recurse: !1
      } : { value: null, recurse: !0 };
    }
    const o = await jS(this.iterators, r);
    if (e === s)
      return { value: null, done: !0 };
    if (s > 0)
      switch (this.mismatchMode) {
        case lr.FAIL:
          throw new Error(`Zipped streams should have the same length. Mismatched at element ${this.count}.`);
        case lr.SHORTEST:
          return { value: null, done: !0 };
        case lr.LONGEST:
      }
    return this.count++, { value: o, done: !1 };
  }
  async next() {
    return this.currentPromise = this.nextState(this.currentPromise), this.currentPromise;
  }
}
class tv extends Ne {
  constructor(t, e) {
    super(), this.upstream = t, this.bufferSize = e, this.buffer = new JS(e);
  }
  summary() {
    return `${this.upstream.summary()} -> Prefetch`;
  }
  refill() {
    for (; !this.buffer.isFull(); ) {
      const t = this.upstream.next();
      this.buffer.push(t);
    }
  }
  next() {
    return this.refill(), this.buffer.shift();
  }
}
class $W extends tv {
  constructor(t, e, s) {
    super(t, e), this.upstream = t, this.windowSize = e, this.upstreamExhausted = !1, this.random = na.alea(s || Le().toString()), this.lastRead = Promise.resolve({ value: null, done: !1 });
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  randomInt(t) {
    return Math.floor(this.random() * t);
  }
  chooseIndex() {
    return this.randomInt(this.buffer.length());
  }
  async serialNext() {
    for (this.upstreamExhausted || this.refill(); !this.buffer.isEmpty(); ) {
      const t = this.chooseIndex(), e = await this.buffer.shuffleExcise(t);
      if (e.done)
        this.upstreamExhausted = !0;
      else
        return this.refill(), e;
    }
    return { value: null, done: !0 };
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
class ua {
  constructor() {
    this.size = null;
  }
  batch(t, e = !0) {
    const s = this;
    C(t > 0, () => `batchSize needs to be positive, but it is
      ${t}`);
    let r;
    return this.size === 1 / 0 || this.size == null ? r = this.size : e ? r = Math.ceil(this.size / t) : r = Math.floor(this.size / t), cn(async () => (await s.iterator()).columnMajorBatch(t, e, LW), r);
  }
  concatenate(t) {
    const e = this;
    let s;
    return this.size === 1 / 0 || t.size === 1 / 0 ? s = 1 / 0 : this.size != null && t.size != null ? s = this.size + t.size : s = null, cn(async () => (await e.iterator()).concatenate(await t.iterator()), s);
  }
  filter(t) {
    const e = this;
    let s;
    return this.size === 1 / 0 ? s = 1 / 0 : s = null, cn(async () => (await e.iterator()).filter((r) => A(() => t(r))), s);
  }
  async forEachAsync(t) {
    return (await this.iterator()).forEachAsync(t);
  }
  map(t) {
    const e = this;
    return cn(async () => (await e.iterator()).map((s) => A(() => t(s))), this.size);
  }
  mapAsync(t) {
    const e = this;
    return cn(async () => (await e.iterator()).mapAsync(t), this.size);
  }
  prefetch(t) {
    if (t == null)
      throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");
    const e = this;
    return cn(async () => (await e.iterator()).prefetch(t), this.size);
  }
  repeat(t) {
    const e = this;
    let s;
    return this.size != null && t > 0 ? s = this.size * t : t === 0 ? s = 0 : this.size != null && (t === void 0 || t < 0) ? s = 1 / 0 : s = null, cn(async () => {
      const r = rb(async () => ({ value: await e.iterator(), done: !1 }));
      return mW(r.take(t));
    }, s);
  }
  skip(t) {
    const e = this;
    let s;
    return this.size != null && t >= 0 && this.size >= t ? s = this.size - t : this.size != null && (this.size < t || t === void 0 || t < 0) ? s = 0 : s = null, cn(async () => (await e.iterator()).skip(t), s);
  }
  shuffle(t, e, s = !0) {
    if (t == null || t < 0)
      throw this.size == null ? new RangeError("`Dataset.shuffle()` requires bufferSize to be specified.") : new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);
    const r = this, o = na.alea(e || Le().toString());
    return cn(async () => {
      let i = o.int32();
      return s && (i += o.int32()), (await r.iterator()).shuffle(t, i.toString());
    }, this.size);
  }
  take(t) {
    const e = this;
    let s;
    return this.size != null && this.size > t ? s = t : this.size != null && this.size <= t ? s = this.size : s = null, cn(async () => (await e.iterator()).take(t), s);
  }
  async toArray() {
    if (this.size === 1 / 0)
      throw new Error("Can not convert infinite data stream to array.");
    return (await this.iterator()).toArray();
  }
  async toArrayForTest() {
    if (this.size === 1 / 0)
      throw new Error("Can not convert infinite data stream to array.");
    return (await this.iterator()).toArrayForTest();
  }
}
ua.MAX_BUFFER_SIZE = 1e4;
function cn(n, t = null) {
  return new class extends ua {
    constructor() {
      super(...arguments), this.size = t;
    }
    async iterator() {
      return n();
    }
  }();
}
function RW(n) {
  return cn(async () => QS(n), n.length);
}
function EW(n) {
  if (!Zo(n))
    throw new Error("The argument to zip() must be an object or array.");
  let t;
  if (Array.isArray(n))
    for (let e = 0; e < n.length; e++)
      t = t == null ? n[e].size : Math.min(t, n[e].size);
  else if (n instanceof Object)
    for (const e in n)
      t = t == null ? n[e].size : Math.min(t, n[e].size);
  return cn(async () => {
    const e = await jS(n, (s) => {
      if (s instanceof ua)
        return { value: s.iterator(), recurse: !1 };
      if (Zo(s))
        return { value: null, recurse: !0 };
      throw new Error("Leaves of the structure passed to zip() must be Datasets, not primitives.");
    });
    return gW(e, lr.SHORTEST);
  }, t);
}
function LW(n) {
  if (n === null)
    return null;
  const t = n[0];
  return hW(t) ? { value: DW(n), recurse: !1 } : { value: null, recurse: !0 };
}
function DW(n) {
  if (n.length === 0)
    throw new Error("Can't make a batch of zero elements.");
  return n[0] instanceof Lt ? nn(n) : ee(n);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
class ev extends ua {
  constructor(t) {
    super(), this.input = t;
  }
  async iterator() {
    return (await this.input.iterator()).decodeUTF8().split(`
`).map((r) => (r.endsWith("\r") && (r = r.slice(0, -1)), r));
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
const tu = '"', Ca = Symbol("out"), vx = Symbol("field"), eu = Symbol("quote"), Kp = Symbol("quoteafterquote"), Cx = Symbol("quoteinquote");
class nv extends ua {
  constructor(t, e) {
    super(), this.input = t, this.hasHeader = !0, this.fullColumnNames = null, this.columnNamesValidated = !1, this.columnConfigs = null, this.configuredColumnsOnly = !1, this.delimiter = ",", this.delimWhitespace = !1, this.base = new ev(t), e || (e = {}), this.hasHeader = e.hasHeader !== !1, this.fullColumnNames = e.columnNames, this.columnConfigs = e.columnConfigs, this.configuredColumnsOnly = e.configuredColumnsOnly, e.delimWhitespace ? (C(e.delimiter == null, () => "Delimiter should not be provided when delimWhitespace is true."), this.delimWhitespace = !0, this.delimiter = " ") : this.delimiter = e.delimiter ? e.delimiter : ",";
  }
  async columnNames() {
    return this.columnNamesValidated || await this.setColumnNames(), this.configuredColumnsOnly ? Object.keys(this.columnConfigs) : this.fullColumnNames;
  }
  async setColumnNames() {
    const t = await this.maybeReadHeaderLine();
    if (!this.fullColumnNames && !t)
      throw new Error("Column names must be provided if there is no header line.");
    this.fullColumnNames && t && C(t.length === this.fullColumnNames.length, () => "The length of provided columnNames (" + this.fullColumnNames.length.toString() + ") does not match the length of the header line read from file (" + t.length.toString() + ")."), this.fullColumnNames || (this.fullColumnNames = t);
    const e = this.fullColumnNames.reduce((r, o) => (r[o] = r[o] + 1 || 1, r), {}), s = Object.keys(e).filter((r) => e[r] > 1);
    if (C(s.length === 0, () => "Duplicate column names found: " + s.toString()), this.columnConfigs) {
      for (const r of Object.keys(this.columnConfigs))
        if (this.fullColumnNames.indexOf(r) === -1)
          throw new Error('The key "' + r + '" provided in columnConfigs does not match any of the column names (' + this.fullColumnNames.toString() + ").");
    }
    this.columnNamesValidated = !0;
  }
  async maybeReadHeaderLine() {
    if (this.hasHeader) {
      const e = await (await this.base.iterator()).next();
      if (e.done)
        throw new Error("No data was found for CSV parsing.");
      const s = e.value;
      return this.parseRow(s, !1);
    } else
      return null;
  }
  async iterator() {
    this.columnNamesValidated || await this.setColumnNames();
    let t = await this.base.iterator();
    return this.hasHeader && (t = t.skip(1)), t.map((e) => this.makeDataElement(e));
  }
  makeDataElement(t) {
    const e = this.parseRow(t), s = {}, r = {};
    for (let o = 0; o < this.fullColumnNames.length; o++) {
      const i = this.fullColumnNames[o], a = this.columnConfigs ? this.columnConfigs[i] : null;
      if (!(this.configuredColumnsOnly && !a)) {
        const l = e[o];
        let c = null;
        if (l === "")
          if (a && a.default !== void 0)
            c = a.default;
          else {
            if (a && (a.required || a.isLabel))
              throw new Error(`Required column ${i} is empty in this line: ${t}`);
            c = void 0;
          }
        else {
          const u = Number(l);
          if (isNaN(u))
            a && a.dtype === "bool" ? c = this.getBoolean(l) : c = l;
          else if (!a || !a.dtype)
            c = u;
          else
            switch (a.dtype) {
              case "float32":
                c = u;
                break;
              case "int32":
                c = Math.floor(u);
                break;
              case "bool":
                c = this.getBoolean(l);
                break;
              default:
                c = u;
            }
        }
        a && a.isLabel ? r[i] = c : s[i] = c;
      }
    }
    return Object.keys(r).length === 0 ? s : { xs: s, ys: r };
  }
  getBoolean(t) {
    return t === "1" || t.toLowerCase() === "true" ? 1 : 0;
  }
  parseRow(t, e = !0) {
    const s = [];
    let r = 0;
    const o = t.length;
    let i = Ca;
    for (let a = 0; a < o; a++)
      switch (i) {
        case Ca:
          switch (t.charAt(a)) {
            case tu:
              r = a + 1, i = eu;
              break;
            case this.delimiter:
              if (r = a + 1, this.delimiter === " " && this.delimWhitespace)
                break;
              s.push(""), i = Ca;
              break;
            default:
              i = vx, r = a;
              break;
          }
          break;
        case vx:
          switch (t.charAt(a)) {
            case this.delimiter:
              s.push(t.substring(r, a)), i = Ca, r = a + 1;
              break;
          }
          break;
        case eu:
          switch (t.charAt(a)) {
            case tu:
              i = Kp;
              break;
          }
          break;
        case Kp:
          switch (t.charAt(a)) {
            case this.delimiter:
              s.push(t.substring(r, a - 1)), i = Ca, r = a + 1;
              break;
            case tu:
              i = eu;
              break;
            default:
              i = Cx;
              break;
          }
          break;
        case Cx:
          switch (t.charAt(a)) {
            case tu:
              i = eu;
              break;
          }
          break;
      }
    if (i === Kp ? s.push(t.substring(r, o - 1)) : s.push(t.substring(r)), e && s.length !== this.fullColumnNames.length)
      throw new Error(`Invalid row in csv file. Should have ${this.fullColumnNames.length} elements in a row, but got ${s}`);
    return s;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
class ib extends Ne {
  constructor(t) {
    super(), this.microphoneConfig = t, this.isClosed = !1, this.fftSize = t.fftSize || 1024;
    const e = Math.log2(this.fftSize);
    if (this.fftSize < 0 || e < 4 || e > 14 || !Number.isInteger(e))
      throw new Error(`Invalid fftSize: it must be a power of 2 between 2 to 4 and 2 to 14, but got ${this.fftSize}`);
    if (this.numFrames = t.numFramesPerSpectrogram || 43, this.sampleRateHz = t.sampleRateHz, this.columnTruncateLength = t.columnTruncateLength || this.fftSize, this.audioTrackConstraints = t.audioTrackConstraints, this.smoothingTimeConstant = t.smoothingTimeConstant || 0, this.includeSpectrogram = t.includeSpectrogram !== !1, this.includeWaveform = t.includeWaveform === !0, !this.includeSpectrogram && !this.includeWaveform)
      throw new Error("Both includeSpectrogram and includeWaveform are false. At least one type of data should be returned.");
  }
  summary() {
    return "microphone";
  }
  static async create(t = {}) {
    if (!V().get("IS_BROWSER"))
      throw new Error("microphone API is only supported in browser environment.");
    const e = new ib(t);
    return await e.start(), e;
  }
  async start() {
    try {
      this.stream = await navigator.mediaDevices.getUserMedia({
        audio: this.audioTrackConstraints == null ? !0 : this.audioTrackConstraints,
        video: !1
      });
    } catch (s) {
      throw new Error(`Error thrown while initializing video stream: ${s.message}`);
    }
    if (!this.stream)
      throw new Error("Could not obtain audio from microphone.");
    const t = window.AudioContext || window.webkitAudioContext;
    if (this.audioContext = new t(), !this.sampleRateHz)
      this.sampleRateHz = this.audioContext.sampleRate;
    else if (this.audioContext.sampleRate !== this.sampleRateHz)
      throw new Error(`Mismatch in sampling rate: Expected: ${this.sampleRateHz}; Actual: ${this.audioContext.sampleRate}`);
    const e = this.audioContext.createMediaStreamSource(this.stream);
    this.analyser = this.audioContext.createAnalyser(), this.analyser.fftSize = this.fftSize * 2, this.analyser.smoothingTimeConstant = this.smoothingTimeConstant, e.connect(this.analyser), this.freqData = new Float32Array(this.fftSize), this.timeData = new Float32Array(this.fftSize);
  }
  async next() {
    if (this.isClosed)
      return { value: null, done: !0 };
    let t, e;
    const s = await this.getAudioData();
    if (this.includeSpectrogram) {
      const r = this.flattenQueue(s.freqDataQueue);
      t = this.getTensorFromAudioDataArray(r, [this.numFrames, this.columnTruncateLength, 1]);
    }
    if (this.includeWaveform) {
      const r = this.flattenQueue(s.timeDataQueue);
      e = this.getTensorFromAudioDataArray(r, [this.numFrames * this.fftSize, 1]);
    }
    return {
      value: { spectrogram: t, waveform: e },
      done: !1
    };
  }
  async capture() {
    return (await this.next()).value;
  }
  async getAudioData() {
    const t = [], e = [];
    let s = 0;
    return new Promise((r) => {
      const o = setInterval(() => {
        this.includeSpectrogram && (this.analyser.getFloatFrequencyData(this.freqData), this.freqData[0] === -1 / 0 && r({ freqDataQueue: t, timeDataQueue: e }), t.push(this.freqData.slice(0, this.columnTruncateLength))), this.includeWaveform && (this.analyser.getFloatTimeDomainData(this.timeData), e.push(this.timeData.slice())), ++s === this.numFrames && (clearInterval(o), r({ freqDataQueue: t, timeDataQueue: e }));
      }, this.fftSize / this.sampleRateHz * 1e3);
    });
  }
  stop() {
    this.isClosed || (this.isClosed = !0, this.analyser.disconnect(), this.audioContext.close(), this.stream != null && this.stream.getTracks().length > 0 && this.stream.getTracks()[0].stop());
  }
  toArray() {
    throw new Error("Can not convert infinite audio stream to array.");
  }
  getSampleRate() {
    return this.sampleRateHz;
  }
  flattenQueue(t) {
    const e = t[0].length, s = new Float32Array(t.length * e);
    return t.forEach((r, o) => s.set(r, o * e)), s;
  }
  getTensorFromAudioDataArray(t, e) {
    const s = new Float32Array(P(e));
    return s.set(t, s.length - t.length), ee(s, e);
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
class ab extends Ne {
  constructor(t, e) {
    if (super(), this.webcamVideoElement = t, this.webcamConfig = e, this.isClosed = !0, this.resize = !1, this.needToResize())
      if (this.resize = !0, this.cropSize = [this.webcamConfig.resizeHeight, this.webcamConfig.resizeWidth], this.cropBoxInd = Ve([0], "int32"), this.webcamConfig.centerCrop) {
        const s = this.webcamConfig.resizeWidth * 1 / this.webcamVideoElement.width, r = this.webcamConfig.resizeHeight * 1 / this.webcamVideoElement.height, o = (1 - s) / 2, i = (1 - r) / 2, a = o + s, l = r + i;
        this.cropBox = hr([i, o, l, a], [1, 4]);
      } else
        this.cropBox = hr([0, 0, 1, 1], [1, 4]);
  }
  summary() {
    return "webcam";
  }
  static async create(t, e = {}) {
    if (!V().get("IS_BROWSER"))
      throw new Error("tf.data.webcam is only supported in browser environment.");
    if (!t) {
      if (t = document.createElement("video"), !e.resizeWidth || !e.resizeHeight)
        throw new Error("Please provide webcam video element, or resizeWidth and resizeHeight to create a hidden video element.");
      t.width = e.resizeWidth, t.height = e.resizeHeight;
    }
    const s = new ab(t, e);
    return await s.start(), s;
  }
  async start() {
    this.webcamConfig.facingMode && C(this.webcamConfig.facingMode === "user" || this.webcamConfig.facingMode === "environment", () => `Invalid webcam facing mode: ${this.webcamConfig.facingMode}. Please provide 'user' or 'environment'`);
    try {
      this.stream = await navigator.mediaDevices.getUserMedia({
        video: {
          deviceId: this.webcamConfig.deviceId,
          facingMode: this.webcamConfig.facingMode ? this.webcamConfig.facingMode : "user",
          width: this.webcamVideoElement.width,
          height: this.webcamVideoElement.height
        }
      });
    } catch (t) {
      throw t.message = `Error thrown while initializing video stream: ${t.message}`, t;
    }
    if (!this.stream)
      throw new Error("Could not obtain video from webcam.");
    try {
      this.webcamVideoElement.srcObject = this.stream;
    } catch (t) {
      console.log(t), this.webcamVideoElement.src = window.URL.createObjectURL(this.stream);
    }
    return this.webcamVideoElement.play(), this.isClosed = !1, new Promise((t) => {
      this.webcamVideoElement.onloadedmetadata = () => {
        t();
      };
    });
  }
  async next() {
    if (this.isClosed)
      return { value: null, done: !0 };
    let t;
    try {
      t = Mm(this.webcamVideoElement);
    } catch (e) {
      throw new Error(`Error thrown converting video to pixels: ${JSON.stringify(e)}`);
    }
    if (this.resize)
      try {
        return { value: this.cropAndResizeFrame(t), done: !1 };
      } catch (e) {
        throw new Error(`Error thrown cropping the video: ${e.message}`);
      } finally {
        t.dispose();
      }
    else
      return { value: t, done: !1 };
  }
  needToResize() {
    return !!(this.webcamConfig.resizeWidth && this.webcamConfig.resizeHeight && (this.webcamVideoElement.width !== this.webcamConfig.resizeWidth || this.webcamVideoElement.height !== this.webcamConfig.resizeHeight));
  }
  cropAndResizeFrame(t) {
    return A(() => {
      const e = Qe(et(t, "float32"), 0);
      let s;
      s = Xr.cropAndResize(e, this.cropBox, this.cropBoxInd, this.cropSize, "bilinear");
      const r = s.shape;
      return G(s, r.slice(1));
    });
  }
  async capture() {
    return (await this.next()).value;
  }
  stop() {
    this.stream.getTracks().forEach((e) => e.stop());
    try {
      this.webcamVideoElement.srcObject = null;
    } catch (e) {
      console.log(e), this.webcamVideoElement.src = null;
    }
    this.isClosed = !0;
  }
  toArray() {
    throw new Error("Can not convert infinite video stream to array.");
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
class sv {
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
class rv extends Ne {
  split(t) {
    return new GW(this, t);
  }
}
class GW extends rv {
  constructor(t, e) {
    super(), this.upstream = t, this.impl = new FW(t, e);
  }
  summary() {
    return this.impl.summary();
  }
  async next() {
    return this.impl.next();
  }
}
class FW extends ob {
  constructor(t, e) {
    super(), this.upstream = t, this.separator = e, this.carryover = "";
  }
  summary() {
    return `${this.upstream.summary()} -> Split('${this.separator}')`;
  }
  async pump() {
    const t = await this.upstream.next();
    if (t.done)
      return this.carryover === "" ? !1 : (this.outputQueue.push(this.carryover), this.carryover = "", !0);
    const e = t.value.split(this.separator);
    e[0] = this.carryover + e[0];
    for (const s of e.slice(0, -1))
      this.outputQueue.push(s);
    return this.carryover = e[e.length - 1], !0;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
class OW extends Ne {
  decodeUTF8() {
    return new AW(this);
  }
}
class AW extends rv {
  constructor(t) {
    super(), this.upstream = t, this.impl = new zW(t);
  }
  summary() {
    return this.impl.summary();
  }
  async next() {
    return this.impl.next();
  }
}
class zW extends ob {
  constructor(t) {
    if (super(), this.upstream = t, V().get("IS_BROWSER"))
      this.decoder = new TextDecoder("utf-8");
    else {
      const { StringDecoder: e } = require("string_decoder");
      this.decoder = new e("utf8");
    }
  }
  summary() {
    return `${this.upstream.summary()} -> Utf8`;
  }
  async pump() {
    const t = await this.upstream.next();
    let e;
    if (t.done)
      return !1;
    e = t.value;
    let s;
    return V().get("IS_BROWSER") ? s = this.decoder.decode(e, { stream: !0 }) : s = this.decoder.write(Buffer.from(e.buffer)), this.outputQueue.push(s), !0;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
class ov extends OW {
  constructor(t, e = {}) {
    super(), this.file = t, this.options = e, C(t instanceof Uint8Array || (V().get("IS_BROWSER") ? t instanceof File || t instanceof Blob : !1), () => "FileChunkIterator only supports File, Blob and Uint8Array right now."), this.offset = e.offset || 0, this.chunkSize = e.chunkSize || 1024 * 1024;
  }
  summary() {
    return `FileChunks ${this.file}`;
  }
  async next() {
    return this.offset >= (this.file instanceof Uint8Array ? this.file.byteLength : this.file.size) ? { value: null, done: !0 } : { value: await new Promise((e, s) => {
      const r = this.offset + this.chunkSize;
      if (this.file instanceof Uint8Array)
        e(new Uint8Array(this.file.slice(this.offset, r)));
      else {
        const o = new FileReader();
        o.onload = (a) => {
          let l = o.result;
          if (l instanceof ArrayBuffer && (l = new Uint8Array(l)), !(l instanceof Uint8Array))
            return s(new TypeError("FileReader returned unknown type."));
          e(l);
        }, o.onabort = (a) => s(new Error("Aborted")), o.onerror = (a) => s(new Error(a.type));
        const i = this.file.slice(this.offset, r);
        o.readAsArrayBuffer(i);
      }
      this.offset = r;
    }), done: !1 };
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
async function WW(n, t = {}, e) {
  let s, r;
  typeof n == "string" ? s = n : (s = n.url, r = VW(n));
  const o = await (e || O1)(s, r);
  if (o.ok) {
    const i = new Uint8Array(await o.arrayBuffer());
    return new ov(i, t);
  } else
    throw new Error(o.statusText);
}
const VW = (n) => ({
  method: n.method,
  headers: n.headers,
  body: n.body,
  mode: n.mode,
  credentials: n.credentials,
  cache: n.cache,
  redirect: n.redirect,
  referrer: n.referrer,
  integrity: n.integrity
});
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
function iv(n) {
  return typeof n == "string" && n.slice(0, 7) === "file://";
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
class av extends sv {
  constructor(t, e = {}) {
    super(), this.input = t, this.options = e;
  }
  async iterator() {
    if (iv(this.input) && V().get("IS_NODE")) {
      const t = require("fs");
      this.input = t.readFileSync(this.input.slice(7));
    }
    return new ov(this.input, this.options);
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
class lv extends sv {
  constructor(t, e = {}) {
    super(), this.url = t, this.fileOptions = e;
  }
  async iterator() {
    return iv(this.url) ? new av(this.url, this.fileOptions).iterator() : WW(this.url, this.fileOptions);
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
function MW(n, t = {}) {
  return new nv(new lv(n), t);
}
function PW(n) {
  const t = rb(n);
  return cn(async () => t);
}
function XW(n) {
  return cn(async () => {
    const t = await n();
    return rb(() => t.next());
  });
}
async function _W(n, t) {
  return ab.create(n, t);
}
async function KW(n) {
  return ib.create(n);
}
/** @license See the LICENSE file. */
const cv = "3.21.0";
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ZW = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  array: RW,
  Dataset: ua,
  zip: EW,
  CSVDataset: nv,
  TextLineDataset: ev,
  csv: MW,
  func: PW,
  generator: XW,
  microphone: KW,
  webcam: _W,
  FileDataSource: av,
  URLDataSource: lv,
  version_data: cv
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ct(n, t) {
  Array.isArray(n) || (n = [n]), n.forEach((e) => {
    e != null && C(e.dtype !== "complex64", () => `${t} does not support complex64 tensors in the CPU backend.`);
  });
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const BW = Wd;
class vp extends th {
  constructor() {
    super(), this.blockSize = 48, this.firstUse = !0, this.data = new mm(this, Zt());
  }
  nextDataId() {
    return vp.nextDataId++;
  }
  write(t, e, s) {
    this.firstUse && (this.firstUse = !1, V().get("IS_NODE") && Tn(`
============================
Hi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. 
============================`));
    const r = { id: this.nextDataId() };
    return this.data.set(r, { values: t, dtype: s, refCount: 1 }), r;
  }
  makeTensorInfo(t, e, s) {
    let r;
    if (e === "string" && s != null && s.length > 0 && xs(s[0])) {
      const o = s.map((i) => Ln(i));
      r = this.write(o, t, e);
    } else
      r = this.write(s, t, e);
    return { dataId: r, shape: t, dtype: e };
  }
  refCount(t) {
    return this.data.has(t) ? this.data.get(t).refCount : 0;
  }
  incRef(t) {
    const e = this.data.get(t);
    e.refCount++;
  }
  decRef(t) {
    if (this.data.has(t)) {
      const e = this.data.get(t);
      e.refCount--;
    }
  }
  move(t, e, s, r, o) {
    this.data.set(t, { values: e, dtype: r, refCount: o });
  }
  numDataIds() {
    return this.data.numDataIds();
  }
  async read(t) {
    return this.readSync(t);
  }
  readSync(t) {
    const { dtype: e, complexTensorInfos: s } = this.data.get(t);
    if (e === "complex64") {
      const r = this.readSync(s.real.dataId), o = this.readSync(s.imag.dataId);
      return Ks(r, o);
    }
    return this.data.get(t).values;
  }
  bufferSync(t) {
    const e = this.readSync(t.dataId);
    if (t.dtype === "string")
      try {
        const s = e.map((r) => Ws(r));
        return gt(t.shape, t.dtype, s);
      } catch {
        throw new Error("Failed to decode encoded string bytes into utf-8");
      }
    return gt(t.shape, t.dtype, e);
  }
  makeOutput(t, e, s) {
    return Zt().makeTensorFromTensorInfo(this.makeTensorInfo(e, s, t), this);
  }
  disposeData(t, e = !1) {
    if (this.data.has(t)) {
      if (this.data.get(t).refCount--, !e && this.data.get(t).refCount > 0)
        return !1;
      const { complexTensorInfos: s } = this.data.get(t);
      s != null && (this.disposeData(s.real.dataId, !0), this.disposeData(s.imag.dataId, !0)), this.data.delete(t);
    }
    return !0;
  }
  disposeIntermediateTensorInfo(t) {
    this.disposeData(t.dataId);
  }
  async time(t) {
    const e = Le();
    return t(), { kernelMs: Le() - e };
  }
  memory() {
    return {
      unreliable: !0,
      reasons: ["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]
    };
  }
  where(t) {
    ct([t], "where");
    const e = this.readSync(t.dataId);
    return BW(t.shape, e);
  }
  dispose() {
  }
  floatPrecision() {
    return 32;
  }
  epsilon() {
    return super.epsilon();
  }
}
vp.nextDataId = 0;
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function HW(n) {
  const t = new Float32Array(n.length);
  for (let e = 0; e < n.length; ++e)
    t[e] = Math.abs(n[e]);
  return t;
}
const UW = (n) => {
  const { x: t } = n.inputs, e = n.backend;
  ct(t, "abs");
  let s = new Float32Array(P(t.shape));
  const r = e.data.get(t.dataId).values;
  return s = HW(r), e.makeOutput(s, t.shape, t.dtype);
}, YW = {
  kernelName: sl,
  backendName: "cpu",
  kernelFunc: UW
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function xe(n) {
  return (t, e, s, r, o) => {
    const i = bt(t, e), a = i.length, l = lt(i), c = P(i), u = jt(o, c), h = t.length, d = e.length, p = lt(t), f = lt(e), m = Ps(t, i), g = Ps(e, i);
    if (m.length + g.length === 0)
      for (let y = 0; y < u.length; ++y)
        u[y] = n(s[y % s.length], r[y % r.length]);
    else
      for (let y = 0; y < u.length; ++y) {
        const b = Ts(y, a, l), w = b.slice(-h);
        m.forEach((T) => w[T] = 0);
        const x = mn(w, h, p), S = b.slice(-d);
        g.forEach((T) => S[T] = 0);
        const v = mn(S, d, f);
        u[y] = n(s[x], r[v]);
      }
    return [u, i];
  };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function dn(n) {
  const { inputs: t, backend: e } = n, { real: s, imag: r } = t, o = e.data.get(s.dataId).values, i = e.data.get(r.dataId).values, a = e.makeTensorInfo(s.shape, "complex64"), l = e.data.get(a.dataId);
  return l.complexTensorInfos = {
    real: e.makeTensorInfo(s.shape, "float32", o),
    imag: e.makeTensorInfo(r.shape, "float32", i)
  }, a;
}
const jW = {
  kernelName: ch,
  backendName: "cpu",
  kernelFunc: dn
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _u(n, t, e = "float32") {
  if (e === "complex64") {
    const r = _u(n, t, "float32"), o = _u(n, t, "float32");
    return dn({ inputs: { real: r, imag: o }, backend: n });
  }
  const s = ae(P(t), e);
  return n.makeTensorInfo(t, e, s);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ks(n) {
  const { inputs: t, backend: e } = n, { x: s } = t;
  return e.incRef(s.dataId), { dataId: s.dataId, shape: s.shape, dtype: s.dtype };
}
const JW = {
  kernelName: xi,
  backendName: "cpu",
  kernelFunc: ks
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function oo(n) {
  const { inputs: t, backend: e } = n, { input: s } = t, r = e.data.get(s.dataId).complexTensorInfos.real, o = e.data.get(r.dataId).values;
  return e.makeTensorInfo(r.shape, r.dtype, o);
}
const QW = {
  kernelName: Mh,
  backendName: "cpu",
  kernelFunc: oo
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function qW(n, t, e, s) {
  if (s === "int32") {
    const r = Int32Array.from(n);
    return [t, "int32", r];
  }
  if (s === "bool") {
    const r = Hs([0], e), [o, i] = xe((a, l) => a !== l ? 1 : 0)(t, [], n, r, "bool");
    return [i, "bool", o];
  }
  throw new Error(`Error in Cast: failed to cast ${e} to ${s}`);
}
function Sr(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { dtype: o } = s;
  if (o === "complex64") {
    if (r.dtype === "complex64")
      return ks({ inputs: { x: r }, backend: e });
    const u = _u(e, r.shape, r.dtype), h = Sr({ inputs: { x: r }, backend: e, attrs: { dtype: "float32" } }), d = dn({ inputs: { real: h, imag: u }, backend: e });
    return e.disposeIntermediateTensorInfo(u), e.disposeIntermediateTensorInfo(h), d;
  }
  if (r.dtype === "complex64") {
    const u = oo({ inputs: { input: r }, backend: e }), h = Sr({ inputs: { x: u }, backend: e, attrs: { dtype: o } });
    return e.disposeIntermediateTensorInfo(u), h;
  }
  if (!bm(r.dtype, o)) {
    const u = ks({ inputs: { x: r }, backend: e });
    return { dataId: u.dataId, shape: u.shape, dtype: o };
  }
  const i = e.data.get(r.dataId).values, [a, l, c] = qW(i, r.shape, r.dtype, o);
  return e.makeTensorInfo(a, l, c);
}
const tV = {
  kernelName: ii,
  backendName: "cpu",
  kernelFunc: Sr
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Re(n, t, e, s) {
  return e == null ? ({ inputs: r, backend: o }) => {
    const { a: i, b: a } = r, l = o;
    ct([i, a], n);
    const c = l.data.get(i.dataId).values, u = l.data.get(a.dataId).values, h = i.dtype === "string" ? Zs(c) : c, d = i.dtype === "string" ? Zs(u) : u, p = s || i.dtype, [f, m] = t(i.shape, a.shape, h, d, p);
    return l.makeTensorInfo(m, p, f);
  } : ({ inputs: r, backend: o }) => {
    const { a: i, b: a } = r, l = o;
    if (i.dtype === "complex64" || a.dtype === "complex64") {
      const c = Sr({ inputs: { x: i }, backend: l, attrs: { dtype: "complex64" } }), u = l.data.get(c.dataId), h = u.complexTensorInfos.real, d = u.complexTensorInfos.imag, p = l.data.get(h.dataId).values, f = l.data.get(d.dataId).values, m = Sr({ inputs: { x: a }, backend: l, attrs: { dtype: "complex64" } }), g = l.data.get(m.dataId), y = g.complexTensorInfos.real, b = g.complexTensorInfos.imag, w = l.data.get(y.dataId).values, x = l.data.get(b.dataId).values, [S, v, T] = e(i.shape, a.shape, p, f, w, x), N = l.makeTensorInfo(T, "float32", S), $ = l.makeTensorInfo(T, "float32", v), R = dn({ inputs: { real: N, imag: $ }, backend: l });
      return l.disposeIntermediateTensorInfo(c), l.disposeIntermediateTensorInfo(m), l.disposeIntermediateTensorInfo(N), l.disposeIntermediateTensorInfo($), R;
    } else {
      const c = l.data.get(i.dataId).values, u = l.data.get(a.dataId).values, h = s || i.dtype, [d, p] = t(i.shape, a.shape, c, u, h);
      return l.makeTensorInfo(p, h, d);
    }
  };
}
function lb(n) {
  return (t, e, s, r, o, i) => {
    const a = bt(t, e), l = P(a), c = a.length, u = lt(a), h = jt("float32", l), d = jt("float32", l), p = Ps(t, a), f = Ps(e, a), m = Ks(s, r), g = Ks(o, i), y = t.length, b = lt(t), w = e.length, x = lt(e);
    if (p.length + f.length === 0)
      for (let S = 0; S < h.length; S++) {
        const v = S % m.length, T = S % g.length, N = n(m[v * 2], m[v * 2 + 1], g[T * 2], g[T * 2 + 1]);
        h[S] = N.real, d[S] = N.imag;
      }
    else
      for (let S = 0; S < h.length; S++) {
        const v = Ts(S, c, u), T = v.slice(-y);
        p.forEach((z) => T[z] = 0);
        const N = mn(T, y, b), $ = v.slice(-w);
        f.forEach((z) => $[z] = 0);
        const R = mn($, w, x), F = n(m[N * 2], m[N * 2 + 1], g[R * 2], g[R * 2 + 1]);
        h[S] = F.real, d[S] = F.imag;
      }
    return [h, d, a];
  };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const eV = xe((n, t) => n + t), nV = lb((n, t, e, s) => ({ real: n + e, imag: t + s })), Bo = Re(uo, eV, nV), sV = {
  kernelName: uo,
  backendName: "cpu",
  kernelFunc: Bo
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function uv(n, t, e, s, r) {
  const o = P(s), i = ae(r, e);
  for (let a = 0; a < n.length; a++) {
    const l = n[a];
    if (l < 0)
      throw new Error("Input x must be non-negative!");
    l >= r || (o > 0 ? i[l] += t[a] : i[l] += 1);
  }
  return i;
}
function rV(n, t, e, s = !1) {
  const r = n.shape[0], o = n.shape[1], i = gt([r, e], t.dtype);
  for (let a = 0; a < r; a++)
    for (let l = 0; l < o; l++) {
      const c = n.get(a, l);
      if (c < 0)
        throw new Error("Input x must be non-negative!");
      c >= e || (s ? i.set(1, a, c) : t.size > 0 ? i.set(i.get(a, c) + t.get(a, l), a, c) : i.set(i.get(a, c) + 1, a, c));
    }
  return i;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ha(n) {
  return (t, e, s) => {
    const r = jt(e, t.length);
    for (let o = 0; o < t.length; ++o)
      r[o] = n(t[o], s);
    return r;
  };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function At(n, t, e) {
  return ({ inputs: s, attrs: r, backend: o }) => {
    const { x: i } = s;
    if (ct(i, n), i.dtype === "string" || e === "string")
      throw new Error("unaryKernelFunc does not support string input/output");
    const a = o, l = a.data.get(i.dataId).values, c = P(i.shape), u = e || i.dtype, h = Gt(u, c);
    for (let d = 0; d < c; ++d)
      h[d] = t(l[d], r);
    return a.makeTensorInfo(i.shape, u, h);
  };
}
function da(n, t, e) {
  return ({ inputs: s, attrs: r, backend: o }) => {
    const { x: i } = s;
    if (ct(i, n), i.dtype === "string" || e === "string")
      throw new Error("unaryKernelFunc does not support string input/output");
    const a = o, l = a.data.get(i.dataId).values, c = e || i.dtype, u = t(l, c, r);
    return a.makeTensorInfo(i.shape, c, u);
  };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const oV = ha((n) => Math.ceil(n)), iV = da(ai, oV), aV = {
  kernelName: ai,
  backendName: "cpu",
  kernelFunc: iV
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function lV(n, t, e, s) {
  const r = Gt(e, P(t));
  if (s && e !== "string") {
    let o = 0;
    n.forEach((i) => {
      const a = P(i.shape);
      r.set(i.vals, o), o += a;
    });
  } else {
    let o = 0;
    n.forEach((i) => {
      const a = e === "string" ? Zs(i.vals) : i.vals;
      let l = 0;
      for (let c = 0; c < i.shape[0]; ++c) {
        const u = c * t[1] + o;
        for (let h = 0; h < i.shape[1]; ++h)
          r[u + h] = a[l++];
      }
      o += i.shape[1];
    });
  }
  return r;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const cV = xe((n, t) => n === t ? 1 : 0), hv = Re(xl, cV, null, "bool"), uV = {
  kernelName: xl,
  backendName: "cpu",
  kernelFunc: hv
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const hV = ha((n) => Math.exp(n)), dv = da(fi, hV, "float32"), dV = {
  kernelName: fi,
  backendName: "cpu",
  kernelFunc: dv
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const pV = ha((n) => Math.expm1(n)), fV = da(mi, pV), mV = {
  kernelName: mi,
  backendName: "cpu",
  kernelFunc: fV
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const gV = ha((n) => Math.floor(n)), yV = da(gi, gV), bV = {
  kernelName: gi,
  backendName: "cpu",
  kernelFunc: yV
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function xV(n, t, e, s, r, o, i, a, l) {
  const c = gt([s, o], e);
  for (let u = 0; u < s; u++) {
    const h = [];
    let d = 0;
    for (let p = 0; p < r; p++) {
      const f = n[u * r + p];
      d += f * i[p], h.push(f);
    }
    if (d < 0 || d >= l / o)
      throw new Error(`Invalid indices: ${h} does not index into ${a}`);
    for (let p = 0; p < o; p++)
      c.values[u * o + p] = t.get(...t.indexToLoc(d * o + p));
  }
  return c;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function wV(n, t, e) {
  const s = gt(e, n.dtype);
  for (let r = 0; r < s.size; ++r) {
    const i = s.indexToLoc(r).slice(), a = i[0], l = i[2], c = t.locToIndex([a, l]);
    i[2] = t.values[c];
    const u = n.locToIndex(i);
    0 <= u && u < n.values.length && (s.values[r] = n.values[u]);
  }
  return s;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const IV = xe((n, t) => n > t ? 1 : 0), SV = Re(vl, IV, null, "bool"), vV = {
  kernelName: vl,
  backendName: "cpu",
  kernelFunc: SV
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const CV = xe((n, t) => n >= t ? 1 : 0), kV = Re(bi, CV, null, "bool"), TV = {
  kernelName: bi,
  backendName: "cpu",
  kernelFunc: kV
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const NV = xe((n, t) => n < t ? 1 : 0), $V = Re(kl, NV, null, "bool"), RV = {
  kernelName: kl,
  backendName: "cpu",
  kernelFunc: $V
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const EV = xe((n, t) => n <= t ? 1 : 0), LV = Re(Tl, EV, null, "bool"), DV = {
  kernelName: Tl,
  backendName: "cpu",
  kernelFunc: LV
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function GV(n, t, e) {
  const s = (t - n) / (e - 1), r = ae(e, "float32");
  r[0] = n;
  for (let o = 1; o < r.length; o++)
    r[o] = r[o - 1] + s;
  return r;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const FV = ha((n) => Math.log(n)), OV = da(vi, FV), AV = {
  kernelName: vi,
  backendName: "cpu",
  kernelFunc: OV
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function zV(n, t, e, s) {
  const r = jt(s, P(e));
  for (let o = 0; o < r.length; ++o) {
    const i = o * t;
    let a = n[i];
    for (let l = 0; l < t; ++l) {
      const c = n[i + l];
      (Number.isNaN(c) || c > a) && (a = c);
    }
    r[o] = a;
  }
  return r;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const WV = xe((n, t) => Math.max(n, t)), VV = Re(ki, WV), MV = {
  kernelName: ki,
  backendName: "cpu",
  kernelFunc: VV
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const PV = xe((n, t) => Math.min(n, t)), XV = Re(Ti, PV), _V = {
  kernelName: Ti,
  backendName: "cpu",
  kernelFunc: XV
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const pv = xe((n, t) => n * t), KV = lb((n, t, e, s) => ({
  real: n * e - t * s,
  imag: n * s + t * e
})), Cp = Re($i, pv, KV), ZV = {
  kernelName: $i,
  backendName: "cpu",
  kernelFunc: Cp
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function BV(n, t, e) {
  const s = Ns(-1, e);
  return pv([], t, s, n, e);
}
function HV(n) {
  const { inputs: t, backend: e } = n, { x: s } = t;
  ct(s, "neg");
  const r = e.data.get(s.dataId).values, [o, i] = BV(r, s.shape, s.dtype);
  return e.makeTensorInfo(i, s.dtype, o);
}
const UV = {
  kernelName: zl,
  backendName: "cpu",
  kernelFunc: HV
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const YV = xe((n, t) => n !== t ? 1 : 0), jV = Re(Wl, YV, null, "bool"), JV = {
  kernelName: Wl,
  backendName: "cpu",
  kernelFunc: jV
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fv(n, t, e, s, r) {
  const o = t.length, i = P(t), a = lt(t), l = lt(r), c = jt(e, P(r));
  for (let u = 0; u < i; ++u) {
    const h = Ts(u, o, a), d = new Array(h.length);
    for (let f = 0; f < d.length; f++)
      d[f] = h[s[f]];
    const p = mn(d, o, l);
    c[p] = n[u];
  }
  return c;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function rn(n) {
  const { inputs: t, attrs: e, backend: s } = n, { x: r } = t, { perm: o } = e;
  ct(r, "transpose");
  const i = r.shape.length, a = new Array(i);
  for (let h = 0; h < a.length; h++)
    a[h] = r.shape[o[h]];
  const l = s.data.get(r.dataId).values, c = fv(l, r.shape, r.dtype, o, a);
  return { dataId: s.write(c, a, r.dtype), shape: a, dtype: r.dtype };
}
const QV = {
  kernelName: Zr,
  backendName: "cpu",
  kernelFunc: rn
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function qV(n, t, e, s) {
  const [r, o] = ve(n, s), i = He(t, "int32"), a = ae(P(r), i), l = P(o);
  for (let c = 0; c < a.length; ++c) {
    const u = c * l;
    let h = 1;
    for (let d = 0; d < l; ++d)
      h *= e[u + d];
    a[c] = h;
  }
  return { outVals: a, outShape: r, outDtype: i };
}
function tM(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { axis: o, keepDims: i } = s;
  ct(r, "prod");
  const a = r.shape.length, l = vt(o, r.shape), c = oe(l, a);
  let u = l, h = r;
  const d = [];
  c != null && (h = rn({ inputs: { x: r }, backend: e, attrs: { perm: c } }), d.push(h), u = pe(u.length, a));
  const p = e.data.get(h.dataId).values, { outVals: f, outShape: m, outDtype: g } = qV(h.shape, h.dtype, p, u);
  let y = m;
  return i && (y = de(m, l)), d.forEach((b) => e.disposeIntermediateTensorInfo(b)), e.makeTensorInfo(y, g, f);
}
const eM = {
  kernelName: Kl,
  backendName: "cpu",
  kernelFunc: tM
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function nM(n, t, e) {
  n.forEach((s, r) => {
    if (s < 0 || s >= e) {
      const o = Ts(r, t.length, lt(t)).join(",");
      throw new Error(`indices[${o}] = ${s} is not in [0, ${e})`);
    }
  });
}
function sM(n, t) {
  for (let e = 0; e < n.length; ++e) {
    const s = n[e], r = e === n.length - 1 ? t : n[e + 1].length;
    if (s.length === 0)
      throw new Error("Ragged splits may not be empty");
    if (s[0] < 0)
      throw new Error("Ragged splits must be non-negative");
    if (s[s.length - 1] > r)
      throw new Error("Ragged splits must not point past values");
    for (let o = 1; o < s.length; ++o)
      if (s[o - 1] > s[o])
        throw new Error("Ragged splits must be sorted in ascending order");
  }
}
function rM(n, t, e, s) {
  const r = [];
  let o = 0;
  const i = t.length - 1 + e.length, a = new Array(i).fill(null).map(() => [0]);
  sM(e, s);
  let l = 1;
  for (let c = 0; c < t.length - 1; ++c) {
    l *= t[c];
    const u = t[c + 1];
    for (let h = 1; h < l + 1; ++h)
      a[c].push(h * u);
  }
  for (let c = 0; c < n.length; ++c) {
    let u = n[c], h = n[c] + 1;
    for (let d = 0; d < e.length; ++d) {
      const p = e[d], f = d + t.length - 1;
      if (f >= 0) {
        const m = a[f], g = m[m.length - 1] - p[u];
        for (let y = u; y < h; ++y)
          a[f].push(p[y + 1] + g);
      }
      u = p[u], h = p[h];
    }
    h !== u && (r.push([u, h]), o += h - u);
  }
  return { outSplits: a, valueSlices: r, numValues: o };
}
function oM(n) {
  const t = [];
  for (let e = 0; e < n.length; ++e) {
    const s = n[e].length, r = Gt("int32", s);
    t.push(r), n[e].forEach((o, i) => r[i] = o);
  }
  return t;
}
function kx(n, t) {
  const e = n.slice(0, t);
  for (; e.length < t; )
    e.push(1);
  for (let s = t; s < n.length; s++)
    e[t - 1] *= n[s];
  return e;
}
function iM(n, t, e, s, r, o) {
  const i = kx(t, 2)[1], a = kx(o, 2)[1];
  let l = 0;
  for (const c of e)
    for (let u = c[0]; u < c[1]; ++u) {
      for (let h = 0; h < s; ++h)
        r[l * a + h] = n[u * i + h];
      ++l;
    }
}
function aM(n, t, e, s, r) {
  const o = t.slice();
  o[0] = r;
  const i = Gt(e, P(o)), a = n.length, l = a === 0 ? 0 : a / t[0];
  return iM(n, t, s, l, i, o), [i, o];
}
function lM(n, t, e, s, r, o, i, a) {
  if (n.length === 0)
    throw new Error("paramsNestedSplits must be non empty");
  if (t[0].length === 0)
    throw new Error("Split tensors must not be scalars");
  const l = t[0][0] - 1;
  if (nM(o, i, l), s.length === 0)
    throw new Error("params.rank must be nonzero");
  const c = s[0], { outSplits: u, valueSlices: h, numValues: d } = rM(o, i, n, c), p = oM(u), f = aM(e, s, r, h, d);
  return [p, f[0], f[1]];
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var An = Mn;
class Ku {
  constructor(t, e, s, r, o, i, a, l, c, u) {
    this.shape = t, this.shapeShape = e, this.values = s, this.valuesShape = r, this.valuesDType = o, this.defaultValue = i, this.defaultValueShape = a, this.rowPartitionValues = l, this.rowPartitionValuesShapes = c, this.rowPartitionTypes = Jg(u), this.raggedRank = Qg(this.rowPartitionTypes);
  }
  getRowPartitionTypeByDimension(t) {
    return this.rowPartitionTypes[0] === An.FIRST_DIM_SIZE ? this.rowPartitionTypes[t + 1] : this.rowPartitionTypes[t];
  }
  getRowPartitionTensor(t) {
    return this.rowPartitionTypes[0] === An.FIRST_DIM_SIZE ? this.rowPartitionValues[t + 1] : this.rowPartitionValues[t];
  }
  getMaxWidth(t) {
    const e = this.getRowPartitionTensor(t - 1);
    switch (this.getRowPartitionTypeByDimension(t - 1)) {
      case An.VALUE_ROWIDS:
        return Ku.getMaxWidthValueRowID(e);
      case An.ROW_SPLITS:
        return Ku.getMaxWidthRowSplit(e);
      default:
        throw new Error(`Cannot handle partition type ${An[this.getRowPartitionTypeByDimension(t - 1)]}`);
    }
  }
  static getMaxWidthRowSplit(t) {
    const e = t.length;
    if (e === 0 || e === 1)
      return 0;
    let s = 0;
    for (let r = 0; r < e - 1; ++r) {
      const o = t[r + 1] - t[r];
      o > s && (s = o);
    }
    return s;
  }
  static getMaxWidthValueRowID(t) {
    const e = t.length;
    if (e === 0)
      return 0;
    let s = 0, r = t[0], o = 0;
    for (let i = 1; i < e; ++i) {
      const a = t[i];
      a !== r && (r = a, o = Math.max(i - s, o), s = i);
    }
    return Math.max(e - s, o);
  }
  tensorShapeFromTensor(t, e, s = !0) {
    if (e.length === 0) {
      if (t[0] === -1)
        return [];
      throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.");
    }
    return Nx(t, s);
  }
  calculateOutputSize(t) {
    const e = this.valuesShape, s = this.defaultValueShape;
    qg(s, e);
    const r = this.tensorShapeFromTensor(this.shape, this.shapeShape), i = jg(this.raggedRank, r, e);
    i[0] < 0 && (i[0] = t);
    for (let a = 1; a <= this.raggedRank; ++a)
      i[a] < 0 && (i[a] = this.getMaxWidth(a));
    return i;
  }
  calculateFirstParentOutputIndex(t, e, s) {
    const r = Math.min(t, s), o = [];
    let i = 0;
    for (let a = 0; a < r; ++a, i += e)
      o.push(i);
    for (let a = r; a < t; ++a)
      o.push(-1);
    return C(o.length === t, () => "Final length of result must be equal to firstDimension."), o;
  }
  calculateOutputIndexRowSplit(t, e, s, r) {
    const o = t.length, i = [];
    for (let a = 0; a < o - 1; ++a) {
      const l = t[a + 1] - t[a];
      let c = Math.min(r, l), u = e[a];
      u === -1 && (c = 0);
      for (let h = 0; h < c; ++h)
        i.push(u), u += s;
      for (let h = 0; h < l - c; ++h)
        i.push(-1);
    }
    if (o > 0 && i.length !== t[o - 1])
      throw new Error("Invalid row split size.");
    return i;
  }
  calculateOutputIndexValueRowID(t, e, s, r) {
    const o = t.length, i = [];
    if (o === 0)
      return [];
    let a = 0, l = t[0];
    if (l >= e.length)
      throw new Error(`Got currentValueRowId=${l}, which is not less than ${e.length}`);
    let c = e[l];
    i.push(c);
    for (let u = 1; u < o; ++u) {
      const h = t[u];
      if (h === l)
        c >= 0 && (++a, a < r ? c += s : c = -1);
      else {
        if (a = 0, l = h, h >= e.length)
          throw new Error(`Got nextValueRowId=${h} which is not less than ${e.length}`);
        c = e[h];
      }
      i.push(c);
    }
    if (i.length !== t.length)
      throw new Error("Invalid row ids.");
    return i;
  }
  calculateOutputIndex(t, e, s, r) {
    const o = this.getRowPartitionTensor(t), i = this.getRowPartitionTypeByDimension(t);
    switch (i) {
      case An.VALUE_ROWIDS:
        return this.calculateOutputIndexValueRowID(o, e, s, r);
      case An.ROW_SPLITS:
        if (o.length - 1 > e.length)
          throw new Error(`Row partition size is greater than output size: ${o.length - 1} > ${e.length}`);
        return this.calculateOutputIndexRowSplit(o, e, s, r);
      default:
        throw new Error(`Unsupported partition type: ${An[i]}`);
    }
  }
  getFirstDimensionSize() {
    const t = this.rowPartitionValues[0];
    if (this.rowPartitionTypes.length === 0)
      throw new Error("No row_partition_types given.");
    const e = this.rowPartitionTypes[0];
    switch (e) {
      case An.FIRST_DIM_SIZE:
        return t[0];
      case An.VALUE_ROWIDS:
        throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");
      case An.ROW_SPLITS:
        return this.rowPartitionValuesShapes[0][0] - 1;
      default:
        throw new Error(`Cannot handle type ${An[e]}`);
    }
  }
  compute() {
    if (this.rowPartitionValues[0].length <= 0)
      throw new Error("Invalid first partition input. Tensor requires at least one element.");
    const e = this.getFirstDimensionSize(), s = this.calculateOutputSize(e), r = new Array(this.raggedRank + 1);
    r[r.length - 1] = 1;
    for (let l = r.length - 2; l >= 0; --l)
      r[l] = r[l + 1] * s[l + 1];
    const o = Nx(s, !1), i = Gt(this.valuesDType, P(o));
    if (r[0] * s[0] > 0) {
      let l = this.calculateFirstParentOutputIndex(e, r[0], s[0]);
      for (let c = 1; c <= this.raggedRank; ++c)
        l = this.calculateOutputIndex(c - 1, l, r[c], s[c]);
      this.setOutput(this.raggedRank, l, i, o);
    }
    return [o, i];
  }
  setOutput(t, e, s, r) {
    if (s.length === 0)
      return;
    const o = this.values, i = s;
    let a = r.slice();
    a = a.slice(t + 1);
    const l = P(a), c = e.length;
    let u = this.defaultValue;
    if (u.length !== l && u.length !== 1) {
      const f = this.defaultValueShape;
      A(() => {
        const m = G(u, f);
        u = ur(m, a).dataSync();
      });
    }
    let h = 0, d = 0, p = 0;
    for (let f = 0; f <= c; ++f) {
      let m = f < c ? e[f] : -1;
      if (m === p) {
        ++p;
        continue;
      }
      if (d < p) {
        const g = o.subarray(h * l), y = i.subarray(d * l), b = (p - d) * l;
        Tx(y, g, b);
      }
      if (f >= c) {
        const g = s.length;
        m = Math.floor(g / l);
      }
      if (m > p)
        if (this.defaultValue.length === 1)
          i.subarray(p * l, m * l).fill(this.defaultValue[0]), p = m;
        else
          for (; m > p; ) {
            const g = i.slice(p * l);
            Tx(g, u, l), ++p;
          }
      m < 0 ? (h = f + 1, d = p) : (h = f, d = p, p = d + 1);
    }
  }
}
function Tx(n, t, e) {
  for (let s = 0; s < e; s++)
    n[s] = t[s];
}
function Nx(n, t) {
  const e = [];
  for (let s of n) {
    if (s < 0) {
      if (!t)
        throw new Error(`Dimension ${s} must be >= 0`);
      if (s < -1)
        throw new Error(`Dimension ${s} must be >= -1`);
      s = -1;
    }
    e.push(s);
  }
  return e;
}
function cM(n, t, e, s, r, o, i, a, l, c) {
  return new Ku(n, t, e, s, r, o, i, a, l, c).compute();
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function uM(n, t, e, s) {
  const r = n === t, o = n < t && e < 0, i = t < n && e > 1;
  if (r || o || i)
    return ae(0, s);
  const a = Math.abs(Math.ceil((t - n) / e)), l = ae(a, s);
  t < n && e === 1 && (e = -1), l[0] = n;
  for (let c = 1; c < l.length; c++)
    l[c] = l[c - 1] + e;
  return l;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const hM = ha((n) => 1 / Math.sqrt(n)), dM = da(Fi, hM), pM = {
  kernelName: Fi,
  backendName: "cpu",
  kernelFunc: dM
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Da(n, t, e, s, r, o, i, a, l, c) {
  const u = [s / r, r], h = n.values, d = t.values;
  if (s === 0)
    return gt(e, t.dtype);
  const p = gt(u, t.dtype);
  typeof l == "string" || typeof l == "number" ? p.values.fill(l) : typeof l == "boolean" && p.values.fill(+l);
  for (let f = 0; f < o; f++) {
    const m = [];
    let g = 0;
    for (let y = 0; y < i; y++) {
      const b = h[f * i + y];
      m.push(b), g += b * a[y];
    }
    if (g < 0 || g >= s / r)
      throw new Error(`Invalid indices: ${m} does not index into ${e}`);
    for (let y = 0; y < r; y++)
      c ? p.values[g * r + y] += d[f * r + y] : p.values[g * r + y] = t.rank === 0 ? d[0] : d[f * r + y];
  }
  return p;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const mv = At(Vi, (n) => 1 / (1 + Math.exp(-n))), fM = {
  kernelName: Vi,
  backendName: "cpu",
  kernelFunc: mv
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function mM(n, t, e, s, r) {
  const o = cd(s, t, e), i = P(e), a = lt(s);
  if (o) {
    const h = ud(t, a);
    return r === "string" ? n.slice(h, h + i) : n.subarray(h, h + i);
  }
  const l = r === "string" ? Zs(n) : n, c = gt(s, r, l), u = gt(e, r);
  for (let h = 0; h < u.size; ++h) {
    const d = u.indexToLoc(h), p = d.map((f, m) => f + t[m]);
    u.set(c.get(...p), ...d);
  }
  return r === "string" ? Ry(u.values) : u.values;
}
function io(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { begin: o, size: i } = s;
  ct(r, "slice");
  const [a, l] = hd(r, o, i);
  _m(r, a, l);
  const c = e.data.get(r.dataId).values, u = mM(c, a, l, r.shape, r.dtype);
  return e.makeTensorInfo(l, r.dtype, u);
}
const gM = {
  kernelName: jl,
  backendName: "cpu",
  kernelFunc: io
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function yM(n, t, e, s, r, o, i) {
  const a = t[0], l = o[0], c = new Array(l), u = new Array(a), h = t[1];
  if (l === 0) {
    if (a !== 0)
      throw new Error(yy(a));
    const g = Gt(e, 0), y = Gt(r, 0);
    return [
      g,
      [0, h],
      y,
      c,
      u
    ];
  }
  let d = !0, p = 0;
  const f = new Array(l).fill(0);
  for (let g = 0; g < a; ++g) {
    const y = n[g * h];
    if (y < 0)
      throw new Error(by(g, y));
    if (y >= l)
      throw new Error(xy(g, y, l));
    ++f[y], d = d && y >= p, p = y;
  }
  let m = !0;
  for (let g = 0; g < l; ++g) {
    const y = f[g] === 0;
    c[g] = y, m = m && !y, f[g] = Math.max(f[g], 1), g > 0 && (f[g] += f[g - 1]);
  }
  if (m && d) {
    const g = n, y = s;
    for (let b = 0; b < a; ++b)
      u[b] = b;
    return [
      g,
      [a, h],
      y,
      c,
      u
    ];
  } else {
    const g = f[l - 1], y = Gt(e, g * h), b = Gt(r, g), w = new Array(l).fill(0);
    for (let x = 0; x < a; ++x) {
      const S = n[x * h], v = w[S], T = (S === 0 ? 0 : f[S - 1]) + v;
      w[S]++;
      for (let N = 0; N < h; ++N)
        y[T * h + N] = n[x * h + N];
      b[T] = s[x], u[x] = T;
    }
    for (let x = 0; x < l; ++x)
      if (w[x] === 0) {
        const v = x === 0 ? 0 : f[x - 1];
        y[v * h + 0] = x;
        for (let T = 1; T < h; ++T)
          y[v * h + T] = 0;
        b[v] = i;
      }
    return [
      y,
      [g, h],
      b,
      c,
      u
    ];
  }
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function bM(n, t, e, s, r) {
  const o = P(s), i = t[0], a = r.length, l = [];
  let c = 1, u = -1;
  for (let g = 0; g < a; ++g) {
    const y = r[g];
    if (y === -1) {
      if (u !== -1)
        throw new Error(wy(u, g));
      u = g, l.push(1);
    } else {
      if (y < 0)
        throw new Error(Iy(g, y));
      c *= y, l.push(y);
    }
  }
  if (u !== -1) {
    if (c <= 0)
      throw new Error(Sy());
    const g = Math.trunc(o / c);
    if (c * g !== o)
      throw new Error(vy(s, l));
    l[u] = g;
  }
  if (P(l) !== o)
    throw new Error(Cy(s, l));
  const d = s.length, p = [];
  if (d > 0) {
    p[d - 1] = 1;
    for (let g = d - 2; g >= 0; --g)
      p[g] = p[g + 1] * s[g + 1];
  }
  const f = [];
  if (a > 0) {
    f[a - 1] = 1;
    for (let g = a - 2; g >= 0; --g)
      f[g] = f[g + 1] * l[g + 1];
  }
  const m = Gt(e, i * a);
  for (let g = 0; g < i; ++g) {
    let y = 0;
    for (let b = 0; b < d; ++b)
      y += n[g * d + b] * p[b];
    for (let b = 0; b < a; ++b)
      m[g * a + b] = Math.trunc(y / f[b]), y %= f[b];
  }
  return [m, [i, a], l];
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function gv(n, t, e, s, r, o = !1, i = 0) {
  const a = s.length, l = [t[0], n.length / t[0]], c = l[1], h = a > 0 ? r[a - 1] + 1 : 0;
  if (h < 0)
    throw new Error(Ya());
  const d = t.slice();
  d[0] = h;
  const p = d.reduce((w, x) => w * x, 1), f = Gt(e, p);
  if (a === 0)
    return h > 0 && f.fill(i), [f, d];
  if (h <= 0)
    throw new Error(Ya());
  let m = 0, g = 1, y = 0, b = r[m];
  for (; ; ) {
    let w = 0;
    if (g < a) {
      if (w = r[g], b === w) {
        ++g;
        continue;
      }
      if (b >= w)
        throw new Error(ky());
    }
    if (b < 0 || b >= h)
      throw new Error(Ty(b, h));
    b > y && f.fill(i, y * c, b * c);
    for (let x = m; x < g; ++x) {
      const S = s[x];
      if (S < 0 || S >= l[0])
        throw new Error(Ny(x, s[x], l[0]));
      for (let v = 0; v < c; v++)
        f[b * c + v] += n[S * c + v];
    }
    if (o)
      for (let x = 0; x < c; x++)
        f[b * c + x] /= g - m;
    if (m = g, ++g, y = b + 1, b = w, g > a)
      break;
  }
  return y < h && f.fill(i, y * c, h * c), [f, d];
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const xM = At(Pi, (n) => Math.sqrt(n)), wM = {
  kernelName: Pi,
  backendName: "cpu",
  kernelFunc: xM
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const IM = xe((n, t) => {
  const e = n - t;
  return e * e;
}), SM = Re(Xi, IM), vM = {
  kernelName: Xi,
  backendName: "cpu",
  kernelFunc: SM
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function CM(n, t, e, s) {
  const r = gt(n, t.dtype);
  for (let o = 0; o < r.size; o++) {
    const i = r.indexToLoc(o), a = new Array(i.length);
    for (let l = 0; l < a.length; l++)
      a[l] = i[l] * e[l] + s[l];
    r.set(t.get(...a), ...i);
  }
  return r;
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class kM {
  constructor(t, e, s, r, o, i) {
    this.separator = Ln(t), this.nGramWidths = e, this.leftPad = Ln(s), this.rightPad = Ln(r), this.padWidth = o, this.preserveShort = i;
  }
  getPadWidth(t) {
    return Math.min(this.padWidth < 0 ? t - 1 : this.padWidth, t - 1);
  }
  getNumNGrams(t, e) {
    const s = this.getPadWidth(e);
    return Math.max(0, t + 2 * s - e + 1);
  }
  createNGrams(t, e, s, r, o, i) {
    for (let a = 0; a < o; ++a) {
      const l = this.getPadWidth(i), c = Math.max(0, l - a), u = Math.max(0, l - (o - (a + 1))), h = i - (c + u), d = e + (c > 0 ? 0 : a - l);
      let p = 0;
      p += c * this.leftPad.length;
      for (let b = 0; b < h; ++b)
        p += t[d + b].length;
      p += u * this.rightPad.length;
      const f = c + u + h - 1;
      p += f * this.separator.length, s[r + a] = new Uint8Array(p);
      const m = s[r + a];
      let g = 0;
      const y = (b) => b.forEach((w) => m[g++] = w);
      for (let b = 0; b < c; ++b)
        y(this.leftPad), y(this.separator);
      for (let b = 0; b < h - 1; ++b)
        y(t[d + b]), y(this.separator);
      if (h > 0) {
        y(t[d + h - 1]);
        for (let b = 0; b < u; ++b)
          y(this.separator), y(this.rightPad);
      } else {
        for (let b = 0; b < u - 1; ++b)
          y(this.rightPad), y(this.separator);
        y(this.rightPad);
      }
    }
  }
  compute(t, e) {
    const s = t.length, r = e.length;
    if (r > 0) {
      let l = e[0];
      if (l !== 0)
        throw new Error(`First split value must be 0, got ${l}`);
      for (let c = 1; c < r; ++c) {
        let u = e[c] >= l;
        if (u = u && e[c] <= s, !u)
          throw new Error(`Invalid split value ${e[c]}, must be in [${l}, ${s}]`);
        l = e[c];
      }
      if (l !== s)
        throw new Error(`Last split value must be data size. Expected ${s}, got ${l}`);
    }
    const o = r - 1, i = Gt("int32", r);
    if (s === 0 || r === 0) {
      const l = new Array(s);
      for (let c = 0; c <= o; ++c)
        i[c] = 0;
      return [l, i];
    }
    i[0] = 0;
    for (let l = 1; l <= o; ++l) {
      const c = e[l] - e[l - 1];
      let u = 0;
      this.nGramWidths.forEach((h) => {
        u += this.getNumNGrams(c, h);
      }), this.preserveShort && c > 0 && u === 0 && (u = 1), i[l] = i[l - 1] + u;
    }
    const a = new Array(i[o]);
    for (let l = 0; l < o; ++l) {
      const c = e[l];
      let u = i[l];
      if (this.nGramWidths.forEach((h) => {
        const d = e[l + 1] - e[l], p = this.getNumNGrams(d, h);
        this.createNGrams(t, c, a, u, p, h), u += p;
      }), this.preserveShort && u === i[l]) {
        const h = e[l + 1] - e[l];
        if (h === 0)
          continue;
        const d = h + 2 * this.padWidth, p = 1;
        this.createNGrams(t, c, a, u, p, d);
      }
    }
    return [a, i];
  }
}
function TM(n, t, e, s, r, o, i, a) {
  return new kM(e, s, r, o, i, a).compute(n, t);
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function NM(n, t, e, s) {
  if (!n.length)
    return;
  if (t.length === 0) {
    for (let o = 0; o < n.length; ++o)
      s.push(n.subarray(o, o + 1));
    return;
  }
  if (t.length === 1) {
    const o = t[0];
    let i = n.indexOf(o);
    for (; i !== -1; ) {
      const a = n.subarray(0, i);
      (!e || a.length !== 0) && s.push(a), n = n.subarray(i + 1), i = n.indexOf(o);
    }
    (!e || n.length !== 0) && s.push(n);
    return;
  }
  let r = 0;
  for (let o = 0; o < n.length + 1; o++)
    if (o === n.length || t.indexOf(n[o]) !== -1) {
      const i = n.subarray(r, o);
      (!e || i.length !== 0) && s.push(i), r = o + 1;
    }
}
function $M(n, t, e) {
  const s = n.length, r = [];
  let o = 0, i = 0;
  const a = new Array(s);
  for (let d = 0; d < s; ++d) {
    const p = r.length;
    NM(n[d], t, e, r);
    const f = r.length - p;
    a[d] = f, o += f, i = Math.max(i, f);
  }
  const l = Gt("int32", o * 2), c = new Array(o), u = [s, i];
  let h = 0;
  for (let d = 0; d < s; ++d)
    for (let p = 0; p < a[d]; ++p)
      l[h * 2] = d, l[h * 2 + 1] = p, c[h] = r[h], ++h;
  return [l, c, u];
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function RM(n, t) {
  const e = Gt("int32", n.length);
  for (let s = 0; s < n.length; ++s)
    e[s] = km(n[s]).modulo(t).getLowBitsUnsigned();
  return e;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const EM = xe((n, t) => n - t), LM = lb((n, t, e, s) => ({ real: n - e, imag: t - s })), cb = Re(_i, EM, LM), DM = {
  kernelName: _i,
  backendName: "cpu",
  kernelFunc: cb
};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function GM(n, t) {
  const e = new Array(n.rank);
  for (let r = 0; r < e.length; r++)
    e[r] = n.shape[r] * t[r];
  const s = gt(e, n.dtype);
  for (let r = 0; r < s.values.length; ++r) {
    const o = s.indexToLoc(r), i = new Array(n.rank);
    for (let l = 0; l < i.length; l++)
      i[l] = o[l] % n.shape[l];
    const a = n.locToIndex(i);
    s.values[r] = n.values[a];
  }
  return s;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Ga = (n, t) => {
  const e = t.value - n.value;
  return e === 0 ? n.index - t.index : e;
};
function yv(n, t, e = 0, s = n.length - 1) {
  for (; s > e; ) {
    if (s - e > 600) {
      const a = s - e + 1, l = t - e + 1, c = Math.log(a), u = 0.5 * Math.exp(2 * c / 3), h = 0.5 * Math.sqrt(c * u * (a - u) / a) * Math.sign(l - a / 2), d = Math.max(e, Math.floor(t - l * u / a + h)), p = Math.min(s, Math.floor(t + (a - l) * u / a + h));
      yv(n, t, d, p);
    }
    const r = n[t];
    let o = e, i = s;
    for (hn(n, e, t), Ga(n[s], r) > 0 && hn(n, e, s); o < i; ) {
      for (hn(n, o, i), o++, i--; Ga(n[o], r) < 0; )
        o = o + 1;
      for (; Ga(n[i], r) > 0; )
        i = i - 1;
    }
    Ga(n[e], r) === 0 ? hn(n, e, i) : (i = i + 1, hn(n, i, s)), i <= t && (e = i + 1), t <= i && (s = i - 1);
  }
}
function FM(n, t, e, s, r) {
  const o = t[t.length - 1], [i, a] = [n.length / o, o], l = jt(e, i * s), c = jt("int32", i * s);
  for (let h = 0; h < i; h++) {
    const d = h * a, p = n.subarray(d, d + a);
    let f = new Array(p.length);
    p.forEach((b, w) => f[w] = { value: b, index: w }), s < f.length && (yv(f, s), f = f.slice(0, s)), r && f.sort(Ga);
    const m = h * s, g = l.subarray(m, m + s), y = c.subarray(m, m + s);
    for (let b = 0; b < s; b++)
      g[b] = f[b].value, y[b] = f[b].index;
  }
  const u = t.slice();
  return u[u.length - 1] = s, [
    gt(u, e, l),
    gt(u, "int32", c)
  ];
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function OM(n, t, e, s) {
  const r = vt(t, e)[0], o = [1, e[0], 1];
  for (let f = 0; f < r; f++)
    o[0] *= e[f];
  o[1] = e[r];
  for (let f = r + 1; f < e.length; f++)
    o[2] *= e[f];
  const i = {}, a = new Int32Array(e[r]), l = new ue(o, s, n), c = [], u = o[0] === 1 && o[2] === 1;
  for (let f = 0; f < e[r]; f++) {
    let m;
    if (u)
      m = n[f].toString();
    else {
      const g = [];
      for (let y = 0; y < o[0]; y++)
        for (let b = 0; b < o[2]; b++)
          g.push(l.get(y, f, b));
      m = g.join(",");
    }
    if (i[m] !== void 0)
      a[f] = i[m];
    else {
      const g = Object.keys(i).length;
      i[m] = g, a[f] = g, c.push(f);
    }
  }
  const h = o.slice();
  h[1] = Object.keys(i).length;
  const d = new ue(h, s);
  c.forEach((f, m) => {
    for (let g = 0; g < o[0]; g++)
      for (let y = 0; y < o[2]; y++)
        d.set(l.get(g, f, y), g, m, y);
  });
  const p = e.slice();
  return p[r] = h[1], {
    outputValues: d.values,
    outputShape: p,
    indices: a
  };
}
/** @license See the LICENSE file. */
const AM = "3.21.0";
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
Wm("cpu", () => new vp(), 1);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const bv = At(di, (n) => n >= 0 ? n : Math.exp(n) - 1), zM = {
  kernelName: di,
  backendName: "cpu",
  kernelFunc: bv
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function xv(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { alpha: o } = s;
  ct([r], "leakyRelu");
  const i = P(r.shape), a = e.data.get(r.dataId).values, l = jt("float32", i);
  for (let c = 0; c < a.length; c++)
    l[c] = a[c] < 0 ? o * a[c] : a[c];
  return e.makeTensorInfo(r.shape, "float32", l);
}
const WM = {
  kernelName: Cl,
  backendName: "cpu",
  kernelFunc: xv
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const VM = xe((n, t) => n < 0 ? t * n : n);
function wv(n) {
  const { inputs: t, backend: e } = n, { x: s, alpha: r } = t;
  ct([s, r], "prelu");
  const o = e.data.get(s.dataId).values, i = e.data.get(r.dataId).values, [a, l] = VM(s.shape, r.shape, o, i, "float32");
  return e.makeTensorInfo(l, "float32", a);
}
const MM = {
  kernelName: _l,
  backendName: "cpu",
  kernelFunc: wv
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Iv = At(Li, (n) => Math.max(0, n)), PM = {
  kernelName: Li,
  backendName: "cpu",
  kernelFunc: Iv
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Sv = At(Di, (n) => Math.min(Math.max(0, n), 6)), XM = {
  kernelName: Di,
  backendName: "cpu",
  kernelFunc: Sv
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Zu(n, t, e, s, r) {
  if (e === "linear")
    return ks({ inputs: { x: t }, backend: n });
  if (e === "relu")
    return Iv({ inputs: { x: t }, backend: n });
  if (e === "elu")
    return bv({ inputs: { x: t }, backend: n });
  if (e === "relu6")
    return Sv({ inputs: { x: t }, backend: n });
  if (e === "prelu")
    return wv({ inputs: { x: t, alpha: s }, backend: n });
  if (e === "leakyrelu")
    return xv({ inputs: { x: t }, backend: n, attrs: { alpha: r } });
  if (e === "sigmoid")
    return mv({ inputs: { x: t }, backend: n });
  throw new Error(`Activation ${e} has not been implemented for the CPU backend.`);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Xt(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { shape: o } = s, i = P(r.shape), a = ym(o, i), l = P(a);
  C(i === l, () => `The new shape (${a}) has ${l} elements and the old shape (${r.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`), e.incRef(r.dataId);
  const c = e.data.get(r.dataId);
  if (c.complexTensorInfos != null) {
    const u = c.complexTensorInfos.real, h = c.complexTensorInfos.imag;
    u.shape = a, h.shape = a;
  }
  return { dataId: r.dataId, shape: a, dtype: r.dtype };
}
const _M = {
  kernelName: Zl,
  backendName: "cpu",
  kernelFunc: Xt
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function vv(n) {
  const { inputs: t, backend: e, attrs: s } = n, { a: r, b: o } = t, { transposeA: i, transposeB: a } = s;
  ct([r, o], "matMul");
  const l = r.shape.length, c = o.shape.length, u = i ? r.shape[l - 2] : r.shape[l - 1], h = a ? o.shape[c - 1] : o.shape[c - 2], d = i ? r.shape[l - 1] : r.shape[l - 2], p = a ? o.shape[c - 2] : o.shape[c - 1], f = r.shape.slice(0, -2), m = o.shape.slice(0, -2), g = P(f), y = P(m), w = bt(r.shape.slice(0, -2), o.shape.slice(0, -2)).concat([d, p]);
  C(u === h, () => `Error in matMul: inner shapes (${u}) and (${h}) of Tensors with shapes ${r.shape} and ${o.shape} and transposeA=${i} and transposeB=${a} must match.`);
  const x = i ? [g, u, d] : [g, d, u], S = a ? [y, p, h] : [y, h, p], v = Xt({ inputs: { x: r }, backend: e, attrs: { shape: x } }), T = Xt({ inputs: { x: o }, backend: e, attrs: { shape: S } }), N = i ? v.shape[1] : v.shape[2], $ = i ? v.shape[2] : v.shape[1], R = a ? T.shape[1] : T.shape[2], F = Math.max(g, y), z = e.data.get(v.dataId).values, W = e.data.get(T.dataId).values, M = lt(v.shape), X = lt(T.shape), [_, B, Z] = i ? [M[0], 1, M[1]] : [M[0], M[1], 1], [H, j, J] = a ? [1, X[1], X[0]] : [X[1], 1, X[0]], q = $ * R, Q = gt([F, $, R], v.dtype), st = Q.values, tt = e.blockSize;
  for (let ot = 0; ot < F; ot++)
    for (let dt = 0; dt < $; dt += tt)
      for (let mt = 0; mt < R; mt += tt)
        for (let yt = 0; yt < N; yt += tt) {
          const St = Math.min(dt + tt, $), Tt = Math.min(mt + tt, R), Ft = Math.min(yt + tt, N);
          for (let Mt = dt; Mt < St; Mt++)
            for (let Kt = mt; Kt < Tt; Kt++) {
              let Jt = 0;
              for (let zt = yt; zt < Ft; zt++) {
                const ie = Math.min(ot, g - 1) * _, le = Math.min(ot, y - 1) * J, Rs = z[ie + Mt * B + zt * Z], Ee = W[zt * H + Kt * j + le];
                Jt += Rs * Ee;
              }
              st[ot * q + (Mt * R + Kt)] += Jt;
            }
        }
  return e.disposeIntermediateTensorInfo(v), e.disposeIntermediateTensorInfo(T), e.makeTensorInfo(w, Q.dtype, Q.values);
}
const KM = {
  kernelName: cl,
  backendName: "cpu",
  kernelFunc: vv
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ZM(n) {
  const { inputs: t, backend: e, attrs: s } = n, { a: r, b: o, bias: i, preluActivationWeights: a } = t, { transposeA: l, transposeB: c, activation: u, leakyreluAlpha: h } = s;
  let d, p, f;
  const m = [];
  d = vv({ inputs: { a: r, b: o }, attrs: { transposeA: l, transposeB: c }, backend: e }), i && (p = Bo({ inputs: { a: d, b: i }, backend: e }), m.push(d), d = p), u && (f = Zu(e, d, u, a, h), m.push(d), d = f);
  for (const y of m)
    e.disposeIntermediateTensorInfo(y);
  return d;
}
const BM = {
  kernelName: Va,
  backendName: "cpu",
  kernelFunc: ZM
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const HM = At(qo, (n) => Math.acos(n)), UM = {
  kernelName: qo,
  backendName: "cpu",
  kernelFunc: HM
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const YM = At(ti, (n) => Math.acosh(n)), jM = {
  kernelName: ti,
  backendName: "cpu",
  kernelFunc: YM
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function JM(n) {
  const { inputs: t, backend: e } = n, s = t;
  ct(t, "addN");
  const r = s.map((a) => e.data.get(a.dataId).values), o = gt(s[0].shape, s[0].dtype), i = o.values;
  for (let a = 0; a < s.length; a++) {
    const l = r[a];
    for (let c = 0; c < i.length; c++)
      i[c] += l[c];
  }
  return e.makeTensorInfo(o.shape, o.dtype, o.values);
}
const QM = {
  kernelName: rl,
  backendName: "cpu",
  kernelFunc: JM
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function qM(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { axis: o, keepDims: i } = s;
  ct(r, "all");
  const a = vt(o, r.shape);
  let l = a;
  const c = oe(l, r.shape.length);
  let u = r;
  c != null && (u = rn({ inputs: { x: r }, backend: e, attrs: { perm: c } }), l = pe(l.length, r.shape.length)), ze("all", l, u.shape.length);
  const [h, d] = ve(u.shape, l), p = P(d), f = ae(P(h), u.dtype), m = e.data.get(u.dataId).values;
  for (let y = 0; y < f.length; ++y) {
    const b = y * p;
    let w = m[b];
    for (let x = 0; x < p; ++x) {
      const S = m[b + x];
      w = w && S;
    }
    f[y] = w;
  }
  c != null && e.disposeIntermediateTensorInfo(u);
  const g = e.makeTensorInfo(h, u.dtype, f);
  if (i) {
    const y = de(h, a), b = Xt({ inputs: { x: g }, backend: e, attrs: { shape: y } });
    return e.disposeIntermediateTensorInfo(g), b;
  }
  return g;
}
const tP = {
  kernelName: sh,
  backendName: "cpu",
  kernelFunc: qM
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function eP(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { axis: o, keepDims: i } = s;
  ct(r, "any");
  const a = vt(o, r.shape);
  let l = a;
  const c = oe(l, r.shape.length);
  let u = r;
  c != null && (u = rn({ inputs: { x: r }, backend: e, attrs: { perm: c } }), l = pe(l.length, r.shape.length)), ze("any", l, u.shape.length);
  const [h, d] = ve(u.shape, l), p = P(d), f = ae(P(h), u.dtype), m = e.data.get(u.dataId).values;
  for (let y = 0; y < f.length; ++y) {
    const b = y * p;
    let w = m[b];
    for (let x = 0; x < p; ++x) {
      const S = m[b + x];
      w = w || S;
    }
    f[y] = w;
  }
  c != null && e.disposeIntermediateTensorInfo(u);
  const g = e.makeTensorInfo(h, u.dtype, f);
  if (i) {
    const y = de(h, a), b = Xt({ inputs: { x: g }, backend: e, attrs: { shape: y } });
    return e.disposeIntermediateTensorInfo(g), b;
  }
  return g;
}
const nP = {
  kernelName: rh,
  backendName: "cpu",
  kernelFunc: eP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sP(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { axis: o } = s;
  ct(r, "argMax");
  let i = vt(o, r.shape);
  const a = oe(i, r.shape.length);
  let l = r;
  const c = [];
  a != null && (l = rn({ inputs: { x: r }, backend: e, attrs: { perm: a } }), c.push(l), i = pe(i.length, l.shape.length)), i = [i[0]], ze("argMax", i, l.shape.length);
  const [u, h] = ve(l.shape, i), d = P(u), p = ae(d, "int32"), f = P(h), m = e.data.get(l.dataId).values;
  for (let g = 0; g < p.length; ++g) {
    const y = g * f;
    let b = m[y], w = 0;
    for (let x = 0; x < f; ++x) {
      const S = m[y + x];
      S > b && (b = S, w = x);
    }
    p[g] = w;
  }
  return c.forEach((g) => e.disposeIntermediateTensorInfo(g)), e.makeTensorInfo(u, "int32", p);
}
const rP = {
  kernelName: ol,
  backendName: "cpu",
  kernelFunc: sP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function oP(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { axis: o } = s;
  ct(r, "argMin");
  let i = vt(o, r.shape);
  const a = oe(i, r.shape.length);
  let l = r;
  const c = [];
  a != null && (l = rn({ inputs: { x: r }, backend: e, attrs: { perm: a } }), c.push(l), i = pe(i.length, l.shape.length)), i = [i[0]], ze("argMin", i, l.shape.length);
  const [u, h] = ve(l.shape, i), d = P(u), p = ae(d, "int32"), f = P(h), m = e.data.get(l.dataId).values;
  for (let g = 0; g < p.length; ++g) {
    const y = g * f;
    let b = m[y], w = 0;
    for (let x = 0; x < f; ++x) {
      const S = m[y + x];
      S < b && (b = S, w = x);
    }
    p[g] = w;
  }
  return c.forEach((g) => e.disposeIntermediateTensorInfo(g)), e.makeTensorInfo(u, "int32", p);
}
const iP = {
  kernelName: il,
  backendName: "cpu",
  kernelFunc: oP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const aP = At(ei, (n) => Math.asin(n)), lP = {
  kernelName: ei,
  backendName: "cpu",
  kernelFunc: aP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const cP = At(ni, (n) => Math.asinh(n)), uP = {
  kernelName: ni,
  backendName: "cpu",
  kernelFunc: cP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const hP = At(si, (n) => Math.atan(n)), dP = {
  kernelName: si,
  backendName: "cpu",
  kernelFunc: hP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const pP = xe((n, t) => Math.atan2(n, t)), fP = Re(oi, pP), mP = {
  kernelName: oi,
  backendName: "cpu",
  kernelFunc: fP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const gP = At(ri, (n) => Math.atanh(n)), yP = {
  kernelName: ri,
  backendName: "cpu",
  kernelFunc: gP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ub(n, t, e, s, r, o) {
  const i = r.strideHeight, a = r.strideWidth, l = r.dilationHeight, c = r.dilationWidth, u = r.effectiveFilterHeight, h = r.effectiveFilterWidth, d = r.padInfo.top, p = r.padInfo.left, f = o === "max" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY, m = gt(r.outShape, e), g = m.values, y = r.outShape[1] * r.outShape[2] * r.outShape[3], b = r.outShape[2] * r.outShape[3], w = r.outShape[3];
  for (let x = 0; x < r.batchSize; ++x) {
    const S = x * y, v = x * s[0];
    for (let T = 0; T < r.inChannels; ++T)
      for (let N = 0; N < r.outHeight; ++N) {
        const $ = N * i - d, R = Math.max(0, $), F = Math.min(r.inHeight, u + $), z = S + N * b;
        for (let W = 0; W < r.outWidth; ++W) {
          const M = W * a - p, X = Math.max(0, M), _ = Math.min(r.inWidth, h + M);
          let B = f, Z = 0, H = 0;
          for (let J = R; J < F; J += l) {
            const q = v + J * s[1];
            for (let Q = X; Q < _; Q += c) {
              const st = q + Q * s[2], tt = n[st + T];
              o === "max" && tt > B ? B = tt : o === "avg" && (Z += tt, H++);
            }
            if (isNaN(B))
              break;
          }
          const j = z + W * w + T;
          g[j] = o === "avg" ? Z / H : B;
        }
      }
  }
  return m;
}
function Cv(n, t, e, s, r = !1, o = !1) {
  const i = gt(s.outShape, "int32"), a = s.strideHeight, l = s.strideWidth, c = s.dilationHeight, u = s.dilationWidth, h = s.effectiveFilterHeight, d = s.effectiveFilterWidth, p = s.padInfo.top, f = s.padInfo.left, m = gt(t, e, n);
  for (let g = 0; g < s.batchSize; ++g)
    for (let y = 0; y < s.inChannels; ++y)
      for (let b = 0; b < s.outHeight; ++b) {
        const w = b * a - p;
        let x = w;
        for (; x < 0; )
          x += c;
        const S = Math.min(s.inHeight, h + w);
        for (let v = 0; v < s.outWidth; ++v) {
          const T = v * l - f;
          let N = T;
          for (; N < 0; )
            N += u;
          const $ = Math.min(s.inWidth, d + T);
          let R = Number.NEGATIVE_INFINITY, F = -1;
          for (let z = x; z < S; z += c) {
            const W = z - w;
            for (let M = N; M < $; M += u) {
              const X = M - T, _ = m.get(g, z, M, y);
              _ > R && (R = _, r ? F = o ? ((g * s.inHeight + z) * s.inWidth + M) * s.inChannels + y : (z * s.inWidth + M) * s.inChannels + y : F = W * d + X);
            }
          }
          i.set(F, g, b, v, y);
        }
      }
  return i;
}
function kv(n, t, e, s, r, o) {
  const i = r.strideDepth, a = r.strideHeight, l = r.strideWidth, c = r.dilationDepth, u = r.dilationHeight, h = r.dilationWidth, d = r.effectiveFilterDepth, p = r.effectiveFilterHeight, f = r.effectiveFilterWidth, m = r.padInfo.front, g = r.padInfo.top, y = r.padInfo.left, b = o === "max" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY, w = gt(r.outShape, e), x = w.values, S = r.outShape[1] * r.outShape[2] * r.outShape[3] * r.outShape[4], v = r.outShape[2] * r.outShape[3] * r.outShape[4], T = r.outShape[3] * r.outShape[4], N = r.outShape[4];
  for (let $ = 0; $ < r.batchSize; ++$) {
    const R = $ * S, F = $ * s[0];
    for (let z = 0; z < r.inChannels; ++z)
      for (let W = 0; W < r.outDepth; ++W) {
        const M = W * i - m;
        let X = M;
        for (; X < 0; )
          X += c;
        const _ = Math.min(r.inDepth, d + M), B = R + W * v;
        for (let Z = 0; Z < r.outHeight; ++Z) {
          const H = Z * a - g;
          let j = H;
          for (; j < 0; )
            j += u;
          const J = Math.min(r.inHeight, p + H), q = B + Z * T;
          for (let Q = 0; Q < r.outWidth; ++Q) {
            const st = Q * l - y;
            let tt = st;
            for (; tt < 0; )
              tt += h;
            const ot = Math.min(r.inWidth, f + st), dt = q + Q * N;
            let mt = b, yt = 0, St = 0;
            for (let Ft = X; Ft < _; Ft += c) {
              const Mt = F + Ft * s[1];
              for (let Kt = j; Kt < J; Kt += u) {
                const Jt = Mt + Kt * s[2];
                for (let zt = tt; zt < ot; zt += h) {
                  const ie = Jt + zt * s[3], le = n[ie + z];
                  if (o === "max" && le > mt ? mt = le : o === "avg" && (yt += le, St++), isNaN(mt))
                    break;
                }
                if (isNaN(mt))
                  break;
              }
              if (isNaN(mt))
                break;
            }
            const Tt = dt + z;
            x[Tt] = o === "avg" ? yt / St : mt;
          }
        }
      }
  }
  return w;
}
function bP(n, t) {
  const e = gt(t.outShape, "int32"), s = t.strideDepth, r = t.strideHeight, o = t.strideWidth, i = t.dilationDepth, a = t.dilationHeight, l = t.dilationWidth, c = t.effectiveFilterDepth, u = t.effectiveFilterHeight, h = t.effectiveFilterWidth, d = t.padInfo.front, p = t.padInfo.top, f = t.padInfo.left;
  for (let m = 0; m < t.batchSize; ++m)
    for (let g = 0; g < t.inChannels; ++g)
      for (let y = 0; y < t.outDepth; ++y) {
        const b = y * s - d;
        let w = b;
        for (; w < 0; )
          w += i;
        const x = Math.min(t.inDepth, c + b);
        for (let S = 0; S < t.outHeight; ++S) {
          const v = S * r - p;
          let T = v;
          for (; T < 0; )
            T += a;
          const N = Math.min(t.inHeight, u + v);
          for (let $ = 0; $ < t.outWidth; ++$) {
            const R = $ * o - f;
            let F = R;
            for (; F < 0; )
              F += l;
            const z = Math.min(t.inWidth, h + R);
            let W = Number.NEGATIVE_INFINITY, M = -1;
            for (let X = w; X < x; X += i) {
              const _ = X - b;
              for (let B = T; B < N; B += a) {
                const Z = B - v;
                for (let H = F; H < z; H += l) {
                  const j = H - R, J = n.get(m, X, B, H, g);
                  J >= W && (W = J, M = _ * u * h + Z * u + j);
                }
              }
            }
            e.set(M, m, y, S, $, g);
          }
        }
      }
  return e;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function xP(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t;
  ct(r, "avgPool");
  const { filterSize: o, strides: i, pad: a, dimRoundingMode: l } = s, c = 1;
  C(Ae(i, c), () => `Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`);
  const u = Yn(r.shape, o, i, c, a, l);
  let h;
  if (u.filterWidth === 1 && u.filterHeight === 1 && Nt(u.inShape, u.outShape))
    h = ks({ inputs: { x: r }, backend: e });
  else {
    const d = e.data.get(r.dataId).values, p = lt(r.shape), f = ub(d, r.shape, r.dtype, p, u, "avg");
    h = e.makeTensorInfo(u.outShape, r.dtype, f.values);
  }
  return h;
}
const wP = {
  kernelName: al,
  backendName: "cpu",
  kernelFunc: xP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function IP(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { filterSize: o, strides: i, pad: a, dimRoundingMode: l, dataFormat: c } = s;
  ct(r, "avgPool3d");
  const u = Us(r.shape, o, i, 1, a, l, c), h = e.data.get(r.dataId).values, d = kv(h, r.shape, r.dtype, lt(r.shape), u, "avg");
  return e.makeTensorInfo(d.shape, "float32", d.values);
}
const SP = {
  kernelName: ll,
  backendName: "cpu",
  kernelFunc: IP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function vP(n) {
  const { inputs: t, backend: e, attrs: s } = n, { dy: r, input: o } = t, { filterSize: i, strides: a, pad: l, dimRoundingMode: c } = s;
  ct([r, o], "avgPool3DGrad");
  const u = Us(o.shape, i, a, 1, l, c), h = u.strideDepth, d = u.strideHeight, p = u.strideWidth, f = u.filterDepth, m = u.filterHeight, g = u.filterWidth, y = u.dilationDepth, b = u.dilationHeight, w = u.dilationWidth, x = u.effectiveFilterDepth, S = u.effectiveFilterHeight, v = u.effectiveFilterWidth, T = x - 1 - u.padInfo.front, N = v - 1 - u.padInfo.left, $ = S - 1 - u.padInfo.top, R = gt(o.shape, "float32"), F = 1 / (f * m * g), z = e.bufferSync(r);
  for (let W = 0; W < u.batchSize; ++W)
    for (let M = 0; M < u.inChannels; ++M)
      for (let X = 0; X < u.inDepth; ++X)
        for (let _ = 0; _ < u.inHeight; ++_)
          for (let B = 0; B < u.inWidth; ++B) {
            const Z = X - T, H = _ - $, j = B - N;
            let J = 0;
            for (let q = 0; q < x; q += y) {
              const Q = (Z + q) / h;
              if (!(Q < 0 || Q >= u.outDepth || Math.floor(Q) !== Q))
                for (let st = 0; st < S; st += b) {
                  const tt = (H + st) / d;
                  if (!(tt < 0 || tt >= u.outHeight || Math.floor(tt) !== tt))
                    for (let ot = 0; ot < v; ot += w) {
                      const dt = (j + ot) / p;
                      if (dt < 0 || dt >= u.outWidth || Math.floor(dt) !== dt)
                        continue;
                      const mt = z.get(W, Q, tt, dt, M);
                      J += mt;
                    }
                }
            }
            R.set(J * F, W, X, _, B, M);
          }
  return e.makeTensorInfo(R.shape, R.dtype, R.values);
}
const CP = {
  kernelName: ih,
  backendName: "cpu",
  kernelFunc: vP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function kP(n) {
  const { inputs: t, backend: e, attrs: s } = n, { dy: r, input: o } = t, i = o;
  ct([r, o], "avgPoolGrad");
  const { filterSize: a, strides: l, pad: c } = s, u = Yn(i.shape, a, l, 1, c), h = u.strideHeight, d = u.strideWidth, p = u.filterHeight, f = u.filterWidth, m = u.dilationHeight, g = u.dilationWidth, y = u.effectiveFilterHeight, b = u.effectiveFilterWidth, w = b - 1 - u.padInfo.left, x = y - 1 - u.padInfo.top, S = gt(i.shape, "float32"), v = 1 / (p * f), T = e.data.get(r.dataId).values, N = gt(r.shape, "float32", T);
  for (let $ = 0; $ < u.batchSize; ++$)
    for (let R = 0; R < u.inChannels; ++R)
      for (let F = 0; F < u.inHeight; ++F)
        for (let z = 0; z < u.inWidth; ++z) {
          const W = F - x, M = z - w;
          let X = 0;
          for (let _ = 0; _ < y; _ += m) {
            const B = (W + _) / h;
            if (!(B < 0 || B >= u.outHeight || Math.floor(B) !== B))
              for (let Z = 0; Z < b; Z += g) {
                const H = (M + Z) / d;
                if (H < 0 || H >= u.outWidth || Math.floor(H) !== H)
                  continue;
                const j = N.get($, B, H, R);
                X += j;
              }
          }
          S.set(X * v, $, F, z, R);
        }
  return e.makeTensorInfo(S.shape, S.dtype, S.values);
}
const TP = {
  kernelName: oh,
  backendName: "cpu",
  kernelFunc: kP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function NP(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r, scale: o, offset: i, mean: a, variance: l } = t;
  C(a.shape.length === l.shape.length, () => "Batch normalization gradient requires mean and variance to have equal ranks."), C(i == null || a.shape.length === i.shape.length, () => "Batch normalization gradient requires mean and offset to have equal ranks."), C(o == null || a.shape.length === o.shape.length, () => "Batch normalization gradient requires mean and scale to have equal ranks."), ct([r, a, l, o, i], "batchNorm");
  let { varianceEpsilon: c } = s;
  c == null && (c = 1e-3);
  const u = e.data.get(r.dataId).values, h = e.data.get(a.dataId).values, d = e.data.get(l.dataId).values, p = o ? e.data.get(o.dataId).values : new Float32Array([1]), f = i ? e.data.get(i.dataId).values : new Float32Array([0]), m = new Float32Array(u.length), g = f.length, y = p.length, b = d.length, w = h.length;
  let x = 0, S = 0, v = 0, T = 0;
  for (let N = 0; N < u.length; ++N)
    m[N] = f[x++] + (u[N] - h[S++]) * p[v++] / Math.sqrt(d[T++] + c), x >= g && (x = 0), S >= w && (S = 0), v >= y && (v = 0), T >= b && (T = 0);
  return e.makeTensorInfo(r.shape, r.dtype, m);
}
const $P = {
  kernelName: Il,
  backendName: "cpu",
  kernelFunc: NP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function RP(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { blockShape: o, crops: i } = s;
  ct([r], "batchToSpaceND");
  const a = o.reduce((y, b) => y * b), l = kc(r.shape, o, a), c = Tc(l.length, o.length), u = Nc(r.shape, o, a), h = ny(i, o.length), d = sy(u, i, o.length), p = Xt({ inputs: { x: r }, backend: e, attrs: { shape: l } }), f = rn({ inputs: { x: p }, backend: e, attrs: { perm: c } }), m = Xt({ inputs: { x: f }, backend: e, attrs: { shape: u } }), g = io({
    inputs: { x: m },
    backend: e,
    attrs: { begin: h, size: d }
  });
  return e.disposeIntermediateTensorInfo(p), e.disposeIntermediateTensorInfo(f), e.disposeIntermediateTensorInfo(m), g;
}
const EP = {
  kernelName: ul,
  backendName: "cpu",
  kernelFunc: RP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function LP(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r, weights: o } = t, { size: i } = s, a = e.data.get(r.dataId).values, l = e.data.get(o.dataId).values, c = uv(a, l, o.dtype, o.shape, i);
  return e.makeTensorInfo([i], o.dtype, c);
}
const DP = {
  kernelName: ah,
  backendName: "cpu",
  kernelFunc: LP
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function GP(n) {
  const { inputs: t, backend: e } = n, { s0: s, s1: r } = t, o = e.data.get(s.dataId).values, i = e.data.get(r.dataId).values, a = bt(Array.from(o), Array.from(i));
  return e.makeTensorInfo([a.length], "int32", Int32Array.from(a));
}
const FP = {
  kernelName: lh,
  backendName: "cpu",
  kernelFunc: GP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const OP = At(li, (n, t) => {
  const e = t;
  return n > e.clipValueMax ? e.clipValueMax : n < e.clipValueMin ? e.clipValueMin : n;
}), AP = {
  kernelName: li,
  backendName: "cpu",
  kernelFunc: OP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const zP = (n) => {
  const { x: t } = n.inputs, e = n.backend, s = new Float32Array(P(t.shape)), r = e.data.get(t.dataId), o = r.complexTensorInfos.real, i = r.complexTensorInfos.imag, a = e.data.get(o.dataId).values, l = e.data.get(i.dataId).values;
  for (let c = 0; c < a.length; c++) {
    const u = a[c], h = l[c];
    s[c] = Math.hypot(u, h);
  }
  return e.makeOutput(s, t.shape, "float32");
}, WP = {
  kernelName: hl,
  backendName: "cpu",
  kernelFunc: zP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ho(n) {
  const { inputs: t, backend: e } = n, { input: s } = t, r = e.data.get(s.dataId).complexTensorInfos.imag, o = e.data.get(r.dataId).values;
  return e.makeTensorInfo(r.shape, r.dtype, o);
}
const VP = {
  kernelName: Nh,
  backendName: "cpu",
  kernelFunc: Ho
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Uo(n) {
  const { inputs: t, backend: e, attrs: s } = n, { axis: r } = s, o = vt(r, t[0].shape)[0], i = t.map((m) => m.shape);
  Yg(i, o);
  let a = Is(t.map((m) => m.shape), o);
  if (P(a) === 0)
    return e.makeTensorInfo(a, t[0].dtype, []);
  const l = t.filter((m) => P(m.shape) > 0);
  if (l.length === 1)
    return ks({ inputs: { x: l[0] }, backend: e });
  if (l[0].dtype === "complex64") {
    const m = l.map((x) => oo({ inputs: { input: x }, backend: e })), g = l.map((x) => Ho({ inputs: { input: x }, backend: e })), y = Uo({ inputs: m, backend: e, attrs: { axis: o } }), b = Uo({ inputs: g, backend: e, attrs: { axis: o } }), w = dn({ inputs: { real: y, imag: b }, backend: e });
    return m.forEach((x) => e.disposeIntermediateTensorInfo(x)), g.forEach((x) => e.disposeIntermediateTensorInfo(x)), e.disposeIntermediateTensorInfo(y), e.disposeIntermediateTensorInfo(b), w;
  }
  const c = l.map((m) => {
    const y = [-1, P(m.shape.slice(o))];
    return Xt({ inputs: { x: m }, backend: e, attrs: { shape: y } });
  }), u = c.map((m) => ({ vals: e.data.get(m.dataId).values, shape: m.shape }));
  a = Is(c.map((m) => m.shape), 1);
  const h = c[0].shape[0] === 1, d = lV(u, a, t[0].dtype, h), p = Is(l.map((m) => m.shape), o), f = e.makeTensorInfo(p, t[0].dtype, d);
  return c.forEach((m) => e.disposeIntermediateTensorInfo(m)), f;
}
const MP = {
  kernelName: dl,
  backendName: "cpu",
  kernelFunc: Uo
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Tv(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r, filter: o } = t, { strides: i, pad: a, dataFormat: l, dilations: c, dimRoundingMode: u } = s;
  ct([r, o], "conv2d");
  const h = Ys(l), d = $e(r.shape, o.shape, i, c, a, u, !1, h), p = d.filterHeight, f = d.filterWidth, m = d.dilationHeight, g = d.dilationWidth, y = d.padInfo.left, b = d.padInfo.top, w = d.dataFormat === "channelsLast", x = new ue(d.outShape, r.dtype), S = lt(r.shape), v = lt(o.shape), T = S[0], N = w ? S[1] : S[2], $ = w ? S[2] : 1, R = w ? 1 : S[1], F = x.strides[0], z = w ? x.strides[1] : x.strides[2], W = w ? x.strides[2] : 1, M = w ? 1 : x.strides[1], X = e.data.get(r.dataId).values, _ = e.data.get(o.dataId).values, B = x.values;
  for (let Z = 0; Z < d.batchSize; ++Z) {
    const H = Z * T, j = Z * F;
    for (let J = 0; J < d.outHeight; ++J) {
      const q = j + J * z, Q = J * d.strideHeight - b;
      for (let st = 0; st < p; ++st) {
        const tt = Q + st * m;
        if (tt < 0 || tt >= d.inHeight)
          continue;
        const ot = st * v[0], dt = H + tt * N;
        for (let mt = 0; mt < d.outWidth; ++mt) {
          const yt = q + mt * W, St = mt * d.strideWidth - y;
          for (let Tt = 0; Tt < f; ++Tt) {
            const Ft = St + Tt * g;
            if (Ft < 0 || Ft >= d.inWidth)
              continue;
            const Mt = ot + Tt * v[1], Kt = dt + Ft * $;
            let Jt = Mt;
            for (let zt = 0; zt < d.inChannels; ++zt) {
              const ie = X[Kt + zt * R];
              for (let le = 0; le < d.outChannels; ++le)
                B[yt + le * M] += ie * _[Jt + le];
              Jt += d.outChannels;
            }
          }
        }
      }
    }
  }
  return e.makeTensorInfo(x.shape, x.dtype, B);
}
const PP = {
  kernelName: pl,
  backendName: "cpu",
  kernelFunc: Tv
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function XP(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r, dy: o } = t, { strides: i, pad: a, dataFormat: l, dimRoundingMode: c, filterShape: u } = s;
  ct([r, o], "conv2dBackpropFilter");
  const h = Ys(l), d = $e(r.shape, u, i, 1, a, c, !1, h), { strideHeight: p, strideWidth: f, filterHeight: m, filterWidth: g } = d, y = d.dataFormat === "channelsLast", b = new ue(d.filterShape, "float32"), w = d.padInfo.left, x = d.padInfo.top, S = e.data.get(r.dataId).values, v = e.data.get(o.dataId).values, T = new ue(r.shape, r.dtype, S), N = new ue(o.shape, o.dtype, v);
  for (let $ = 0; $ < m; ++$) {
    const R = Math.max(0, Math.ceil((x - $) / p)), F = Math.min(d.outHeight, (d.inHeight + x - $) / p);
    for (let z = 0; z < g; ++z) {
      const W = Math.max(0, Math.ceil((w - z) / f)), M = Math.min(d.outWidth, (d.inWidth + w - z) / f);
      for (let X = 0; X < d.inChannels; ++X)
        for (let _ = 0; _ < d.outChannels; ++_) {
          let B = 0;
          for (let Z = 0; Z < d.batchSize; ++Z)
            for (let H = R; H < F; ++H) {
              const j = $ + H * p - x;
              for (let J = W; J < M; ++J) {
                const q = z + J * f - w;
                y ? B += T.get(Z, j, q, X) * N.get(Z, H, J, _) : B += T.get(Z, X, j, q) * N.get(Z, _, H, J);
              }
            }
          b.set(B, $, z, X, _);
        }
    }
  }
  return e.makeTensorInfo(b.shape, b.dtype, b.values);
}
const _P = {
  kernelName: uh,
  backendName: "cpu",
  kernelFunc: XP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function KP(n) {
  const { inputs: t, backend: e, attrs: s } = n, { dy: r, filter: o } = t, { inputShape: i, strides: a, pad: l, dataFormat: c, dimRoundingMode: u } = s;
  ct([r, o], "conv2dBackpropInput");
  const h = lt(o.shape), d = lt(r.shape);
  let p = Ys(c);
  const f = $e(i, o.shape, a, 1, l, u, !1, p), m = new ue(f.inShape, "float32"), g = m.values, y = e.data.get(r.dataId).values, b = e.data.get(o.dataId).values, [w, x, S] = h, { batchSize: v, filterHeight: T, filterWidth: N, inChannels: $, inHeight: R, inWidth: F, outChannels: z, outHeight: W, outWidth: M, strideHeight: X, strideWidth: _ } = f;
  p = f.dataFormat;
  const B = T - 1 - f.padInfo.top, Z = N - 1 - f.padInfo.left, H = p === "channelsLast", j = m.strides[0], J = H ? m.strides[1] : m.strides[2], q = H ? m.strides[2] : 1, Q = H ? 1 : m.strides[1], st = d[0], tt = H ? d[1] : d[2], ot = H ? d[2] : 1, dt = H ? 1 : d[1];
  for (let mt = 0; mt < v; ++mt)
    for (let yt = 0; yt < $; ++yt)
      for (let St = 0; St < R; ++St) {
        const Tt = St - B, Ft = Math.max(0, Math.ceil(Tt / X)), Mt = Math.min(W, (T + Tt) / X);
        for (let Kt = 0; Kt < F; ++Kt) {
          const Jt = Kt - Z, zt = Math.max(0, Math.ceil(Jt / _)), ie = Math.min(M, (N + Jt) / _);
          let le = 0;
          for (let Ee = Ft; Ee < Mt; ++Ee) {
            const tr = Ee * X - Tt;
            for (let vn = zt; vn < ie; ++vn) {
              const Lr = vn * _ - Jt, Qn = st * mt + tt * Ee + ot * vn, Es = w * (T - 1 - tr) + x * (N - 1 - Lr) + S * yt;
              for (let er = 0; er < z; ++er) {
                const nr = y[Qn + dt * er], sr = b[Es + er];
                le += nr * sr;
              }
            }
          }
          const Rs = j * mt + J * St + q * Kt + Q * yt;
          g[Rs] = le;
        }
      }
  return e.makeTensorInfo(m.shape, m.dtype, m.values);
}
const ZP = {
  kernelName: fl,
  backendName: "cpu",
  kernelFunc: KP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function BP(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r, filter: o } = t, { strides: i, pad: a, dilations: l } = s;
  ct([r, o], "conv3d");
  const c = Cr(r.shape, o.shape, i, l, a), { filterDepth: u, filterHeight: h, filterWidth: d, dilationDepth: p, dilationHeight: f, dilationWidth: m, padInfo: g } = c, y = g.front, b = g.left, w = g.top, x = new ue(c.outShape, r.dtype), S = e.data.get(r.dataId).values, v = e.data.get(o.dataId).values, T = x.values, N = lt(r.shape), $ = lt(o.shape);
  for (let R = 0; R < c.batchSize; ++R) {
    const F = R * N[0], z = R * x.strides[0];
    for (let W = 0; W < c.outDepth; ++W) {
      const M = z + W * x.strides[1], X = W * c.strideDepth - y;
      for (let _ = 0; _ < u; ++_) {
        const B = X + _ * p;
        if (B < 0 || B >= c.inDepth)
          continue;
        const Z = _ * $[0], H = F + B * N[1];
        for (let j = 0; j < c.outHeight; ++j) {
          const J = M + j * x.strides[2], q = j * c.strideHeight - w;
          for (let Q = 0; Q < h; ++Q) {
            const st = q + Q * f;
            if (st < 0 || st >= c.inHeight)
              continue;
            const tt = Z + Q * $[1], ot = H + st * N[2];
            for (let dt = 0; dt < c.outWidth; ++dt) {
              const mt = J + dt * c.outChannels, yt = dt * c.strideWidth - b;
              for (let St = 0; St < d; ++St) {
                const Tt = yt + St * m;
                if (Tt < 0 || Tt >= c.inWidth)
                  continue;
                const Ft = tt + St * $[2], Mt = ot + Tt * c.inChannels;
                let Kt = Ft;
                for (let Jt = 0; Jt < c.inChannels; ++Jt) {
                  const zt = S[Mt + Jt];
                  for (let ie = 0; ie < c.outChannels; ++ie)
                    T[mt + ie] += zt * v[Kt + ie];
                  Kt += c.outChannels;
                }
              }
            }
          }
        }
      }
    }
  }
  return e.makeTensorInfo(x.shape, x.dtype, x.values);
}
const HP = {
  kernelName: ml,
  backendName: "cpu",
  kernelFunc: BP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function UP(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r, dy: o } = t, { strides: i, pad: a, filterShape: l } = s;
  ct([r, o], "conv3dBackpropFilterV2");
  const c = lt(r.shape), u = lt(o.shape), h = Cr(r.shape, l, i, 1, a), d = h.strideDepth, p = h.strideHeight, f = h.strideWidth, m = h.filterDepth, g = h.filterHeight, y = h.filterWidth, b = new ue(h.filterShape, "float32"), w = b.values, [x, S, v, T] = b.strides, N = e.data.get(o.dataId).values, [$, R, F, z] = u, W = e.data.get(r.dataId).values, [M, X, _, B] = c, Z = h.padInfo.front, H = h.padInfo.left, j = h.padInfo.top;
  for (let J = 0; J < m; ++J) {
    const q = Math.max(0, Math.ceil((Z - J) / d)), Q = Math.min(h.outDepth, (h.inDepth + Z - J) / d), st = J * x;
    for (let tt = 0; tt < g; ++tt) {
      const ot = Math.max(0, Math.ceil((j - tt) / p)), dt = Math.min(h.outHeight, (h.inHeight + j - tt) / p), mt = tt * S + st;
      for (let yt = 0; yt < y; ++yt) {
        const St = Math.max(0, Math.ceil((H - yt) / f)), Tt = Math.min(h.outWidth, (h.inWidth + H - yt) / f), Ft = yt * v + mt;
        for (let Mt = 0; Mt < h.inChannels; ++Mt) {
          const Kt = Mt * T + Ft;
          for (let Jt = 0; Jt < h.outChannels; ++Jt) {
            let zt = 0;
            for (let ie = 0; ie < h.batchSize; ++ie) {
              const le = ie * M, Rs = ie * $;
              for (let Ee = q; Ee < Q; ++Ee) {
                const vn = (J + Ee * d - Z) * X + le, Lr = Ee * R + Rs;
                for (let Qn = ot; Qn < dt; ++Qn) {
                  const er = (tt + Qn * p - j) * _ + vn, nr = Qn * F + Lr;
                  for (let sr = St; sr < Tt; ++sr) {
                    const Lp = (yt + sr * f - H) * B + er, Dp = sr * z + nr;
                    zt += W[Lp + Mt] * N[Dp + Jt];
                  }
                }
              }
            }
            w[Kt + Jt] = zt;
          }
        }
      }
    }
  }
  return e.makeTensorInfo(b.shape, b.dtype, b.values);
}
const YP = {
  kernelName: hh,
  backendName: "cpu",
  kernelFunc: UP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function jP(n) {
  const { inputs: t, backend: e, attrs: s } = n, { dy: r, filter: o } = t, { pad: i, strides: a, inputShape: l } = s;
  ct([r], "conv3dBackpropInputV2");
  const c = lt(r.shape), u = lt(o.shape), h = Cr(l, o.shape, a, 1, i), d = new ue(h.inShape, "float32"), p = d.values, [f, m, g, y] = d.strides, b = e.data.get(r.dataId).values, [w, x, S, v] = c, T = e.data.get(o.dataId).values, [N, $, R, F] = u, { batchSize: z, filterDepth: W, filterHeight: M, filterWidth: X, inChannels: _, inDepth: B, inHeight: Z, inWidth: H, outChannels: j, outDepth: J, outHeight: q, outWidth: Q, strideDepth: st, strideHeight: tt, strideWidth: ot } = h, dt = W - 1 - h.padInfo.front, mt = M - 1 - h.padInfo.top, yt = X - 1 - h.padInfo.left;
  for (let St = 0; St < z; ++St)
    for (let Tt = 0; Tt < _; ++Tt)
      for (let Ft = 0; Ft < B; ++Ft) {
        const Mt = Ft - dt, Kt = Math.max(0, Math.ceil(Mt / st)), Jt = Math.min(J, (W + Mt) / st);
        for (let zt = 0; zt < Z; ++zt) {
          const ie = zt - mt, le = Math.max(0, Math.ceil(ie / tt)), Rs = Math.min(q, (M + ie) / tt);
          for (let Ee = 0; Ee < H; ++Ee) {
            const tr = Ee - yt, vn = Math.max(0, Math.ceil(tr / ot)), Lr = Math.min(Q, (X + tr) / ot);
            let Qn = 0;
            for (let Es = Kt; Es < Jt; ++Es) {
              const er = Es * st - Mt;
              for (let nr = le; nr < Rs; ++nr) {
                const sr = nr * tt - ie;
                for (let wa = vn; wa < Lr; ++wa) {
                  const Lp = wa * ot - tr, Dp = w * St + x * Es + S * nr + v * wa, VC = N * (W - 1 - er) + $ * (M - 1 - sr) + R * (X - 1 - Lp) + F * Tt;
                  for (let Bc = 0; Bc < j; ++Bc) {
                    const MC = b[Dp + Bc], PC = T[VC + Bc];
                    Qn += MC * PC;
                  }
                }
              }
            }
            p[f * St + m * Ft + g * zt + y * Ee + Tt] = Qn;
          }
        }
      }
  return e.makeTensorInfo(d.shape, d.dtype, d.values);
}
const JP = {
  kernelName: dh,
  backendName: "cpu",
  kernelFunc: jP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const QP = At(ci, (n) => Math.cos(n)), qP = {
  kernelName: ci,
  backendName: "cpu",
  kernelFunc: QP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const tX = At(ui, (n) => Math.cosh(n)), eX = {
  kernelName: ui,
  backendName: "cpu",
  kernelFunc: tX
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function nX(n) {
  const { inputs: t, backend: e, attrs: s } = n, { image: r, boxes: o, boxInd: i } = t, { cropSize: a, method: l, extrapolationValue: c } = s, [u, h, d, p] = r.shape, f = o.shape[0], [m, g] = a, y = gt([f, m, g, p], "float32"), b = e.data.get(o.dataId).values, w = e.data.get(i.dataId).values, x = e.data.get(r.dataId).values, S = lt(r.shape), v = lt(y.shape);
  for (let T = 0; T < f; T++) {
    const N = T * 4, $ = b[N], R = b[N + 1], F = b[N + 2], z = b[N + 3], W = w[T];
    if (W >= u)
      continue;
    const M = m > 1 ? (F - $) * (h - 1) / (m - 1) : 0, X = g > 1 ? (z - R) * (d - 1) / (g - 1) : 0;
    for (let _ = 0; _ < m; _++) {
      const B = m > 1 ? $ * (h - 1) + _ * M : 0.5 * ($ + F) * (h - 1);
      if (B < 0 || B > h - 1) {
        for (let Z = 0; Z < g; Z++)
          for (let H = 0; H < p; H++) {
            const j = H + Z * v[2] + _ * v[1] + T * v[0];
            y.values[j] = c;
          }
        continue;
      }
      if (l === "bilinear") {
        const Z = Math.floor(B), H = Math.ceil(B), j = B - Z;
        for (let J = 0; J < g; J++) {
          const q = g > 1 ? R * (d - 1) + J * X : 0.5 * (R + z) * (d - 1);
          if (q < 0 || q > d - 1) {
            for (let ot = 0; ot < p; ot++) {
              const dt = ot + J * v[2] + _ * v[1] + T * v[0];
              y.values[dt] = c;
            }
            continue;
          }
          const Q = Math.floor(q), st = Math.ceil(q), tt = q - Q;
          for (let ot = 0; ot < p; ot++) {
            let dt = ot + Q * S[2] + Z * S[1] + W * S[0];
            const mt = x[dt];
            dt = ot + st * S[2] + Z * S[1] + W * S[0];
            const yt = x[dt];
            dt = ot + Q * S[2] + H * S[1] + W * S[0];
            const St = x[dt];
            dt = ot + st * S[2] + H * S[1] + W * S[0];
            const Tt = x[dt], Ft = mt + (yt - mt) * tt, Mt = St + (Tt - St) * tt;
            dt = ot + J * v[2] + _ * v[1] + T * v[0], y.values[dt] = Ft + (Mt - Ft) * j;
          }
        }
      } else
        for (let Z = 0; Z < g; ++Z) {
          const H = g > 1 ? R * (d - 1) + Z * X : 0.5 * (R + z) * (d - 1);
          if (H < 0 || H > d - 1) {
            for (let q = 0; q < p; q++) {
              const Q = q + Z * v[2] + _ * v[1] + T * v[0];
              y.values[Q] = c;
            }
            continue;
          }
          const j = Math.round(H), J = Math.round(B);
          for (let q = 0; q < p; q++) {
            const Q = q + j * S[2] + J * S[1] + W * S[0], st = q + Z * v[2] + _ * v[1] + T * v[0];
            y.values[st] = x[Q];
          }
        }
    }
  }
  return e.makeTensorInfo(y.shape, y.dtype, y.values);
}
const sX = {
  kernelName: fh,
  backendName: "cpu",
  kernelFunc: nX
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function rX(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { axis: o, exclusive: i, reverse: a } = s;
  ct(r, "cumprod");
  const l = oe([o], r.shape.length);
  let c = r;
  l != null && (c = rn({ inputs: { x: r }, backend: e, attrs: { perm: l } }));
  const u = pe(1, r.shape.length)[0];
  if (u !== c.shape.length - 1)
    throw new Error(`backend.cumprod in CPU expects an inner-most axis=${c.shape.length - 1} but got axis=${u}`);
  const h = He(c.dtype, "int32"), d = nh(P(c.shape), h), p = e.data.get(c.dataId).values, f = c.shape[c.shape.length - 1], m = a ? (y, b) => y + f - b - 1 : (y, b) => y + b;
  for (let y = 0; y < p.length; y += f)
    for (let b = 0; b < f; b++) {
      const w = m(y, b);
      if (b === 0)
        d[w] = i ? 1 : p[w];
      else {
        const x = m(y, b - 1);
        d[w] = i ? p[x] * d[x] : p[w] * d[x];
      }
    }
  const g = e.makeTensorInfo(c.shape, h, d);
  if (l != null) {
    const y = kr(l), b = rn({ inputs: { x: g }, backend: e, attrs: { perm: y } });
    return e.disposeIntermediateTensorInfo(g), e.disposeIntermediateTensorInfo(c), b;
  }
  return g;
}
const oX = {
  kernelName: ph,
  backendName: "cpu",
  kernelFunc: rX
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function iX(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { axis: o, exclusive: i, reverse: a } = s;
  ct(r, "cumsum");
  const l = oe([o], r.shape.length);
  let c = r;
  l != null && (c = rn({ inputs: { x: r }, backend: e, attrs: { perm: l } }));
  const u = pe(1, r.shape.length)[0];
  if (u !== c.shape.length - 1)
    throw new Error(`backend.cumsum in CPU expects an inner-most axis=${c.shape.length - 1} but got axis=${u}`);
  const h = He(c.dtype, "int32"), d = ae(P(c.shape), h), p = e.data.get(c.dataId).values, f = c.shape[c.shape.length - 1], m = a ? (y, b) => y + f - b - 1 : (y, b) => y + b;
  for (let y = 0; y < p.length; y += f)
    for (let b = 0; b < f; b++) {
      const w = m(y, b);
      if (b === 0)
        d[w] = i ? 0 : p[w];
      else {
        const x = m(y, b - 1);
        d[w] = i ? p[x] + d[x] : p[w] + d[x];
      }
    }
  const g = e.makeTensorInfo(c.shape, h, d);
  if (l != null) {
    const y = kr(l), b = rn({ inputs: { x: g }, backend: e, attrs: { perm: y } });
    return e.disposeIntermediateTensorInfo(g), e.disposeIntermediateTensorInfo(c), b;
  }
  return g;
}
const aX = {
  kernelName: gl,
  backendName: "cpu",
  kernelFunc: iX
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function lX(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r, weights: o } = t, { size: i, binaryOutput: a } = s;
  if (r.shape.length === 1) {
    const l = e.data.get(r.dataId).values, c = e.data.get(o.dataId).values, u = uv(l, c, o.dtype, o.shape, i);
    return e.makeTensorInfo([i], o.dtype, u);
  } else if (r.shape.length === 2) {
    const l = e.bufferSync(r), c = e.bufferSync(o), u = rV(l, c, i, a);
    return e.makeTensorInfo(u.shape, o.dtype, u.values);
  }
  throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`);
}
const cX = {
  kernelName: mh,
  backendName: "cpu",
  kernelFunc: lX
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function uX(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { blockSize: o, dataFormat: i } = s;
  C(i === "NHWC", () => `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${i}`);
  const a = r.shape[0], l = r.shape[1], c = r.shape[2], u = r.shape[3], h = l * o, d = c * o, p = u / (o * o), f = e.data.get(r.dataId).values, m = new Float32Array(a * h * d * p);
  let g = 0;
  for (let y = 0; y < a; ++y)
    for (let b = 0; b < h; ++b) {
      const w = Math.floor(b / o), x = b % o;
      for (let S = 0; S < d; ++S) {
        const v = Math.floor(S / o), T = S % o, N = (x * o + T) * p;
        for (let $ = 0; $ < p; ++$) {
          const F = $ + N + u * (v + c * (w + l * y));
          m[g++] = f[F];
        }
      }
    }
  return e.makeTensorInfo([a, h, d, p], r.dtype, m);
}
const hX = {
  kernelName: gh,
  backendName: "cpu",
  kernelFunc: uX
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Nv(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r, filter: o } = t, { strides: i, pad: a, dilations: l, dimRoundingMode: c } = s;
  ct([r, o], "depthwiseConv2DNative");
  const u = lt(r.shape), h = lt(o.shape);
  let d = l;
  d == null && (d = [1, 1]), C(Ae(i, d), () => `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${d}'`);
  const p = $e(r.shape, o.shape, i, d, a, c, !0), { filterHeight: f, filterWidth: m, dilationHeight: g, dilationWidth: y, padInfo: b } = p, w = b.left, x = b.top, S = p.outChannels / p.inChannels, v = new ue(p.outShape, r.dtype), T = e.data.get(r.dataId).values, N = e.data.get(o.dataId).values, $ = v.values;
  for (let R = 0; R < p.batchSize; ++R) {
    const F = R * u[0], z = R * v.strides[0];
    for (let W = 0; W < p.outHeight; ++W) {
      const M = z + W * v.strides[1], X = W * p.strideHeight - x;
      for (let _ = 0; _ < f; ++_) {
        const B = X + _ * g;
        if (B < 0 || B >= p.inHeight)
          continue;
        const Z = _ * h[0], H = F + B * u[1];
        for (let j = 0; j < p.outWidth; ++j) {
          const J = M + j * v.strides[2], q = j * p.strideWidth - w;
          for (let Q = 0; Q < m; ++Q) {
            const st = q + Q * y;
            if (st < 0 || st >= p.inWidth)
              continue;
            const tt = Z + Q * h[1], ot = H + st * p.inChannels;
            let dt = J, mt = tt;
            for (let yt = 0; yt < p.inChannels; ++yt) {
              const St = T[ot + yt];
              for (let Tt = 0; Tt < S; ++Tt)
                $[dt + Tt] += St * N[mt + Tt];
              dt += S, mt += S;
            }
          }
        }
      }
    }
  }
  return e.makeTensorInfo(v.shape, v.dtype, v.values);
}
const dX = {
  kernelName: yl,
  backendName: "cpu",
  kernelFunc: Nv
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function pX(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r, dy: o } = t, { strides: i, dilations: a, pad: l, dimRoundingMode: c, filterShape: u } = s;
  ct([r, o], "depthwiseConv2dNativeBackpropFilter");
  const h = $e(r.shape, u, i, a, l, c, !0), { strideHeight: d, strideWidth: p, filterHeight: f, filterWidth: m } = h, g = new ue(h.filterShape, "float32"), y = h.padInfo.left, b = h.padInfo.top, w = h.outChannels / h.inChannels, x = e.data.get(r.dataId).values, S = new ue(r.shape, r.dtype, x), v = e.data.get(o.dataId).values, T = new ue(o.shape, o.dtype, v);
  for (let N = 0; N < f; ++N) {
    const $ = Math.max(0, Math.ceil((b - N) / d)), R = Math.min(h.outHeight, (h.inHeight + b - N) / d);
    for (let F = 0; F < m; ++F) {
      const z = Math.max(0, Math.ceil((y - F) / p)), W = Math.min(h.outWidth, (h.inWidth + y - F) / p);
      for (let M = 0; M < h.outChannels; ++M) {
        const X = Math.trunc(M / w), _ = M % w;
        let B = 0;
        for (let Z = 0; Z < h.batchSize; ++Z)
          for (let H = $; H < R; ++H) {
            const j = N + H * d - b;
            for (let J = z; J < W; ++J) {
              const q = F + J * p - y;
              B += S.get(Z, j, q, X) * T.get(Z, H, J, M);
            }
          }
        g.set(B, N, F, X, _);
      }
    }
  }
  return e.makeTensorInfo(g.shape, g.dtype, g.values);
}
const fX = {
  kernelName: yh,
  backendName: "cpu",
  kernelFunc: pX
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function mX(n) {
  const { inputs: t, backend: e, attrs: s } = n, { dy: r, filter: o } = t, { strides: i, dilations: a, pad: l, dimRoundingMode: c, inputShape: u } = s;
  ct([r, o], "depthwiseConv2DNativeBackpropInput");
  const h = lt(r.shape), d = lt(o.shape), p = $e(u, o.shape, i, a, l, c, !0), f = new ue(p.inShape, "float32"), m = f.values, [g, y, b] = f.strides, w = e.data.get(r.dataId).values, [x, S, v] = h, T = e.data.get(o.dataId).values, [N, $, R] = d, { batchSize: F, filterHeight: z, filterWidth: W, inChannels: M, inHeight: X, inWidth: _, outChannels: B, outHeight: Z, outWidth: H, strideHeight: j, strideWidth: J } = p, q = z - 1 - p.padInfo.top, Q = W - 1 - p.padInfo.left, st = B / M;
  for (let tt = 0; tt < F; ++tt)
    for (let ot = 0; ot < M; ++ot)
      for (let dt = 0; dt < X; ++dt) {
        const mt = dt - q, yt = Math.max(0, Math.ceil(mt / j)), St = Math.min(Z, (z + mt) / j);
        for (let Tt = 0; Tt < _; ++Tt) {
          const Ft = Tt - Q, Mt = Math.max(0, Math.ceil(Ft / J)), Kt = Math.min(H, (W + Ft) / J);
          let Jt = 0;
          for (let zt = yt; zt < St; ++zt) {
            const ie = zt * j - mt;
            for (let le = Mt; le < Kt; ++le) {
              const Rs = le * J - Ft, Ee = x * tt + S * zt + v * le, tr = N * (z - 1 - ie) + $ * (W - 1 - Rs) + R * ot;
              for (let vn = 0; vn < st; ++vn) {
                const Lr = ot * st + vn, Qn = w[Ee + Lr], Es = T[tr + vn];
                Jt += Qn * Es;
              }
            }
          }
          m[g * tt + y * dt + b * Tt + ot] = Jt;
        }
      }
  return e.makeTensorInfo(f.shape, f.dtype, f.values);
}
const gX = {
  kernelName: bh,
  backendName: "cpu",
  kernelFunc: mX
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function yX(n) {
  const { inputs: t, backend: e } = n, { x: s } = t, r = P(s.shape), o = e.data.get(s.dataId).values, i = gt([r, r], s.dtype), a = i.values;
  for (let c = 0; c < o.length; c++)
    a[c * r + c] = o[c];
  const l = [...s.shape, ...s.shape];
  return e.makeTensorInfo(l, i.dtype, i.values);
}
const bX = {
  kernelName: xh,
  backendName: "cpu",
  kernelFunc: yX
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const xX = {
  kernelName: bl,
  backendName: "cpu",
  kernelFunc: ({ inputs: n, backend: t, attrs: e }) => {
    const { x: s, filter: r } = n, { strides: o, pad: i, dilations: a } = e, l = t, c = l.data.get(s.dataId).values, u = s.shape.length, h = l.data.get(r.dataId).values, d = r.shape.length, { batchSize: p, inHeight: f, inWidth: m, inChannels: g, outHeight: y, outWidth: b, padInfo: w, strideHeight: x, strideWidth: S, filterHeight: v, filterWidth: T, dilationHeight: N, dilationWidth: $, outShape: R } = ac(s.shape, r.shape, o, i, "NHWC", a), F = P(R), z = R.length, W = Gt(s.dtype, F);
    for (let X = 0; X < p; ++X)
      for (let _ = 0; _ < y; ++_) {
        const B = _ * x - w.top;
        for (let Z = 0; Z < b; ++Z) {
          const H = Z * S - w.left;
          for (let j = 0; j < g; ++j) {
            let J = Number.MIN_SAFE_INTEGER;
            for (let Q = 0; Q < v; ++Q) {
              const st = B + Q * N;
              if (st >= 0 && st < f)
                for (let tt = 0; tt < T; ++tt) {
                  const ot = H + tt * $;
                  if (ot >= 0 && ot < m) {
                    const dt = mn([X, st, ot, j], u, lt(s.shape)), mt = mn([Q, tt, j], d, lt(r.shape)), yt = c[dt] + h[mt];
                    yt > J && (J = yt);
                  }
                }
            }
            const q = mn([X, _, Z, j], z, lt(R));
            W[q] = J;
          }
        }
      }
    return { dataId: l.write(Hs(W, s.dtype), R, s.dtype), shape: R, dtype: s.dtype };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const wX = {
  kernelName: vu,
  backendName: "cpu",
  kernelFunc: ({ inputs: n, backend: t, attrs: e }) => {
    const { x: s, filter: r, dy: o } = n, { strides: i, pad: a, dilations: l } = e, c = t, u = En(s.shape, c.data.get(s.dataId).values), h = En(r.shape, c.data.get(r.dataId).values), { batchSize: d, inHeight: p, inWidth: f, inChannels: m, outHeight: g, outWidth: y, padInfo: b, strideHeight: w, strideWidth: x, filterHeight: S, filterWidth: v, dilationHeight: T, dilationWidth: N, outShape: $ } = ac(s.shape, r.shape, i, a, "NHWC", l);
    C(o.rank === $.length, () => `Error in ${vu}, dy must have the same rank as output ${$.length}, but got ${o.rank}`);
    const R = En($, c.data.get(o.dataId).values), F = xm(r.shape, r.dtype);
    for (let W = 0; W < d; ++W)
      for (let M = 0; M < g; ++M) {
        const X = M * w - b.top;
        for (let _ = 0; _ < y; ++_) {
          const B = _ * x - b.left;
          for (let Z = 0; Z < m; ++Z) {
            let H = Number.MIN_SAFE_INTEGER, j = 0, J = 0;
            for (let q = 0; q < S; ++q) {
              const Q = X + q * T;
              if (Q >= 0 && Q < p)
                for (let st = 0; st < v; ++st) {
                  const tt = B + st * N;
                  if (tt >= 0 && tt < f) {
                    const ot = u[W][Q][tt][Z] + h[q][st][Z];
                    ot > H && (H = ot, j = q, J = st);
                  }
                }
            }
            F[j][J][Z] += R[W][M][_][Z];
          }
        }
      }
    return { dataId: c.write(Hs(F, s.dtype), r.shape, r.dtype), shape: r.shape, dtype: r.dtype };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const IX = {
  kernelName: Su,
  backendName: "cpu",
  kernelFunc: ({ inputs: n, backend: t, attrs: e }) => {
    const { x: s, filter: r, dy: o } = n, { strides: i, pad: a, dilations: l } = e, c = t, u = En(s.shape, c.data.get(s.dataId).values), h = En(r.shape, c.data.get(r.dataId).values), { batchSize: d, inHeight: p, inWidth: f, inChannels: m, outHeight: g, outWidth: y, padInfo: b, strideHeight: w, strideWidth: x, filterHeight: S, filterWidth: v, dilationHeight: T, dilationWidth: N, outShape: $ } = ac(s.shape, r.shape, i, a, "NHWC", l);
    C(o.rank === $.length, () => `Error in ${Su}, dy must have the same rank as output ${$.length}, but got ${o.rank}`);
    const R = En($, c.data.get(o.dataId).values), F = xm(s.shape, s.dtype);
    for (let W = 0; W < d; ++W)
      for (let M = 0; M < g; ++M) {
        const X = M * w - b.top;
        for (let _ = 0; _ < y; ++_) {
          const B = _ * x - b.left;
          for (let Z = 0; Z < m; ++Z) {
            let H = Number.MIN_SAFE_INTEGER, j = X < 0 ? 0 : X, J = B < 0 ? 0 : B;
            for (let q = 0; q < S; ++q) {
              const Q = X + q * T;
              if (Q >= 0 && Q < p)
                for (let st = 0; st < v; ++st) {
                  const tt = B + st * N;
                  if (tt >= 0 && tt < f) {
                    const ot = u[W][Q][tt][Z] + h[q][st][Z];
                    ot > H && (H = ot, j = Q, J = tt);
                  }
                }
            }
            F[W][j][J][Z] += R[W][M][_][Z];
          }
        }
      }
    return { dataId: c.write(Hs(F, s.dtype), s.shape, s.dtype), shape: s.shape, dtype: s.dtype };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Wc(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { axis: o, keepDims: i } = s;
  ct(r, "sum");
  let a;
  r.dtype === "bool" ? a = Sr({ inputs: { x: r }, backend: e, attrs: { dtype: "int32" } }) : a = ks({ inputs: { x: r }, backend: e });
  const l = a.shape.length, c = vt(o, a.shape), u = oe(c, l);
  let h = c, d = a;
  u != null && (d = rn({ inputs: { x: a }, backend: e, attrs: { perm: u } }), h = pe(h.length, l)), ze("sum", h, d.shape.length);
  const [p, f] = ve(d.shape, h), m = He(d.dtype, "int32");
  let g = _u(e, p, m);
  const y = P(f), b = e.data.get(g.dataId).values, w = e.data.get(d.dataId).values;
  for (let x = 0; x < b.length; ++x) {
    const S = x * y;
    let v = 0;
    for (let T = 0; T < y; ++T)
      v += w[S + T];
    b[x] = v;
  }
  if (i) {
    const x = de(g.shape, c), S = g;
    g = Xt({ inputs: { x: g }, backend: e, attrs: { shape: x } }), e.disposeIntermediateTensorInfo(S);
  }
  return e.disposeIntermediateTensorInfo(a), u != null && e.disposeIntermediateTensorInfo(d), g;
}
const SX = {
  kernelName: Jl,
  backendName: "cpu",
  kernelFunc: Wc
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function vX(n) {
  const { inputs: t, backend: e, attrs: s } = n, { equation: r } = s, o = t, { allDims: i, summedDims: a, idDims: l } = hy(r, o.length);
  py(i.length, l, o);
  const { path: c, steps: u } = fy(a, l), h = u.length;
  let d = null, p = i.length;
  const f = [];
  for (let m = 0; m < h; ++m) {
    for (const g of u[m]) {
      const { permutationIndices: y, expandDims: b } = dy(p, l[g]);
      let w;
      my(y) ? w = o[g] : (w = rn({ inputs: { x: o[g] }, backend: e, attrs: { perm: y } }), f.push(w));
      const x = w.shape.slice();
      for (let S = 0; S < b.length; ++S)
        x.splice(b[S], 0, 1);
      Nt(w.shape, x) || (w = Xt({ inputs: { x: w }, backend: e, attrs: { shape: x } }), f.push(w)), d === null ? d = w : (d = Cp({ inputs: { a: w, b: d }, backend: e }), f.push(d));
    }
    m < h - 1 && (c[m] >= 0 && (d = Wc({
      inputs: { x: d },
      backend: e,
      attrs: {
        axis: c[m] - (i.length - p),
        keepDims: !1
      }
    }), f.push(d)), p--);
  }
  for (const m of f)
    m !== d && e.disposeIntermediateTensorInfo(m);
  return d;
}
const CX = {
  kernelName: wh,
  backendName: "cpu",
  kernelFunc: vX
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function kX(n) {
  const { inputs: t, backend: e } = n, { dy: s, y: r } = t;
  ct([s, r], "eluGrad");
  const o = new Float32Array(P(r.shape)), i = e.data.get(r.dataId).values, a = e.data.get(s.dataId).values;
  for (let l = 0; l < i.length; ++l) {
    const c = i[l];
    c >= 1 ? o[l] = a[l] : o[l] = a[l] * (c + 1);
  }
  return e.makeTensorInfo(r.shape, "float32", o);
}
const TX = {
  kernelName: Ih,
  backendName: "cpu",
  kernelFunc: kX
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const NX = ry, $X = oy, RX = iy, EX = ay, LX = ly, DX = cy, GX = At(pi, (n) => {
  const t = Math.sign(n), e = Math.abs(n), s = 1 / (1 + NX * e);
  return t * (1 - ((((DX * s + LX) * s + EX) * s + RX) * s + $X) * s * Math.exp(-e * e));
}), FX = {
  kernelName: pi,
  backendName: "cpu",
  kernelFunc: GX
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Bu(n) {
  const { inputs: t, backend: e, attrs: s } = n, { input: r } = t, { dim: o } = s, i = r.shape.length, a = r.shape.slice();
  let l = o;
  return o < 0 && (C(-(i + 1) <= o, () => `Axis must be in the interval [${-(i + 1)}, ${i}]`), l = i + o + 1), a.splice(l, 0, 1), Xt({ inputs: { x: r }, backend: e, attrs: { shape: a } });
}
const OX = {
  kernelName: wl,
  backendName: "cpu",
  kernelFunc: Bu
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const AX = xe((n, t) => n / t), hb = Re(hi, AX), am = {
  kernelName: hi,
  backendName: "cpu",
  kernelFunc: hb
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $v(n, t, e) {
  const s = n.shape, r = s[0], o = s[1], i = e.data.get(n.dataId), a = i.complexTensorInfos.real, l = i.complexTensorInfos.imag, c = [r, o], u = P(c), h = jt("float32", u), d = jt("float32", u);
  for (let g = 0; g < r; g++) {
    const y = io({
      inputs: { x: a },
      backend: e,
      attrs: { begin: [g, 0], size: [1, o] }
    }), b = io({
      inputs: { x: l },
      backend: e,
      attrs: { begin: [g, 0], size: [1, o] }
    }), w = dn({ inputs: { real: y, imag: b }, backend: e }), { real: x, imag: S } = zX(w, t, e), v = Ks(x, S);
    for (let T = 0; T < o; T++) {
      const N = uy(v, T);
      h[g * o + T] = N.real, d[g * o + T] = N.imag;
    }
    e.disposeIntermediateTensorInfo(y), e.disposeIntermediateTensorInfo(b), e.disposeIntermediateTensorInfo(w);
  }
  const p = e.makeTensorInfo(c, "float32", h), f = e.makeTensorInfo(c, "float32", d), m = dn({ inputs: { real: p, imag: f }, backend: e });
  return e.disposeIntermediateTensorInfo(p), e.disposeIntermediateTensorInfo(f), m;
}
function zX(n, t, e) {
  const s = P(n.shape), r = e.data.get(n.dataId), o = e.data.get(r.complexTensorInfos.real.dataId).values, i = e.data.get(r.complexTensorInfos.imag.dataId).values;
  if (WX(s)) {
    const a = lm(o, i, s, t, e), l = [n.shape[0], n.shape[1]];
    if (t) {
      const c = e.makeTensorInfo(l, "float32", a.real), u = e.makeTensorInfo(l, "float32", a.imag), h = e.makeTensorInfo([], "float32", Ns(s, "float32")), d = ks({ inputs: { x: h }, backend: e }), p = am.kernelFunc({ inputs: { a: c, b: h }, backend: e }), f = am.kernelFunc({ inputs: { a: u, b: d }, backend: e }), m = e.data.get(p.dataId).values, g = e.data.get(f.dataId).values;
      return e.disposeIntermediateTensorInfo(c), e.disposeIntermediateTensorInfo(u), e.disposeIntermediateTensorInfo(h), e.disposeIntermediateTensorInfo(d), e.disposeIntermediateTensorInfo(p), e.disposeIntermediateTensorInfo(f), { real: m, imag: g };
    }
    return a;
  } else {
    const a = Ks(o, i), l = VX(a, s, t);
    return vI(l);
  }
}
function WX(n) {
  return (n & n - 1) === 0;
}
function lm(n, t, e, s, r) {
  if (e === 1)
    return { real: n, imag: t };
  const o = Ks(n, t), i = e / 2, a = CI(o), l = a.real, c = a.imag, u = [l.length], h = r.makeTensorInfo(u, "float32", l), d = r.makeTensorInfo(u, "float32", c), p = dn({ inputs: { real: h, imag: d }, backend: r }), f = kI(o), m = f.real, g = f.imag, y = [m.length], b = r.makeTensorInfo(y, "float32", m), w = r.makeTensorInfo(y, "float32", g), x = dn({ inputs: { real: b, imag: w }, backend: r }), S = lm(l, c, i, s, r), v = S.real, T = S.imag, N = [v.length], $ = r.makeTensorInfo(N, "float32", v), R = r.makeTensorInfo(N, "float32", T), F = dn({
    inputs: { real: $, imag: R },
    backend: r
  }), z = lm(m, g, i, s, r), W = z.real, M = z.imag, X = [W.length], _ = r.makeTensorInfo(X, "float32", W), B = r.makeTensorInfo(X, "float32", M), Z = dn({ inputs: { real: _, imag: B }, backend: r }), H = NI(e, s), j = [H.real.length], J = r.makeTensorInfo(j, "float32", H.real), q = r.makeTensorInfo(j, "float32", H.imag), Q = dn({ inputs: { real: J, imag: q }, backend: r }), st = Cp({ inputs: { a: Q, b: Z }, backend: r }), tt = Bo({
    inputs: { a: F, b: st },
    backend: r
  }), ot = cb({
    inputs: { a: F, b: st },
    backend: r
  }), dt = oo({ inputs: { input: tt }, backend: r }), mt = oo({ inputs: { input: ot }, backend: r }), yt = Ho({ inputs: { input: tt }, backend: r }), St = Ho({ inputs: { input: ot }, backend: r }), Tt = Uo({
    inputs: [dt, mt],
    backend: r,
    attrs: { axis: 0 }
  }), Ft = Uo({
    inputs: [yt, St],
    backend: r,
    attrs: { axis: 0 }
  }), Mt = r.data.get(Tt.dataId).values, Kt = r.data.get(Ft.dataId).values;
  return r.disposeIntermediateTensorInfo(h), r.disposeIntermediateTensorInfo(d), r.disposeIntermediateTensorInfo(p), r.disposeIntermediateTensorInfo(b), r.disposeIntermediateTensorInfo(w), r.disposeIntermediateTensorInfo(x), r.disposeIntermediateTensorInfo($), r.disposeIntermediateTensorInfo(R), r.disposeIntermediateTensorInfo(F), r.disposeIntermediateTensorInfo(_), r.disposeIntermediateTensorInfo(B), r.disposeIntermediateTensorInfo(Z), r.disposeIntermediateTensorInfo(J), r.disposeIntermediateTensorInfo(q), r.disposeIntermediateTensorInfo(Q), r.disposeIntermediateTensorInfo(st), r.disposeIntermediateTensorInfo(tt), r.disposeIntermediateTensorInfo(ot), r.disposeIntermediateTensorInfo(dt), r.disposeIntermediateTensorInfo(yt), r.disposeIntermediateTensorInfo(mt), r.disposeIntermediateTensorInfo(St), r.disposeIntermediateTensorInfo(Tt), r.disposeIntermediateTensorInfo(Ft), { real: Mt, imag: Kt };
}
function VX(n, t, e) {
  const s = new Float32Array(t * 2);
  for (let r = 0; r < t; r++) {
    let o = 0, i = 0;
    for (let a = 0; a < t; a++) {
      const l = $I(r * a, t, e), c = uy(n, a);
      o += c.real * l.real - c.imag * l.imag, i += c.real * l.imag + c.imag * l.real;
    }
    e && (o /= t, i /= t), TI(s, o, i, r);
  }
  return s;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function MX(n) {
  const { inputs: t, backend: e } = n, { input: s } = t, r = P(s.shape), o = s.shape[s.shape.length - 1], i = r / o, a = Xt({
    inputs: { x: s },
    backend: e,
    attrs: { shape: [i, o] }
  }), l = $v(a, !1, e), c = Xt({ inputs: { x: l }, backend: e, attrs: { shape: s.shape } });
  return e.disposeIntermediateTensorInfo(a), e.disposeIntermediateTensorInfo(l), c;
}
const PX = {
  kernelName: Sh,
  backendName: "cpu",
  kernelFunc: MX
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function db(n) {
  const { backend: t, attrs: e } = n, { shape: s, value: r, dtype: o } = e, i = o || Qo(r), a = Gt(i, P(s));
  return _X(a, r, i), t.makeTensorInfo(s, i, a);
}
const XX = {
  kernelName: vh,
  backendName: "cpu",
  kernelFunc: db
};
function _X(n, t, e) {
  n.fill(t);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const KX = {
  kernelName: Ch,
  backendName: "cpu",
  kernelFunc: ({ inputs: n, attrs: t, backend: e }) => {
    const { image: s } = n, r = e, o = jt(s.dtype, P(s.shape)), [i, a, l, c] = s.shape, u = r.data.get(s.dataId).values;
    for (let d = 0; d < i; d++) {
      const p = d * l * a * c;
      for (let f = 0; f < a; f++) {
        const m = f * (l * c);
        for (let g = 0; g < l; g++) {
          const y = g * c;
          for (let b = 0; b < c; b++) {
            const w = Math.round(l - g - 1), x = p + m + y + b;
            let S = u[x];
            if (w >= 0 && w < l) {
              const v = w * c, T = p + m + v + b;
              S = u[T];
            }
            o[x] = S;
          }
        }
      }
    }
    return { dataId: r.write(o, s.shape, s.dtype), shape: s.shape, dtype: s.dtype };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ZX = xe((n, t) => Math.floor(n / t)), BX = Re(yi, ZX, null, "int32"), HX = {
  kernelName: yi,
  backendName: "cpu",
  kernelFunc: BX
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function UX(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r, filter: o, bias: i, preluActivationWeights: a } = t, { strides: l, pad: c, dataFormat: u, dilations: h, dimRoundingMode: d, activation: p, leakyreluAlpha: f } = s;
  let m = Tv({
    inputs: { x: r, filter: o },
    backend: e,
    attrs: { strides: l, pad: c, dataFormat: u, dilations: h, dimRoundingMode: d }
  });
  if (i) {
    const g = m;
    if (u === "NCHW" && i.shape.length === 1 && i.shape[0] !== 1) {
      const y = Xt({ inputs: { x: i }, backend: e, attrs: { shape: [i.shape[0], 1, 1] } });
      m = Bo({ inputs: { a: m, b: y }, backend: e }), e.disposeIntermediateTensorInfo(y);
    } else
      m = Bo({ inputs: { a: m, b: i }, backend: e });
    e.disposeIntermediateTensorInfo(g);
  }
  if (p) {
    const g = m;
    if (u === "NCHW" && p === "prelu" && a.shape.length === 1 && a.shape[0] !== 1) {
      const y = Xt({
        inputs: { x: a },
        backend: e,
        attrs: { shape: [a.shape[0], 1, 1] }
      });
      m = Zu(e, m, p, y, f), e.disposeIntermediateTensorInfo(y);
    } else
      m = Zu(e, m, p, a, f);
    e.disposeIntermediateTensorInfo(g);
  }
  return m;
}
const YX = {
  kernelName: Ma,
  backendName: "cpu",
  kernelFunc: UX
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function jX(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r, filter: o, bias: i, preluActivationWeights: a } = t, { strides: l, pad: c, dataFormat: u, dilations: h, dimRoundingMode: d, activation: p, leakyreluAlpha: f } = s;
  let m = Nv({
    inputs: { x: r, filter: o },
    backend: e,
    attrs: { strides: l, pad: c, dataFormat: u, dilations: h, dimRoundingMode: d }
  });
  if (i) {
    const g = m;
    m = Bo({ inputs: { a: m, b: i }, backend: e }), e.disposeIntermediateTensorInfo(g);
  }
  if (p) {
    const g = m;
    m = Zu(e, m, p, a, f), e.disposeIntermediateTensorInfo(g);
  }
  return m;
}
const JX = {
  kernelName: Pa,
  backendName: "cpu",
  kernelFunc: jX
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function QX(n) {
  const { inputs: t, backend: e } = n, { params: s, indices: r } = t, o = P(s.shape), i = r.shape, a = i[i.length - 1], [l, c, u, h] = ld(s, r);
  if (c === 0)
    return e.makeTensorInfo(l, s.dtype, []);
  const d = e.data.get(r.dataId).values, p = e.bufferSync(s), f = xV(d, p, s.dtype, c, a, u, h, s.shape, o);
  return e.makeTensorInfo(l, s.dtype, f.values);
}
const qX = {
  kernelName: kh,
  backendName: "cpu",
  kernelFunc: QX
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function t_(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r, indices: o } = t, { axis: i, batchDims: a } = s;
  ct([r, o], "gatherV2");
  const l = vt(i, r.shape)[0], c = e.data.get(o.dataId).values, u = r.shape[l];
  for (let x = 0; x < c.length; ++x) {
    const S = c[x];
    C(S <= u - 1 && S >= 0, () => `GatherV2: the index value ${S} is not in [0, ${u - 1}]`);
  }
  let h = a;
  a == null && (h = 0);
  const d = P(o.shape), p = $y(r, o, l, h), f = Xt({
    inputs: { x: r },
    backend: e,
    attrs: {
      shape: [
        p.batchSize,
        p.outerSize,
        p.dimSize,
        p.sliceSize
      ]
    }
  }), m = Xt({
    inputs: { x: o },
    backend: e,
    attrs: { shape: [p.batchSize, d / p.batchSize] }
  }), g = [
    p.batchSize,
    p.outerSize,
    d / p.batchSize,
    p.sliceSize
  ], y = e.bufferSync(m), b = e.bufferSync(f), w = wV(b, y, g);
  return e.disposeIntermediateTensorInfo(f), e.disposeIntermediateTensorInfo(m), e.makeTensorInfo(p.outputShape, w.dtype, w.values);
}
const e_ = {
  kernelName: Sl,
  backendName: "cpu",
  kernelFunc: t_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function n_(n) {
  const { inputs: t, backend: e } = n, { input: s } = t, r = P(s.shape), o = s.shape[s.shape.length - 1], i = r / o, a = Xt({
    inputs: { x: s },
    backend: e,
    attrs: { shape: [i, o] }
  }), l = $v(a, !0, e), c = Xt({ inputs: { x: l }, backend: e, attrs: { shape: s.shape } });
  return e.disposeIntermediateTensorInfo(a), e.disposeIntermediateTensorInfo(l), c;
}
const s_ = {
  kernelName: Th,
  backendName: "cpu",
  kernelFunc: n_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const r_ = At(wi, (n) => Number.isFinite(n) ? 1 : 0, "bool"), o_ = {
  kernelName: wi,
  backendName: "cpu",
  kernelFunc: r_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const i_ = At(Ii, (n) => Math.abs(n) === 1 / 0 ? 1 : 0, "bool"), a_ = {
  kernelName: Ii,
  backendName: "cpu",
  kernelFunc: i_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const l_ = At(Si, (n) => Number.isNaN(n) ? 1 : 0, "bool"), c_ = {
  kernelName: Si,
  backendName: "cpu",
  kernelFunc: l_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function u_(n) {
  const { backend: t, attrs: e } = n, { start: s, stop: r, num: o } = e, i = GV(s, r, o);
  return t.makeTensorInfo([i.length], "float32", i);
}
const h_ = {
  kernelName: $h,
  backendName: "cpu",
  kernelFunc: u_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const d_ = At(Ci, (n) => Math.log1p(n)), p_ = {
  kernelName: Ci,
  backendName: "cpu",
  kernelFunc: d_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const f_ = xe((n, t) => n && t), m_ = Re(Nl, f_, null, "bool"), g_ = {
  kernelName: Nl,
  backendName: "cpu",
  kernelFunc: m_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const y_ = At($l, (n) => n ? 0 : 1, "bool"), b_ = {
  kernelName: $l,
  backendName: "cpu",
  kernelFunc: y_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const x_ = xe((n, t) => n || t), w_ = Re(Rl, x_, null, "bool"), I_ = {
  kernelName: Rl,
  backendName: "cpu",
  kernelFunc: w_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function S_(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { depthRadius: o, bias: i, alpha: a, beta: l } = s;
  ct(r, "LRN");
  const c = r.shape[3], u = c - 1, h = e.data.get(r.dataId).values, d = P(r.shape), p = new Float32Array(d);
  function f(m) {
    const g = m % c;
    let y = m - g + Math.max(0, g - o);
    const b = m - g + Math.min(g + o, u);
    let w = 0;
    for (; y <= b; y++) {
      const x = h[y];
      w += x * x;
    }
    return w;
  }
  for (let m = 0; m < d; m++) {
    const g = f(m), y = h[m] * Math.pow(i + a * g, -l);
    p[m] = y;
  }
  return e.makeTensorInfo(r.shape, r.dtype, p);
}
const v_ = {
  kernelName: El,
  backendName: "cpu",
  kernelFunc: S_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function C_(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r, y: o, dy: i } = t, { depthRadius: a, bias: l, alpha: c, beta: u } = s;
  ct(i, "LRNGrad");
  const h = P(i.shape), d = i.shape[3], p = e.data.get(i.dataId).values, f = e.data.get(r.dataId).values, m = e.data.get(o.dataId).values, g = new Float32Array(h), y = h;
  for (let b = 0; b < y; b++) {
    const w = b % d, x = b - w + Math.max(0, w - a), S = b - w + Math.min(d, w + a + 1);
    let v = 0;
    for (let T = x; T < S; T++)
      v += Math.pow(f[T], 2);
    v = c * v + l;
    for (let T = x; T < S; T++) {
      let N = -2 * c * u * f[T] * m[b] / v;
      b === T && (N += Math.pow(v, -u)), N *= p[b], g[T] += N;
    }
  }
  return e.makeTensorInfo(i.shape, r.dtype, g);
}
const k_ = {
  kernelName: Rh,
  backendName: "cpu",
  kernelFunc: C_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Rv(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { reductionIndices: o, keepDims: i } = s, a = e;
  let l = r.shape;
  const c = l.length, u = vt(o, l);
  let h = u;
  const d = oe(h, c);
  let p = a.data.get(r.dataId).values;
  if (d != null) {
    const x = new Array(c);
    for (let S = 0; S < x.length; S++)
      x[S] = l[d[S]];
    p = fv(p, l, r.dtype, d, x), h = pe(h.length, c), l = x;
  }
  ct(r, "max"), ze("max", h, c);
  const [f, m] = ve(l, h), g = P(m), y = zV(p, g, f, r.dtype), b = a.write(y, f, r.dtype);
  let w = f;
  return i && (w = de(f, u)), { dataId: b, shape: w, dtype: r.dtype };
}
const T_ = {
  kernelName: Ll,
  backendName: "cpu",
  kernelFunc: Rv
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function N_(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t;
  ct(r, "maxPool");
  const { filterSize: o, strides: i, pad: a, dimRoundingMode: l } = s, c = 1;
  C(Ae(i, c), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`);
  const u = Yn(r.shape, o, i, c, a, l);
  let h;
  if (u.filterWidth === 1 && u.filterHeight === 1 && Nt(u.inShape, u.outShape))
    h = ks({ inputs: { x: r }, backend: e });
  else {
    const d = e.data.get(r.dataId).values, p = lt(r.shape), f = ub(d, r.shape, r.dtype, p, u, "max");
    h = e.makeTensorInfo(u.outShape, r.dtype, f.values);
  }
  return h;
}
const $_ = {
  kernelName: Dl,
  backendName: "cpu",
  kernelFunc: N_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function R_(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { filterSize: o, strides: i, pad: a, dimRoundingMode: l, dataFormat: c } = s;
  ct(r, "maxPool3d");
  const u = Us(r.shape, o, i, 1, a, l, c), h = e.data.get(r.dataId).values, d = kv(h, r.shape, r.dtype, lt(r.shape), u, "max");
  return e.makeTensorInfo(d.shape, "float32", d.values);
}
const E_ = {
  kernelName: Gl,
  backendName: "cpu",
  kernelFunc: R_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function L_(n) {
  const { inputs: t, backend: e, attrs: s } = n, { dy: r, input: o } = t, { filterSize: i, strides: a, pad: l, dimRoundingMode: c } = s;
  ct([r, o], "maxPool3DGrad");
  const u = Us(o.shape, i, a, 1, l, c), h = e.bufferSync(o), d = bP(h, u), p = u.strideDepth, f = u.strideHeight, m = u.strideWidth, g = u.dilationDepth, y = u.dilationHeight, b = u.dilationWidth, w = u.effectiveFilterDepth, x = u.effectiveFilterHeight, S = u.effectiveFilterWidth, v = w - 1 - u.padInfo.front, T = S - 1 - u.padInfo.left, N = x - 1 - u.padInfo.top, $ = gt(o.shape, "float32"), R = e.bufferSync(r);
  for (let F = 0; F < u.batchSize; ++F)
    for (let z = 0; z < u.inChannels; ++z)
      for (let W = 0; W < u.inDepth; ++W)
        for (let M = 0; M < u.inHeight; ++M)
          for (let X = 0; X < u.inWidth; ++X) {
            const _ = W - v, B = M - N, Z = X - T;
            let H = 0;
            for (let j = 0; j < w; j += g) {
              const J = (_ + j) / p;
              if (!(J < 0 || J >= u.outDepth || Math.floor(J) !== J))
                for (let q = 0; q < x; q += y) {
                  const Q = (B + q) / f;
                  if (!(Q < 0 || Q >= u.outHeight || Math.floor(Q) !== Q))
                    for (let st = 0; st < S; st += b) {
                      const tt = (Z + st) / m;
                      if (tt < 0 || tt >= u.outWidth || Math.floor(tt) !== tt)
                        continue;
                      const ot = w * x * S - 1 - d.get(F, J, Q, tt, z), dt = j * x * S + q * S + st, mt = ot === dt ? 1 : 0;
                      if (mt === 0)
                        continue;
                      const yt = R.get(F, J, Q, tt, z);
                      H += yt * mt;
                    }
                }
            }
            $.set(H, F, W, M, X, z);
          }
  return e.makeTensorInfo($.shape, $.dtype, $.values);
}
const D_ = {
  kernelName: Lh,
  backendName: "cpu",
  kernelFunc: L_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function G_(n) {
  const { inputs: t, backend: e, attrs: s } = n, { dy: r, input: o, output: i } = t, a = o;
  ct([o, i], "maxPoolGrad");
  const { filterSize: l, strides: c, pad: u, dimRoundingMode: h } = s, d = Yn(a.shape, l, c, 1, u, h), p = e.data.get(a.dataId).values, f = gt(d.outShape, a.dtype, Cv(p, a.shape, a.dtype, d).values), m = d.strideHeight, g = d.strideWidth, y = d.dilationHeight, b = d.dilationWidth, w = d.effectiveFilterHeight, x = d.effectiveFilterWidth, S = x - 1 - d.padInfo.left, v = w - 1 - d.padInfo.top, T = gt(a.shape, "float32"), N = e.data.get(r.dataId).values, $ = gt(r.shape, "float32", N);
  for (let R = 0; R < d.batchSize; ++R)
    for (let F = 0; F < d.inChannels; ++F)
      for (let z = 0; z < d.inHeight; ++z)
        for (let W = 0; W < d.inWidth; ++W) {
          const M = z - v, X = W - S;
          let _ = 0;
          for (let B = 0; B < w; B += y) {
            const Z = (M + B) / m;
            if (!(Z < 0 || Z >= d.outHeight || Math.floor(Z) !== Z))
              for (let H = 0; H < x; H += b) {
                const j = (X + H) / g;
                if (j < 0 || j >= d.outWidth || Math.floor(j) !== j)
                  continue;
                const J = w * x - 1 - f.get(R, Z, j, F), q = B * x + H, Q = J === q ? 1 : 0;
                if (Q === 0)
                  continue;
                const st = $.get(R, Z, j, F);
                _ += st * Q;
              }
          }
          T.set(_, R, z, W, F);
        }
  return e.makeTensorInfo(T.shape, T.dtype, T.values);
}
const F_ = {
  kernelName: Eh,
  backendName: "cpu",
  kernelFunc: G_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function O_(n, t, e, s, r) {
  const o = lt(t), i = ub(n, t, e, o, r, "max"), a = Cv(n, t, e, r, !0, s);
  return [i.values, a.values];
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const A_ = {
  kernelName: Dh,
  backendName: "cpu",
  kernelFunc: ({ inputs: n, attrs: t, backend: e }) => {
    const { x: s } = n, { filterSize: r, strides: o, pad: i, includeBatchInIndex: a } = t, l = e;
    ct(s, "MaxPoolWithArgmax");
    const c = l.data.get(s.dataId).values, u = Yn(s.shape, r, o, [1, 1], i), [h, d] = O_(c, s.shape, s.dtype, a, u), p = l.write(h, u.outShape, s.dtype), f = l.write(d, u.outShape, s.dtype);
    return [
      { dataId: p, shape: u.outShape, dtype: s.dtype },
      { dataId: f, shape: u.outShape, dtype: "int32" }
    ];
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function z_(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { axis: o, keepDims: i } = s, a = vt(o, r.shape), c = ve(r.shape, a)[1], u = P(c), h = [], d = e.makeTensorInfo([], "float32", new Float32Array([u]));
  h.push(d);
  const p = Sr({ inputs: { x: r }, backend: e, attrs: { dtype: "float32" } });
  h.push(p);
  const f = hb({ inputs: { a: p, b: d }, backend: e });
  h.push(f);
  const m = Wc({ inputs: { x: f }, backend: e, attrs: { axis: o, keepDims: i } });
  return h.forEach((g) => e.disposeIntermediateTensorInfo(g)), m;
}
const W_ = {
  kernelName: Fl,
  backendName: "cpu",
  kernelFunc: z_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function V_(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { axis: o, keepDims: i } = s;
  ct(r, "min");
  const a = vt(o, r.shape);
  let l = a;
  const c = oe(l, r.shape.length);
  let u = r;
  c != null && (u = rn({ inputs: { x: r }, backend: e, attrs: { perm: c } }), l = pe(l.length, r.shape.length)), ze("min", l, u.shape.length);
  const [h, d] = ve(u.shape, l), p = P(d), f = ae(P(h), u.dtype), m = e.data.get(u.dataId).values;
  for (let y = 0; y < f.length; ++y) {
    const b = y * p;
    let w = m[b];
    for (let x = 0; x < p; ++x) {
      const S = m[b + x];
      (Number.isNaN(S) || S < w) && (w = S);
    }
    f[y] = w;
  }
  c != null && e.disposeIntermediateTensorInfo(u);
  const g = e.makeTensorInfo(h, u.dtype, f);
  if (i) {
    const y = de(h, a), b = Xt({ inputs: { x: g }, backend: e, attrs: { shape: y } });
    return e.disposeIntermediateTensorInfo(g), b;
  }
  return g;
}
const M_ = {
  kernelName: Ol,
  backendName: "cpu",
  kernelFunc: V_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function P_(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { paddings: o, mode: i } = s;
  ct(r, "mirrorPad");
  const a = o.map((w, x) => w[0] + r.shape[x] + w[1]), l = o.map((w) => w[0]), c = o.map((w, x) => w[0] + r.shape[x]), u = i === "reflect" ? 0 : 1, h = e.data.get(r.dataId).values, d = r.shape.length, p = lt(r.shape), f = P(a), m = a.length, g = lt(a), y = jt(r.dtype, f);
  for (let w = 0; w < f; w++) {
    let x = Ts(w, m, g);
    for (let v = 0; v < m; v++)
      x[v] < l[v] ? x[v] = l[v] * 2 - x[v] - u : x[v] >= c[v] && (x[v] = (c[v] - 1) * 2 - x[v] + u);
    x = x.map((v, T) => v - l[T]);
    const S = mn(x, d, p);
    y[w] = h[S];
  }
  return { dataId: e.write(y, a, r.dtype), shape: a, dtype: r.dtype };
}
const X_ = {
  kernelName: Al,
  backendName: "cpu",
  kernelFunc: P_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const __ = xe((n, t) => {
  const e = n % t;
  return n < 0 && t < 0 || n >= 0 && t >= 0 ? e : (e + t) % t;
}), K_ = Re(Ni, __), Z_ = {
  kernelName: Ni,
  backendName: "cpu",
  kernelFunc: K_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ev(n) {
  const { inputs: t, backend: e, attrs: s } = n, { logits: r } = t, { dim: o } = s, i = r.shape.length;
  let a = o;
  if (a === -1 && (a = i - 1), a !== i - 1)
    throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${i} and dim was ${a}`);
  const l = vt([a], r.shape), c = Rv({
    inputs: { x: r },
    backend: e,
    attrs: { reductionIndices: l, keepDims: !1 }
  }), u = de(c.shape, l), h = Xt({ inputs: { x: c }, backend: e, attrs: { shape: u } }), d = cb({ inputs: { a: r, b: h }, backend: e }), p = dv({ inputs: { x: d }, backend: e }), f = Wc({ inputs: { x: p }, backend: e, attrs: { axis: l, keepDims: !1 } }), m = Xt({ inputs: { x: f }, backend: e, attrs: { shape: u } }), g = hb({ inputs: { a: p, b: m }, backend: e });
  return e.disposeIntermediateTensorInfo(c), e.disposeIntermediateTensorInfo(h), e.disposeIntermediateTensorInfo(d), e.disposeIntermediateTensorInfo(p), e.disposeIntermediateTensorInfo(f), e.disposeIntermediateTensorInfo(m), g;
}
const B_ = {
  kernelName: tc,
  backendName: "cpu",
  kernelFunc: Ev
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function H_(n) {
  const { inputs: t, backend: e, attrs: s } = n, { logits: r } = t, { numSamples: o, seed: i, normalized: a } = s;
  ct(r, "multinomial");
  const l = a ? r : Ev({ inputs: { logits: r }, backend: e, attrs: { dim: -1 } }), c = l.shape[0], u = l.shape[1], h = e.data.get(l.dataId).values, d = [c, o], p = ae(P(d), "int32");
  for (let f = 0; f < c; ++f) {
    const m = f * u, g = new Float32Array(u - 1);
    g[0] = h[m];
    for (let w = 1; w < g.length; ++w)
      g[w] = g[w - 1] + h[m + w];
    const y = na.alea(i.toString()), b = f * o;
    for (let w = 0; w < o; ++w) {
      const x = y();
      p[b + w] = g.length;
      for (let S = 0; S < g.length; S++)
        if (x < g[S]) {
          p[b + w] = S;
          break;
        }
    }
  }
  return a || e.disposeIntermediateTensorInfo(l), e.makeTensorInfo(d, "int32", p);
}
const U_ = {
  kernelName: Gh,
  backendName: "cpu",
  kernelFunc: H_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Y_ = Kd;
function j_(n) {
  const { inputs: t, backend: e, attrs: s } = n, { boxes: r, scores: o } = t, { maxOutputSize: i, iouThreshold: a, scoreThreshold: l } = s;
  ct(r, "NonMaxSuppression");
  const c = e.data.get(r.dataId).values, u = e.data.get(o.dataId).values, { selectedIndices: h } = Y_(c, u, i, a, l);
  return e.makeTensorInfo([h.length], "int32", new Int32Array(h));
}
const J_ = {
  kernelName: Fh,
  backendName: "cpu",
  kernelFunc: j_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Q_ = Zd;
function q_(n) {
  const { inputs: t, backend: e, attrs: s } = n, { boxes: r, scores: o } = t, { maxOutputSize: i, iouThreshold: a, scoreThreshold: l, padToMaxOutputSize: c } = s;
  ct(r, "NonMaxSuppressionPadded");
  const u = e.data.get(r.dataId).values, h = e.data.get(o.dataId).values, { selectedIndices: d, validOutputs: p } = Q_(u, h, i, a, l, c);
  return [
    e.makeTensorInfo([d.length], "int32", new Int32Array(d)),
    e.makeTensorInfo([], "int32", new Int32Array([p]))
  ];
}
const tK = {
  kernelName: Oh,
  backendName: "cpu",
  kernelFunc: q_
};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const eK = Bd;
function nK(n) {
  const { inputs: t, backend: e, attrs: s } = n, { boxes: r, scores: o } = t, { maxOutputSize: i, iouThreshold: a, scoreThreshold: l, softNmsSigma: c } = s;
  ct(r, "NonMaxSuppressionWithScore");
  const u = e.data.get(r.dataId).values, h = e.data.get(o.dataId).values, d = i, p = a, f = l, m = c, { selectedIndices: g, selectedScores: y } = eK(u, h, d, p, f, m);
  return [
    e.makeTensorInfo([g.length], "int32", new Int32Array(g)),
    e.makeTensorInfo([y.length], "float32", new Float32Array(y))
  ];
}
const sK = {
  kernelName: Ah,
  backendName: "cpu",
  kernelFunc: nK
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function rK(n) {
  const { inputs: t, backend: e, attrs: s } = n, { indices: r } = t, { dtype: o, depth: i, onValue: a, offValue: l } = s;
  ct(r, "oneHot");
  const c = P(r.shape), u = new Float32Array(c * i);
  u.fill(l);
  const h = e.data.get(r.dataId).values;
  for (let d = 0; d < c; ++d)
    h[d] >= 0 && h[d] < i && (u[d * i + h[d]] = a);
  return e.makeTensorInfo([...r.shape, i], o, u);
}
const oK = {
  kernelName: Ml,
  backendName: "cpu",
  kernelFunc: rK
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Hu(n) {
  const { inputs: t, backend: e } = n, { x: s } = t;
  if (s.dtype === "string")
    throw new Error("zerosLike is not supported for string tensors");
  if (s.dtype === "complex64") {
    const r = oo({ inputs: { input: s }, backend: e }), o = Hu({ inputs: { x: r }, backend: e }), i = Ho({ inputs: { input: s }, backend: e }), a = Hu({ inputs: { x: i }, backend: e }), l = dn({ inputs: { real: o, imag: a }, backend: e });
    return e.disposeIntermediateTensorInfo(r), e.disposeIntermediateTensorInfo(o), e.disposeIntermediateTensorInfo(i), e.disposeIntermediateTensorInfo(a), l;
  } else
    return db({ backend: e, attrs: { shape: s.shape, value: 0, dtype: s.dtype } });
}
const iK = {
  kernelName: sc,
  backendName: "cpu",
  kernelFunc: Hu
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Lv(n) {
  const { inputs: t, backend: e } = n, { x: s } = t;
  if (s.dtype === "string")
    throw new Error("onesLike is not supported for string tensors");
  if (s.dtype === "complex64") {
    const r = oo({ inputs: { input: s }, backend: e }), o = Lv({ inputs: { x: r }, backend: e }), i = Ho({ inputs: { input: s }, backend: e }), a = Hu({ inputs: { x: i }, backend: e }), l = dn({ inputs: { real: o, imag: a }, backend: e });
    return e.disposeIntermediateTensorInfo(r), e.disposeIntermediateTensorInfo(o), e.disposeIntermediateTensorInfo(i), e.disposeIntermediateTensorInfo(a), l;
  } else
    return db({ backend: e, attrs: { shape: s.shape, value: 1, dtype: s.dtype } });
}
const aK = {
  kernelName: Vl,
  backendName: "cpu",
  kernelFunc: Lv
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Dv(n) {
  const { inputs: t, backend: e, attrs: s } = n, { axis: r } = s;
  if (t.length === 1)
    return Bu({ inputs: { input: t[0] }, backend: e, attrs: { dim: r } });
  const o = t[0].shape, i = t[0].dtype;
  t.forEach((u) => {
    Oe(o, u.shape, "All tensors passed to stack must have matching shapes"), C(i === u.dtype, () => "All tensors passed to stack must have matching dtypes");
  });
  const a = [], l = t.map((u) => {
    const h = Bu({ inputs: { input: u }, backend: e, attrs: { dim: r } });
    return a.push(h), h;
  }), c = Uo({ inputs: l, backend: e, attrs: { axis: r } });
  return a.forEach((u) => e.disposeIntermediateTensorInfo(u)), c;
}
const lK = {
  kernelName: Pl,
  backendName: "cpu",
  kernelFunc: Dv
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function cK(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { paddings: o, constantValue: i } = s;
  ct(r, "pad");
  const a = o.map((b, w) => b[0] + r.shape[w] + b[1]), l = o.map((b) => b[0]), c = e.data.get(r.dataId).values, u = P(r.shape), h = r.shape.length, d = lt(r.shape), p = P(a), f = a.length, m = lt(a), g = jt(r.dtype, p);
  i !== 0 && g.fill(i);
  for (let b = 0; b < u; b++) {
    const x = Ts(b, h, d).map((v, T) => v + l[T]), S = mn(x, f, m);
    g[S] = c[b];
  }
  return { dataId: e.write(g, a, r.dtype), shape: a, dtype: r.dtype };
}
const Gv = {
  kernelName: Xl,
  backendName: "cpu",
  kernelFunc: cK
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const uK = xe((n, t) => Math.pow(n, t)), hK = Re(Ri, uK), dK = {
  kernelName: Ri,
  backendName: "cpu",
  kernelFunc: hK
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function pK(n) {
  const { inputs: t, backend: e, attrs: s } = n, { paramsNestedSplits: r, paramsDenseValues: o, indices: i } = t, a = r.map((g) => e.data.get(g.dataId).values), l = r.map((g) => g.shape), c = e.data.get(o.dataId).values, u = e.data.get(i.dataId).values, [h, d, p] = lM(a, l, c, o.shape, o.dtype, u, i.shape), f = h.map((g) => e.makeTensorInfo([g.length], "int32", g)), m = e.makeTensorInfo(p, o.dtype, d);
  return f.concat([m]);
}
const fK = {
  kernelName: zh,
  backendName: "cpu",
  kernelFunc: pK
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function mK(n) {
  const { inputs: t, backend: e, attrs: s } = n, { shape: r, values: o, defaultValue: i, rowPartitionTensors: a } = t, { rowPartitionTypes: l } = s, c = e.data.get(r.dataId).values, u = e.data.get(o.dataId).values, h = e.data.get(i.dataId).values, d = a.map((g) => e.data.get(g.dataId).values), p = a.map((g) => g.shape), [f, m] = cM(c, r.shape, u, o.shape, o.dtype, h, i.shape, d, p, l);
  return e.makeTensorInfo(f, o.dtype, m);
}
const gK = {
  kernelName: Wh,
  backendName: "cpu",
  kernelFunc: mK
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function yK(n) {
  const { backend: t, attrs: e } = n, { start: s, stop: r, dtype: o, step: i } = e, a = uM(s, r, i, o);
  return t.makeTensorInfo([a.length], o, a);
}
const bK = {
  kernelName: Vh,
  backendName: "cpu",
  kernelFunc: yK
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const xK = At(Ei, (n) => 1 / n), wK = {
  kernelName: Ei,
  backendName: "cpu",
  kernelFunc: xK
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function IK(n) {
  const { inputs: t, backend: e, attrs: s } = n, { images: r } = t, { alignCorners: o, halfPixelCenters: i, size: a } = s;
  ct(r, "resizeBilinear");
  const l = lt(r.shape), [c, u] = a, [h, d, p, f] = r.shape, m = e.data.get(r.dataId).values, g = new Float32Array(P([h, c, u, f])), y = [
    o && c > 1 ? d - 1 : d,
    o && u > 1 ? p - 1 : p
  ], b = [
    o && c > 1 ? c - 1 : c,
    o && u > 1 ? u - 1 : u
  ];
  let w = 0;
  const x = y[0] / b[0], S = y[1] / b[1];
  for (let v = 0; v < h; v++)
    for (let T = 0; T < c; T++) {
      let N;
      i ? N = x * (T + 0.5) - 0.5 : N = x * T;
      const $ = Math.max(0, Math.floor(N)), R = N - $, F = Math.min(d - 1, Math.ceil(N)), z = v * l[0] + $ * l[1], W = v * l[0] + F * l[1];
      for (let M = 0; M < u; M++) {
        let X;
        i ? X = S * (M + 0.5) - 0.5 : X = S * M;
        const _ = Math.max(0, Math.floor(X)), B = X - _, Z = Math.min(p - 1, Math.ceil(X)), H = z + _ * l[2], j = W + _ * l[2], J = z + Z * l[2], q = W + Z * l[2];
        for (let Q = 0; Q < f; Q++) {
          const st = m[H + Q], tt = m[j + Q], ot = m[J + Q], dt = m[q + Q], mt = st + (ot - st) * B, yt = tt + (dt - tt) * B, St = mt + (yt - mt) * R;
          g[w++] = St;
        }
      }
    }
  return e.makeTensorInfo([h, c, u, f], "float32", g);
}
const SK = {
  kernelName: Hl,
  backendName: "cpu",
  kernelFunc: IK
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function vK(n) {
  const { inputs: t, backend: e, attrs: s } = n, { images: r, dy: o } = t, { alignCorners: i } = s;
  ct([o, r], "resizeBilinearGrad");
  const a = lt(r.shape), [l, c, u, h] = r.shape, [, d, p] = o.shape, f = new Float32Array(l * c * u * h), m = [
    i && d > 1 ? c - 1 : c,
    i && p > 1 ? u - 1 : u
  ], g = [
    i && d > 1 ? d - 1 : d,
    i && p > 1 ? p - 1 : p
  ], y = m[0] / g[0], b = m[1] / g[1], w = e.data.get(o.dataId).values;
  let x = 0;
  for (let S = 0; S < l; S++) {
    const v = S * a[0];
    for (let T = 0; T < d; T++) {
      const N = T * y, $ = Math.floor(N), R = Math.min(Math.ceil(N), c - 1), F = v + $ * a[1], z = v + R * a[1], W = N - $, M = 1 - W;
      for (let X = 0; X < p; X++) {
        const _ = X * b, B = Math.floor(_), Z = Math.min(Math.ceil(_), u - 1), H = _ - B, j = 1 - H, J = F + B * a[2], q = F + Z * a[2], Q = z + B * a[2], st = z + Z * a[2], tt = M * j, ot = M * H, dt = W * j, mt = W * H;
        for (let yt = 0; yt < h; yt++) {
          const St = w[x++];
          f[J + yt] += St * tt, f[q + yt] += St * ot, f[Q + yt] += St * dt, f[st + yt] += St * mt;
        }
      }
    }
  }
  return e.makeTensorInfo([l, u, c, h], "float32", f);
}
const CK = {
  kernelName: Xh,
  backendName: "cpu",
  kernelFunc: vK
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function kK(n) {
  const { inputs: t, backend: e, attrs: s } = n, { images: r } = t, { alignCorners: o, halfPixelCenters: i, size: a } = s;
  ct(r, "resizeNearestNeighbor");
  const l = lt(r.shape), [c, u] = a, [h, d, p, f] = r.shape, m = e.data.get(r.dataId).values, g = new Float32Array(h * c * u * f), y = [
    o && c > 1 ? d - 1 : d,
    o && u > 1 ? p - 1 : p
  ], b = [
    o && c > 1 ? c - 1 : c,
    o && u > 1 ? u - 1 : u
  ], w = y[0] / b[0], x = y[1] / b[1];
  let S = 0;
  for (let v = 0; v < h; v++) {
    const T = v * l[0];
    for (let N = 0; N < c; N++) {
      const $ = i ? w * (N + 0.5) : w * N;
      let R = Math.min(d - 1, o ? Math.round($) : Math.floor($));
      i && (R = Math.max(0, R));
      const F = T + R * l[1];
      for (let z = 0; z < u; z++) {
        const W = i ? x * (z + 0.5) : x * z;
        let M = Math.min(p - 1, o ? Math.round(W) : Math.floor(W));
        i && (M = Math.max(0, M));
        const X = F + M * l[2];
        for (let _ = 0; _ < f; _++) {
          const B = m[X + _];
          g[S++] = B;
        }
      }
    }
  }
  return e.makeTensorInfo([h, c, u, f], r.dtype, g);
}
const TK = {
  kernelName: Bl,
  backendName: "cpu",
  kernelFunc: kK
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function NK(n) {
  const { inputs: t, backend: e, attrs: s } = n, { images: r, dy: o } = t, { alignCorners: i } = s;
  ct([o, r], "resizeNearestNeighborGrad");
  const a = lt(r.shape), l = lt(o.shape), [c, u, h, d] = r.shape, [, p, f] = o.shape, m = new Float32Array(c * u * h * d), g = e.data.get(o.dataId).values, y = [
    i && p > 1 ? u - 1 : u,
    i && f > 1 ? h - 1 : h
  ], b = [
    i && p > 1 ? p - 1 : p,
    i && f > 1 ? f - 1 : f
  ], w = y[0] / b[0], x = y[1] / b[1], S = 1 / w, v = 1 / x, T = Math.ceil(S) * 2 + 2, N = Math.ceil(v) * 2 + 2;
  for (let $ = 0; $ < c; $++) {
    const R = $ * a[0];
    for (let F = 0; F < u; F++) {
      const z = R + F * a[1], W = Math.floor(F * S), M = Math.floor(W - T / 2);
      for (let X = 0; X < h; X++) {
        const _ = z + X * a[2], B = Math.floor(X * v), Z = Math.floor(B - N / 2);
        for (let H = 0; H < d; H++) {
          let j = 0;
          for (let J = 0; J < T; J++) {
            const q = J + M;
            if (q < 0 || q >= p)
              continue;
            const Q = R + q * l[1], st = q * w, tt = Math.min(u - 1, i ? Math.round(st) : Math.floor(st));
            if (F === tt)
              for (let ot = 0; ot < N; ot++) {
                const dt = ot + Z;
                if (dt < 0 || dt >= f)
                  continue;
                const mt = Q + dt * l[2], yt = dt * x, St = Math.min(h - 1, i ? Math.round(yt) : Math.floor(yt));
                X === St && (j += g[mt + H]);
              }
          }
          m[_ + H] = j;
        }
      }
    }
  }
  return e.makeTensorInfo(r.shape, r.dtype, m);
}
const $K = {
  kernelName: Ph,
  backendName: "cpu",
  kernelFunc: NK
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function RK(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { dims: o } = s;
  ct(r, "reverse");
  const i = r.shape.length, a = vt(o, r.shape);
  if (i === 0)
    return ks({ inputs: { x: r }, backend: e });
  const l = new ue(r.shape, r.dtype), c = e.bufferSync(r);
  for (let u = 0; u < l.size; u++) {
    const h = l.indexToLoc(u), d = h.slice();
    a.forEach((p) => d[p] = r.shape[p] - 1 - d[p]), l.set(c.get(...d), ...h);
  }
  return e.makeTensorInfo(l.shape, l.dtype, l.values);
}
const EK = {
  kernelName: Ul,
  backendName: "cpu",
  kernelFunc: RK
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const LK = {
  kernelName: rd,
  backendName: "cpu",
  kernelFunc: ({ inputs: n, attrs: t, backend: e }) => {
    const { image: s } = n, { radians: r, fillValue: o, center: i } = t, a = e, l = jt(s.dtype, P(s.shape)), [c, u, h, d] = s.shape, [p, f] = ey(i, u, h), m = 255, g = Math.sin(r), y = Math.cos(r), b = a.data.get(s.dataId).values;
    for (let x = 0; x < c; x++) {
      const S = x * h * u * d;
      for (let v = 0; v < u; v++) {
        const T = v * (h * d);
        for (let N = 0; N < h; N++) {
          const $ = N * d;
          for (let R = 0; R < d; R++) {
            const F = [c, v, N, R], z = F[2], W = F[1];
            let M = (z - p) * y - (W - f) * g, X = (z - p) * g + (W - f) * y;
            M = Math.round(M + p), X = Math.round(X + f);
            let _ = o;
            if (typeof o != "number" && (R === 3 ? _ = m : _ = o[R]), M >= 0 && M < h && X >= 0 && X < u) {
              const Z = X * (h * d), H = M * d, j = S + Z + H + R;
              _ = b[j];
            }
            const B = S + T + $ + R;
            l[B] = _;
          }
        }
      }
    }
    return { dataId: a.write(l, s.shape, s.dtype), shape: s.shape, dtype: s.dtype };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const DK = At(Gi, (n) => {
  const t = Math.floor(n);
  return n - t < 0.5 ? Math.floor(n) : n - t > 0.5 ? Math.ceil(n) : t % 2 === 0 ? t : t + 1;
}), GK = {
  kernelName: Gi,
  backendName: "cpu",
  kernelFunc: DK
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function FK(n) {
  const { inputs: t, backend: e, attrs: s } = n, { indices: r, updates: o } = t, { shape: i } = s, { sliceRank: a, numUpdates: l, sliceSize: c, strides: u, outputSize: h } = Ui(o, r, i), d = !0, p = e.bufferSync(r), f = e.bufferSync(o), m = Da(p, f, i, h, c, l, a, u, 0, d);
  return e.makeTensorInfo(i, m.dtype, m.values);
}
const OK = {
  kernelName: _h,
  backendName: "cpu",
  kernelFunc: FK
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function AK(n, t) {
  let e = 0, s = n.length, r = 0;
  for (; e < s; )
    r = Math.floor((e + s) / 2), n[r] < t ? e = r + 1 : s = r;
  return s;
}
function zK(n, t) {
  let e = 0, s = n.length, r = 0;
  for (; e < s; )
    r = Math.floor((e + s) / 2), n[r] <= t ? e = r + 1 : s = r;
  return s;
}
function WK(n, t, e, s, r, o) {
  const i = Gt("int32", e * r);
  for (let a = 0; a < e; ++a) {
    const l = n.slice(a * s, (a + 1) * s), c = a * r;
    for (let u = 0; u < r; ++u)
      i[c + u] = o === "left" ? AK(l, t[u + c]) : zK(l, t[u + c]);
  }
  return i;
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function VK(n) {
  const { inputs: t, backend: e, attrs: s } = n, { sortedSequence: r, values: o } = t, { side: i } = s, a = e.data.get(r.dataId).values, l = e.data.get(o.dataId).values, c = WK(a, l, r.shape[0], r.shape[1], o.shape[1], i);
  return e.makeTensorInfo(o.shape, "int32", c);
}
const MK = {
  kernelName: Kh,
  backendName: "cpu",
  kernelFunc: VK
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function PK(n) {
  const { inputs: t, backend: e } = n, { condition: s, t: r, e: o } = t;
  ct([s, r, o], "select");
  const i = s.shape.length, a = e.data.get(s.dataId).values, l = e.data.get(r.dataId).values, c = e.data.get(o.dataId).values, u = He(r.dtype, o.dtype), h = ae(P(r.shape), u);
  let d = 0;
  const p = i === 0 || i > 1 || r.shape.length === 1 ? 1 : P(r.shape.slice(1));
  for (let f = 0; f < a.length; f++)
    for (let m = 0; m < p; m++)
      a[f] === 1 ? h[d++] = l[f] : h[d++] = c[f];
  return e.makeTensorInfo(r.shape, u, h);
}
const XK = {
  kernelName: Yl,
  backendName: "cpu",
  kernelFunc: PK
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const _K = tp, KK = ep, ZK = At(Oi, (n) => n >= 0 ? KK * n : _K * (Math.exp(n) - 1)), BK = {
  kernelName: Oi,
  backendName: "cpu",
  kernelFunc: ZK
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const HK = At(Wi, (n) => n < 0 ? -1 : n > 0 ? 1 : 0), UK = {
  kernelName: Wi,
  backendName: "cpu",
  kernelFunc: HK
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const YK = At(Ai, (n) => Math.sin(n)), jK = {
  kernelName: Ai,
  backendName: "cpu",
  kernelFunc: YK
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const JK = At(zi, (n) => Math.sinh(n)), QK = {
  kernelName: zi,
  backendName: "cpu",
  kernelFunc: JK
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const qK = 11920928955078125e-23, $x = Math.log(qK) + 2, tZ = At(Mi, (n) => {
  const t = n > -$x, e = n < $x, s = Math.exp(n);
  let r;
  return e ? r = s : t ? r = n : r = Math.log(1 + s), r;
}), eZ = {
  kernelName: Mi,
  backendName: "cpu",
  kernelFunc: tZ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function nZ(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { blockShape: o, paddings: i } = s;
  ct([r], "spaceToBatchND");
  const a = P(o), l = [[0, 0]];
  l.push(...i);
  for (let v = 1 + o.length; v < r.shape.length; ++v)
    l.push([0, 0]);
  const c = Gv.kernelFunc({
    inputs: { x: r },
    backend: e,
    attrs: { paddings: l, constantValue: 0 }
  }), u = kc(c.shape, o, a, !1), h = Tc(u.length, o.length, !1), d = Nc(c.shape, o, a, !1), m = Xt({ inputs: { x: c }, backend: e, attrs: { shape: u } }), b = rn({ inputs: { x: m }, backend: e, attrs: { perm: h } }), S = Xt({ inputs: { x: b }, backend: e, attrs: { shape: d } });
  return e.disposeIntermediateTensorInfo(c), e.disposeIntermediateTensorInfo(m), e.disposeIntermediateTensorInfo(b), S;
}
const sZ = {
  kernelName: Ql,
  backendName: "cpu",
  kernelFunc: nZ
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function rZ(n) {
  const { inputs: t, backend: e } = n, { indices: s, values: r, denseShape: o, defaultValue: i } = t;
  if (o.shape.length !== 1)
    throw new Error(`Dense shape must be a vector, saw:
        ${o.shape}`);
  if (s.shape.length !== 2)
    throw new Error(`Indices must be a matrix, saw:
        ${s.shape}`);
  if (r.shape.length !== 1)
    throw new Error(`Values must be a vector, saw:
        ${r.shape}`);
  if (i.shape.length !== 0)
    throw new Error(`Default value must be a scalar, saw:
        ${i.shape}`);
  const a = e.data.get(s.dataId).values, l = e.data.get(r.dataId).values, c = e.data.get(o.dataId).values, u = e.data.get(i.dataId).values[0], [h, d, p, f, m] = yM(a, s.shape, s.dtype, l, r.dtype, c, u);
  return [
    e.makeTensorInfo(d, s.dtype, h),
    e.makeTensorInfo([d[0]], r.dtype, p),
    e.makeTensorInfo([f.length], "bool", new Uint8Array(f.map((g) => Number(g)))),
    e.makeTensorInfo([m.length], s.dtype, new Int32Array(m))
  ];
}
const oZ = {
  kernelName: Zh,
  backendName: "cpu",
  kernelFunc: rZ
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function iZ(n) {
  const { inputs: t, backend: e } = n, { inputIndices: s, inputShape: r, newShape: o } = t;
  if (s.shape.length !== 2)
    throw new Error(`Input indices should be a matrix but received shape
        ${s.shape}`);
  if (r.shape.length !== 1)
    throw new Error(`Input shape should be a vector but received shape
        ${r.shape}`);
  if (o.shape.length !== 1)
    throw new Error(`Target shape should be a vector but received shape ${o.shape}`);
  const i = Array.from(e.data.get(r.dataId).values), a = e.data.get(s.dataId).values, l = Array.from(e.data.get(o.dataId).values), [c, u, h] = bM(a, s.shape, s.dtype, i, l);
  return [
    e.makeTensorInfo(u, s.dtype, c),
    e.makeTensorInfo([h.length], o.dtype, new Int32Array(h))
  ];
}
const aZ = {
  kernelName: Bh,
  backendName: "cpu",
  kernelFunc: iZ
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function lZ(n) {
  const { inputs: t, backend: e } = n, { data: s, indices: r, segmentIds: o } = t;
  if (s.shape.length < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (r.shape.length !== 1)
    throw new Error(`Indices should be a vector but received shape
          ${r.shape}`);
  if (o.shape.length !== 1)
    throw new Error(`Segment ids should be a vector but received shape
          ${o.shape}`);
  if (r.shape[0] !== o.shape[0])
    throw new Error("segmentIds and indices should have same size.");
  const i = e.data.get(s.dataId).values, a = e.data.get(r.dataId).values, l = e.data.get(o.dataId).values, [c, u] = gv(i, s.shape, s.dtype, a, l, !0);
  return e.makeTensorInfo(u, s.dtype, c);
}
const cZ = {
  kernelName: Hh,
  backendName: "cpu",
  kernelFunc: lZ
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function uZ(n) {
  const { inputs: t, backend: e } = n, { data: s, indices: r, segmentIds: o } = t;
  if (s.shape.length < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (r.shape.length !== 1)
    throw new Error(`Indices should be a vector but received shape
         ${r.shape}`);
  if (o.shape.length !== 1)
    throw new Error(`Segment ids should be a vector but received shape
         ${o.shape}`);
  if (r.shape[0] !== o.shape[0])
    throw new Error("segmentIds and indices should have same size.");
  const i = e.data.get(s.dataId).values, a = e.data.get(r.dataId).values, l = e.data.get(o.dataId).values, [c, u] = gv(i, s.shape, s.dtype, a, l);
  return e.makeTensorInfo(u, s.dtype, c);
}
const hZ = {
  kernelName: Uh,
  backendName: "cpu",
  kernelFunc: uZ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function dZ(n) {
  const { inputs: t, backend: e, attrs: s } = n, { sparseIndices: r, sparseValues: o, defaultValue: i } = t, { outputShape: a } = s, { sliceRank: l, numUpdates: c, sliceSize: u, strides: h, outputSize: d } = Ui(o, r, a), p = !1, f = e.bufferSync(r);
  let m;
  switch (o.dtype) {
    case "bool": {
      const g = e.bufferSync(o), y = Boolean(e.data.get(i.dataId).values[0]);
      m = Da(f, g, a, d, u, c, l, h, y, p);
      break;
    }
    case "float32": {
      const g = e.bufferSync(o), y = e.data.get(i.dataId).values[0];
      m = Da(f, g, a, d, u, c, l, h, y, p);
      break;
    }
    case "int32": {
      const g = e.bufferSync(o), y = e.data.get(i.dataId).values[0];
      m = Da(f, g, a, d, u, c, l, h, y, p);
      break;
    }
    case "string": {
      const g = e.bufferSync(o), y = Ws(e.data.get(i.dataId).values[0]);
      m = Da(f, g, a, d, u, c, l, h, y, p);
      break;
    }
    default:
      throw new Error(`Unsupported type ${o.dtype}`);
  }
  return e.makeTensorInfo(a, m.dtype, m.values);
}
const pZ = {
  kernelName: Yh,
  backendName: "cpu",
  kernelFunc: dZ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fZ(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { numOrSizeSplits: o, axis: i } = s, a = vt(i, r.shape)[0], l = gy(r, o, a), c = new Array(r.shape.length).fill(0), u = r.shape.slice();
  return l.map((h) => {
    const d = [...u];
    d[a] = h;
    const p = io({ inputs: { x: r }, backend: e, attrs: { begin: c, size: d } });
    return c[a] += h, p;
  });
}
const mZ = {
  kernelName: ql,
  backendName: "cpu",
  kernelFunc: fZ
};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const gZ = {
  kernelName: jh,
  backendName: "cpu",
  kernelFunc: ({ inputs: n, backend: t }) => {
    const { x: e } = n, s = t;
    ct(e, "square");
    const r = s.data.get(e.dataId).values, o = new Float32Array(r.length);
    for (let a = 0; a < r.length; ++a) {
      const l = r[a];
      o[a] = l * l;
    }
    return { dataId: s.write(o, e.shape, e.dtype), shape: e.shape, dtype: e.dtype };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const yZ = At(Hi, (n, t) => {
  const e = t;
  return isNaN(n) ? NaN : n > 0 ? 1 : e.alpha;
}), bZ = {
  kernelName: Hi,
  backendName: "cpu",
  kernelFunc: yZ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function xZ(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { begin: o, end: i, strides: a, beginMask: l, endMask: c, ellipsisMask: u, newAxisMask: h, shrinkAxisMask: d } = s;
  ct(r, "stridedSlice");
  const { finalShapeSparse: p, finalShape: f, isIdentity: m, sliceDim0: g, isSimpleSlice: y, begin: b, end: w, strides: x } = Zm(r.shape, o, i, a, l, c, u, h, d);
  let S;
  if (m)
    S = Xt({ inputs: { x: r }, backend: e, attrs: { shape: f } });
  else if (g || y) {
    C(r.shape.length >= 1, () => `Input must have rank at least 1, got: ${r.shape.length}`);
    const v = Km(b, w, x), T = io({ inputs: { x: r }, backend: e, attrs: { begin: b, size: v } });
    S = Xt({ inputs: { x: T }, backend: e, attrs: { shape: f } }), e.disposeIntermediateTensorInfo(T);
  } else {
    const v = e.bufferSync(r), T = CM(p, v, x, b);
    S = e.makeTensorInfo(f, T.dtype, T.values);
  }
  return S;
}
const wZ = {
  kernelName: Jh,
  backendName: "cpu",
  kernelFunc: xZ
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function IZ(n) {
  const { inputs: t, backend: e, attrs: s } = n, { separator: r, nGramWidths: o, leftPad: i, rightPad: a, padWidth: l, preserveShortSequences: c } = s, { data: u, dataSplits: h } = t, d = e.data.get(u.dataId).values, p = e.data.get(h.dataId).values, [f, m] = TM(d, p, r, o, i, a, l, c);
  return [
    e.makeTensorInfo([f.length], "string", f),
    e.makeTensorInfo(h.shape, "int32", m)
  ];
}
const SZ = {
  kernelName: Qh,
  backendName: "cpu",
  kernelFunc: IZ
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function vZ(n) {
  const { inputs: t, backend: e, attrs: s } = n, { skipEmpty: r } = s, { input: o, delimiter: i } = t;
  if (o.dtype !== "string")
    throw new Error("Input must be of datatype string");
  if (o.shape.length !== 1)
    throw new Error(`Input must be a vector, got shape: ${o.shape}`);
  if (i.shape.length !== 0)
    throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);
  const a = e.data.get(o.dataId).values, l = e.data.get(i.dataId).values[0], [c, u, h] = $M(a, l, r), d = u.length;
  return [
    e.makeTensorInfo([d, 2], "int32", c),
    e.makeTensorInfo([d], "string", u),
    e.makeTensorInfo([2], "int32", new Int32Array(h))
  ];
}
const CZ = {
  kernelName: qh,
  backendName: "cpu",
  kernelFunc: vZ
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function kZ(n) {
  const { inputs: t, backend: e, attrs: s } = n, { numBuckets: r } = s, { input: o } = t;
  if (o.dtype !== "string")
    throw new Error("Input must be of datatype string");
  if (r <= 0)
    throw new Error("Number of buckets must be at least 1");
  const i = e.data.get(o.dataId).values, a = RM(i, r);
  return e.makeTensorInfo(o.shape, "int32", a);
}
const TZ = {
  kernelName: td,
  backendName: "cpu",
  kernelFunc: kZ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const NZ = At(Ki, (n) => Math.tan(n)), $Z = {
  kernelName: Ki,
  backendName: "cpu",
  kernelFunc: NZ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const RZ = At(Zi, (n) => Math.tanh(n)), EZ = {
  kernelName: Zi,
  backendName: "cpu",
  kernelFunc: RZ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function LZ(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { reps: o } = s;
  ct(r, "tile");
  const i = GM(e.bufferSync(r), o);
  return e.makeTensorInfo(i.shape, i.dtype, i.values);
}
const DZ = {
  kernelName: Bi,
  backendName: "cpu",
  kernelFunc: LZ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function GZ(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { k: o, sorted: i } = s;
  ct(r, "topk");
  const a = e.data.get(r.dataId).values, [l, c] = FM(a, r.shape, r.dtype, o, i);
  return [
    e.makeTensorInfo(l.shape, l.dtype, l.values),
    e.makeTensorInfo(c.shape, c.dtype, c.values)
  ];
}
const FZ = {
  kernelName: ed,
  backendName: "cpu",
  kernelFunc: GZ
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function OZ(n) {
  const { inputs: t, attrs: e, backend: s } = n, { image: r, transforms: o } = t, { interpolation: i, fillMode: a, fillValue: l, outputShape: c } = e, [u, h, d, p] = r.shape, [f, m] = c != null ? c : [h, d], g = [u, f, m, p], y = lt(r.shape), b = y[0], w = y[1], x = y[2], S = lt(g), v = S[0], T = S[1], N = S[2], $ = jt(r.dtype, P(g));
  $.fill(l);
  const R = s.data.get(r.dataId).values, F = s.data.get(o.dataId).values;
  for (let W = 0; W < u; ++W) {
    const M = o.shape[0] === 1 ? F : F.subarray(W * 8, W * 8 + 8);
    for (let X = 0; X < f; ++X)
      for (let _ = 0; _ < m; ++_)
        for (let B = 0; B < p; ++B) {
          let Z;
          const H = M[6] * _ + M[7] * X + 1;
          if (H === 0)
            continue;
          const j = (M[0] * _ + M[1] * X + M[2]) / H, J = (M[3] * _ + M[4] * X + M[5]) / H, q = Rx(j, d, a), Q = Rx(J, h, a);
          switch (i) {
            case "nearest":
              Z = PZ(R, h, d, b, w, x, W, Q, q, B, l);
              break;
            case "bilinear":
              Z = XZ(R, h, d, b, w, x, W, Q, q, B, l);
              break;
            default:
              throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${i}`);
          }
          const st = W * v + X * T + _ * N + B;
          $[st] = Z;
        }
    return s.makeTensorInfo(g, r.dtype, $);
  }
  return { dataId: s.write($, g, r.dtype), shape: r.shape, dtype: r.dtype };
}
const AZ = {
  kernelName: nd,
  backendName: "cpu",
  kernelFunc: OZ
};
function Rx(n, t, e) {
  switch (e) {
    case "reflect":
      return zZ(n, t);
    case "wrap":
      return WZ(n, t);
    case "nearest":
      return MZ(n, t);
    case "constant":
    default:
      return VZ(n);
  }
}
function zZ(n, t) {
  let e = n;
  if (e < 0)
    if (t <= 1)
      e = 0;
    else {
      const s = 2 * t;
      e < s && (e = s * Math.trunc(-e / s) + e), e = e < -t ? e + s : -e - 1;
    }
  else if (e > t - 1)
    if (t <= 1)
      e = 0;
    else {
      const s = 2 * t;
      e -= s * Math.trunc(e / s), e >= t && (e = s - e - 1);
    }
  return fr(0, e, t - 1);
}
function WZ(n, t) {
  let e = n;
  if (e < 0)
    if (t <= 1)
      e = 0;
    else {
      const s = t - 1;
      e += t * (Math.trunc(-e / s) + 1);
    }
  else if (e > t - 1)
    if (t <= 1)
      e = 0;
    else {
      const s = t - 1;
      e -= t * Math.trunc(e / s);
    }
  return fr(0, e, t - 1);
}
function VZ(n, t) {
  return n;
}
function MZ(n, t) {
  return fr(0, n, t - 1);
}
function Fa(n, t, e, s, r, o, i, a, l, c, u) {
  const h = i * s + a * r + l * o + c;
  return 0 <= a && a < t && 0 <= l && l < e ? n[h] : u;
}
function PZ(n, t, e, s, r, o, i, a, l, c, u) {
  const h = Math.round(a), d = Math.round(l);
  return Fa(n, t, e, s, r, o, i, h, d, c, u);
}
function XZ(n, t, e, s, r, o, i, a, l, c, u) {
  const h = Math.floor(a), d = Math.floor(l), p = h + 1, f = d + 1, m = (f - l) * Fa(n, t, e, s, r, o, i, h, d, c, u) + (l - d) * Fa(n, t, e, s, r, o, i, h, f, c, u), g = (f - l) * Fa(n, t, e, s, r, o, i, p, d, c, u) + (l - d) * Fa(n, t, e, s, r, o, i, p, f, c, u);
  return (p - a) * m + (a - h) * g;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _Z(n) {
  const { inputs: t, attrs: e, backend: s } = n, { axis: r } = e, { x: o } = t;
  ct(o, "unique");
  const i = s.data.get(o.dataId).values, { outputValues: a, outputShape: l, indices: c } = OM(i, r, o.shape, o.dtype);
  return [
    s.makeTensorInfo(l, o.dtype, a),
    s.makeTensorInfo([c.length], "int32", c)
  ];
}
const KZ = {
  kernelName: sd,
  backendName: "cpu",
  kernelFunc: _Z
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ZZ(n) {
  const { inputs: t, backend: e, attrs: s } = n, { value: r } = t;
  let { axis: o } = s;
  o < 0 && (o += r.shape.length);
  const i = r.shape.length, a = r.shape[o], l = new Array(i - 1);
  let c = 0;
  for (let p = 0; p < i; p++)
    p !== o && (l[c++] = r.shape[p]);
  const u = new Array(i).fill(0), h = r.shape.slice();
  h[o] = 1;
  const d = new Array(a);
  for (let p = 0; p < d.length; p++) {
    u[o] = p;
    const f = io({ inputs: { x: r }, backend: e, attrs: { begin: u, size: h } });
    d[p] = Xt({ inputs: { x: f }, backend: e, attrs: { shape: l } }), e.disposeIntermediateTensorInfo(f);
  }
  return d;
}
const BZ = {
  kernelName: ec,
  backendName: "cpu",
  kernelFunc: ZZ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function HZ(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r, segmentIds: o } = t, { numSegments: i } = s;
  ct(r, "unsortedSegmentSum");
  const a = r.shape.length, l = o.shape.length, c = [], u = [], h = a - l;
  let d = o;
  for (let f = 0; f < h; ++f) {
    const m = Bu({ inputs: { input: d }, backend: e, attrs: { dim: f + 1 } });
    d = m, u.push(m);
  }
  for (let f = 0; f < i; ++f) {
    const m = Ns(f, "int32"), g = e.makeTensorInfo([], "int32", m), y = hv({ inputs: { a: g, b: d }, backend: e }), b = Sr({ inputs: { x: y }, backend: e, attrs: { dtype: "float32" } }), w = Cp({ inputs: { a: b, b: r }, backend: e }), x = Wc({ inputs: { x: w }, backend: e, attrs: { axis: 0, keepDims: !1 } });
    c.push(x), u.push(g), u.push(y), u.push(b), u.push(w), u.push(x);
  }
  const p = Dv({ inputs: c, backend: e, attrs: { axis: 0 } });
  return u.forEach((f) => e.disposeIntermediateTensorInfo(f)), p;
}
const UZ = {
  kernelName: nc,
  backendName: "cpu",
  kernelFunc: HZ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const YZ = [
  BM,
  YW,
  UM,
  jM,
  sV,
  QM,
  tP,
  nP,
  rP,
  iP,
  lP,
  uP,
  dP,
  mP,
  yP,
  wP,
  SP,
  CP,
  TP,
  KM,
  $P,
  EP,
  DP,
  FP,
  tV,
  aV,
  AP,
  jW,
  WP,
  MP,
  PP,
  _P,
  ZP,
  HP,
  YP,
  JP,
  qP,
  eX,
  sX,
  oX,
  aX,
  cX,
  hX,
  dX,
  fX,
  gX,
  bX,
  xX,
  wX,
  IX,
  CX,
  zM,
  TX,
  uV,
  FX,
  dV,
  OX,
  mV,
  PX,
  XX,
  KX,
  bV,
  HX,
  YX,
  JX,
  qX,
  e_,
  vV,
  TV,
  JW,
  s_,
  VP,
  o_,
  a_,
  c_,
  WM,
  RV,
  DV,
  h_,
  AV,
  p_,
  g_,
  b_,
  I_,
  v_,
  k_,
  T_,
  MV,
  $_,
  E_,
  D_,
  F_,
  A_,
  W_,
  M_,
  _V,
  X_,
  Z_,
  U_,
  ZV,
  UV,
  J_,
  tK,
  sK,
  JV,
  oK,
  aK,
  lK,
  Gv,
  dK,
  MM,
  eM,
  fK,
  gK,
  bK,
  QW,
  am,
  wK,
  PM,
  XM,
  _M,
  SK,
  CK,
  TK,
  $K,
  EK,
  LK,
  GK,
  pM,
  OK,
  MK,
  XK,
  BK,
  fM,
  UK,
  jK,
  QK,
  gM,
  B_,
  eZ,
  sZ,
  oZ,
  aZ,
  cZ,
  hZ,
  pZ,
  mZ,
  wM,
  gZ,
  vM,
  bZ,
  wZ,
  SZ,
  CZ,
  TZ,
  DM,
  SX,
  $Z,
  EZ,
  DZ,
  FZ,
  AZ,
  QV,
  KZ,
  BZ,
  UZ,
  iK
];
for (const n of YZ)
  on(n);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Wr = {}, nu = {
  alpha: !1,
  antialias: !1,
  premultipliedAlpha: !1,
  preserveDrawingBuffer: !1,
  depth: !1,
  stencil: !1,
  failIfMajorPerformanceCaveat: !0
};
function jZ(n, t) {
  Wr[n] = t;
}
function ls(n, t) {
  if (!(n in Wr) || t != null) {
    const s = QZ(n, t);
    if (s !== null)
      Wr[n] = s;
    else
      return console.log("Could not get context for WebGL version", n), null;
  }
  const e = Wr[n];
  return e == null || e.isContextLost() ? (delete Wr[n], ls(n)) : (e.disable(e.DEPTH_TEST), e.disable(e.STENCIL_TEST), e.disable(e.BLEND), e.disable(e.DITHER), e.disable(e.POLYGON_OFFSET_FILL), e.disable(e.SAMPLE_COVERAGE), e.enable(e.SCISSOR_TEST), e.enable(e.CULL_FACE), e.cullFace(e.BACK), Wr[n]);
}
function JZ(n) {
  if (typeof OffscreenCanvas < "u" && n === 2)
    return new OffscreenCanvas(300, 150);
  if (typeof document < "u")
    return document.createElement("canvas");
  throw new Error("Cannot create a canvas in this context");
}
function QZ(n, t) {
  if (n !== 1 && n !== 2)
    throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");
  const e = t == null ? JZ(n) : t;
  return e.addEventListener("webglcontextlost", (s) => {
    s.preventDefault(), delete Wr[n];
  }, !1), V().getBool("SOFTWARE_WEBGL_ENABLED") && (nu.failIfMajorPerformanceCaveat = !1), n === 1 ? e.getContext("webgl", nu) || e.getContext("experimental-webgl", nu) : e.getContext("webgl2", nu);
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var qa;
(function(n) {
  n[n.DENSE = 0] = "DENSE", n[n.SHARED_BATCH = 1] = "SHARED_BATCH";
})(qa || (qa = {}));
var Rn;
(function(n) {
  n[n.RENDER = 0] = "RENDER", n[n.UPLOAD = 1] = "UPLOAD", n[n.PIXELS = 2] = "PIXELS", n[n.DOWNLOAD = 3] = "DOWNLOAD";
})(Rn || (Rn = {}));
var Ge;
(function(n) {
  n[n.UNPACKED_FLOAT16 = 0] = "UNPACKED_FLOAT16", n[n.UNPACKED_FLOAT32 = 1] = "UNPACKED_FLOAT32", n[n.PACKED_4X1_UNSIGNED_BYTE = 2] = "PACKED_4X1_UNSIGNED_BYTE", n[n.PACKED_2X2_FLOAT32 = 3] = "PACKED_2X2_FLOAT32", n[n.PACKED_2X2_FLOAT16 = 4] = "PACKED_2X2_FLOAT16";
})(Ge || (Ge = {}));
function Vc(n, t) {
  return [t, n];
}
function qZ(n, t) {
  return n * t;
}
function su(n) {
  const t = P(n), e = Math.ceil(t / 4);
  return bu(e);
}
function pa(n, t) {
  return [
    Math.max(1, Math.ceil(t / 2)),
    Math.max(1, Math.ceil(n / 2))
  ];
}
function tB(n, t) {
  const [e, s] = pa(n, t);
  return e * s * 4;
}
function pb(n, t) {
  const e = n;
  let s, r, o, i, a, l, c, u, h, d;
  return V().getNumber("WEBGL_VERSION") === 2 ? (s = e.R32F, r = e.R16F, o = e.RGBA16F, i = e.RGBA32F, a = e.RED, c = 4, u = 1, h = e.HALF_FLOAT, d = e.FLOAT, l = e.RGBA8) : (s = n.RGBA, r = n.RGBA, o = n.RGBA, i = e.RGBA, a = n.RGBA, c = 4, u = 4, h = t != null ? t.HALF_FLOAT_OES : null, d = n.FLOAT, l = n.RGBA), {
    internalFormatFloat: s,
    internalFormatHalfFloat: r,
    internalFormatPackedHalfFloat: o,
    internalFormatPackedFloat: i,
    textureFormatFloat: a,
    downloadTextureFormat: l,
    downloadUnpackNumChannels: c,
    defaultNumChannels: u,
    textureTypeHalfFloat: h,
    textureTypeFloat: d
  };
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ut(n, t) {
  const e = t();
  return V().getBool("DEBUG") && eB(n), e;
}
function eB(n) {
  const t = n.getError();
  if (t !== n.NO_ERROR)
    throw new Error("WebGL Error: " + oB(n, t));
}
const nB = 596e-10, sB = 65504;
function rB(n) {
  return !!(V().getBool("WEBGL_RENDER_FLOAT32_ENABLED") || n === 0 || nB < Math.abs(n) && Math.abs(n) < sB);
}
function oB(n, t) {
  switch (t) {
    case n.NO_ERROR:
      return "NO_ERROR";
    case n.INVALID_ENUM:
      return "INVALID_ENUM";
    case n.INVALID_VALUE:
      return "INVALID_VALUE";
    case n.INVALID_OPERATION:
      return "INVALID_OPERATION";
    case n.INVALID_FRAMEBUFFER_OPERATION:
      return "INVALID_FRAMEBUFFER_OPERATION";
    case n.OUT_OF_MEMORY:
      return "OUT_OF_MEMORY";
    case n.CONTEXT_LOST_WEBGL:
      return "CONTEXT_LOST_WEBGL";
    default:
      return `Unknown error code ${t}`;
  }
}
function ru(n, t) {
  return qs(n, () => n.getExtension(t), 'Extension "' + t + '" not supported on this browser.');
}
function iB(n, t) {
  const e = qs(n, () => n.createShader(n.VERTEX_SHADER), "Unable to create vertex WebGLShader.");
  if (ut(n, () => n.shaderSource(e, t)), ut(n, () => n.compileShader(e)), n.getShaderParameter(e, n.COMPILE_STATUS) === !1)
    throw console.log(n.getShaderInfoLog(e)), new Error("Failed to compile vertex shader.");
  return e;
}
function aB(n, t) {
  const e = qs(n, () => n.createShader(n.FRAGMENT_SHADER), "Unable to create fragment WebGLShader.");
  if (ut(n, () => n.shaderSource(e, t)), ut(n, () => n.compileShader(e)), V().get("ENGINE_COMPILE_ONLY"))
    return e;
  if (n.getShaderParameter(e, n.COMPILE_STATUS) === !1)
    throw Fv(t, n.getShaderInfoLog(e)), new Error("Failed to compile fragment shader.");
  return e;
}
const lB = /ERROR: [0-9]+:([0-9]+):/g;
function Fv(n, t) {
  const e = lB.exec(t);
  if (e == null) {
    console.log(`Couldn't parse line number in error: ${t}`), console.log(n);
    return;
  }
  const s = +e[1], r = n.split(`
`), o = r.length.toString().length + 2, i = r.map((h, d) => Kr((d + 1).toString(), o) + h);
  let a = 0;
  for (let h = 0; h < i.length; h++)
    a = Math.max(i[h].length, a);
  const l = i.slice(0, s - 1), c = i.slice(s - 1, s), u = i.slice(s);
  console.log(l.join(`
`)), console.log(t.split(`
`)[0]), console.log(`%c ${Kr(c[0], a)}`, "border:1px solid red; background-color:#e3d2d2; color:#a61717"), console.log(u.join(`
`));
}
function cB(n) {
  return qs(n, () => n.createProgram(), "Unable to create WebGLProgram.");
}
function uB(n, t) {
  if (ut(n, () => n.linkProgram(t)), !V().get("ENGINE_COMPILE_ONLY") && n.getProgramParameter(t, n.LINK_STATUS) === !1)
    throw console.log(n.getProgramInfoLog(t)), new Error("Failed to link vertex and fragment shaders.");
}
function Zp(n, t) {
  if (ut(n, () => n.validateProgram(t)), n.getProgramParameter(t, n.VALIDATE_STATUS) === !1)
    throw console.log(n.getProgramInfoLog(t)), new Error("Shader program validation failed.");
}
function hB(n, t) {
  const e = qs(n, () => n.createBuffer(), "Unable to create WebGLBuffer");
  return ut(n, () => n.bindBuffer(n.ARRAY_BUFFER, e)), ut(n, () => n.bufferData(n.ARRAY_BUFFER, t, n.STATIC_DRAW)), e;
}
function dB(n, t) {
  const e = qs(n, () => n.createBuffer(), "Unable to create WebGLBuffer");
  return ut(n, () => n.bindBuffer(n.ELEMENT_ARRAY_BUFFER, e)), ut(n, () => n.bufferData(n.ELEMENT_ARRAY_BUFFER, t, n.STATIC_DRAW)), e;
}
function pB(n) {
  return qs(n, () => n.createTexture(), "Unable to create WebGLTexture.");
}
function fB(n, t) {
  const e = V().getNumber("WEBGL_MAX_TEXTURE_SIZE");
  if (n <= 0 || t <= 0) {
    const s = `[${n}x${t}]`;
    throw new Error("Requested texture size " + s + " is invalid.");
  }
  if (n > e || t > e) {
    const s = `[${n}x${t}]`, r = `[${e}x${e}]`;
    throw new Error("Requested texture size " + s + " greater than WebGL maximum on this browser / GPU " + r + ".");
  }
}
function mB(n) {
  return qs(n, () => n.createFramebuffer(), "Unable to create WebGLFramebuffer.");
}
function Ex(n, t, e, s, r, o, i) {
  const a = n.getAttribLocation(t, e);
  return a === -1 ? !1 : (ut(n, () => n.bindBuffer(n.ARRAY_BUFFER, s)), ut(n, () => n.vertexAttribPointer(a, r, n.FLOAT, !1, o, i)), ut(n, () => n.enableVertexAttribArray(a)), !0);
}
function gB(n, t, e) {
  IB(n, e), ut(n, () => n.activeTexture(n.TEXTURE0 + e)), ut(n, () => n.bindTexture(n.TEXTURE_2D, t));
}
function yB(n, t, e) {
  return qs(n, () => n.getUniformLocation(t, e), 'uniform "' + e + '" not present in program.');
}
function bB(n, t, e) {
  return n.getUniformLocation(t, e);
}
function xB(n, t, e, s) {
  ut(n, () => gB(n, t, s)), ut(n, () => n.uniform1i(e, s));
}
function Bp(n, t, e) {
  ut(n, () => n.bindFramebuffer(n.FRAMEBUFFER, e)), ut(n, () => n.framebufferTexture2D(n.FRAMEBUFFER, n.COLOR_ATTACHMENT0, n.TEXTURE_2D, t, 0));
}
function Lx(n, t) {
  ut(n, () => n.bindFramebuffer(n.FRAMEBUFFER, t)), ut(n, () => n.framebufferTexture2D(n.FRAMEBUFFER, n.COLOR_ATTACHMENT0, n.TEXTURE_2D, null, 0));
}
function ou(n) {
  const t = n.checkFramebufferStatus(n.FRAMEBUFFER);
  if (t !== n.FRAMEBUFFER_COMPLETE)
    throw new Error("Error binding framebuffer: " + wB(n, t));
}
function wB(n, t) {
  switch (t) {
    case n.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
      return "FRAMEBUFFER_INCOMPLETE_ATTACHMENT";
    case n.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
      return "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";
    case n.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
      return "FRAMEBUFFER_INCOMPLETE_DIMENSIONS";
    case n.FRAMEBUFFER_UNSUPPORTED:
      return "FRAMEBUFFER_UNSUPPORTED";
    default:
      return `unknown error ${t}`;
  }
}
function qs(n, t, e) {
  const s = ut(n, () => t());
  if (s == null)
    throw new Error(e);
  return s;
}
function IB(n, t) {
  const e = n.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1, s = t + n.TEXTURE0;
  if (s < n.TEXTURE0 || s > e) {
    const r = `[gl.TEXTURE0, gl.TEXTURE${e}]`;
    throw new Error(`textureUnit must be in ${r}.`);
  }
}
function Yo(n, t = 2) {
  return P(n.slice(0, n.length - t));
}
function jo(n) {
  if (n.length === 0)
    throw Error("Cannot get rows and columns of an empty shape array.");
  return [
    n.length > 1 ? n[n.length - 2] : 1,
    n[n.length - 1]
  ];
}
function Hp(n) {
  let t = [1, 1, 1];
  return n.length === 0 || n.length === 1 && n[0] === 1 || (t = [Yo(n), ...jo(n)]), t;
}
function SB(n, t = !1) {
  let e = V().getNumber("WEBGL_MAX_TEXTURE_SIZE"), s = V().getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");
  s === 1 / 0 && V().getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE") && (s = e / 2), t && (e = e * 2, s = s * 2, n = n.map((a, l) => l >= n.length - 2 ? eh(n[l]) : n[l]), n.length === 1 && (n = [2, n[0]])), n.length !== 2 && (n = Bs(n).newShape);
  let r = P(n), o = null;
  n.length <= 1 && r <= e ? o = [1, r] : n.length === 2 && n[0] <= e && n[1] <= e ? o = n : n.length === 3 && n[0] * n[1] <= e && n[2] <= e ? o = [n[0] * n[1], n[2]] : n.length === 3 && n[0] <= e && n[1] * n[2] <= e ? o = [n[0], n[1] * n[2]] : n.length === 4 && n[0] * n[1] * n[2] <= e && n[3] <= e ? o = [n[0] * n[1] * n[2], n[3]] : n.length === 4 && n[0] <= e && n[1] * n[2] * n[3] <= e && (o = [n[0], n[1] * n[2] * n[3]]);
  const i = o != null && Math.max(...o) > s && Math.min(...o) <= (t ? 2 : 1) && Math.min(...o) > 0;
  if (o == null || i)
    if (t) {
      const a = Yo(n);
      let l = 2, c = 2;
      n.length && ([l, c] = jo(n)), r = a * (l / 2) * (c / 2), o = bu(r).map((u) => u * 2);
    } else
      o = bu(r);
  return o;
}
function iu(n) {
  return n % 2 === 0;
}
function Uu(n, t) {
  if (n = n.slice(-2), t = t.slice(-2), Nt(n, t) || !n.length || !t.length || n[0] === 0 || n[1] === 0 || t[0] === 0 || t[1] === 0)
    return !0;
  if (n.length !== t.length) {
    const e = n.slice(-1)[0], s = t.slice(-1)[0];
    if (e === s || iu(e) && iu(s) && (n[0] === 1 || t[0] === 1))
      return !0;
  }
  return n[1] === t[1] && iu(n[0]) && iu(t[0]);
}
let Up, Yp;
function vB(n) {
  if (Up == null) {
    const t = ls(n);
    Up = t.getParameter(t.MAX_TEXTURE_SIZE);
  }
  return Up;
}
function CB(n) {
  if (Yp == null) {
    const t = ls(n);
    Yp = t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS);
  }
  return Math.min(16, Yp);
}
function kB(n) {
  if (n === 0)
    return 0;
  let t;
  const e = ls(n);
  return Zn(e, "EXT_disjoint_timer_query_webgl2") && n === 2 ? t = 2 : Zn(e, "EXT_disjoint_timer_query") ? t = 1 : t = 0, t;
}
function Zn(n, t) {
  return n.getExtension(t) != null;
}
function Dx(n) {
  try {
    if (ls(n) != null)
      return !0;
  } catch (t) {
    return console.log("Error when getting WebGL context: ", t), !1;
  }
  return !1;
}
function TB(n) {
  if (n === 0)
    return !1;
  const t = ls(n);
  if (n === 1) {
    if (!Zn(t, "OES_texture_float"))
      return !1;
  } else if (!Zn(t, "EXT_color_buffer_float"))
    return !1;
  return cm(t);
}
function NB(n) {
  if (n === 0)
    return !1;
  const t = ls(n);
  if (n === 1) {
    if (!Zn(t, "OES_texture_float") || !Zn(t, "WEBGL_color_buffer_float"))
      return !1;
  } else {
    if (Zn(t, "EXT_color_buffer_float"))
      return cm(t);
    const s = "EXT_color_buffer_half_float";
    if (Zn(t, s)) {
      const r = t.getExtension(s);
      return $B(t, r);
    }
    return !1;
  }
  return cm(t);
}
function cm(n) {
  const t = pb(n), e = n.createTexture();
  n.bindTexture(n.TEXTURE_2D, e);
  const s = 1, r = 1;
  n.texImage2D(n.TEXTURE_2D, 0, t.internalFormatFloat, s, r, 0, t.textureFormatFloat, t.textureTypeFloat, null);
  const o = n.createFramebuffer();
  n.bindFramebuffer(n.FRAMEBUFFER, o), n.framebufferTexture2D(n.FRAMEBUFFER, n.COLOR_ATTACHMENT0, n.TEXTURE_2D, e, 0);
  const i = n.checkFramebufferStatus(n.FRAMEBUFFER) === n.FRAMEBUFFER_COMPLETE;
  return n.bindTexture(n.TEXTURE_2D, null), n.bindFramebuffer(n.FRAMEBUFFER, null), n.deleteTexture(e), n.deleteFramebuffer(o), i;
}
function $B(n, t) {
  const e = pb(n, t), s = n.createTexture();
  n.bindTexture(n.TEXTURE_2D, s);
  const r = 1, o = 1;
  n.texImage2D(n.TEXTURE_2D, 0, e.internalFormatHalfFloat, r, o, 0, e.textureFormatFloat, e.textureTypeHalfFloat, null);
  const i = n.createFramebuffer();
  n.bindFramebuffer(n.FRAMEBUFFER, i), n.framebufferTexture2D(n.FRAMEBUFFER, n.COLOR_ATTACHMENT0, n.TEXTURE_2D, s, 0);
  const a = n.checkFramebufferStatus(n.FRAMEBUFFER) === n.FRAMEBUFFER_COMPLETE;
  return n.bindTexture(n.TEXTURE_2D, null), n.bindFramebuffer(n.FRAMEBUFFER, null), n.deleteTexture(s), n.deleteFramebuffer(i), a;
}
function RB(n) {
  return n !== 2 ? !1 : ls(n).fenceSync != null;
}
function Mc(n, t) {
  Array.isArray(n) || (n = [n]), n.forEach((e) => {
    e != null && C(e.dtype !== "complex64", () => `${t} does not support complex64 tensors in the WebGL backend.`);
  });
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const pt = V();
pt.registerFlag("HAS_WEBGL", () => pt.getNumber("WEBGL_VERSION") > 0);
pt.registerFlag("WEBGL_VERSION", () => Dx(2) ? 2 : Dx(1) ? 1 : 0);
pt.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS", () => !1);
pt.registerFlag("WEBGL_BUFFER_SUPPORTED", () => pt.get("WEBGL_VERSION") === 2);
pt.registerFlag("WEBGL_CPU_FORWARD", () => !0);
pt.registerFlag("WEBGL_FORCE_F16_TEXTURES", () => !1);
pt.registerFlag("WEBGL_PACK", () => pt.getBool("HAS_WEBGL"));
pt.registerFlag("WEBGL_PACK_NORMALIZATION", () => pt.getBool("WEBGL_PACK"));
pt.registerFlag("WEBGL_PACK_CLIP", () => pt.getBool("WEBGL_PACK"));
pt.registerFlag("WEBGL_PACK_DEPTHWISECONV", () => pt.getBool("WEBGL_PACK"));
pt.registerFlag("WEBGL_PACK_BINARY_OPERATIONS", () => pt.getBool("WEBGL_PACK"));
pt.registerFlag("WEBGL_PACK_UNARY_OPERATIONS", () => pt.getBool("WEBGL_PACK"));
pt.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS", () => pt.getBool("WEBGL_PACK"));
pt.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS", () => pt.getBool("WEBGL_PACK"));
pt.registerFlag("WEBGL_PACK_REDUCE", () => pt.getBool("WEBGL_PACK"));
pt.registerFlag("WEBGL_LAZILY_UNPACK", () => pt.getBool("WEBGL_PACK"));
pt.registerFlag("WEBGL_CONV_IM2COL", () => pt.getBool("WEBGL_PACK"));
pt.registerFlag("WEBGL_MAX_TEXTURE_SIZE", () => vB(pt.getNumber("WEBGL_VERSION")));
pt.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER", () => CB(pt.getNumber("WEBGL_VERSION")));
pt.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION", () => {
  const n = pt.getNumber("WEBGL_VERSION");
  return n === 0 ? 0 : kB(n);
});
pt.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE", () => pt.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 && !Tm());
pt.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE", () => TB(pt.getNumber("WEBGL_VERSION")));
pt.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED", () => pt.getBool("WEBGL_FORCE_F16_TEXTURES") ? !1 : pt.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"));
pt.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED", () => NB(pt.getNumber("WEBGL_VERSION")));
pt.registerFlag("WEBGL_FENCE_API_ENABLED", () => RB(pt.getNumber("WEBGL_VERSION")));
pt.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM", () => pt.getBool("WEBGL_RENDER_FLOAT32_ENABLED") ? 4 : 0);
pt.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD", () => -1, (n) => {
  if (n < 0 && n !== -1)
    throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${n}.`);
});
pt.registerFlag("WEBGL_FLUSH_THRESHOLD", () => Tm() ? 1 : -1, (n) => {
  if (n < 0 && n !== -1)
    throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${n}.`);
});
pt.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD", () => 128);
pt.registerFlag("WEBGL_USE_SHAPES_UNIFORMS", () => !1);
pt.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD", () => 1e5);
pt.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD", () => 128);
pt.registerFlag("WEBGL_EXP_CONV", () => !1);
pt.registerFlag("SOFTWARE_WEBGL_ENABLED", () => pt.getBool("IS_TEST"));
pt.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE", () => 1 / 0);
pt.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE", () => !1);
pt.registerFlag("WEBGL2_ISNAN_CUSTOM", () => !1);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function je() {
  let n, t, e, s, r, o, i, a, l, c;
  return V().getNumber("WEBGL_VERSION") === 2 ? (n = "#version 300 es", t = "in", e = "out", s = "in", r = "texture", o = "outputColor", i = "out vec4 outputColor;", a = V().getBool("WEBGL2_ISNAN_CUSTOM") ? `
      bool isnan_custom(float val) {
        uint floatToUint = floatBitsToUint(val);
        return (floatToUint & 0x7fffffffu) > 0x7f800000u;
      }

      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan_custom(val.x),
          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));
      }

      #define isnan(value) isnan_custom(value)
    ` : "", l = "", c = `
      #define round(value) newRound(value)
      int newRound(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 newRound(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `) : (n = "", t = "attribute", e = "varying", s = "varying", r = "texture2D", o = "gl_FragColor", i = "", a = `
      #define isnan(value) isnan_custom(value)
      bool isnan_custom(float val) {
        return (val > 0. || val < 1. || val == 0.) ? false : true;
      }
      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));
      }
    `, l = `
      uniform float INFINITY;

      bool isinf(float val) {
        return abs(val) == INFINITY;
      }
      bvec4 isinf(vec4 val) {
        return equal(abs(val), vec4(INFINITY));
      }
    `, c = `
      int round(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 round(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `), {
    version: n,
    attribute: t,
    varyingVs: e,
    varyingFs: s,
    texture2D: r,
    output: o,
    defineOutput: i,
    defineSpecialNaN: a,
    defineSpecialInf: l,
    defineRound: c
  };
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Io(n, t, e = "index") {
  const s = lt(t);
  return s.map((r, o) => {
    const i = `int ${n[o]} = ${e} / ${r}`, a = o === s.length - 1 ? `int ${n[o + 1]} = ${e} - ${n[o]} * ${r}` : `index -= ${n[o]} * ${r}`;
    return `${i}; ${a};`;
  }).join("");
}
function kp(n, t, e = "index") {
  const s = lt(t);
  return s.map((r, o) => {
    const i = `int ${n[o]} = ${e} / outShapeStrides[${o}]`, a = o === s.length - 1 ? `int ${n[o + 1]} = ${e} - ${n[o]} * outShapeStrides[${o}]` : `index -= ${n[o]} * outShapeStrides[${o}]`;
    return `${i}; ${a};`;
  }).join("");
}
function EB(n, t) {
  const e = n.length, s = n.map((o) => `${t}[${o}]`), r = new Array(e - 1);
  r[e - 2] = s[e - 1];
  for (let o = e - 3; o >= 0; --o)
    r[o] = `(${r[o + 1]} * ${s[o + 1]})`;
  return r;
}
function LB(n, t, e = "index") {
  const s = n.map((o, i) => i), r = EB(s, t);
  return r.map((o, i) => {
    const a = `int ${n[i]} = ${e} / ${r[i]}`, l = i === r.length - 1 ? `int ${n[i + 1]} = ${e} - ${n[i]} * ${r[i]}` : `index -= ${n[i]} * ${r[i]}`;
    return `${a}; ${l};`;
  }).join("");
}
function fb(n) {
  const t = lt(n).map((e) => e.toString());
  return `
  int getFlatIndex(ivec3 coords) {
    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;
  }
`;
}
function mb() {
  return `
  int getFlatIndex(ivec3 coords) {
    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;
  }
`;
}
const Ov = `
  const float FLOAT_MAX = 1.70141184e38;
  const float FLOAT_MIN = 1.17549435e-38;

  lowp vec4 encode_float(highp float v) {
    if (isnan(v)) {
      return vec4(255, 255, 255, 255);
    }

    highp float av = abs(v);

    if(av < FLOAT_MIN) {
      return vec4(0.0, 0.0, 0.0, 0.0);
    } else if(v > FLOAT_MAX) {
      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;
    } else if(v < -FLOAT_MAX) {
      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;
    }

    highp vec4 c = vec4(0,0,0,0);

    highp float e = floor(log2(av));
    highp float m = exp2(fract(log2(av))) - 1.0;

    c[2] = floor(128.0 * m);
    m -= c[2] / 128.0;
    c[1] = floor(32768.0 * m);
    m -= c[1] / 32768.0;
    c[0] = floor(8388608.0 * m);

    highp float ebias = e + 127.0;
    c[3] = floor(ebias / 2.0);
    ebias -= c[3] * 2.0;
    c[2] += floor(ebias) * 128.0;

    c[3] += 128.0 * step(0.0, -v);

    return c / 255.0;
  }
`;
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const { getBroadcastDims: Av } = LI;
function DB(n, t, e) {
  const s = [];
  if (n.forEach((p) => {
    const f = P(p.shapeInfo.logicalShape);
    if (p.shapeInfo.isUniform ? s.push(`uniform float ${p.name}${f > 1 ? `[${f}]` : ""};`) : (s.push(`uniform sampler2D ${p.name};`), s.push(`uniform int offset${p.name};`)), e.enableShapeUniforms) {
      const { uniformShape: m } = gb(e.packedInputs, p.shapeInfo.logicalShape, p.shapeInfo.texShape);
      switch (m.length) {
        case 1:
          s.push(`uniform int ${p.name}Shape;`);
          break;
        case 2:
          s.push(`uniform ivec2 ${p.name}Shape;`);
          break;
        case 3:
          s.push(`uniform ivec3 ${p.name}Shape;`);
          break;
        case 4:
          s.push(`uniform ivec4 ${p.name}Shape;`);
          break;
      }
      s.push(`uniform ivec2 ${p.name}TexShape;`);
    }
  }), e.enableShapeUniforms) {
    switch (t.logicalShape.length) {
      case 1:
        s.push("uniform int outShape;");
        break;
      case 2:
        s.push("uniform ivec2 outShape;"), s.push("uniform int outShapeStrides;");
        break;
      case 3:
        s.push("uniform ivec3 outShape;"), s.push("uniform ivec2 outShapeStrides;");
        break;
      case 4:
        s.push("uniform ivec4 outShape;"), s.push("uniform ivec3 outShapeStrides;");
        break;
    }
    s.push("uniform ivec2 outTexShape;");
  }
  e.customUniforms && e.customUniforms.forEach((p) => {
    s.push(`uniform ${p.type} ${p.name}${p.arrayIndex ? `[${p.arrayIndex}]` : ""};`);
  });
  const r = s.join(`
`), o = n.map((p) => GB(p, t, e.packedInputs, e.enableShapeUniforms)).join(`
`), i = t.texShape, a = je(), l = AB(a);
  let c, u, h = VB(a);
  return t.isPacked ? (c = FB(t.logicalShape, i, e.enableShapeUniforms), u = WB(a)) : (c = OB(t.logicalShape, i, e.enableShapeUniforms), u = zB(a)), e.packedInputs && (h += _B), [
    h,
    l,
    u,
    r,
    c,
    o,
    e.userCode
  ].join(`
`);
}
function fa(n, t = !1) {
  const e = n.shapeInfo.logicalShape;
  switch (e.length) {
    case 0:
      return eH(n, t);
    case 1:
      return sH(n, t);
    case 2:
      return oH(n, t);
    case 3:
      return aH(n, t);
    case 4:
      return cH(n, t);
    case 5:
      return uH(n);
    case 6:
      return hH(n);
    default:
      throw new Error(`${e.length}-D input sampling is not yet supported`);
  }
}
function zv(n, t) {
  switch (n.shapeInfo.logicalShape.length) {
    case 0:
      return tH(n);
    case 1:
      return nH(n, t);
    case 2:
      return rH(n, t);
    case 3:
      return iH(n, t);
    default:
      return lH(n, t);
  }
}
function GB(n, t, e = !1, s) {
  let r = "";
  e ? r += zv(n, s) : r += fa(n, s);
  const o = n.shapeInfo.logicalShape, i = t.logicalShape;
  return o.length <= i.length && (e ? r += dH(n, t) : r += pH(n, t)), r;
}
function FB(n, t, e) {
  switch (n.length) {
    case 0:
      return Wv();
    case 1:
      return KB(n, t, e);
    case 2:
      return QB(n, t, e);
    case 3:
      return BB(n, t, e);
    default:
      return UB(n, t, e);
  }
}
function OB(n, t, e) {
  switch (n.length) {
    case 0:
      return Wv();
    case 1:
      return ZB(n, t, e);
    case 2:
      return qB(n, t, e);
    case 3:
      return HB(n, t, e);
    case 4:
      return YB(n, t, e);
    case 5:
      return jB(n, t);
    case 6:
      return JB(n, t);
    default:
      throw new Error(`${n.length}-D output sampling is not yet supported`);
  }
}
function AB(n) {
  return `
    float sampleTexture(sampler2D textureSampler, vec2 uv) {
      return ${n.texture2D}(textureSampler, uv).r;
    }
  `;
}
function zB(n) {
  return `
    void setOutput(float val) {
      ${n.output} = vec4(val, 0, 0, 0);
    }
  `;
}
function WB(n) {
  return `
    void setOutput(vec4 val) {
      ${n.output} = val;
    }
  `;
}
function VB(n) {
  return `${n.version}
    precision highp float;
    precision highp int;
    precision highp sampler2D;
    ${n.varyingFs} vec2 resultUV;
    ${n.defineOutput}
    const vec2 halfCR = vec2(0.5, 0.5);

    struct ivec5
    {
      int x;
      int y;
      int z;
      int w;
      int u;
    };

    struct ivec6
    {
      int x;
      int y;
      int z;
      int w;
      int u;
      int v;
    };

    uniform float NAN;
    ${n.defineSpecialNaN}
    ${n.defineSpecialInf}
    ${n.defineRound}

    int imod(int x, int y) {
      return x - y * (x / y);
    }

    int idiv(int a, int b, float sign) {
      int res = a / b;
      int mod = imod(a, b);
      if (sign < 0. && mod != 0) {
        res -= 1;
      }
      return res;
    }

    //Based on the work of Dave Hoskins
    //https://www.shadertoy.com/view/4djSRW
    #define HASHSCALE1 443.8975
    float random(float seed){
      vec2 p = resultUV * seed;
      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);
      p3 += dot(p3, p3.yzx + 19.19);
      return fract((p3.x + p3.y) * p3.z);
    }

    ${MB}
    ${PB}
    ${XB}
  `;
}
const MB = `
vec2 uvFromFlat(int texNumR, int texNumC, int index) {
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {
  int texelIndex = index / 2;
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`, PB = `
vec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,
  int texNumC, int row, int col) {
  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`, XB = `
vec2 packedUVfrom3D(int texNumR, int texNumC,
    int texelsInBatch, int texelsInLogicalRow, int b,
    int row, int col) {
  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`, _B = `
  float getChannel(vec4 frag, vec2 innerDims) {
    vec2 modCoord = mod(innerDims, 2.);
    return modCoord.x == 0. ?
      (modCoord.y == 0. ? frag.r : frag.g) :
      (modCoord.y == 0. ? frag.b : frag.a);
  }
  float getChannel(vec4 frag, int dim) {
    float modCoord = mod(float(dim), 2.);
    return modCoord == 0. ? frag.r : frag.g;
  }
`;
function Wv() {
  return `
    int getOutputCoords() {
      return 0;
    }
  `;
}
function KB(n, t, e) {
  const s = [Math.ceil(t[0] / 2), Math.ceil(t[1] / 2)];
  return s[0] === 1 ? e ? `
      int getOutputCoords() {
        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));
      }
    ` : `
      int getOutputCoords() {
        return 2 * int(resultUV.x * ${s[1]}.0);
      }
    ` : s[1] === 1 ? e ? `
      int getOutputCoords() {
        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));
      }
    ` : `
      int getOutputCoords() {
        return 2 * int(resultUV.y * ${s[0]}.0);
      }
    ` : e ? `
    int getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);
    }
  ` : `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${s[0]}, ${s[1]}));
      return 2 * (resTexRC.x * ${s[1]} + resTexRC.y);
    }
  `;
}
function ZB(n, t, e) {
  return t[0] === 1 ? e ? `
      int getOutputCoords() {
        return int(resultUV.x * float(outTexShape[1]));
      }
    ` : `
      int getOutputCoords() {
        return int(resultUV.x * ${t[1]}.0);
      }
    ` : t[1] === 1 ? e ? `
      int getOutputCoords() {
        return int(resultUV.y * float(outTexShape[0]));
      }
    ` : `
      int getOutputCoords() {
        return int(resultUV.y * ${t[0]}.0);
      }
    ` : e ? `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      return resTexRC.x * outTexShape[1] + resTexRC.y;
    }
  ` : `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${t[0]}, ${t[1]}));
      return resTexRC.x * ${t[1]} + resTexRC.y;
    }
  `;
}
function BB(n, t, e) {
  if (e)
    return `
    ivec3 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec3(b, r, c);
    }
  `;
  const s = [Math.ceil(t[0] / 2), Math.ceil(t[1] / 2)], r = Math.ceil(n[2] / 2), o = r * Math.ceil(n[1] / 2);
  return `
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${s[0]}, ${s[1]}));
      int index = resTexRC.x * ${s[1]} + resTexRC.y;

      int b = index / ${o};
      index -= b * ${o};

      int r = 2 * (index / ${r});
      int c = imod(index, ${r}) * 2;

      return ivec3(b, r, c);
    }
  `;
}
function HB(n, t, e) {
  if (e)
    return `
  ivec3 getOutputCoords() {
    ivec2 resTexRC = ivec2(resultUV.yx *
                           vec2(outTexShape[0], outTexShape[1]));
    int index = resTexRC.x * outTexShape[1] + resTexRC.y;
    ${kp(["r", "c", "d"], n)}
    return ivec3(r, c, d);
  }
`;
  const s = Io(["r", "c", "d"], n);
  return `
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;
      ${s}
      return ivec3(r, c, d);
    }
  `;
}
function UB(n, t, e) {
  if (e)
    return `
    ivec4 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatchN = texelsInBatch * outShape[1];

      int b2 = index / texelsInBatchN;
      index -= b2 * texelsInBatchN;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec4(b2, b, r, c);
    }
  `;
  const s = [Math.ceil(t[0] / 2), Math.ceil(t[1] / 2)], r = Math.ceil(n[n.length - 1] / 2), o = r * Math.ceil(n[n.length - 2] / 2);
  let i = o, a = "", l = "b, r, c";
  for (let c = 2; c < n.length - 1; c++)
    i *= n[n.length - c - 1], a = `
      int b${c} = index / ${i};
      index -= b${c} * ${i};
    ` + a, l = `b${c}, ` + l;
  return `
    ivec${n.length} getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${s[0]}, ${s[1]}));
      int index = resTexRC.x * ${s[1]} + resTexRC.y;

      ${a}

      int b = index / ${o};
      index -= b * ${o};

      int r = 2 * (index / ${r});
      int c = imod(index, ${r}) * 2;

      return ivec${n.length}(${l});
    }
  `;
}
function YB(n, t, e) {
  if (e)
    return `
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      ${kp(["r", "c", "d", "d2"], n)}
      return ivec4(r, c, d, d2);
    }
  `;
  const s = Io(["r", "c", "d", "d2"], n);
  return `
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;
      ${s}
      return ivec4(r, c, d, d2);
    }
  `;
}
function jB(n, t) {
  const e = Io(["r", "c", "d", "d2", "d3"], n);
  return `
    ivec5 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},
                             ${t[1]}));

      int index = resTexRC.x * ${t[1]} + resTexRC.y;

      ${e}

      ivec5 outShape = ivec5(r, c, d, d2, d3);
      return outShape;
    }
  `;
}
function JB(n, t) {
  const e = Io(["r", "c", "d", "d2", "d3", "d4"], n);
  return `
    ivec6 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;

      ${e}

      ivec6 result = ivec6(r, c, d, d2, d3, d4);
      return result;
    }
  `;
}
function QB(n, t, e) {
  const s = [Math.ceil(t[0] / 2), Math.ceil(t[1] / 2)];
  if (Nt(n, t))
    return e ? `
      ivec2 getOutputCoords() {
        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));
      }
    ` : `
      ivec2 getOutputCoords() {
        return 2 * ivec2(resultUV.yx * vec2(${s[0]}, ${s[1]}));
      }
    `;
  const r = Math.ceil(n[1] / 2);
  return e ? `
    ivec2 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));

      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;
      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec2(r, c);
    }
  ` : `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${s[0]}, ${s[1]}));

      int index = resTexRC.x * ${s[1]} + resTexRC.y;
      int r = 2 * (index / ${r});
      int c = imod(index, ${r}) * 2;

      return ivec2(r, c);
    }
  `;
}
function qB(n, t, e) {
  return Nt(n, t) ? e ? `
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));
      }
    ` : `
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));
      }
    ` : n[1] === 1 ? e ? `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(index, 0);
      }
    ` : `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${t[0]}, ${t[1]}));
        int index = resTexRC.x * ${t[1]} + resTexRC.y;
        return ivec2(index, 0);
      }
    ` : n[0] === 1 ? e ? `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(0, index);
      }
    ` : `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${t[0]}, ${t[1]}));
        int index = resTexRC.x * ${t[1]} + resTexRC.y;
        return ivec2(0, index);
      }
    ` : e ? `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      int r = index / outShape[1];
      int c = index - r * outShape[1];
      return ivec2(r, c);
    }
  ` : `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;
      int r = index / ${n[1]};
      int c = index - r * ${n[1]};
      return ivec2(r, c);
    }
  `;
}
function So(n) {
  return `offset${n}`;
}
function tH(n) {
  const t = n.name, e = "get" + t.charAt(0).toUpperCase() + t.slice(1), s = je();
  return `
    vec4 ${e}() {
      return ${s.texture2D}(${t}, halfCR);
    }
  `;
}
function eH(n, t) {
  const e = n.name, s = "get" + e.charAt(0).toUpperCase() + e.slice(1);
  if (n.shapeInfo.isUniform)
    return `float ${s}() {return ${e};}`;
  const [r, o] = n.shapeInfo.texShape;
  if (r === 1 && o === 1)
    return `
      float ${s}() {
        return sampleTexture(${e}, halfCR);
      }
    `;
  const i = So(e);
  if (t)
    return `
    float ${s}() {
      vec2 uv = uvFromFlat(${e}TexShape[0], ${e}TexShape[1], ${i});
      return sampleTexture(${e}, uv);
    }
  `;
  const [a, l] = n.shapeInfo.texShape;
  return `
    float ${s}() {
      vec2 uv = uvFromFlat(${a}, ${l}, ${i});
      return sampleTexture(${e}, uv);
    }
  `;
}
function nH(n, t) {
  const e = n.name, s = "get" + e.charAt(0).toUpperCase() + e.slice(1), r = n.shapeInfo.texShape, o = je();
  if (t)
    return `
    vec4 ${s}(int index) {
      ivec2 packedTexShape = ivec2(ceil(float(${e}TexShape[0]) / 2.0), ceil(float(${e}TexShape[1]) / 2.0));
      vec2 uv = packedUVfrom1D(
        packedTexShape[0], packedTexShape[1], index);
      return ${o.texture2D}(${e}, uv);
    }
  `;
  const i = [Math.ceil(r[0] / 2), Math.ceil(r[1] / 2)];
  return `
    vec4 ${s}(int index) {
      vec2 uv = packedUVfrom1D(
        ${i[0]}, ${i[1]}, index);
      return ${o.texture2D}(${e}, uv);
    }
  `;
}
function sH(n, t) {
  const e = n.name, s = "get" + e.charAt(0).toUpperCase() + e.slice(1);
  if (n.shapeInfo.isUniform)
    return `
      float ${s}(int index) {
        ${ma(n)}
      }
    `;
  const r = n.shapeInfo.texShape, o = r[0], i = r[1];
  if (i === 1 && o === 1)
    return `
      float ${s}(int index) {
        return sampleTexture(${e}, halfCR);
      }
    `;
  const a = So(e);
  return i === 1 ? t ? `
      float ${s}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${a}) + 0.5) / float(${e}TexShape[0]));
        return sampleTexture(${e}, uv);
      }
    ` : `
      float ${s}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${a}) + 0.5) / ${o}.0);
        return sampleTexture(${e}, uv);
      }
    ` : o === 1 ? t ? `
      float ${s}(int index) {
        vec2 uv = vec2((float(index + ${a}) + 0.5) / float(${e}TexShape[1]), 0.5);
        return sampleTexture(${e}, uv);
      }
    ` : `
      float ${s}(int index) {
        vec2 uv = vec2((float(index + ${a}) + 0.5) / ${i}.0, 0.5);
        return sampleTexture(${e}, uv);
      }
    ` : t ? `
    float ${s}(int index) {
      vec2 uv = uvFromFlat(${e}TexShape[0], ${e}TexShape[1], index + ${a});
      return sampleTexture(${e}, uv);
    }
  ` : `
    float ${s}(int index) {
      vec2 uv = uvFromFlat(${o}, ${i}, index + ${a});
      return sampleTexture(${e}, uv);
    }
  `;
}
function rH(n, t) {
  const e = n.shapeInfo.logicalShape, s = n.name, r = "get" + s.charAt(0).toUpperCase() + s.slice(1), o = n.shapeInfo.texShape, i = o[0], a = o[1], l = je();
  if (o != null && Nt(e, o))
    return t ? `
      vec4 ${r}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);

        return ${l.texture2D}(${s}, uv);
      }
    ` : `
      vec4 ${r}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${a}.0, ${i}.0);

        return ${l.texture2D}(${s}, uv);
      }
    `;
  if (t)
    return `
    vec4 ${r}(int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${s}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);
      return ${l.texture2D}(${s}, uv);
    }
  `;
  const c = [Math.ceil(o[0] / 2), Math.ceil(o[1] / 2)], u = Math.ceil(e[1] / 2);
  return `
    vec4 ${r}(int row, int col) {
      vec2 uv = packedUVfrom2D(${u}, ${c[0]}, ${c[1]}, row, col);
      return ${l.texture2D}(${s}, uv);
    }
  `;
}
function oH(n, t) {
  const e = n.shapeInfo.logicalShape, s = n.name, r = "get" + s.charAt(0).toUpperCase() + s.slice(1), o = n.shapeInfo.texShape;
  if (o != null && Nt(e, o)) {
    if (t)
      return `
      float ${r}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);
        return sampleTexture(${s}, uv);
      }
    `;
    const d = o[0], p = o[1];
    return `
    float ${r}(int row, int col) {
      vec2 uv = (vec2(col, row) + halfCR) / vec2(${p}.0, ${d}.0);
      return sampleTexture(${s}, uv);
    }
  `;
  }
  const { newShape: i, keptDims: a } = Bs(e), l = i;
  if (l.length < e.length) {
    const d = ga(n, l), p = ["row", "col"];
    return `
      ${fa(d, t)}
      float ${r}(int row, int col) {
        return ${r}(${ya(p, a)});
      }
    `;
  }
  if (n.shapeInfo.isUniform)
    return `
      float ${r}(int row, int col) {
        int index = round(dot(vec2(row, col), vec2(${e[1]}, 1)));
        ${ma(n)}
      }
    `;
  const c = o[0], u = o[1], h = So(s);
  return u === 1 ? t ? `
      float ${r}(int row, int col) {
        float index = dot(vec3(row, col, ${h}), vec3(${s}Shape[1], 1, 1));
        vec2 uv = vec2(0.5, (index + 0.5) / float(${s}TexShape[0]));
        return sampleTexture(${s}, uv);
      }
    ` : `
    float ${r}(int row, int col) {
      float index = dot(vec3(row, col, ${h}), vec3(${e[1]}, 1, 1));
      vec2 uv = vec2(0.5, (index + 0.5) / ${c}.0);
      return sampleTexture(${s}, uv);
    }
  ` : c === 1 ? t ? `
      float ${r}(int row, int col) {
        float index = dot(vec3(row, col, ${h}), vec3(${s}Shape[1], 1, 1));
        vec2 uv = vec2((index + 0.5) / float(${s}TexShape[1]), 0.5);
        return sampleTexture(${s}, uv);
      }
    ` : `
    float ${r}(int row, int col) {
      float index = dot(vec3(row, col, ${h}), vec3(${e[1]}, 1, 1));
      vec2 uv = vec2((index + 0.5) / ${u}.0, 0.5);
      return sampleTexture(${s}, uv);
    }
  ` : t ? `
      float ${r}(int row, int col) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${s}Shape[1] + col + ${h};
        vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);
        return sampleTexture(${s}, uv);
      }
    ` : `
  float ${r}(int row, int col) {
    // Explicitly use integer operations as dot() only works on floats.
    int index = row * ${e[1]} + col + ${h};
    vec2 uv = uvFromFlat(${c}, ${u}, index);
    return sampleTexture(${s}, uv);
  }
`;
}
function iH(n, t) {
  const e = n.shapeInfo.logicalShape, s = n.name, r = "get" + s.charAt(0).toUpperCase() + s.slice(1), o = n.shapeInfo.texShape, i = [Math.ceil(o[0] / 2), Math.ceil(o[1] / 2)];
  if (e[0] === 1) {
    const d = e.slice(1), p = [1, 2], f = ga(n, d), m = ["b", "row", "col"];
    return `
        ${zv(f, t)}
        vec4 ${r}(int b, int row, int col) {
          return ${r}(${ya(m, p)});
        }
      `;
  }
  const a = je();
  if (t)
    return `
    vec4 ${r}(int b, int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${s}Shape[2]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${s}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom3D(
        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);
      return ${a.texture2D}(${s}, uv);
    }
  `;
  const l = i[0], c = i[1], u = Math.ceil(e[2] / 2), h = u * Math.ceil(e[1] / 2);
  return `
    vec4 ${r}(int b, int row, int col) {
      vec2 uv = packedUVfrom3D(
        ${l}, ${c}, ${h}, ${u}, b, row, col);
      return ${a.texture2D}(${s}, uv);
    }
  `;
}
function aH(n, t) {
  const e = n.shapeInfo.logicalShape, s = n.name, r = "get" + s.charAt(0).toUpperCase() + s.slice(1), o = e[1] * e[2], i = e[2], { newShape: a, keptDims: l } = Bs(e), c = a;
  if (c.length < e.length) {
    const m = ga(n, c), g = ["row", "col", "depth"];
    return `
        ${fa(m, t)}
        float ${r}(int row, int col, int depth) {
          return ${r}(${ya(g, l)});
        }
      `;
  }
  if (n.shapeInfo.isUniform)
    return `
      float ${r}(int row, int col, int depth) {
        int index = round(dot(vec3(row, col, depth),
                          vec3(${o}, ${i}, 1)));
        ${ma(n)}
      }
    `;
  const u = n.shapeInfo.texShape, h = u[0], d = u[1], p = n.shapeInfo.flatOffset;
  if (d === o && p == null)
    return t ? `
      float ${r}(int row, int col, int depth) {
        int stride1 = ${s}Shape[2];
        float texR = float(row);
        float texC = dot(vec2(col, depth), vec2(stride1, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${s}TexShape[1], ${s}TexShape[0]);
        return sampleTexture(${s}, uv);
      }
    ` : `
        float ${r}(int row, int col, int depth) {
          float texR = float(row);
          float texC = dot(vec2(col, depth), vec2(${i}, 1));
          vec2 uv = (vec2(texC, texR) + halfCR) /
                     vec2(${d}.0, ${h}.0);
          return sampleTexture(${s}, uv);
        }
      `;
  if (d === i && p == null)
    return t ? `
      float ${r}(int row, int col, int depth) {
        float texR = dot(vec2(row, col), vec2(${s}Shape[1], 1));
        float texC = float(depth);
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);
        return sampleTexture(${s}, uv);
      }
    ` : `
    float ${r}(int row, int col, int depth) {
      float texR = dot(vec2(row, col), vec2(${e[1]}, 1));
      float texC = float(depth);
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${d}.0, ${h}.0);
      return sampleTexture(${s}, uv);
    }
  `;
  const f = So(s);
  return t ? `
    float ${r}(int row, int col, int depth) {
      // Explicitly use integer operations as dot() only works on floats.
      int stride0 = ${s}Shape[1] * ${s}Shape[2];
      int stride1 = ${s}Shape[2];
      int index = row * stride0 + col * stride1 + depth + ${f};
      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);
      return sampleTexture(${s}, uv);
    }
    ` : `
      float ${r}(int row, int col, int depth) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${o} + col * ${i} + depth + ${f};
        vec2 uv = uvFromFlat(${h}, ${d}, index);
        return sampleTexture(${s}, uv);
      }
  `;
}
function lH(n, t) {
  const e = n.name, s = "get" + e.charAt(0).toUpperCase() + e.slice(1), r = je();
  if (t)
    return `
    vec4 ${s}(int b2, int b, int row, int col) {
      int valuesPerRow = int(ceil(float(${e}Shape[3]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${e}Shape[2]) / 2.0));
      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);
      texelsInBatch *= ${e}Shape[1];
      index = b2 * texelsInBatch + index;
      ivec2 packedTexShape = ivec2(ceil(float(${e}TexShape[0]) / 2.0), ceil(float(${e}TexShape[1]) / 2.0));
      int texR = index / packedTexShape[1];
      int texC = index - texR * packedTexShape[1];
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${r.texture2D}(${e}, uv);
    }
  `;
  const o = n.shapeInfo.logicalShape, i = o.length, a = n.shapeInfo.texShape, l = [Math.ceil(a[0] / 2), Math.ceil(a[1] / 2)], c = l[0], u = l[1], h = Math.ceil(o[i - 1] / 2);
  let d = h * Math.ceil(o[i - 2] / 2), p = "int b, int row, int col", f = `b * ${d} + (row / 2) * ${h} + (col / 2)`;
  for (let m = 2; m < i - 1; m++)
    p = `int b${m}, ` + p, d *= o[i - m - 1], f = `b${m} * ${d} + ` + f;
  return `
    vec4 ${s}(${p}) {
      int index = ${f};
      int texR = index / ${u};
      int texC = index - texR * ${u};
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${u}, ${c});
      return ${r.texture2D}(${e}, uv);
    }
  `;
}
function cH(n, t) {
  const e = n.shapeInfo.logicalShape, s = n.name, r = "get" + s.charAt(0).toUpperCase() + s.slice(1), o = e[3], i = e[2] * o, a = e[1] * i, { newShape: l, keptDims: c } = Bs(e);
  if (l.length < e.length) {
    const b = ga(n, l), w = ["row", "col", "depth", "depth2"];
    return `
      ${fa(b, t)}
      float ${r}(int row, int col, int depth, int depth2) {
        return ${r}(${ya(w, c)});
      }
    `;
  }
  if (n.shapeInfo.isUniform)
    return `
      float ${r}(int row, int col, int depth, int depth2) {
        int index = round(dot(vec4(row, col, depth, depth2),
                          vec4(${a}, ${i}, ${o}, 1)));
        ${ma(n)}
      }
    `;
  const u = n.shapeInfo.flatOffset, h = n.shapeInfo.texShape, d = h[0], p = h[1], f = `int stride2 = ${s}Shape[3];`, m = `int stride1 = ${s}Shape[2] * stride2;`, g = `int stride0 = ${s}Shape[1] * stride1;`;
  if (p === a && u == null)
    return t ? `
      float ${r}(int row, int col, int depth, int depth2) {
        ${f}
        ${m}
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(stride1, stride2, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${s}TexShape[1], ${s}TexShape[0]);
        return sampleTexture(${s}, uv);
      }
    ` : `
      float ${r}(int row, int col, int depth, int depth2) {
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(${i}, ${o}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${p}.0, ${d}.0);
        return sampleTexture(${s}, uv);
      }
    `;
  if (p === o && u == null)
    return t ? `
      float ${r}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${s}Shape[1] * ${s}Shape[2], ${s}Shape[2], 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${s}TexShape[1], ${s}TexShape[0]);
        return sampleTexture(${s}, uv);
      }
    ` : `
      float ${r}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${e[1] * e[2]}, ${e[2]}, 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${p}.0, ${d}.0);
        return sampleTexture(${s}, uv);
      }
    `;
  const y = So(s);
  return t ? `
    float ${r}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      ${f}
      ${m}
      ${g}
      int index = row * stride0 + col * stride1 +
          depth * stride2 + depth2;
      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index + ${y});
      return sampleTexture(${s}, uv);
    }
  ` : `
    float ${r}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${a} + col * ${i} +
          depth * ${o} + depth2;
      vec2 uv = uvFromFlat(${d}, ${p}, index + ${y});
      return sampleTexture(${s}, uv);
    }
  `;
}
function uH(n) {
  const t = n.shapeInfo.logicalShape, e = n.name, s = "get" + e.charAt(0).toUpperCase() + e.slice(1), r = t[4], o = t[3] * r, i = t[2] * o, a = t[1] * i, { newShape: l, keptDims: c } = Bs(t);
  if (l.length < t.length) {
    const m = ga(n, l), g = ["row", "col", "depth", "depth2", "depth3"];
    return `
      ${fa(m)}
      float ${s}(int row, int col, int depth, int depth2, int depth3) {
        return ${s}(${ya(g, c)});
      }
    `;
  }
  if (n.shapeInfo.isUniform)
    return `
      float ${s}(int row, int col, int depth, int depth2, int depth3) {
        float index = dot(
          vec4(row, col, depth, depth2),
          vec4(${a}, ${i}, ${o}, ${r})) +
          depth3;
        ${ma(n)}
      }
    `;
  const u = n.shapeInfo.flatOffset, h = n.shapeInfo.texShape, d = h[0], p = h[1];
  if (p === a && u == null)
    return `
      float ${s}(int row, int col, int depth, int depth2, int depth3) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
                         vec4(${i}, ${o}, ${r}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${p}.0, ${d}.0);
        return sampleTexture(${e}, uv);
      }
    `;
  if (p === r && u == null)
    return `
      float ${s}(int row, int col, int depth, int depth2, int depth3) {
        float texR = dot(
          vec4(row, col, depth, depth2),
          vec4(${t[1] * t[2] * t[3]},
               ${t[2] * t[3]}, ${t[3]}, 1));
        int texC = depth3;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${p}.0, ${d}.0);
        return sampleTexture(${e}, uv);
      }
    `;
  const f = So(e);
  return `
    float ${s}(int row, int col, int depth, int depth2, int depth3) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${a} + col * ${i} + depth * ${o} +
          depth2 * ${r} + depth3 + ${f};
      vec2 uv = uvFromFlat(${d}, ${p}, index);
      return sampleTexture(${e}, uv);
    }
  `;
}
function hH(n) {
  const t = n.shapeInfo.logicalShape, e = n.name, s = "get" + e.charAt(0).toUpperCase() + e.slice(1), { newShape: r, keptDims: o } = Bs(t);
  if (r.length < t.length) {
    const g = ga(n, r), y = ["row", "col", "depth", "depth2", "depth3", "depth4"];
    return `
      ${fa(g)}
      float ${s}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        return ${s}(${ya(y, o)});
      }
    `;
  }
  const i = t[5], a = t[4] * i, l = t[3] * a, c = t[2] * l, u = t[1] * c;
  if (n.shapeInfo.isUniform)
    return `
      float ${s}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
        int index = round(dot(
          vec4(row, col, depth, depth2),
          vec4(${u}, ${c}, ${l}, ${a})) +
          dot(
            vec2(depth3, depth4),
            vec2(${i}, 1)));
        ${ma(n)}
      }
    `;
  const h = n.shapeInfo.flatOffset, d = n.shapeInfo.texShape, p = d[0], f = d[1];
  if (f === u && h == null)
    return `
      float ${s}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
          vec4(${c}, ${l}, ${a}, ${i})) +
               float(depth4);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${f}.0, ${p}.0);
        return sampleTexture(${e}, uv);
      }
    `;
  if (f === i && h == null)
    return `
      float ${s}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        float texR = dot(vec4(row, col, depth, depth2),
          vec4(${t[1] * t[2] * t[3] * t[4]},
               ${t[2] * t[3] * t[4]},
               ${t[3] * t[4]},
               ${t[4]})) + float(depth3);
        int texC = depth4;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${f}.0, ${p}.0);
        return sampleTexture(${e}, uv);
      }
    `;
  const m = So(e);
  return `
    float ${s}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${u} + col * ${c} + depth * ${l} +
          depth2 * ${a} + depth3 * ${i} + depth4 + ${m};
      vec2 uv = uvFromFlat(${p}, ${f}, index);
      return sampleTexture(${e}, uv);
    }
  `;
}
function ma(n) {
  const t = n.name, e = P(n.shapeInfo.logicalShape);
  return e < 2 ? `return ${t};` : `
    for (int i = 0; i < ${e}; i++) {
      if (i == index) {
        return ${t}[i];
      }
    }
  `;
}
function dH(n, t) {
  const e = n.name, s = e.charAt(0).toUpperCase() + e.slice(1), r = "get" + s + "AtOutCoords", o = n.shapeInfo.logicalShape.length, i = t.logicalShape.length, a = Av(n.shapeInfo.logicalShape, t.logicalShape), l = _t(i), c = i - o;
  let u;
  const h = ["x", "y", "z", "w", "u", "v"];
  o === 0 ? u = "" : i < 2 && a.length >= 1 ? u = "coords = 0;" : u = a.map((b) => `coords.${h[b + c]} = 0;`).join(`
`);
  let d = "";
  i < 2 && o > 0 ? d = "coords" : d = n.shapeInfo.logicalShape.map((b, w) => `coords.${h[w + c]}`).join(", ");
  let p = "return outputValue;";
  const m = P(n.shapeInfo.logicalShape) === 1, y = P(t.logicalShape) === 1;
  if (o === 1 && !m && !y)
    p = `
      return vec4(outputValue.xy, outputValue.xy);
    `;
  else if (m && !y)
    i === 1 ? p = `
        return vec4(outputValue.x, outputValue.x, 0., 0.);
      ` : p = `
        return vec4(outputValue.x);
      `;
  else if (a.length) {
    const b = o - 2, w = o - 1;
    a.indexOf(b) > -1 && a.indexOf(w) > -1 ? p = "return vec4(outputValue.x);" : a.indexOf(b) > -1 ? p = "return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);" : a.indexOf(w) > -1 && (p = "return vec4(outputValue.xx, outputValue.zz);");
  }
  return `
    vec4 ${r}() {
      ${l} coords = getOutputCoords();
      ${u}
      vec4 outputValue = get${s}(${d});
      ${p}
    }
  `;
}
function pH(n, t) {
  const e = n.name, s = e.charAt(0).toUpperCase() + e.slice(1), r = "get" + s + "AtOutCoords", o = t.texShape, i = n.shapeInfo.texShape, a = n.shapeInfo.logicalShape.length, l = t.logicalShape.length;
  if (!n.shapeInfo.isUniform && a === l && n.shapeInfo.flatOffset == null && Nt(i, o))
    return `
      float ${r}() {
        return sampleTexture(${e}, resultUV);
      }
    `;
  const c = _t(l), u = Av(n.shapeInfo.logicalShape, t.logicalShape), h = l - a;
  let d;
  const p = ["x", "y", "z", "w", "u", "v"];
  a === 0 ? d = "" : l < 2 && u.length >= 1 ? d = "coords = 0;" : d = u.map((m) => `coords.${p[m + h]} = 0;`).join(`
`);
  let f = "";
  return l < 2 && a > 0 ? f = "coords" : f = n.shapeInfo.logicalShape.map((m, g) => `coords.${p[g + h]}`).join(", "), `
    float ${r}() {
      ${c} coords = getOutputCoords();
      ${d}
      return get${s}(${f});
    }
  `;
}
function _t(n) {
  if (n <= 1)
    return "int";
  if (n === 2)
    return "ivec2";
  if (n === 3)
    return "ivec3";
  if (n === 4)
    return "ivec4";
  if (n === 5)
    return "ivec5";
  if (n === 6)
    return "ivec6";
  throw Error(`GPU for rank ${n} is not yet supported`);
}
function gb(n, t, e) {
  const { newShape: s, keptDims: r } = Bs(t), o = t.length, i = n && o === 3 && t[0] === 1, a = i ? t.slice(1) : s, l = !n && o > 1 && !Nt(t, e) && s.length < o || i;
  return { useSqueezeShape: l, uniformShape: l ? a : t, keptDims: r };
}
function ga(n, t) {
  const e = JSON.parse(JSON.stringify(n));
  return e.shapeInfo.logicalShape = t, e;
}
function ya(n, t) {
  return t.map((e) => n[e]).join(", ");
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fH(n, t, e, s) {
  const r = e.map((u, h) => {
    const d = {
      logicalShape: u.shape,
      texShape: u.isUniform ? null : u.texData.texShape,
      isUniform: u.isUniform,
      isPacked: u.isUniform ? !1 : u.texData.isPacked,
      flatOffset: null
    };
    return u.texData != null && u.texData.slice != null && u.texData.slice.flatOffset > 0 && (d.flatOffset = u.texData.slice.flatOffset), { name: t.variableNames[h], shapeInfo: d };
  }), o = r.map((u) => u.shapeInfo), i = {
    logicalShape: s.shape,
    texShape: s.texData.texShape,
    isUniform: !1,
    isPacked: s.texData.isPacked,
    flatOffset: null
  }, a = DB(r, i, t), l = aB(n.gl, a), c = n.createProgram(l);
  return V().get("ENGINE_COMPILE_ONLY") ? {
    program: t,
    fragmentShader: l,
    source: a,
    webGLProgram: c,
    inShapeInfos: o,
    outShapeInfo: i,
    uniformLocations: null,
    customUniformLocations: null,
    infLoc: null,
    nanLoc: null,
    inShapesLocations: null,
    inTexShapesLocations: null,
    outShapeLocation: null,
    outShapeStridesLocation: null,
    outTexShapeLocation: null
  } : Object.assign({
    program: t,
    fragmentShader: l,
    source: a,
    webGLProgram: c,
    inShapeInfos: o,
    outShapeInfo: i
  }, Vv(n, t, c));
}
function Vv(n, t, e) {
  const s = {}, r = {}, o = {}, i = [];
  let a, l, c, u = null, h = null;
  h = n.getUniformLocation(e, "NAN", !1), V().getNumber("WEBGL_VERSION") === 1 && (u = n.getUniformLocation(e, "INFINITY", !1));
  const d = !1;
  for (let p = 0; p < t.variableNames.length; p++) {
    const f = t.variableNames[p];
    s[f] = n.getUniformLocation(e, f, d), s[`offset${f}`] = n.getUniformLocation(e, `offset${f}`, d), t.enableShapeUniforms && (r[`${f}Shape`] = n.getUniformLocation(e, `${f}Shape`, d), o[`${f}TexShape`] = n.getUniformLocation(e, `${f}TexShape`, d));
  }
  return t.enableShapeUniforms && (a = n.getUniformLocation(e, "outShape", d), c = n.getUniformLocation(e, "outShapeStrides", d), l = n.getUniformLocation(e, "outTexShape", d)), t.customUniforms && t.customUniforms.forEach((p, f) => {
    i[f] = n.getUniformLocation(e, p.name, d);
  }), {
    uniformLocations: s,
    customUniformLocations: i,
    infLoc: u,
    nanLoc: h,
    inShapesLocations: r,
    inTexShapesLocations: o,
    outShapeLocation: a,
    outShapeStridesLocation: c,
    outTexShapeLocation: l
  };
}
function Gx(n, t) {
  if (n.length !== t.length)
    throw Error(`Binary was compiled with ${n.length} inputs, but was executed with ${t.length} inputs`);
  n.forEach((e, s) => {
    const r = e.logicalShape, o = t[s], i = o.shape;
    if (!Nt(r, i))
      throw Error(`Binary was compiled with different shapes than the current args. Shapes ${r} and ${i} must match`);
    if (e.isUniform && o.isUniform)
      return;
    const a = e.texShape, l = o.isUniform ? null : o.texData.texShape;
    if (!Nt(a, l))
      throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${a} and ${l} must match`);
  });
}
function mH(n, t, e, s, r) {
  t.program.enableShapeUniforms || (Gx(t.inShapeInfos, e), Gx([t.outShapeInfo], [s]));
  const o = s.texData.texture, i = s.texData.texShape;
  s.texData.isPacked ? n.setOutputPackedMatrixTexture(o.texture, i[0], i[1]) : n.setOutputMatrixTexture(o.texture, i[0], i[1]), n.setProgram(t.webGLProgram), V().getNumber("WEBGL_VERSION") === 1 && t.infLoc !== null && n.gl.uniform1f(t.infLoc, 1 / 0), t.nanLoc !== null && n.gl.uniform1f(t.nanLoc, NaN), e.forEach((l, c) => {
    const u = t.program.variableNames[c], h = t.uniformLocations[u], d = t.uniformLocations[`offset${u}`], p = t.inShapesLocations[`${u}Shape`], f = t.inTexShapesLocations[`${u}TexShape`];
    if (p) {
      const { uniformShape: m } = gb(t.program.packedInputs, l.shape, l.texData.texShape);
      switch (m.length) {
        case 1:
          n.gl.uniform1iv(p, new Int32Array(m));
          break;
        case 2:
          n.gl.uniform2iv(p, new Int32Array(m));
          break;
        case 3:
          n.gl.uniform3iv(p, new Int32Array(m));
          break;
        case 4:
          n.gl.uniform4iv(p, new Int32Array(m));
          break;
      }
    }
    if (f && n.gl.uniform2i(f, l.texData.texShape[0], l.texData.texShape[1]), h != null) {
      if (l.isUniform) {
        if (P(l.shape) < 2)
          n.gl.uniform1f(h, l.uniformValues[0]);
        else {
          let m = l.uniformValues;
          m instanceof Float32Array || (m = new Float32Array(m)), n.gl.uniform1fv(h, m);
        }
        return;
      }
      l.texData.slice != null && d != null && n.gl.uniform1i(d, l.texData.slice.flatOffset), n.setInputMatrixTexture(l.texData.texture.texture, h, c);
    }
  });
  const a = t.outShapeLocation;
  if (a)
    switch (s.shape.length) {
      case 1:
        n.gl.uniform1iv(a, new Int32Array(s.shape));
        break;
      case 2:
        n.gl.uniform2iv(a, new Int32Array(s.shape));
        break;
      case 3:
        n.gl.uniform3iv(a, new Int32Array(s.shape));
        break;
      case 4:
        n.gl.uniform4iv(a, new Int32Array(s.shape));
        break;
    }
  if (t.outShapeStridesLocation) {
    const l = lt(s.shape);
    switch (s.shape.length) {
      case 2:
        n.gl.uniform1iv(t.outShapeStridesLocation, new Int32Array(l));
        break;
      case 3:
        n.gl.uniform2iv(t.outShapeStridesLocation, new Int32Array(l));
        break;
      case 4:
        n.gl.uniform3iv(t.outShapeStridesLocation, new Int32Array(l));
        break;
    }
  }
  t.outTexShapeLocation && n.gl.uniform2i(t.outTexShapeLocation, s.texData.texShape[0], s.texData.texShape[1]), t.program.customUniforms && r && t.program.customUniforms.forEach((l, c) => {
    const u = t.customUniformLocations[c], h = r[c];
    if (l.type === "float")
      n.gl.uniform1fv(u, h);
    else if (l.type === "vec2")
      n.gl.uniform2fv(u, h);
    else if (l.type === "vec3")
      n.gl.uniform3fv(u, h);
    else if (l.type === "vec4")
      n.gl.uniform4fv(u, h);
    else if (l.type === "int")
      n.gl.uniform1iv(u, h);
    else if (l.type === "ivec2")
      n.gl.uniform2iv(u, h);
    else if (l.type === "ivec3")
      n.gl.uniform3iv(u, h);
    else if (l.type === "ivec4")
      n.gl.uniform4iv(u, h);
    else
      throw Error(`uniform type ${l.type} is not supported yet.`);
  }), n.executeProgram();
}
function gH(n, t, e) {
  let s = "";
  t.concat(e).forEach((i) => {
    const a = i.texData != null && i.texData.slice != null && i.texData.slice.flatOffset > 0;
    if (n.enableShapeUniforms && !i.isUniform) {
      const l = i.texData.texShape, { useSqueezeShape: c, uniformShape: u, keptDims: h } = gb(n.packedInputs, i.shape, l);
      let d = "", p = "", f = "";
      if (u.length === 1 && n.packedInputs) {
        const S = [Math.ceil(l[0] / 2), Math.ceil(l[1] / 2)];
        d = `${S[0] > 1}_${S[1] > 1}`;
      } else if (u.length === 2 && !n.packedInputs)
        p = `${u[0] > 1}_${u[1] > 1}`;
      else if (u.length > 2 && !n.packedInputs) {
        const S = lt(u);
        f = `${S[0] === l[1]}_${S[S.length - 1] === l[1]}`;
      }
      const m = i.shape.length, g = u.length === 2 && Nt(i.shape, l), y = P(i.shape) === 1, b = Ps(i.shape, e.shape), w = !n.packedInputs && m === e.shape.length && Nt(l, e.texData.texShape), x = n.packedInputs || u.length > 2 ? "" : `${l[0] > 1}_${l[1] > 1}`;
      s += `${m}_${w}_${c ? h : ""}_${u.length}_${y}_${b}_${g}_${d}_${p}_${f}_${x}_${a}`;
    } else {
      const l = i.isUniform ? "uniform" : i.texData.texShape;
      s += `${i.shape}_${l}_${a}`;
    }
  });
  const r = n.userCode;
  let o = n.constructor.name;
  return o += "_" + s + "_" + r + `${V().getNumber("WEBGL_VERSION")}`, o;
}
function Je(n) {
  return V().getBool("WEBGL_USE_SHAPES_UNIFORMS") && n <= 4;
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class yH {
  constructor(t) {
    this.variableNames = ["A"], this.packedInputs = !1, this.packedOutput = !0, this.outPackingScheme = qa.DENSE, this.customUniforms = [{ name: "texShape", type: "ivec2" }];
    const e = je();
    this.outputShape = t, this.enableShapeUniforms = Je(this.outputShape.length), this.userCode = `
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms ? kp(["r", "c", "d"], t) : Io(["r", "c", "d"], t)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getA(rc.x, rc.y, rc.z);
        }

        ${e.output} = result;
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class bH {
  constructor(t) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, this.outPackingScheme = qa.DENSE, this.customUniforms = [{ name: "texShape", type: "ivec2" }];
    const e = je();
    this.outputShape = t, this.enableShapeUniforms = Je(this.outputShape.length), this.userCode = `
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms ? kp(["r", "c", "d"], t) : Io(["r", "c", "d"], t)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));
        }

        ${e.output} = result;
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class xH {
  constructor(t) {
    this.variableNames = ["A"], this.outTexUsage = Rn.DOWNLOAD;
    const e = je();
    this.outputShape = t, this.userCode = `
      ${Ov}

      void main() {
        float x = getAAtOutCoords();
        ${e.output} = encode_float(x);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class wH {
  constructor(t) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !1, this.outTexUsage = Rn.DOWNLOAD;
    const e = je();
    this.outputShape = t, this.userCode = `
      ${Ov}

      void main() {
        ivec3 coords = getOutputCoords();
        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));
        ${e.output} = encode_float(x);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class IH {
  constructor(t, e = !1) {
    this.variableNames = ["A"], this.customUniforms = [{ name: "texShape", type: "ivec2" }];
    const s = je();
    this.outputShape = t, this.enableShapeUniforms = Je(this.outputShape.length);
    let r = "result";
    e && (r = "floor(result * 255. + 0.5)"), this.userCode = `
      ${this.enableShapeUniforms ? mb() : fb(t)}

      void main() {
        ivec3 coords = getOutputCoords();

        int flatIndex = getFlatIndex(coords);
        int offset = imod(flatIndex, 4);

        flatIndex = idiv(flatIndex, 4, 1.);

        int r = flatIndex / texShape[1];
        int c = imod(flatIndex, texShape[1]);
        vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
        vec4 values = ${s.texture2D}(A, uv);

        float result;

        if(offset == 0) {
          result = values[0];
        } else if(offset == 1) {
          result = values[1];
        } else if(offset == 2) {
          result = values[2];
        } else {
          result = values[3];
        }

        ${s.output} = vec4(${r}, 0., 0., 0.);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class SH {
  constructor(t, e = !1) {
    this.variableNames = ["A"], this.packedInputs = !1, this.packedOutput = !0, this.customUniforms = [{ name: "texShape", type: "ivec2" }];
    const s = je();
    this.outputShape = t, this.enableShapeUniforms = Je(this.outputShape.length);
    let r = "", o = "result";
    e && (o = "floor(result * 255. + 0.5)");
    for (let i = 0; i <= 1; i++)
      for (let a = 0; a <= 1; a++) {
        const l = i * 2 + a;
        r += `
          localCoords = coords;
          if(localCoords[2] + ${a} < ${this.enableShapeUniforms ? "outShape[2]" : `${t[2]}`}) {
          localCoords[2] += ${a};
          if (localCoords[1] + ${i} < ${this.enableShapeUniforms ? "outShape[1]" : `${t[1]}`}) {
            localCoords[1] += ${i};

            flatIndex = getFlatIndex(localCoords);
            offset = imod(flatIndex, 4);

            flatIndex = idiv(flatIndex, 4, 1.);

            int r = flatIndex / texShape[1];
            int c = imod(flatIndex, texShape[1]);
            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
            values = ${s.texture2D}(A, uv);

            if (offset == 0) {
              result[${l}] = values[0];
            } else if (offset == 1) {
              result[${l}] = values[1];
            } else if (offset == 2) {
              result[${l}] = values[2];
            } else {
              result[${l}] = values[3];
            }
          }
        }
        `;
      }
    this.userCode = `
        ${this.enableShapeUniforms ? mb() : fb(t)}

        void main() {
          ivec3 coords = getOutputCoords();

          vec4 result = vec4(0.);
          int flatIndex, r, c, offset;
          ivec3 localCoords;
          vec2 uv;
          vec4 values;

          ${r}

          ${s.output} = ${o};
        }
    `;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function vH(n) {
  const t = je(), e = `${t.version}
    precision highp float;
    ${t.attribute} vec3 clipSpacePos;
    ${t.attribute} vec2 uv;
    ${t.varyingVs} vec2 resultUV;

    void main() {
      gl_Position = vec4(clipSpacePos, 1);
      resultUV = uv;
    }`;
  return iB(n, e);
}
function CH(n) {
  const t = new Float32Array([-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);
  return hB(n, t);
}
function kH(n) {
  const t = new Uint16Array([0, 1, 2, 2, 1, 3]);
  return dB(n, t);
}
function Pc(n, t, e, s, r, o) {
  fB(t, e);
  const i = pB(n), a = n.TEXTURE_2D;
  return ut(n, () => n.bindTexture(a, i)), ut(n, () => n.texParameteri(a, n.TEXTURE_WRAP_S, n.CLAMP_TO_EDGE)), ut(n, () => n.texParameteri(a, n.TEXTURE_WRAP_T, n.CLAMP_TO_EDGE)), ut(n, () => n.texParameteri(a, n.TEXTURE_MIN_FILTER, n.NEAREST)), ut(n, () => n.texParameteri(a, n.TEXTURE_MAG_FILTER, n.NEAREST)), V().getNumber("WEBGL_VERSION") === 1 ? ut(n, () => n.texImage2D(a, 0, s, t, e, 0, r, o, null)) : ut(n, () => n.texStorage2D(a, 1, s, t, e)), ut(n, () => n.bindTexture(n.TEXTURE_2D, null)), { texture: i, texShape: [e, t] };
}
function Mv(n) {
  return n.internalFormatFloat;
}
function TH(n, t, e, s) {
  const [r, o] = Vc(t, e);
  return Pc(n, r, o, Mv(s), s.textureFormatFloat, n.FLOAT);
}
function Pv(n) {
  return n.internalFormatHalfFloat;
}
function NH(n, t, e, s) {
  const [r, o] = Vc(t, e);
  return Pc(n, r, o, Pv(s), s.textureFormatFloat, s.textureTypeHalfFloat);
}
function Xv(n) {
  return n.downloadTextureFormat;
}
function $H(n, t, e, s) {
  const [r, o] = Vc(t, e);
  return Pc(n, r, o, Xv(s), n.RGBA, n.UNSIGNED_BYTE);
}
function _v(n) {
  return n.internalFormatPackedFloat;
}
function RH(n, t, e, s) {
  const [r, o] = pa(t, e);
  return Pc(n, r, o, _v(s), n.RGBA, n.FLOAT);
}
function Kv(n) {
  return n.internalFormatPackedHalfFloat;
}
function EH(n, t, e, s) {
  const [r, o] = pa(t, e);
  return Pc(n, r, o, Kv(s), n.RGBA, s.textureTypeHalfFloat);
}
function LH(n, t, e) {
  return ut(n, () => n.bindBuffer(n.ARRAY_BUFFER, e)), Ex(n, t, "clipSpacePos", e, 3, 20, 0) && Ex(n, t, "uv", e, 2, 20, 12);
}
function DH(n, t, e, s, r, o) {
  ut(n, () => n.bindTexture(n.TEXTURE_2D, t));
  let i, a, l;
  r instanceof Uint8Array ? (i = new Uint8Array(e * s * 4), a = n.UNSIGNED_BYTE, l = n.RGBA) : (i = new Float32Array(e * s * 4), a = n.FLOAT, l = o.internalFormatPackedFloat), i.set(r), V().getNumber("WEBGL_VERSION") === 2 ? ut(n, () => n.texSubImage2D(n.TEXTURE_2D, 0, 0, 0, e, s, n.RGBA, a, i)) : ut(n, () => n.texImage2D(n.TEXTURE_2D, 0, l, e, s, 0, n.RGBA, a, i)), ut(n, () => n.bindTexture(n.TEXTURE_2D, null));
}
function GH(n, t, e) {
  ut(n, () => n.bindTexture(n.TEXTURE_2D, t)), e.data instanceof Uint8Array ? V().getNumber("WEBGL_VERSION") === 2 ? ut(n, () => n.texSubImage2D(n.TEXTURE_2D, 0, 0, 0, e.width, e.height, n.RGBA, n.UNSIGNED_BYTE, e.data)) : ut(n, () => n.texImage2D(n.TEXTURE_2D, 0, n.RGBA, e.width, e.height, 0, n.RGBA, n.UNSIGNED_BYTE, e.data)) : V().getNumber("WEBGL_VERSION") === 2 ? ut(n, () => n.texSubImage2D(n.TEXTURE_2D, 0, 0, 0, n.RGBA, n.UNSIGNED_BYTE, e)) : ut(n, () => n.texImage2D(n.TEXTURE_2D, 0, n.RGBA, n.RGBA, n.UNSIGNED_BYTE, e)), ut(n, () => n.bindTexture(n.TEXTURE_2D, null));
}
function FH(n, t, e, s) {
  const r = n.createBuffer();
  ut(n, () => n.bindBuffer(n.PIXEL_PACK_BUFFER, r));
  const a = 4 * 4 * t * e;
  return ut(n, () => n.bufferData(n.PIXEL_PACK_BUFFER, a, n.STREAM_READ)), ut(n, () => n.readPixels(0, 0, e, t, n.RGBA, n.FLOAT, 0)), ut(n, () => n.bindBuffer(n.PIXEL_PACK_BUFFER, null)), r;
}
function OH(n, t, e) {
  const s = n, r = new Float32Array(e);
  return s.bindBuffer(s.PIXEL_PACK_BUFFER, t), s.getBufferSubData(s.PIXEL_PACK_BUFFER, 0, r), s.bindBuffer(s.PIXEL_PACK_BUFFER, null), r;
}
function AH(n, t, e, s) {
  const [r, o] = Vc(t, e), i = 4, a = new Uint8Array(qZ(t * e, i));
  return ut(n, () => n.readPixels(0, 0, r, o, s.downloadTextureFormat, n.UNSIGNED_BYTE, a)), new Float32Array(a.buffer);
}
function zH(n, t, e, s, r, o, i, a) {
  const l = n, c = new Float32Array(tB(o, i));
  return l.bindBuffer(l.PIXEL_PACK_BUFFER, t), l.getBufferSubData(l.PIXEL_PACK_BUFFER, 0, c), l.bindBuffer(l.PIXEL_PACK_BUFFER, null), c;
}
function WH(n, t, e) {
  const s = new Float32Array(t * e * 4);
  return ut(n, () => n.readPixels(0, 0, e, t, n.RGBA, n.FLOAT, s)), s;
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class jp {
  constructor(t) {
    this.outputTexture = null, this.program = null, this.disposed = !1, this.vertexAttrsAreBound = !1, this.itemsToPoll = [];
    const e = V().getNumber("WEBGL_VERSION");
    t != null ? (this.gl = t, jZ(e, t)) : this.gl = ls(e);
    let s = "WEBGL_color_buffer_float";
    const r = "EXT_color_buffer_half_float";
    if (this.parallelCompilationExtension = this.gl.getExtension("KHR_parallel_shader_compile"), V().getNumber("WEBGL_VERSION") === 1) {
      const o = "OES_texture_float", i = "OES_texture_half_float";
      if (this.textureFloatExtension = ru(this.gl, o), Zn(this.gl, i))
        this.textureHalfFloatExtension = ru(this.gl, i);
      else if (V().get("WEBGL_FORCE_F16_TEXTURES"))
        throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");
      if (this.colorBufferFloatExtension = this.gl.getExtension(s), Zn(this.gl, r))
        this.colorBufferHalfFloatExtension = ru(this.gl, r);
      else if (V().get("WEBGL_FORCE_F16_TEXTURES"))
        throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");
    } else if (s = "EXT_color_buffer_float", Zn(this.gl, s))
      this.colorBufferFloatExtension = this.gl.getExtension(s);
    else if (Zn(this.gl, r))
      this.colorBufferHalfFloatExtension = this.gl.getExtension(r);
    else
      throw new Error("GL context does not support color renderable floats");
    this.vertexBuffer = CH(this.gl), this.indexBuffer = kH(this.gl), this.framebuffer = mB(this.gl), this.textureConfig = pb(this.gl, this.textureHalfFloatExtension);
  }
  get debug() {
    return V().getBool("DEBUG");
  }
  dispose() {
    if (this.disposed)
      return;
    this.program != null && console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."), this.outputTexture != null && console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");
    const t = this.gl;
    ut(t, () => t.finish()), ut(t, () => t.bindFramebuffer(t.FRAMEBUFFER, null)), ut(t, () => t.deleteFramebuffer(this.framebuffer)), ut(t, () => t.bindBuffer(t.ARRAY_BUFFER, null)), ut(t, () => t.bindBuffer(t.ELEMENT_ARRAY_BUFFER, null)), ut(t, () => t.deleteBuffer(this.indexBuffer)), this.disposed = !0;
  }
  createFloat32MatrixTexture(t, e) {
    return this.throwIfDisposed(), TH(this.gl, t, e, this.textureConfig);
  }
  createFloat16MatrixTexture(t, e) {
    return this.throwIfDisposed(), NH(this.gl, t, e, this.textureConfig);
  }
  createUnsignedBytesMatrixTexture(t, e) {
    return this.throwIfDisposed(), $H(this.gl, t, e, this.textureConfig);
  }
  uploadPixelDataToTexture(t, e) {
    this.throwIfDisposed(), GH(this.gl, t, e);
  }
  uploadDenseMatrixToTexture(t, e, s, r) {
    this.throwIfDisposed(), DH(this.gl, t, e, s, r, this.textureConfig);
  }
  createFloat16PackedMatrixTexture(t, e) {
    return this.throwIfDisposed(), EH(this.gl, t, e, this.textureConfig);
  }
  createPackedMatrixTexture(t, e) {
    return this.throwIfDisposed(), RH(this.gl, t, e, this.textureConfig);
  }
  deleteMatrixTexture(t) {
    this.throwIfDisposed(), this.outputTexture === t && (Lx(this.gl, this.framebuffer), this.outputTexture = null), ut(this.gl, () => this.gl.deleteTexture(t));
  }
  downloadByteEncodedFloatMatrixFromOutputTexture(t, e, s) {
    return this.downloadMatrixDriver(t, () => AH(this.gl, e, s, this.textureConfig));
  }
  downloadPackedMatrixFromBuffer(t, e, s, r, o, i) {
    return zH(this.gl, t, e, s, r, o, i, this.textureConfig);
  }
  downloadFloat32MatrixFromBuffer(t, e) {
    return OH(this.gl, t, e);
  }
  createBufferFromTexture(t, e, s) {
    this.bindTextureToFrameBuffer(t);
    const r = FH(this.gl, e, s, this.textureConfig);
    return this.unbindTextureToFrameBuffer(), r;
  }
  createAndWaitForFence() {
    const t = this.createFence(this.gl);
    return this.pollFence(t);
  }
  createFence(t) {
    let e, s;
    if (V().getBool("WEBGL_FENCE_API_ENABLED")) {
      const r = t, o = r.fenceSync(r.SYNC_GPU_COMMANDS_COMPLETE, 0);
      t.flush(), s = () => {
        const i = r.clientWaitSync(o, 0, 0);
        return i === r.ALREADY_SIGNALED || i === r.CONDITION_SATISFIED;
      }, e = o;
    } else
      V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 ? (e = this.beginQuery(), this.endQuery(), s = () => this.isQueryAvailable(e, V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))) : s = () => !0;
    return { query: e, isFencePassed: s };
  }
  downloadMatrixFromPackedTexture(t, e, s) {
    return this.downloadMatrixDriver(t, () => WH(this.gl, e, s));
  }
  createProgram(t) {
    this.throwIfDisposed();
    const e = this.gl;
    this.vertexShader == null && (this.vertexShader = vH(e));
    const s = cB(e);
    return ut(e, () => e.attachShader(s, this.vertexShader)), ut(e, () => e.attachShader(s, t)), uB(e, s), this.debug && Zp(e, s), this.vertexAttrsAreBound || (this.setProgram(s), this.vertexAttrsAreBound = LH(e, this.program, this.vertexBuffer)), s;
  }
  deleteProgram(t) {
    this.throwIfDisposed(), t === this.program && (this.program = null), t != null && ut(this.gl, () => this.gl.deleteProgram(t));
  }
  setProgram(t) {
    this.throwIfDisposed(), this.program = t, this.program != null && this.debug && Zp(this.gl, this.program), ut(this.gl, () => this.gl.useProgram(t));
  }
  getUniformLocation(t, e, s = !0) {
    return this.throwIfDisposed(), s ? yB(this.gl, t, e) : bB(this.gl, t, e);
  }
  getAttributeLocation(t, e) {
    return this.throwIfDisposed(), ut(this.gl, () => this.gl.getAttribLocation(t, e));
  }
  getUniformLocationNoThrow(t, e) {
    return this.throwIfDisposed(), this.gl.getUniformLocation(t, e);
  }
  setInputMatrixTexture(t, e, s) {
    this.throwIfDisposed(), this.throwIfNoProgram(), xB(this.gl, t, e, s);
  }
  setOutputMatrixTexture(t, e, s) {
    this.setOutputMatrixTextureDriver(t, s, e);
  }
  setOutputPackedMatrixTexture(t, e, s) {
    this.throwIfDisposed();
    const [r, o] = pa(e, s);
    this.setOutputMatrixTextureDriver(t, r, o);
  }
  setOutputMatrixWriteRegion(t, e, s, r) {
    this.setOutputMatrixWriteRegionDriver(s, t, r, e);
  }
  setOutputPackedMatrixWriteRegion(t, e, s, r) {
    throw new Error("setOutputPackedMatrixWriteRegion not implemented.");
  }
  debugValidate() {
    this.program != null && Zp(this.gl, this.program), ou(this.gl);
  }
  executeProgram() {
    this.throwIfDisposed(), this.throwIfNoProgram();
    const t = this.gl;
    this.debug && this.debugValidate(), ut(t, () => t.drawElements(t.TRIANGLES, 6, t.UNSIGNED_SHORT, 0));
  }
  blockUntilAllProgramsCompleted() {
    this.throwIfDisposed(), ut(this.gl, () => this.gl.finish());
  }
  getQueryTimerExtension() {
    return this.disjointQueryTimerExtension == null && (this.disjointQueryTimerExtension = ru(this.gl, V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") === 2 ? "EXT_disjoint_timer_query_webgl2" : "EXT_disjoint_timer_query")), this.disjointQueryTimerExtension;
  }
  getQueryTimerExtensionWebGL2() {
    return this.getQueryTimerExtension();
  }
  getQueryTimerExtensionWebGL1() {
    return this.getQueryTimerExtension();
  }
  beginQuery() {
    if (V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") === 2) {
      const s = this.gl, r = this.getQueryTimerExtensionWebGL2(), o = s.createQuery();
      return s.beginQuery(r.TIME_ELAPSED_EXT, o), o;
    }
    const t = this.getQueryTimerExtensionWebGL1(), e = t.createQueryEXT();
    return t.beginQueryEXT(t.TIME_ELAPSED_EXT, e), e;
  }
  endQuery() {
    if (V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") === 2) {
      const e = this.gl, s = this.getQueryTimerExtensionWebGL2();
      e.endQuery(s.TIME_ELAPSED_EXT);
      return;
    }
    const t = this.getQueryTimerExtensionWebGL1();
    t.endQueryEXT(t.TIME_ELAPSED_EXT);
  }
  async waitForQueryAndGetTime(t) {
    return await xf(() => this.disposed || this.isQueryAvailable(t, V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))), this.getQueryTime(t, V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"));
  }
  getQueryTime(t, e) {
    if (e === 0)
      return null;
    if (e === 2) {
      const s = this.gl;
      return s.getQueryParameter(t, s.QUERY_RESULT) / 1e6;
    } else {
      const s = this.getQueryTimerExtensionWebGL1();
      return s.getQueryObjectEXT(t, s.QUERY_RESULT_EXT) / 1e6;
    }
  }
  isQueryAvailable(t, e) {
    if (e === 0)
      return !0;
    if (e === 2) {
      const s = this.gl, r = this.getQueryTimerExtensionWebGL2(), o = s.getQueryParameter(t, s.QUERY_RESULT_AVAILABLE);
      return this.disjoint == null && (this.disjoint = this.gl.getParameter(r.GPU_DISJOINT_EXT)), o && !this.disjoint;
    } else {
      const s = this.getQueryTimerExtensionWebGL1(), r = s.getQueryObjectEXT(t, s.QUERY_RESULT_AVAILABLE_EXT);
      return this.disjoint == null && (this.disjoint = this.gl.getParameter(s.GPU_DISJOINT_EXT)), r && !this.disjoint;
    }
  }
  pollFence(t) {
    return new Promise((e) => {
      this.addItemToPoll(() => t.isFencePassed(), () => e());
    });
  }
  pollItems() {
    const t = VH(this.itemsToPoll.map((e) => e.isDoneFn));
    for (let e = 0; e <= t; ++e) {
      const { resolveFn: s } = this.itemsToPoll[e];
      s();
    }
    this.itemsToPoll = this.itemsToPoll.slice(t + 1);
  }
  addItemToPoll(t, e) {
    if (this.itemsToPoll.push({ isDoneFn: t, resolveFn: e }), this.itemsToPoll.length > 1)
      return;
    let s;
    "setTimeoutCustom" in V().platform && (s = V().platform.setTimeoutCustom.bind(V().platform)), xf(() => (this.pollItems(), this.itemsToPoll.length === 0), () => 0, null, s);
  }
  bindTextureToFrameBuffer(t) {
    this.throwIfDisposed(), Bp(this.gl, t, this.framebuffer), this.debug && ou(this.gl);
  }
  unbindTextureToFrameBuffer() {
    this.outputTexture != null ? (Bp(this.gl, this.outputTexture, this.framebuffer), this.debug && ou(this.gl)) : Lx(this.gl, this.framebuffer);
  }
  downloadMatrixDriver(t, e) {
    this.bindTextureToFrameBuffer(t);
    const s = e();
    return this.unbindTextureToFrameBuffer(), s;
  }
  setOutputMatrixTextureDriver(t, e, s) {
    this.throwIfDisposed();
    const r = this.gl;
    Bp(r, t, this.framebuffer), this.debug && ou(r), this.outputTexture = t, ut(r, () => r.viewport(0, 0, e, s)), ut(r, () => r.scissor(0, 0, e, s));
  }
  setOutputMatrixWriteRegionDriver(t, e, s, r) {
    this.throwIfDisposed(), ut(this.gl, () => this.gl.scissor(t, e, s, r));
  }
  throwIfDisposed() {
    if (this.disposed)
      throw new Error("Attempted to use disposed GPGPUContext.");
  }
  throwIfNoProgram() {
    if (this.program == null)
      throw new Error("No GPU program is currently set.");
  }
}
function VH(n) {
  let t = 0;
  for (; t < n.length && n[t](); ++t)
    ;
  return t - 1;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function MH(n) {
  const t = new Float32Array(n.length);
  for (let e = 0; e < n.length; ++e)
    t[e] = Math.abs(n[e]);
  return t;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Fn(n) {
  return (t, e, s, r, o) => {
    const i = bt(t, e), a = i.length, l = lt(i), c = P(i), u = jt(o, c), h = t.length, d = e.length, p = lt(t), f = lt(e), m = Ps(t, i), g = Ps(e, i);
    if (m.length + g.length === 0)
      for (let y = 0; y < u.length; ++y)
        u[y] = n(s[y % s.length], r[y % r.length]);
    else
      for (let y = 0; y < u.length; ++y) {
        const b = Ts(y, a, l), w = b.slice(-h);
        m.forEach((T) => w[T] = 0);
        const x = mn(w, h, p), S = b.slice(-d);
        g.forEach((T) => S[T] = 0);
        const v = mn(S, d, f);
        u[y] = n(s[x], r[v]);
      }
    return [u, i];
  };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function PH(n, t, e, s) {
  if (s === "int32") {
    const r = Int32Array.from(n);
    return [t, "int32", r];
  }
  if (s === "bool") {
    const r = Hs([0], e), [o, i] = Fn((a, l) => a !== l ? 1 : 0)(t, [], n, r, "bool");
    return [i, "bool", o];
  }
  throw new Error(`Error in Cast: failed to cast ${e} to ${s}`);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const XH = Fn((n, t) => n + t);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _H(n, t, e, s, r) {
  const o = P(s), i = ae(r, e);
  for (let a = 0; a < n.length; a++) {
    const l = n[a];
    if (l < 0)
      throw new Error("Input x must be non-negative!");
    l >= r || (o > 0 ? i[l] += t[a] : i[l] += 1);
  }
  return i;
}
function KH(n, t, e, s = !1) {
  const r = n.shape[0], o = n.shape[1], i = gt([r, e], t.dtype);
  for (let a = 0; a < r; a++)
    for (let l = 0; l < o; l++) {
      const c = n.get(a, l);
      if (c < 0)
        throw new Error("Input x must be non-negative!");
      c >= e || (s ? i.set(1, a, c) : t.size > 0 ? i.set(i.get(a, c) + t.get(a, l), a, c) : i.set(i.get(a, c) + 1, a, c));
    }
  return i;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Rr(n) {
  return (t, e, s) => {
    const r = jt(e, t.length);
    for (let o = 0; o < t.length; ++o)
      r[o] = n(t[o], s);
    return r;
  };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ZH = Rr((n) => Math.ceil(n));
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function BH(n, t, e, s) {
  const r = Gt(e, P(t));
  if (s && e !== "string") {
    let o = 0;
    n.forEach((i) => {
      const a = P(i.shape);
      r.set(i.vals, o), o += a;
    });
  } else {
    let o = 0;
    n.forEach((i) => {
      const a = e === "string" ? Zs(i.vals) : i.vals;
      let l = 0;
      for (let c = 0; c < i.shape[0]; ++c) {
        const u = c * t[1] + o;
        for (let h = 0; h < i.shape[1]; ++h)
          r[u + h] = a[l++];
      }
      o += i.shape[1];
    });
  }
  return r;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const HH = Fn((n, t) => n === t ? 1 : 0);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const UH = Rr((n) => Math.exp(n));
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const YH = Rr((n) => Math.expm1(n));
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const jH = Rr((n) => Math.floor(n));
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function JH(n, t, e, s, r, o, i, a, l) {
  const c = gt([s, o], e);
  for (let u = 0; u < s; u++) {
    const h = [];
    let d = 0;
    for (let p = 0; p < r; p++) {
      const f = n[u * r + p];
      d += f * i[p], h.push(f);
    }
    if (d < 0 || d >= l / o)
      throw new Error(`Invalid indices: ${h} does not index into ${a}`);
    for (let p = 0; p < o; p++)
      c.values[u * o + p] = t.get(...t.indexToLoc(d * o + p));
  }
  return c;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function QH(n, t, e) {
  const s = gt(e, n.dtype);
  for (let r = 0; r < s.size; ++r) {
    const i = s.indexToLoc(r).slice(), a = i[0], l = i[2], c = t.locToIndex([a, l]);
    i[2] = t.values[c];
    const u = n.locToIndex(i);
    0 <= u && u < n.values.length && (s.values[r] = n.values[u]);
  }
  return s;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const qH = Fn((n, t) => n > t ? 1 : 0);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const tU = Fn((n, t) => n >= t ? 1 : 0);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const eU = Fn((n, t) => n < t ? 1 : 0);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const nU = Fn((n, t) => n <= t ? 1 : 0);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sU(n, t, e) {
  const s = (t - n) / (e - 1), r = ae(e, "float32");
  r[0] = n;
  for (let o = 1; o < r.length; o++)
    r[o] = r[o - 1] + s;
  return r;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const rU = Rr((n) => Math.log(n));
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function oU(n, t, e, s) {
  const r = jt(s, P(e));
  for (let o = 0; o < r.length; ++o) {
    const i = o * t;
    let a = n[i];
    for (let l = 0; l < t; ++l) {
      const c = n[i + l];
      (Number.isNaN(c) || c > a) && (a = c);
    }
    r[o] = a;
  }
  return r;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const iU = Fn((n, t) => Math.max(n, t));
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const aU = Fn((n, t) => Math.min(n, t));
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Zv = Fn((n, t) => n * t);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function lU(n, t, e) {
  const s = Ns(-1, e);
  return Zv([], t, s, n, e);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const cU = Fn((n, t) => n !== t ? 1 : 0);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function uU(n, t, e, s, r) {
  const o = t.length, i = P(t), a = lt(t), l = lt(r), c = jt(e, P(r));
  for (let u = 0; u < i; ++u) {
    const h = Ts(u, o, a), d = new Array(h.length);
    for (let f = 0; f < d.length; f++)
      d[f] = h[s[f]];
    const p = mn(d, o, l);
    c[p] = n[u];
  }
  return c;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function hU(n, t, e, s) {
  const [r, o] = ve(n, s), i = He(t, "int32"), a = ae(P(r), i), l = P(o);
  for (let c = 0; c < a.length; ++c) {
    const u = c * l;
    let h = 1;
    for (let d = 0; d < l; ++d)
      h *= e[u + d];
    a[c] = h;
  }
  return { outVals: a, outShape: r, outDtype: i };
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function dU(n, t, e) {
  n.forEach((s, r) => {
    if (s < 0 || s >= e) {
      const o = Ts(r, t.length, lt(t)).join(",");
      throw new Error(`indices[${o}] = ${s} is not in [0, ${e})`);
    }
  });
}
function pU(n, t) {
  for (let e = 0; e < n.length; ++e) {
    const s = n[e], r = e === n.length - 1 ? t : n[e + 1].length;
    if (s.length === 0)
      throw new Error("Ragged splits may not be empty");
    if (s[0] < 0)
      throw new Error("Ragged splits must be non-negative");
    if (s[s.length - 1] > r)
      throw new Error("Ragged splits must not point past values");
    for (let o = 1; o < s.length; ++o)
      if (s[o - 1] > s[o])
        throw new Error("Ragged splits must be sorted in ascending order");
  }
}
function fU(n, t, e, s) {
  const r = [];
  let o = 0;
  const i = t.length - 1 + e.length, a = new Array(i).fill(null).map(() => [0]);
  pU(e, s);
  let l = 1;
  for (let c = 0; c < t.length - 1; ++c) {
    l *= t[c];
    const u = t[c + 1];
    for (let h = 1; h < l + 1; ++h)
      a[c].push(h * u);
  }
  for (let c = 0; c < n.length; ++c) {
    let u = n[c], h = n[c] + 1;
    for (let d = 0; d < e.length; ++d) {
      const p = e[d], f = d + t.length - 1;
      if (f >= 0) {
        const m = a[f], g = m[m.length - 1] - p[u];
        for (let y = u; y < h; ++y)
          a[f].push(p[y + 1] + g);
      }
      u = p[u], h = p[h];
    }
    h !== u && (r.push([u, h]), o += h - u);
  }
  return { outSplits: a, valueSlices: r, numValues: o };
}
function mU(n) {
  const t = [];
  for (let e = 0; e < n.length; ++e) {
    const s = n[e].length, r = Gt("int32", s);
    t.push(r), n[e].forEach((o, i) => r[i] = o);
  }
  return t;
}
function Fx(n, t) {
  const e = n.slice(0, t);
  for (; e.length < t; )
    e.push(1);
  for (let s = t; s < n.length; s++)
    e[t - 1] *= n[s];
  return e;
}
function gU(n, t, e, s, r, o) {
  const i = Fx(t, 2)[1], a = Fx(o, 2)[1];
  let l = 0;
  for (const c of e)
    for (let u = c[0]; u < c[1]; ++u) {
      for (let h = 0; h < s; ++h)
        r[l * a + h] = n[u * i + h];
      ++l;
    }
}
function yU(n, t, e, s, r) {
  const o = t.slice();
  o[0] = r;
  const i = Gt(e, P(o)), a = n.length, l = a === 0 ? 0 : a / t[0];
  return gU(n, t, s, l, i, o), [i, o];
}
function bU(n, t, e, s, r, o, i, a) {
  if (n.length === 0)
    throw new Error("paramsNestedSplits must be non empty");
  if (t[0].length === 0)
    throw new Error("Split tensors must not be scalars");
  const l = t[0][0] - 1;
  if (dU(o, i, l), s.length === 0)
    throw new Error("params.rank must be nonzero");
  const c = s[0], { outSplits: u, valueSlices: h, numValues: d } = fU(o, i, n, c), p = mU(u), f = yU(e, s, r, h, d);
  return [p, f[0], f[1]];
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var zn = Mn;
class Yu {
  constructor(t, e, s, r, o, i, a, l, c, u) {
    this.shape = t, this.shapeShape = e, this.values = s, this.valuesShape = r, this.valuesDType = o, this.defaultValue = i, this.defaultValueShape = a, this.rowPartitionValues = l, this.rowPartitionValuesShapes = c, this.rowPartitionTypes = Jg(u), this.raggedRank = Qg(this.rowPartitionTypes);
  }
  getRowPartitionTypeByDimension(t) {
    return this.rowPartitionTypes[0] === zn.FIRST_DIM_SIZE ? this.rowPartitionTypes[t + 1] : this.rowPartitionTypes[t];
  }
  getRowPartitionTensor(t) {
    return this.rowPartitionTypes[0] === zn.FIRST_DIM_SIZE ? this.rowPartitionValues[t + 1] : this.rowPartitionValues[t];
  }
  getMaxWidth(t) {
    const e = this.getRowPartitionTensor(t - 1);
    switch (this.getRowPartitionTypeByDimension(t - 1)) {
      case zn.VALUE_ROWIDS:
        return Yu.getMaxWidthValueRowID(e);
      case zn.ROW_SPLITS:
        return Yu.getMaxWidthRowSplit(e);
      default:
        throw new Error(`Cannot handle partition type ${zn[this.getRowPartitionTypeByDimension(t - 1)]}`);
    }
  }
  static getMaxWidthRowSplit(t) {
    const e = t.length;
    if (e === 0 || e === 1)
      return 0;
    let s = 0;
    for (let r = 0; r < e - 1; ++r) {
      const o = t[r + 1] - t[r];
      o > s && (s = o);
    }
    return s;
  }
  static getMaxWidthValueRowID(t) {
    const e = t.length;
    if (e === 0)
      return 0;
    let s = 0, r = t[0], o = 0;
    for (let i = 1; i < e; ++i) {
      const a = t[i];
      a !== r && (r = a, o = Math.max(i - s, o), s = i);
    }
    return Math.max(e - s, o);
  }
  tensorShapeFromTensor(t, e, s = !0) {
    if (e.length === 0) {
      if (t[0] === -1)
        return [];
      throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.");
    }
    return Ax(t, s);
  }
  calculateOutputSize(t) {
    const e = this.valuesShape, s = this.defaultValueShape;
    qg(s, e);
    const r = this.tensorShapeFromTensor(this.shape, this.shapeShape), i = jg(this.raggedRank, r, e);
    i[0] < 0 && (i[0] = t);
    for (let a = 1; a <= this.raggedRank; ++a)
      i[a] < 0 && (i[a] = this.getMaxWidth(a));
    return i;
  }
  calculateFirstParentOutputIndex(t, e, s) {
    const r = Math.min(t, s), o = [];
    let i = 0;
    for (let a = 0; a < r; ++a, i += e)
      o.push(i);
    for (let a = r; a < t; ++a)
      o.push(-1);
    return C(o.length === t, () => "Final length of result must be equal to firstDimension."), o;
  }
  calculateOutputIndexRowSplit(t, e, s, r) {
    const o = t.length, i = [];
    for (let a = 0; a < o - 1; ++a) {
      const l = t[a + 1] - t[a];
      let c = Math.min(r, l), u = e[a];
      u === -1 && (c = 0);
      for (let h = 0; h < c; ++h)
        i.push(u), u += s;
      for (let h = 0; h < l - c; ++h)
        i.push(-1);
    }
    if (o > 0 && i.length !== t[o - 1])
      throw new Error("Invalid row split size.");
    return i;
  }
  calculateOutputIndexValueRowID(t, e, s, r) {
    const o = t.length, i = [];
    if (o === 0)
      return [];
    let a = 0, l = t[0];
    if (l >= e.length)
      throw new Error(`Got currentValueRowId=${l}, which is not less than ${e.length}`);
    let c = e[l];
    i.push(c);
    for (let u = 1; u < o; ++u) {
      const h = t[u];
      if (h === l)
        c >= 0 && (++a, a < r ? c += s : c = -1);
      else {
        if (a = 0, l = h, h >= e.length)
          throw new Error(`Got nextValueRowId=${h} which is not less than ${e.length}`);
        c = e[h];
      }
      i.push(c);
    }
    if (i.length !== t.length)
      throw new Error("Invalid row ids.");
    return i;
  }
  calculateOutputIndex(t, e, s, r) {
    const o = this.getRowPartitionTensor(t), i = this.getRowPartitionTypeByDimension(t);
    switch (i) {
      case zn.VALUE_ROWIDS:
        return this.calculateOutputIndexValueRowID(o, e, s, r);
      case zn.ROW_SPLITS:
        if (o.length - 1 > e.length)
          throw new Error(`Row partition size is greater than output size: ${o.length - 1} > ${e.length}`);
        return this.calculateOutputIndexRowSplit(o, e, s, r);
      default:
        throw new Error(`Unsupported partition type: ${zn[i]}`);
    }
  }
  getFirstDimensionSize() {
    const t = this.rowPartitionValues[0];
    if (this.rowPartitionTypes.length === 0)
      throw new Error("No row_partition_types given.");
    const e = this.rowPartitionTypes[0];
    switch (e) {
      case zn.FIRST_DIM_SIZE:
        return t[0];
      case zn.VALUE_ROWIDS:
        throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");
      case zn.ROW_SPLITS:
        return this.rowPartitionValuesShapes[0][0] - 1;
      default:
        throw new Error(`Cannot handle type ${zn[e]}`);
    }
  }
  compute() {
    if (this.rowPartitionValues[0].length <= 0)
      throw new Error("Invalid first partition input. Tensor requires at least one element.");
    const e = this.getFirstDimensionSize(), s = this.calculateOutputSize(e), r = new Array(this.raggedRank + 1);
    r[r.length - 1] = 1;
    for (let l = r.length - 2; l >= 0; --l)
      r[l] = r[l + 1] * s[l + 1];
    const o = Ax(s, !1), i = Gt(this.valuesDType, P(o));
    if (r[0] * s[0] > 0) {
      let l = this.calculateFirstParentOutputIndex(e, r[0], s[0]);
      for (let c = 1; c <= this.raggedRank; ++c)
        l = this.calculateOutputIndex(c - 1, l, r[c], s[c]);
      this.setOutput(this.raggedRank, l, i, o);
    }
    return [o, i];
  }
  setOutput(t, e, s, r) {
    if (s.length === 0)
      return;
    const o = this.values, i = s;
    let a = r.slice();
    a = a.slice(t + 1);
    const l = P(a), c = e.length;
    let u = this.defaultValue;
    if (u.length !== l && u.length !== 1) {
      const f = this.defaultValueShape;
      A(() => {
        const m = G(u, f);
        u = ur(m, a).dataSync();
      });
    }
    let h = 0, d = 0, p = 0;
    for (let f = 0; f <= c; ++f) {
      let m = f < c ? e[f] : -1;
      if (m === p) {
        ++p;
        continue;
      }
      if (d < p) {
        const g = o.subarray(h * l), y = i.subarray(d * l), b = (p - d) * l;
        Ox(y, g, b);
      }
      if (f >= c) {
        const g = s.length;
        m = Math.floor(g / l);
      }
      if (m > p)
        if (this.defaultValue.length === 1)
          i.subarray(p * l, m * l).fill(this.defaultValue[0]), p = m;
        else
          for (; m > p; ) {
            const g = i.slice(p * l);
            Ox(g, u, l), ++p;
          }
      m < 0 ? (h = f + 1, d = p) : (h = f, d = p, p = d + 1);
    }
  }
}
function Ox(n, t, e) {
  for (let s = 0; s < e; s++)
    n[s] = t[s];
}
function Ax(n, t) {
  const e = [];
  for (let s of n) {
    if (s < 0) {
      if (!t)
        throw new Error(`Dimension ${s} must be >= 0`);
      if (s < -1)
        throw new Error(`Dimension ${s} must be >= -1`);
      s = -1;
    }
    e.push(s);
  }
  return e;
}
function xU(n, t, e, s, r, o, i, a, l, c) {
  return new Yu(n, t, e, s, r, o, i, a, l, c).compute();
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function wU(n, t, e, s) {
  const r = n === t, o = n < t && e < 0, i = t < n && e > 1;
  if (r || o || i)
    return ae(0, s);
  const a = Math.abs(Math.ceil((t - n) / e)), l = ae(a, s);
  t < n && e === 1 && (e = -1), l[0] = n;
  for (let c = 1; c < l.length; c++)
    l[c] = l[c - 1] + e;
  return l;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const IU = Rr((n) => 1 / Math.sqrt(n));
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function SU(n, t, e, s, r, o, i, a, l, c) {
  const u = [s / r, r], h = n.values, d = t.values;
  if (s === 0)
    return gt(e, t.dtype);
  const p = gt(u, t.dtype);
  typeof l == "string" || typeof l == "number" ? p.values.fill(l) : typeof l == "boolean" && p.values.fill(+l);
  for (let f = 0; f < o; f++) {
    const m = [];
    let g = 0;
    for (let y = 0; y < i; y++) {
      const b = h[f * i + y];
      m.push(b), g += b * a[y];
    }
    if (g < 0 || g >= s / r)
      throw new Error(`Invalid indices: ${m} does not index into ${e}`);
    for (let y = 0; y < r; y++)
      c ? p.values[g * r + y] += d[f * r + y] : p.values[g * r + y] = t.rank === 0 ? d[0] : d[f * r + y];
  }
  return p;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const vU = Rr((n) => 1 / (1 + Math.exp(-n)));
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function CU(n, t, e, s, r) {
  const o = cd(s, t, e), i = P(e), a = lt(s);
  if (o) {
    const h = ud(t, a);
    return r === "string" ? n.slice(h, h + i) : n.subarray(h, h + i);
  }
  const l = r === "string" ? Zs(n) : n, c = gt(s, r, l), u = gt(e, r);
  for (let h = 0; h < u.size; ++h) {
    const d = u.indexToLoc(h), p = d.map((f, m) => f + t[m]);
    u.set(c.get(...p), ...d);
  }
  return r === "string" ? Ry(u.values) : u.values;
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function kU(n, t, e, s, r, o, i) {
  const a = t[0], l = o[0], c = new Array(l), u = new Array(a), h = t[1];
  if (l === 0) {
    if (a !== 0)
      throw new Error(yy(a));
    const g = Gt(e, 0), y = Gt(r, 0);
    return [
      g,
      [0, h],
      y,
      c,
      u
    ];
  }
  let d = !0, p = 0;
  const f = new Array(l).fill(0);
  for (let g = 0; g < a; ++g) {
    const y = n[g * h];
    if (y < 0)
      throw new Error(by(g, y));
    if (y >= l)
      throw new Error(xy(g, y, l));
    ++f[y], d = d && y >= p, p = y;
  }
  let m = !0;
  for (let g = 0; g < l; ++g) {
    const y = f[g] === 0;
    c[g] = y, m = m && !y, f[g] = Math.max(f[g], 1), g > 0 && (f[g] += f[g - 1]);
  }
  if (m && d) {
    const g = n, y = s;
    for (let b = 0; b < a; ++b)
      u[b] = b;
    return [
      g,
      [a, h],
      y,
      c,
      u
    ];
  } else {
    const g = f[l - 1], y = Gt(e, g * h), b = Gt(r, g), w = new Array(l).fill(0);
    for (let x = 0; x < a; ++x) {
      const S = n[x * h], v = w[S], T = (S === 0 ? 0 : f[S - 1]) + v;
      w[S]++;
      for (let N = 0; N < h; ++N)
        y[T * h + N] = n[x * h + N];
      b[T] = s[x], u[x] = T;
    }
    for (let x = 0; x < l; ++x)
      if (w[x] === 0) {
        const v = x === 0 ? 0 : f[x - 1];
        y[v * h + 0] = x;
        for (let T = 1; T < h; ++T)
          y[v * h + T] = 0;
        b[v] = i;
      }
    return [
      y,
      [g, h],
      b,
      c,
      u
    ];
  }
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function TU(n, t, e, s, r) {
  const o = P(s), i = t[0], a = r.length, l = [];
  let c = 1, u = -1;
  for (let g = 0; g < a; ++g) {
    const y = r[g];
    if (y === -1) {
      if (u !== -1)
        throw new Error(wy(u, g));
      u = g, l.push(1);
    } else {
      if (y < 0)
        throw new Error(Iy(g, y));
      c *= y, l.push(y);
    }
  }
  if (u !== -1) {
    if (c <= 0)
      throw new Error(Sy());
    const g = Math.trunc(o / c);
    if (c * g !== o)
      throw new Error(vy(s, l));
    l[u] = g;
  }
  if (P(l) !== o)
    throw new Error(Cy(s, l));
  const d = s.length, p = [];
  if (d > 0) {
    p[d - 1] = 1;
    for (let g = d - 2; g >= 0; --g)
      p[g] = p[g + 1] * s[g + 1];
  }
  const f = [];
  if (a > 0) {
    f[a - 1] = 1;
    for (let g = a - 2; g >= 0; --g)
      f[g] = f[g + 1] * l[g + 1];
  }
  const m = Gt(e, i * a);
  for (let g = 0; g < i; ++g) {
    let y = 0;
    for (let b = 0; b < d; ++b)
      y += n[g * d + b] * p[b];
    for (let b = 0; b < a; ++b)
      m[g * a + b] = Math.trunc(y / f[b]), y %= f[b];
  }
  return [m, [i, a], l];
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function NU(n, t, e, s, r, o = !1, i = 0) {
  const a = s.length, l = [t[0], n.length / t[0]], c = l[1], h = a > 0 ? r[a - 1] + 1 : 0;
  if (h < 0)
    throw new Error(Ya());
  const d = t.slice();
  d[0] = h;
  const p = d.reduce((w, x) => w * x, 1), f = Gt(e, p);
  if (a === 0)
    return h > 0 && f.fill(i), [f, d];
  if (h <= 0)
    throw new Error(Ya());
  let m = 0, g = 1, y = 0, b = r[m];
  for (; ; ) {
    let w = 0;
    if (g < a) {
      if (w = r[g], b === w) {
        ++g;
        continue;
      }
      if (b >= w)
        throw new Error(ky());
    }
    if (b < 0 || b >= h)
      throw new Error(Ty(b, h));
    b > y && f.fill(i, y * c, b * c);
    for (let x = m; x < g; ++x) {
      const S = s[x];
      if (S < 0 || S >= l[0])
        throw new Error(Ny(x, s[x], l[0]));
      for (let v = 0; v < c; v++)
        f[b * c + v] += n[S * c + v];
    }
    if (o)
      for (let x = 0; x < c; x++)
        f[b * c + x] /= g - m;
    if (m = g, ++g, y = b + 1, b = w, g > a)
      break;
  }
  return y < h && f.fill(i, y * c, h * c), [f, d];
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const $U = Rr((n) => Math.sqrt(n));
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const RU = Fn((n, t) => {
  const e = n - t;
  return e * e;
});
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function EU(n, t, e, s) {
  const r = gt(n, t.dtype);
  for (let o = 0; o < r.size; o++) {
    const i = r.indexToLoc(o), a = new Array(i.length);
    for (let l = 0; l < a.length; l++)
      a[l] = i[l] * e[l] + s[l];
    r.set(t.get(...a), ...i);
  }
  return r;
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class LU {
  constructor(t, e, s, r, o, i) {
    this.separator = Ln(t), this.nGramWidths = e, this.leftPad = Ln(s), this.rightPad = Ln(r), this.padWidth = o, this.preserveShort = i;
  }
  getPadWidth(t) {
    return Math.min(this.padWidth < 0 ? t - 1 : this.padWidth, t - 1);
  }
  getNumNGrams(t, e) {
    const s = this.getPadWidth(e);
    return Math.max(0, t + 2 * s - e + 1);
  }
  createNGrams(t, e, s, r, o, i) {
    for (let a = 0; a < o; ++a) {
      const l = this.getPadWidth(i), c = Math.max(0, l - a), u = Math.max(0, l - (o - (a + 1))), h = i - (c + u), d = e + (c > 0 ? 0 : a - l);
      let p = 0;
      p += c * this.leftPad.length;
      for (let b = 0; b < h; ++b)
        p += t[d + b].length;
      p += u * this.rightPad.length;
      const f = c + u + h - 1;
      p += f * this.separator.length, s[r + a] = new Uint8Array(p);
      const m = s[r + a];
      let g = 0;
      const y = (b) => b.forEach((w) => m[g++] = w);
      for (let b = 0; b < c; ++b)
        y(this.leftPad), y(this.separator);
      for (let b = 0; b < h - 1; ++b)
        y(t[d + b]), y(this.separator);
      if (h > 0) {
        y(t[d + h - 1]);
        for (let b = 0; b < u; ++b)
          y(this.separator), y(this.rightPad);
      } else {
        for (let b = 0; b < u - 1; ++b)
          y(this.rightPad), y(this.separator);
        y(this.rightPad);
      }
    }
  }
  compute(t, e) {
    const s = t.length, r = e.length;
    if (r > 0) {
      let l = e[0];
      if (l !== 0)
        throw new Error(`First split value must be 0, got ${l}`);
      for (let c = 1; c < r; ++c) {
        let u = e[c] >= l;
        if (u = u && e[c] <= s, !u)
          throw new Error(`Invalid split value ${e[c]}, must be in [${l}, ${s}]`);
        l = e[c];
      }
      if (l !== s)
        throw new Error(`Last split value must be data size. Expected ${s}, got ${l}`);
    }
    const o = r - 1, i = Gt("int32", r);
    if (s === 0 || r === 0) {
      const l = new Array(s);
      for (let c = 0; c <= o; ++c)
        i[c] = 0;
      return [l, i];
    }
    i[0] = 0;
    for (let l = 1; l <= o; ++l) {
      const c = e[l] - e[l - 1];
      let u = 0;
      this.nGramWidths.forEach((h) => {
        u += this.getNumNGrams(c, h);
      }), this.preserveShort && c > 0 && u === 0 && (u = 1), i[l] = i[l - 1] + u;
    }
    const a = new Array(i[o]);
    for (let l = 0; l < o; ++l) {
      const c = e[l];
      let u = i[l];
      if (this.nGramWidths.forEach((h) => {
        const d = e[l + 1] - e[l], p = this.getNumNGrams(d, h);
        this.createNGrams(t, c, a, u, p, h), u += p;
      }), this.preserveShort && u === i[l]) {
        const h = e[l + 1] - e[l];
        if (h === 0)
          continue;
        const d = h + 2 * this.padWidth, p = 1;
        this.createNGrams(t, c, a, u, p, d);
      }
    }
    return [a, i];
  }
}
function DU(n, t, e, s, r, o, i, a) {
  return new LU(e, s, r, o, i, a).compute(n, t);
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function GU(n, t, e, s) {
  if (!n.length)
    return;
  if (t.length === 0) {
    for (let o = 0; o < n.length; ++o)
      s.push(n.subarray(o, o + 1));
    return;
  }
  if (t.length === 1) {
    const o = t[0];
    let i = n.indexOf(o);
    for (; i !== -1; ) {
      const a = n.subarray(0, i);
      (!e || a.length !== 0) && s.push(a), n = n.subarray(i + 1), i = n.indexOf(o);
    }
    (!e || n.length !== 0) && s.push(n);
    return;
  }
  let r = 0;
  for (let o = 0; o < n.length + 1; o++)
    if (o === n.length || t.indexOf(n[o]) !== -1) {
      const i = n.subarray(r, o);
      (!e || i.length !== 0) && s.push(i), r = o + 1;
    }
}
function FU(n, t, e) {
  const s = n.length, r = [];
  let o = 0, i = 0;
  const a = new Array(s);
  for (let d = 0; d < s; ++d) {
    const p = r.length;
    GU(n[d], t, e, r);
    const f = r.length - p;
    a[d] = f, o += f, i = Math.max(i, f);
  }
  const l = Gt("int32", o * 2), c = new Array(o), u = [s, i];
  let h = 0;
  for (let d = 0; d < s; ++d)
    for (let p = 0; p < a[d]; ++p)
      l[h * 2] = d, l[h * 2 + 1] = p, c[h] = r[h], ++h;
  return [l, c, u];
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function OU(n, t) {
  const e = Gt("int32", n.length);
  for (let s = 0; s < n.length; ++s)
    e[s] = km(n[s]).modulo(t).getLowBitsUnsigned();
  return e;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const AU = Fn((n, t) => n - t);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function zU(n, t) {
  const e = new Array(n.rank);
  for (let r = 0; r < e.length; r++)
    e[r] = n.shape[r] * t[r];
  const s = gt(e, n.dtype);
  for (let r = 0; r < s.values.length; ++r) {
    const o = s.indexToLoc(r), i = new Array(n.rank);
    for (let l = 0; l < i.length; l++)
      i[l] = o[l] % n.shape[l];
    const a = n.locToIndex(i);
    s.values[r] = n.values[a];
  }
  return s;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Oa = (n, t) => {
  const e = t.value - n.value;
  return e === 0 ? n.index - t.index : e;
};
function Bv(n, t, e = 0, s = n.length - 1) {
  for (; s > e; ) {
    if (s - e > 600) {
      const a = s - e + 1, l = t - e + 1, c = Math.log(a), u = 0.5 * Math.exp(2 * c / 3), h = 0.5 * Math.sqrt(c * u * (a - u) / a) * Math.sign(l - a / 2), d = Math.max(e, Math.floor(t - l * u / a + h)), p = Math.min(s, Math.floor(t + (a - l) * u / a + h));
      Bv(n, t, d, p);
    }
    const r = n[t];
    let o = e, i = s;
    for (hn(n, e, t), Oa(n[s], r) > 0 && hn(n, e, s); o < i; ) {
      for (hn(n, o, i), o++, i--; Oa(n[o], r) < 0; )
        o = o + 1;
      for (; Oa(n[i], r) > 0; )
        i = i - 1;
    }
    Oa(n[e], r) === 0 ? hn(n, e, i) : (i = i + 1, hn(n, i, s)), i <= t && (e = i + 1), t <= i && (s = i - 1);
  }
}
function WU(n, t, e, s, r) {
  const o = t[t.length - 1], [i, a] = [n.length / o, o], l = jt(e, i * s), c = jt("int32", i * s);
  for (let h = 0; h < i; h++) {
    const d = h * a, p = n.subarray(d, d + a);
    let f = new Array(p.length);
    p.forEach((b, w) => f[w] = { value: b, index: w }), s < f.length && (Bv(f, s), f = f.slice(0, s)), r && f.sort(Oa);
    const m = h * s, g = l.subarray(m, m + s), y = c.subarray(m, m + s);
    for (let b = 0; b < s; b++)
      g[b] = f[b].value, y[b] = f[b].index;
  }
  const u = t.slice();
  return u[u.length - 1] = s, [
    gt(u, e, l),
    gt(u, "int32", c)
  ];
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function VU(n, t, e, s) {
  const r = vt(t, e)[0], o = [1, e[0], 1];
  for (let f = 0; f < r; f++)
    o[0] *= e[f];
  o[1] = e[r];
  for (let f = r + 1; f < e.length; f++)
    o[2] *= e[f];
  const i = {}, a = new Int32Array(e[r]), l = new ue(o, s, n), c = [], u = o[0] === 1 && o[2] === 1;
  for (let f = 0; f < e[r]; f++) {
    let m;
    if (u)
      m = n[f].toString();
    else {
      const g = [];
      for (let y = 0; y < o[0]; y++)
        for (let b = 0; b < o[2]; b++)
          g.push(l.get(y, f, b));
      m = g.join(",");
    }
    if (i[m] !== void 0)
      a[f] = i[m];
    else {
      const g = Object.keys(i).length;
      i[m] = g, a[f] = g, c.push(f);
    }
  }
  const h = o.slice();
  h[1] = Object.keys(i).length;
  const d = new ue(h, s);
  c.forEach((f, m) => {
    for (let g = 0; g < o[0]; g++)
      for (let y = 0; y < o[2]; y++)
        d.set(l.get(g, f, y), g, m, y);
  });
  const p = e.slice();
  return p[r] = h[1], {
    outputValues: d.values,
    outputShape: p,
    indices: a
  };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const MU = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  simpleAbsImpl: MH,
  addImpl: XH,
  bincountImpl: _H,
  bincountReduceImpl: KH,
  castImpl: PH,
  ceilImpl: ZH,
  concatImpl: BH,
  equalImpl: HH,
  expImpl: UH,
  expm1Impl: YH,
  floorImpl: jH,
  gatherNdImpl: JH,
  gatherV2Impl: QH,
  greaterImpl: qH,
  greaterEqualImpl: tU,
  lessImpl: eU,
  lessEqualImpl: nU,
  linSpaceImpl: sU,
  logImpl: rU,
  maxImpl: oU,
  maximumImpl: iU,
  minimumImpl: aU,
  multiplyImpl: Zv,
  negImpl: lU,
  notEqualImpl: cU,
  prodImpl: hU,
  raggedGatherImpl: bU,
  raggedTensorToTensorImpl: xU,
  rangeImpl: wU,
  rsqrtImpl: IU,
  scatterImpl: SU,
  sigmoidImpl: vU,
  sliceImpl: CU,
  sparseFillEmptyRowsImpl: kU,
  sparseReshapeImpl: TU,
  sparseSegmentReductionImpl: NU,
  sqrtImpl: $U,
  squaredDifferenceImpl: RU,
  stridedSliceImpl: EU,
  stringNGramsImpl: DU,
  stringSplitImpl: FU,
  stringToHashBucketFastImpl: OU,
  subImpl: AU,
  tileImpl: zU,
  topKImpl: WU,
  transposeImpl: uU,
  uniqueImpl: VU
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const { addImpl: PU, bincountImpl: Hv, bincountReduceImpl: XU, castImpl: _U, ceilImpl: KU, concatImpl: ZU, equalImpl: BU, expImpl: HU, expm1Impl: UU, floorImpl: YU, gatherNdImpl: jU, gatherV2Impl: JU, greaterImpl: QU, greaterEqualImpl: qU, lessImpl: t9, lessEqualImpl: e9, linSpaceImpl: n9, logImpl: s9, maxImpl: r9, maximumImpl: o9, minimumImpl: i9, multiplyImpl: a9, negImpl: l9, notEqualImpl: c9, prodImpl: u9, raggedGatherImpl: h9, raggedTensorToTensorImpl: d9, rangeImpl: p9, rsqrtImpl: f9, scatterImpl: m9, sigmoidImpl: g9, simpleAbsImpl: Uv, sliceImpl: y9, sparseFillEmptyRowsImpl: b9, sparseReshapeImpl: x9, sparseSegmentReductionImpl: Yv, sqrtImpl: w9, stridedSliceImpl: I9, stringNGramsImpl: S9, stringSplitImpl: v9, stringToHashBucketFastImpl: C9, subImpl: k9, tileImpl: T9, topKImpl: N9, transposeImpl: yb, uniqueImpl: $9 } = MU;
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function jv(n, t) {
  return ["x", "y", "z", "w", "u", "v"].slice(0, t).map((e) => `${n}.${e}`);
}
function Be(n, t) {
  return t === 1 ? [n] : jv(n, t);
}
function R9(n, t) {
  if (n === 1)
    return "rc";
  let e = "";
  for (let s = 0; s < n; s++)
    e += t[s], s < n - 1 && (e += ",");
  return e;
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class E9 {
  constructor(t) {
    if (this.variableNames = ["A"], this.packedInputs = !1, this.packedOutput = !0, this.outputShape = t, this.rank = t.length, this.enableShapeUniforms = Je(this.outputShape.length), this.rank === 0)
      this.userCode = `
        void main() {
          setOutput(vec4(getA(), 0., 0., 0.));
        }
      `;
    else {
      const e = Be("rc", this.rank), s = _t(this.rank), r = this.getOutOfBoundsCondition(e), o = this.getSetup(e), i = this.getOutput(e);
      this.userCode = `
        void main() {
          ${s} rc = getOutputCoords();

          if(${r}) {
            setOutput(vec4(0));
          } else {
            ${o}

            setOutput(vec4(${i}));
          }
        }
      `;
    }
  }
  getSourceCoordsArr(t) {
    const e = [];
    for (let s = 0; s <= 1; s++)
      for (let r = 0; r <= 1; r++) {
        let o = `${s === 0 ? "r" : "rp1"}, ${r === 0 ? "c" : "cp1"}`;
        for (let i = 2; i < this.rank; i++)
          o = `${t[t.length - 1 - i]},` + o;
        e.push(o);
      }
    return e;
  }
  getOutOfBoundsCondition(t) {
    if (this.rank === 1)
      return `rc > ${this.enableShapeUniforms ? "outShape" : this.outputShape[0]}`;
    let e = "";
    for (let s = this.rank - 2; s < this.rank; s++)
      e += `${t[s]} >= ${this.enableShapeUniforms ? `outShape[${s}]` : this.outputShape[s]}`, s < this.rank - 1 && (e += "||");
    return e;
  }
  getSetup(t) {
    if (this.rank === 1)
      return "";
    const e = t.slice(-2), s = this.enableShapeUniforms ? `outShape[${this.rank} - 1]` : this.outputShape[this.rank - 1], r = this.enableShapeUniforms ? `outShape[${this.rank} - 2]` : this.outputShape[this.rank - 2];
    return `
      int r = ${e[0]};
      int c = ${e[1]};
      int rp1 = r + 1;
      int cp1 = c + 1;

      bool cEdge = cp1 >= ${s};
      bool rEdge = rp1 >= ${r};
    `;
  }
  getOutput(t) {
    const e = this.getSourceCoordsArr(t);
    return this.rank === 1 ? `getA(rc), (rc + 1 >= ${this.enableShapeUniforms ? "outShape" : this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0` : `getA(${e[0]}),
            cEdge ? 0. : getA(${e[1]}),
            rEdge ? 0. : getA(${e[2]}),
            rEdge || cEdge ? 0. : getA(${e[3]})`;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Jv {
  constructor(t, e) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, this.customUniforms = [{ name: "inputShape", type: "ivec3" }], this.outputShape = t, this.enableShapeUniforms = Je(this.outputShape.length);
    let s = "";
    for (let r = 0; r < 4; r++) {
      let o = "thisRC = rc;";
      r % 2 === 1 && (o += "thisRC.z += 1;"), r > 1 && (o += "thisRC.y += 1;"), s += `
        ${o}
        ${r > 0 ? "if(thisRC.y < rows && thisRC.z < cols){" : ""}
          int flatIndex = getFlatIndex(thisRC);

          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);
          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));

          result[${r}] =
            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);
        ${r > 0 ? "}" : ""}
      `;
    }
    this.userCode = `
      ${L9(e, this.enableShapeUniforms)}
      ${this.enableShapeUniforms ? mb() : fb(t)}

      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0.);

        ivec3 thisRC;
        int rows = ${this.enableShapeUniforms ? "outShape[1]" : t[1]};
        int cols = ${this.enableShapeUniforms ? "outShape[2]" : t[2]};

        ${s}

        setOutput(result);
      }
    `;
  }
}
function L9(n, t) {
  return `
    ivec3 inputCoordsFromReshapedOutCoords(int index) {
      ${t ? LB(["r", "c", "d"], "inputShape") : Io(["r", "c", "d"], n)}
      return ivec3(r, c, d);
    }
  `;
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class D9 {
  constructor(t) {
    this.gpgpu = t, this.numUsedTextures = 0, this.numFreeTextures = 0, this._numBytesAllocated = 0, this._numBytesFree = 0, this.freeTextures = {}, this.logEnabled = !1, this.usedTextures = {};
  }
  acquireTexture(t, e, s) {
    const r = Wx(e, s), o = Vx(t, r, s);
    o in this.freeTextures || (this.freeTextures[o] = []), o in this.usedTextures || (this.usedTextures[o] = []);
    const i = zx(t, r, this.gpgpu.gl, this.gpgpu.textureConfig, s);
    if (this.freeTextures[o].length > 0) {
      this.numFreeTextures--, this.numUsedTextures++, this._numBytesFree -= i, this.log();
      const l = this.freeTextures[o].shift();
      return this.usedTextures[o].push(l), l;
    }
    let a;
    return r === Ge.PACKED_2X2_FLOAT32 ? a = this.gpgpu.createPackedMatrixTexture(t[0], t[1]) : r === Ge.PACKED_2X2_FLOAT16 ? a = this.gpgpu.createFloat16PackedMatrixTexture(t[0], t[1]) : r === Ge.UNPACKED_FLOAT32 ? a = this.gpgpu.createFloat32MatrixTexture(t[0], t[1]) : r === Ge.UNPACKED_FLOAT16 ? a = this.gpgpu.createFloat16MatrixTexture(t[0], t[1]) : r === Ge.PACKED_4X1_UNSIGNED_BYTE && (a = this.gpgpu.createUnsignedBytesMatrixTexture(t[0], t[1])), this.usedTextures[o].push(a), this.numUsedTextures++, this._numBytesAllocated += i, this.log(), a;
  }
  releaseTexture(t, e, s, r) {
    if (this.freeTextures == null)
      return;
    const o = Wx(s, r), i = Vx(e, o, r);
    i in this.freeTextures || (this.freeTextures[i] = []);
    const a = zx(e, o, this.gpgpu.gl, this.gpgpu.textureConfig, r), l = V().get("WEBGL_DELETE_TEXTURE_THRESHOLD");
    l !== -1 && this._numBytesAllocated > l ? (this.gpgpu.deleteMatrixTexture(t.texture), this._numBytesAllocated -= a) : (this.freeTextures[i].push(t), this.numFreeTextures++, this._numBytesFree += a), this.numUsedTextures--;
    const c = this.usedTextures[i], u = c.indexOf(t);
    if (u < 0)
      throw new Error("Cannot release a texture that was never provided by this texture manager");
    c.splice(u, 1), this.log();
  }
  log() {
    if (!this.logEnabled)
      return;
    const t = this.numFreeTextures + this.numUsedTextures;
    console.log("Free/Used", `${this.numFreeTextures} / ${this.numUsedTextures}`, `(${t})`);
    const e = this._numBytesFree / this._numBytesAllocated;
    console.log(`Bytes allocated: ${this._numBytesAllocated}`), console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100 * e)}%)`);
  }
  get numBytesAllocated() {
    return this._numBytesAllocated;
  }
  get numBytesFree() {
    return this._numBytesFree;
  }
  getNumUsedTextures() {
    return this.numUsedTextures;
  }
  getNumFreeTextures() {
    return this.numFreeTextures;
  }
  dispose() {
    if (this.freeTextures != null) {
      for (const t in this.freeTextures)
        this.freeTextures[t].forEach((e) => {
          this.gpgpu.deleteMatrixTexture(e.texture);
        });
      for (const t in this.usedTextures)
        this.usedTextures[t].forEach((e) => {
          this.gpgpu.deleteMatrixTexture(e.texture);
        });
      this.freeTextures = null, this.usedTextures = null, this.numUsedTextures = 0, this.numFreeTextures = 0, this._numBytesAllocated = 0, this._numBytesFree = 0;
    }
  }
}
function G9(n, t) {
  const e = n;
  if (t === e.R32F)
    return 4;
  if (t === e.R16F)
    return 2;
  if (t === e.RGBA32F)
    return 16;
  if (t === n.RGBA)
    return 16;
  if (t === e.RGBA16F)
    return 8;
  if (t === e.RGBA8)
    return 4;
  throw new Error(`Unknown internal format ${t}`);
}
function zx(n, t, e, s, r) {
  const o = F9(t, s);
  let i;
  if (r) {
    const [l, c] = pa(n[0], n[1]);
    i = l * c;
  } else {
    const [l, c] = Vc(n[0], n[1]);
    i = l * c;
  }
  const a = G9(e, o);
  return i * a;
}
function F9(n, t) {
  switch (n) {
    case Ge.PACKED_2X2_FLOAT32:
      return _v(t);
    case Ge.PACKED_2X2_FLOAT16:
      return Kv(t);
    case Ge.UNPACKED_FLOAT32:
      return Mv(t);
    case Ge.UNPACKED_FLOAT16:
      return Pv(t);
    case Ge.PACKED_4X1_UNSIGNED_BYTE:
      return Xv(t);
    default:
      throw new Error(`Unknown physical texture type ${n}`);
  }
}
function O9(n) {
  return V().getBool("WEBGL_RENDER_FLOAT32_ENABLED") ? n ? Ge.PACKED_2X2_FLOAT32 : Ge.UNPACKED_FLOAT32 : n ? Ge.PACKED_2X2_FLOAT16 : Ge.UNPACKED_FLOAT16;
}
function Wx(n, t) {
  if (n === Rn.UPLOAD)
    return Ge.PACKED_2X2_FLOAT32;
  if (n === Rn.RENDER || n == null)
    return O9(t);
  if (n === Rn.DOWNLOAD || n === Rn.PIXELS)
    return Ge.PACKED_4X1_UNSIGNED_BYTE;
  throw new Error(`Unknown logical texture type ${n}`);
}
function Vx(n, t, e) {
  return `${n[0]}_${n[1]}_${t}_${e}`;
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Os {
  constructor(t, e) {
    this.variableNames = ["A"], this.outputShape = t, this.enableShapeUniforms = Je(this.outputShape.length), this.userCode = `
      float unaryOperation(float x) {
        ${e}
      }

      void main() {
        float x = getAAtOutCoords();
        float y = unaryOperation(x);

        setOutput(y);
      }
    `;
  }
}
const Jn = "if (isnan(x)) return x;", A9 = "return x;", Mx = "return abs(x);", z9 = "return (x >= 0.0) ? x : (exp(x) - 1.0);", W9 = Jn + `
  return (x < 0.0) ? 0.0 : x;
`, V9 = Jn + `
  return (x < 0.0) ? 0.0 : min(6.0, x);
`, ko = "return x;", M9 = "return 1.0 / (1.0 + exp(-1.0 * x));";
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const P9 = "return x;", X9 = `
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`, _9 = `
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, K9 = `
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, Z9 = "return 1.0 / (1.0 + exp(-1.0 * x));";
class _r {
  constructor(t, e) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = t, this.enableShapeUniforms = Je(this.outputShape.length), this.userCode = `
      vec4 unaryOperation(vec4 x) {
        ${e}
      }

      void main() {
        vec4 x = getAAtOutCoords();
        vec4 y = unaryOperation(x);

        setOutput(y);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class B9 {
  constructor(t) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !1, this.outputShape = t, this.enableShapeUniforms = Je(this.outputShape.length);
    const e = t.length, s = Be("rc", e), r = _t(e), o = R9(e, s), i = s.slice(-2), a = e <= 1 ? "rc" : `vec2(${i.join(",")})`;
    this.userCode = `
      void main() {
        ${r} rc = getOutputCoords();
        vec4 packedInput = getA(${o});

        setOutput(getChannel(packedInput, ${a}));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const H9 = Wd, U9 = 1e-7, Y9 = 1e-4, au = {};
function j9(n) {
  return n in au || (au[n] = {}), au[n];
}
const J9 = V().getNumber("CPU_HANDOFF_SIZE_THRESHOLD"), Q9 = 600;
function q9() {
  return V().global.screen == null ? 1024 : V().global.screen.height * V().global.screen.width * window.devicePixelRatio * Q9 / 1024 / 1024;
}
class Tp extends th {
  constructor(t) {
    if (super(), this.pendingRead = /* @__PURE__ */ new WeakMap(), this.pendingDisposal = /* @__PURE__ */ new WeakSet(), this.dataRefCount = /* @__PURE__ */ new WeakMap(), this.numBytesInGPU = 0, this.uploadWaitMs = 0, this.downloadWaitMs = 0, this.lastGlFlushTime = 0, this.warnedAboutMemory = !1, this.pendingDeletes = 0, this.disposed = !1, !V().getBool("HAS_WEBGL"))
      throw new Error("WebGL is not supported on this device");
    let e;
    if (t != null) {
      if (t instanceof jp)
        e = t;
      else {
        const s = ls(V().getNumber("WEBGL_VERSION"), t);
        e = new jp(s);
      }
      this.binaryCache = {}, this.gpgpuCreatedLocally = !1;
    } else {
      const s = ls(V().getNumber("WEBGL_VERSION"));
      e = new jp(s), this.binaryCache = j9(V().getNumber("WEBGL_VERSION")), this.gpgpuCreatedLocally = !0;
    }
    this.gpgpu = e, this.canvas = this.gpgpu.gl.canvas, this.textureManager = new D9(this.gpgpu), this.numMBBeforeWarning = q9(), this.texData = new mm(this, Zt());
  }
  nextDataId() {
    return Tp.nextDataId++;
  }
  numDataIds() {
    return this.texData.numDataIds() - this.pendingDeletes;
  }
  write(t, e, s) {
    if ((V().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS") || V().getBool("DEBUG")) && this.checkNumericalProblems(t), s === "complex64" && t != null)
      throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");
    const r = { id: this.nextDataId() };
    return this.texData.set(r, { shape: e, dtype: s, values: t, usage: Rn.UPLOAD, refCount: 1 }), r;
  }
  refCount(t) {
    return this.texData.has(t) ? this.texData.get(t).refCount : 0;
  }
  incRef(t) {
    const e = this.texData.get(t);
    e.refCount++;
  }
  decRef(t) {
    if (this.texData.has(t)) {
      const e = this.texData.get(t);
      e.refCount--;
    }
  }
  move(t, e, s, r, o) {
    if (V().getBool("DEBUG") && this.checkNumericalProblems(e), r === "complex64")
      throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");
    this.texData.set(t, { shape: s, dtype: r, values: e, usage: Rn.UPLOAD, refCount: o });
  }
  disposeIntermediateTensorInfo(t) {
    this.disposeData(t.dataId);
  }
  readSync(t) {
    const e = this.texData.get(t), { values: s, dtype: r, complexTensorInfos: o, slice: i, shape: a, isPacked: l } = e;
    if (i != null) {
      let d;
      l ? d = new _r(a, ko) : d = new Os(a, ko);
      const p = this.runWebGLProgram(d, [{ dataId: t, shape: a, dtype: r }], r), f = this.readSync(p.dataId);
      return this.disposeIntermediateTensorInfo(p), f;
    }
    if (s != null)
      return this.convertAndCacheOnCPU(t);
    if (r === "string")
      return s;
    const c = this.activeTimers != null;
    let u;
    c && (u = Le());
    let h;
    if (r === "complex64") {
      const d = this.readSync(o.real.dataId), p = this.readSync(o.imag.dataId);
      h = Ks(d, p);
    } else
      h = this.getValuesFromTexture(t);
    return c && (this.downloadWaitMs += Le() - u), this.convertAndCacheOnCPU(t, h);
  }
  async read(t) {
    if (this.pendingRead.has(t)) {
      const f = this.pendingRead.get(t);
      return new Promise((m) => f.push(m));
    }
    const e = this.texData.get(t), { values: s, shape: r, slice: o, dtype: i, complexTensorInfos: a, isPacked: l } = e;
    if (o != null) {
      let f;
      l ? f = new _r(r, ko) : f = new Os(r, ko);
      const m = this.runWebGLProgram(f, [{ dataId: t, shape: r, dtype: i }], i), g = this.read(m.dataId);
      return this.disposeIntermediateTensorInfo(m), g;
    }
    if (s != null)
      return this.convertAndCacheOnCPU(t);
    if (V().getBool("DEBUG") && !V().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED") && V().getNumber("WEBGL_VERSION") === 2)
      throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");
    let c = null, u;
    if (i !== "complex64" && V().get("WEBGL_BUFFER_SUPPORTED")) {
      u = this.decode(t);
      const f = this.texData.get(u.dataId);
      c = this.gpgpu.createBufferFromTexture(f.texture.texture, ...su(r));
    }
    this.pendingRead.set(t, []), i !== "complex64" && await this.gpgpu.createAndWaitForFence();
    let h;
    if (i === "complex64") {
      const f = await Promise.all([
        this.read(a.real.dataId),
        this.read(a.imag.dataId)
      ]), m = f[0], g = f[1];
      h = Ks(m, g);
    } else if (c == null)
      h = this.getValuesFromTexture(t);
    else {
      const f = P(r);
      h = this.gpgpu.downloadFloat32MatrixFromBuffer(c, f);
    }
    if (u != null && this.disposeIntermediateTensorInfo(u), c != null) {
      const f = this.gpgpu.gl;
      ut(f, () => f.deleteBuffer(c));
    }
    const d = this.convertAndCacheOnCPU(t, h), p = this.pendingRead.get(t);
    return this.pendingRead.delete(t), p.forEach((f) => f(d)), this.pendingDisposal.has(t) && (this.pendingDisposal.delete(t), this.disposeData(t) && Zt().removeDataId(t, this), this.pendingDeletes--), d;
  }
  readToGPU(t, e = {}) {
    const s = this.texData.get(t), { values: r, shape: o, slice: i, dtype: a, isPacked: l, texture: c } = s;
    if (a === "complex64")
      throw new Error("Does not support reading texture for complex64 dtype.");
    if (i != null) {
      let p;
      l ? p = new _r(o, ko) : p = new Os(o, ko);
      const f = this.runWebGLProgram(p, [{ dataId: t, shape: o, dtype: a }], a), m = this.readToGPU(f, e);
      return this.disposeIntermediateTensorInfo(f), m;
    }
    if (c == null)
      throw r != null ? new Error("Data is not on GPU but on CPU.") : new Error("There is no data on GPU or CPU.");
    const u = this.decode(t, e.customTexShape), h = Zt().makeTensorFromTensorInfo(u), d = this.texData.get(u.dataId);
    return Object.assign({ tensorRef: h }, d.texture);
  }
  bufferSync(t) {
    const e = this.readSync(t.dataId);
    if (t.dtype === "string")
      try {
        const s = e.map((r) => Ws(r));
        return gt(t.shape, t.dtype, s);
      } catch {
        throw new Error("Failed to decode encoded string bytes into utf-8");
      }
    return gt(t.shape, t.dtype, e);
  }
  checkNumericalProblems(t) {
    if (t != null)
      for (let e = 0; e < t.length; e++) {
        const s = t[e];
        if (!rB(s))
          throw V().getBool("WEBGL_RENDER_FLOAT32_CAPABLE") ? Error(`The value ${s} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`) : Error(`The value ${s} cannot be represented on this device.`);
      }
  }
  getValuesFromTexture(t) {
    const { shape: e, dtype: s, isPacked: r } = this.texData.get(t), o = P(e);
    if (V().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")) {
      const d = this.decode(t), p = this.texData.get(d.dataId), f = this.gpgpu.downloadMatrixFromPackedTexture(p.texture.texture, ...su(e)).subarray(0, o);
      return this.disposeIntermediateTensorInfo(d), f;
    }
    const i = V().getBool("WEBGL_PACK") && r === !0, a = i ? Hp(e) : e, l = i ? new wH(a) : new xH(a), c = this.runWebGLProgram(l, [{ shape: a, dtype: s, dataId: t }], "float32"), u = this.texData.get(c.dataId), h = this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(u.texture.texture, u.texShape[0], u.texShape[1]).subarray(0, o);
    return this.disposeIntermediateTensorInfo(c), h;
  }
  timerAvailable() {
    return V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0;
  }
  time(t) {
    const e = this.activeTimers, s = [];
    let r = !1;
    this.programTimersStack == null ? (this.programTimersStack = s, r = !0) : this.activeTimers.push(s), this.activeTimers = s, t();
    const o = zs(this.activeTimers.map((l) => l.query)).filter((l) => l != null), i = zs(this.activeTimers.map((l) => l.name)).filter((l) => l != null);
    this.activeTimers = e, r && (this.programTimersStack = null);
    const a = {
      uploadWaitMs: this.uploadWaitMs,
      downloadWaitMs: this.downloadWaitMs,
      kernelMs: null,
      wallMs: null
    };
    return (async () => {
      if (V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0) {
        const l = await Promise.all(o);
        a.kernelMs = b1(l), a.getExtraProfileInfo = () => l.map((c, u) => ({ name: i[u], ms: c })).map((c) => `${c.name}: ${c.ms}`).join(", ");
      } else
        a.kernelMs = {
          error: "WebGL query timers are not supported in this environment."
        };
      return this.uploadWaitMs = 0, this.downloadWaitMs = 0, a;
    })();
  }
  memory() {
    return {
      unreliable: !1,
      numBytesInGPU: this.numBytesInGPU,
      numBytesInGPUAllocated: this.textureManager.numBytesAllocated,
      numBytesInGPUFree: this.textureManager.numBytesFree
    };
  }
  startTimer() {
    return V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0 ? this.gpgpu.beginQuery() : { startMs: Le(), endMs: null };
  }
  endTimer(t) {
    return V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0 ? (this.gpgpu.endQuery(), t) : (t.endMs = Le(), t);
  }
  async getQueryTime(t) {
    if (V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0)
      return this.gpgpu.waitForQueryAndGetTime(t);
    const e = t;
    return e.endMs - e.startMs;
  }
  disposeData(t, e = !1) {
    if (this.pendingDisposal.has(t))
      return !1;
    if (!this.texData.has(t))
      return !0;
    if (e ? this.texData.get(t).refCount = 0 : this.texData.get(t).refCount--, !e && this.texData.get(t).refCount > 0)
      return !1;
    if (this.pendingRead.has(t))
      return this.pendingDisposal.add(t), this.pendingDeletes++, !1;
    this.releaseGPUData(t);
    const { complexTensorInfos: s } = this.texData.get(t);
    return s != null && (this.disposeData(s.real.dataId, e), this.disposeData(s.imag.dataId, e)), this.texData.delete(t), !0;
  }
  releaseGPUData(t) {
    const { texture: e, dtype: s, texShape: r, usage: o, isPacked: i, slice: a } = this.texData.get(t), l = a && a.origDataId || t, c = this.dataRefCount.get(l);
    c > 1 ? this.dataRefCount.set(l, c - 1) : (this.dataRefCount.delete(l), e != null && (this.numBytesInGPU -= this.computeBytes(r, s), this.textureManager.releaseTexture(e, r, o, i)));
    const u = this.texData.get(t);
    u.texture = null, u.texShape = null, u.isPacked = !1, u.slice = null;
  }
  getTexture(t) {
    return this.uploadToGPU(t), this.texData.get(t).texture.texture;
  }
  getDataInfo(t) {
    return this.texData.get(t);
  }
  shouldExecuteOnCPU(t, e = J9) {
    return V().getBool("WEBGL_CPU_FORWARD") && t.every((s) => this.texData.get(s.dataId).texture == null && P(s.shape) < e);
  }
  getGPGPUContext() {
    return this.gpgpu;
  }
  where(t) {
    Tn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");
    const e = t.dataSync();
    return H9(t.shape, e);
  }
  packedUnaryOp(t, e, s) {
    const r = new _r(t.shape, e), o = this.compileAndRun(r, [t], s);
    return Zt().makeTensorFromTensorInfo(o);
  }
  abs(t) {
    if (this.shouldExecuteOnCPU([t]) && t.dtype !== "complex64") {
      const r = Uv(this.texData.get(t.dataId).values);
      return this.makeOutput(t.shape, t.dtype, r);
    }
    if (V().getBool("WEBGL_PACK_UNARY_OPERATIONS"))
      return this.packedUnaryOp(t, Mx, t.dtype);
    const e = new Os(t.shape, Mx), s = this.compileAndRun(e, [t]);
    return Zt().makeTensorFromTensorInfo(s);
  }
  makeTensorInfo(t, e, s) {
    let r;
    if (e === "string" && s != null && s.length > 0 && xs(s[0])) {
      const o = s.map((i) => Ln(i));
      r = this.write(o, t, e);
    } else
      r = this.write(s, t, e);
    return this.texData.get(r).usage = null, { dataId: r, shape: t, dtype: e };
  }
  makeOutput(t, e, s) {
    return Zt().makeTensorFromTensorInfo(this.makeTensorInfo(t, e, s), this);
  }
  unpackTensor(t) {
    const e = new B9(t.shape);
    return this.runWebGLProgram(e, [t], t.dtype);
  }
  packTensor(t) {
    const e = new E9(t.shape), s = !0;
    return this.runWebGLProgram(e, [t], t.dtype, null, s);
  }
  packedReshape(t, e) {
    const s = [
      Yo(t.shape),
      ...jo(t.shape)
    ], r = {
      dtype: t.dtype,
      shape: s,
      dataId: t.dataId
    }, o = [
      Yo(e),
      ...jo(e)
    ], i = new Jv(o, s), a = !0, l = [s], c = this.runWebGLProgram(i, [r], t.dtype, l, a);
    return { dataId: c.dataId, shape: e, dtype: c.dtype };
  }
  decode(t, e) {
    const s = this.texData.get(t), { isPacked: r, shape: o, dtype: i } = s;
    if (e != null) {
      const d = P(o), p = e[0] * e[1] * 4;
      C(d <= p, () => "customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data.");
    }
    const a = Hp(o);
    let l;
    r ? l = new bH(a) : l = new yH(a);
    const c = !0, u = [e != null ? e : su(a)], h = this.runWebGLProgram(l, [{ shape: a, dtype: i, dataId: t }], i, u, c, e);
    return { dtype: i, shape: o, dataId: h.dataId };
  }
  runWebGLProgram(t, e, s, r, o = !1, i) {
    const a = this.makeTensorInfo(t.outputShape, s), l = this.texData.get(a.dataId);
    if (t.packedOutput && (l.isPacked = !0), t.outPackingScheme === qa.DENSE) {
      const y = i != null ? i : su(t.outputShape);
      l.texShape = y.map((b) => b * 2);
    }
    if (t.outTexUsage != null && (l.usage = t.outTexUsage), P(a.shape) === 0)
      return l.values = jt(a.dtype, 0), a;
    const c = [], u = e.map((y) => {
      if (y.dtype === "complex64")
        throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");
      let b = this.texData.get(y.dataId);
      if (b.texture == null) {
        if (!t.packedInputs && P(y.shape) <= V().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))
          return {
            shape: y.shape,
            texData: null,
            isUniform: !0,
            uniformValues: b.values
          };
        t.packedInputs && (b.isPacked = !0, b.shape = y.shape);
      }
      if (this.uploadToGPU(y.dataId), !!b.isPacked != !!t.packedInputs)
        y = b.isPacked ? this.unpackTensor(y) : this.packTensor(y), c.push(y), b = this.texData.get(y.dataId);
      else if (b.isPacked && !Uu(b.shape, y.shape)) {
        const w = y, x = y.shape;
        y.shape = b.shape, y = this.packedReshape(y, x), c.push(y), b = this.texData.get(y.dataId), w.shape = x;
      }
      return { shape: y.shape, texData: b, isUniform: !1 };
    });
    this.uploadToGPU(a.dataId);
    const h = { shape: a.shape, texData: l, isUniform: !1 }, d = gH(t, u, h), p = this.getAndSaveBinary(d, () => fH(this.gpgpu, t, u, h)), f = this.activeTimers != null;
    let m;
    f && (m = this.startTimer()), V().get("ENGINE_COMPILE_ONLY") || mH(this.gpgpu, p, u, h, r), c.forEach((y) => this.disposeIntermediateTensorInfo(y)), f && (m = this.endTimer(m), this.activeTimers.push({ name: t.constructor.name, query: this.getQueryTime(m) }));
    const g = V().get("WEBGL_FLUSH_THRESHOLD");
    if (g > 0) {
      const y = Le();
      y - this.lastGlFlushTime > g && (this.gpgpu.gl.flush(), this.lastGlFlushTime = y);
    }
    if (!V().getBool("WEBGL_LAZILY_UNPACK") && l.isPacked && o === !1) {
      const y = this.unpackTensor(a);
      return this.disposeIntermediateTensorInfo(a), y;
    }
    return a;
  }
  compileAndRun(t, e, s, r, o = !1) {
    return s = s || e[0].dtype, this.runWebGLProgram(t, e, s, r, o);
  }
  getAndSaveBinary(t, e) {
    return t in this.binaryCache || (this.binaryCache[t] = e()), this.binaryCache[t];
  }
  getTextureManager() {
    return this.textureManager;
  }
  dispose() {
    this.disposed || (V().getBool("IS_TEST") || Object.keys(this.binaryCache).forEach((e) => {
      this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram), delete this.binaryCache[e];
    }), this.textureManager.dispose(), this.canvas != null && typeof HTMLCanvasElement < "u" && this.canvas instanceof HTMLCanvasElement ? this.canvas.remove() : this.canvas = null, this.gpgpuCreatedLocally && (this.gpgpu.program = null, this.gpgpu.dispose()), this.disposed = !0);
  }
  floatPrecision() {
    return this.floatPrecisionValue == null && (this.floatPrecisionValue = A(() => {
      if (!V().get("WEBGL_RENDER_FLOAT32_ENABLED")) {
        const t = V().getBool("DEBUG");
        V().set("DEBUG", !1);
        const e = this.abs(ft(1e-8)).dataSync()[0];
        if (V().set("DEBUG", t), e > 0)
          return 32;
      }
      return 16;
    })), this.floatPrecisionValue;
  }
  epsilon() {
    return this.floatPrecision() === 32 ? U9 : Y9;
  }
  uploadToGPU(t) {
    const e = this.texData.get(t), { shape: s, dtype: r, values: o, texture: i, usage: a, isPacked: l } = e;
    if (i != null)
      return;
    const c = this.activeTimers != null;
    let u;
    c && (u = Le());
    let h = e.texShape;
    if (h == null && (h = SB(s, l), e.texShape = h), o != null) {
      const d = Hp(s);
      let p, f = h[1], m = h[0];
      const g = o instanceof Uint8Array || o instanceof Uint8ClampedArray;
      (l || !g) && ([f, m] = pa(h[0], h[1])), l ? p = new SH(d, g) : p = new IH(d, g);
      const y = g ? [m, f] : h, b = this.makeTensorInfo(y, r), w = this.texData.get(b.dataId);
      g ? w.usage = Rn.PIXELS : w.usage = Rn.UPLOAD, w.texShape = y, this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(b.dataId), f, m, o);
      const x = [[m, f]], S = !0, v = this.runWebGLProgram(p, [b], r, x, S), T = this.texData.get(v.dataId);
      e.texShape = T.texShape, e.isPacked = T.isPacked, e.usage = T.usage, V().get("ENGINE_COMPILE_ONLY") ? this.disposeData(v.dataId) : (e.texture = T.texture, e.values = null, this.texData.delete(v.dataId)), this.disposeIntermediateTensorInfo(b), c && (this.uploadWaitMs += Le() - u);
    } else {
      const d = this.acquireTexture(h, a, r, l);
      e.texture = d;
    }
  }
  convertAndCacheOnCPU(t, e) {
    const s = this.texData.get(t), { dtype: r } = s;
    return this.releaseGPUData(t), e != null && (s.values = t4(e, r)), s.values;
  }
  acquireTexture(t, e, s, r) {
    if (this.numBytesInGPU += this.computeBytes(t, s), !this.warnedAboutMemory && this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {
      const o = (this.numBytesInGPU / 1024 / 1024).toFixed(2);
      this.warnedAboutMemory = !0, console.warn(`High memory usage in GPU: ${o} MB, most likely due to a memory leak`);
    }
    return this.textureManager.acquireTexture(t, e, r);
  }
  computeBytes(t, e) {
    return t[0] * t[1] * xu(e);
  }
  checkCompileCompletion() {
    for (const [, t] of Object.entries(this.binaryCache))
      this.checkCompletion_(t);
  }
  async checkCompileCompletionAsync() {
    const t = [];
    if (this.gpgpu.parallelCompilationExtension) {
      for (const [, e] of Object.entries(this.binaryCache))
        t.push(this.checkCompletionAsync_(e));
      return Promise.all(t);
    } else {
      for (const [, e] of Object.entries(this.binaryCache)) {
        const s = new Promise((r) => {
          try {
            this.checkCompletion_(e), r(!0);
          } catch (o) {
            throw o;
          }
        });
        t.push(s);
      }
      return Promise.all(t);
    }
  }
  async checkCompletionAsync_(t) {
    return this.gpgpu.gl.getProgramParameter(t.webGLProgram, this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR) ? this.checkCompletion_(t) : (await Cc(), this.checkCompletionAsync_(t));
  }
  checkCompletion_(t) {
    if (this.gpgpu.gl.getProgramParameter(t.webGLProgram, this.gpgpu.gl.LINK_STATUS) === !1)
      throw console.log(this.gpgpu.gl.getProgramInfoLog(t.webGLProgram)), this.gpgpu.gl.getShaderParameter(t.fragmentShader, this.gpgpu.gl.COMPILE_STATUS) === !1 ? (Fv(t.source, this.gpgpu.gl.getShaderInfoLog(t.fragmentShader)), new Error("Failed to compile fragment shader.")) : new Error("Failed to link vertex and fragment shaders.");
    return !0;
  }
  getUniformLocations() {
    for (const [, t] of Object.entries(this.binaryCache)) {
      const { uniformLocations: e, customUniformLocations: s, infLoc: r, nanLoc: o, inShapesLocations: i, inTexShapesLocations: a, outShapeLocation: l, outShapeStridesLocation: c, outTexShapeLocation: u } = Vv(this.gpgpu, t.program, t.webGLProgram);
      t.uniformLocations = e, t.customUniformLocations = s, t.infLoc = r, t.nanLoc = o, t.inShapesLocations = i, t.inTexShapesLocations = a, t.outShapeLocation = l, t.outShapeStridesLocation = c, t.outTexShapeLocation = u;
    }
  }
}
Tp.nextDataId = 0;
function t4(n, t) {
  if (t === "float32" || t === "complex64")
    return n;
  if (t === "int32" || t === "bool") {
    const e = t === "int32" ? new Int32Array(n.length) : new Uint8Array(n.length);
    for (let s = 0; s < e.length; ++s)
      e[s] = Math.round(n[s]);
    return e;
  } else
    throw new Error(`Unknown dtype ${t}`);
}
/** @license See the LICENSE file. */
const e4 = "3.21.0";
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
Nm() && Wm("webgl", () => new Tp(), 2);
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const bb = `
  if (isnan(a)) return a;
  if (isnan(b)) return b;
`;
class Jo {
  constructor(t, e, s) {
    this.variableNames = ["A", "B"], this.outputShape = bt(e, s), this.enableShapeUniforms = Je(this.outputShape.length), this.userCode = `
      float binaryOperation(float a, float b) {
        ${t}
      }

      void main() {
        float a = getAAtOutCoords();
        float b = getBAtOutCoords();
        setOutput(binaryOperation(a, b));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Xc = `
  result.r = isNaN.r ? NAN : result.r;
  result.g = isNaN.g ? NAN : result.g;
  result.b = isNaN.b ? NAN : result.b;
  result.a = isNaN.a ? NAN : result.a;
`;
class _c {
  constructor(t, e, s, r = !1) {
    this.variableNames = ["A", "B"], this.supportsBroadcasting = !0, this.packedInputs = !0, this.packedOutput = !0, this.outputShape = bt(e, s);
    const o = this.outputShape.length;
    this.enableShapeUniforms = Je(o);
    let i = "";
    if (r)
      if (o === 0 || P(this.outputShape) === 1)
        i = `
          result.y = 0.;
          result.z = 0.;
          result.w = 0.;
        `;
      else if (i = `
          ${_t(o)} coords = getOutputCoords();
        `, o === 1)
        this.enableShapeUniforms ? i += `
            result.y = (coords + 1) >= outShape ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          ` : i += `
            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `;
      else {
        const l = Be("coords", o);
        this.enableShapeUniforms ? i += `
            bool nextRowOutOfBounds =
              (${l[o - 2]} + 1) >= outShape[${o} - 2];
            bool nextColOutOfBounds =
              (${l[o - 1]} + 1) >= outShape[${o} - 1];
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          ` : i += `
            bool nextRowOutOfBounds =
              (${l[o - 2]} + 1) >= ${this.outputShape[o - 2]};
            bool nextColOutOfBounds =
              (${l[o - 1]} + 1) >= ${this.outputShape[o - 1]};
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `;
      }
    this.userCode = `
      vec4 binaryOperation(vec4 a, vec4 b) {
        ${t}
      }

      void main() {
        vec4 a = getAAtOutCoords();
        vec4 b = getBAtOutCoords();

        vec4 result = binaryOperation(a, b);
        ${i}

        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function In(n) {
  const { inputs: t, backend: e } = n, { x: s } = t;
  return e.incRef(s.dataId), { dataId: s.dataId, shape: s.shape, dtype: s.dtype };
}
const n4 = {
  kernelName: xi,
  backendName: "webgl",
  kernelFunc: In
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Er(n) {
  const { inputs: t, backend: e } = n, { real: s, imag: r } = t, o = e.makeTensorInfo(s.shape, "complex64"), i = e.texData.get(o.dataId), a = In({ inputs: { x: s }, backend: e }), l = In({ inputs: { x: r }, backend: e });
  return i.complexTensorInfos = { real: a, imag: l }, o;
}
const s4 = {
  kernelName: ch,
  backendName: "webgl",
  kernelFunc: Er
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Qv = "return (a < 0.) ? b * a : a;", qv = `
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;
function r4(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { alpha: o } = s, i = e.makeTensorInfo([], "float32", Ns(o, "float32")), a = V().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new _c(qv, r.shape, i.shape) : new Jo(Qv, r.shape, i.shape), l = e.runWebGLProgram(a, [r, i], "float32");
  return e.disposeIntermediateTensorInfo(i), l;
}
const o4 = {
  kernelName: Cl,
  backendName: "webgl",
  kernelFunc: r4
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const tC = "return (a < 0.) ? b * a : a;", eC = `
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;
function i4(n) {
  const { inputs: t, backend: e } = n, { x: s, alpha: r } = t, o = V().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new _c(eC, s.shape, r.shape) : new Jo(tC, s.shape, r.shape);
  return e.runWebGLProgram(o, [s, r], "float32");
}
const a4 = {
  kernelName: _l,
  backendName: "webgl",
  kernelFunc: i4
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ba = "if (isnan(x)) return x;";
function Dt({ opSnippet: n, packedOpSnippet: t, cpuKernelImpl: e, dtype: s }) {
  return ({ inputs: r, backend: o }) => {
    const { x: i } = r, a = o, l = s || i.dtype;
    if (a.shouldExecuteOnCPU([i]) && e != null) {
      const h = a.texData.get(i.dataId), d = e(h.values, l);
      return a.makeTensorInfo(i.shape, l, d);
    }
    const c = V().getBool("WEBGL_PACK_UNARY_OPERATIONS") && t != null;
    let u;
    return c ? u = new _r(i.shape, t) : u = new Os(i.shape, n), a.runWebGLProgram(u, [i], l);
  };
}
function We({ opSnippet: n, packedOpSnippet: t, checkOutOfBounds: e = !1, supportsComplex: s = !1, cpuKernelImpl: r, dtype: o }) {
  return ({ inputs: i, backend: a }) => {
    const { a: l, b: c } = i, u = a;
    if (s && l.dtype === "complex64") {
      const f = u.texData.get(l.dataId), m = u.texData.get(c.dataId), [g, y] = [
        [f.complexTensorInfos.real, m.complexTensorInfos.real],
        [f.complexTensorInfos.imag, m.complexTensorInfos.imag]
      ].map((w) => {
        const [x, S] = w, v = {
          dataId: x.dataId,
          dtype: x.dtype,
          shape: l.shape
        }, T = {
          dataId: S.dataId,
          dtype: S.dtype,
          shape: c.shape
        }, N = new Jo(n, l.shape, c.shape);
        return u.runWebGLProgram(N, [v, T], He(x.dtype, S.dtype));
      }), b = Er({ inputs: { real: g, imag: y }, backend: u });
      return u.disposeIntermediateTensorInfo(g), u.disposeIntermediateTensorInfo(y), b;
    }
    const h = o || He(l.dtype, c.dtype);
    if ((l.dtype === "string" || c.dtype === "string" || u.shouldExecuteOnCPU([l, c])) && r != null) {
      const f = u.texData.get(l.dataId).values, m = u.texData.get(c.dataId).values, g = l.dtype === "string" ? Zs(f) : f, y = l.dtype === "string" ? Zs(m) : m, [b, w] = r(l.shape, c.shape, g, y, h), x = u.makeTensorInfo(w, h), S = u.texData.get(x.dataId);
      return S.values = b, x;
    }
    const d = V().getBool("WEBGL_PACK_BINARY_OPERATIONS") && t != null;
    let p;
    return d ? p = new _c(t, l.shape, c.shape, e) : p = new Jo(n, l.shape, c.shape), u.runWebGLProgram(p, [l, c], h);
  };
}
function tl(n, t = !1) {
  if (n === "linear")
    return t ? P9 : A9;
  if (n === "relu")
    return t ? _9 : W9;
  if (n === "elu")
    return t ? X9 : z9;
  if (n === "relu6")
    return t ? K9 : V9;
  if (n === "prelu")
    return t ? eC : tC;
  if (n === "leakyrelu")
    return t ? qv : Qv;
  if (n === "sigmoid")
    return t ? Z9 : M9;
  throw new Error(`Activation ${n} has not been implemented for the WebGL backend.`);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class nC {
  constructor(t, e, s, r = !1, o = !1, i = !1, a = null, l = !1, c = !1) {
    this.variableNames = ["matrixA", "matrixB"], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = s, this.enableShapeUniforms = Je(this.outputShape.length);
    const u = r ? t[1] : t[2], h = Math.ceil(u / 2), d = r ? "i * 2, rc.y" : "rc.y, i * 2", p = o ? "rc.z, i * 2" : "i * 2, rc.z", f = r ? ["a.xxyy", "a.zzww"] : ["a.xxzz", "a.yyww"], m = o ? ["b.xzxz", "b.ywyw"] : ["b.xyxy", "b.zwzw"];
    let g = "", y = "";
    a && (l ? g = `vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${a}
        }` : c ? g = `vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${a}
        }` : g = `vec4 activation(vec4 x) {
          ${a}
        }`, y = "result = activation(result);");
    const b = i ? "result += getBiasAtOutCoords();" : "";
    i && this.variableNames.push("bias"), l && this.variableNames.push("preluActivationWeights"), c && this.variableNames.push("leakyreluAlpha");
    let w = "rc.x", x = "rc.x";
    t[0] < e[0] ? w = `int(min(float(rc.x), ${t[0] - 1}.))` : e[0] < t[0] && (x = `int(min(float(rc.x), ${e[0] - 1}.))`), this.userCode = `
      ${g}
      // Don't use uniform for sharedDimensionPacked for performance.
      const float sharedDimension = ${h}.0;

      vec4 dot2x2ARowBCol(ivec3 rc) {
        vec4 result = vec4(0);
        for (int i = 0; i < ${h}; i++) {
          int batchA = ${w};
          int batchB = ${x};
          vec4 a = getMatrixA(batchA, ${d});
          vec4 b = getMatrixB(batchB, ${p});

          // These swizzled products need to be separately added.
          // See: https://github.com/tensorflow/tfjs/issues/1735
          result += (${f[0]} * ${m[0]});
          result += (${f[1]} * ${m[1]});
        }
        return result;
      }

      void main() {
        ivec3 rc = getOutputCoords();
        vec4 result = dot2x2ARowBCol(rc);

        ${b}

        ${y}

        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Px = {
  REAL: "return areal * breal - aimag * bimag;",
  IMAG: "return areal * bimag + aimag * breal;"
};
class Xx {
  constructor(t, e, s) {
    this.variableNames = ["AReal", "AImag", "BReal", "BImag"], this.outputShape = bt(e, s), this.userCode = `
      float binaryOpComplex(
          float areal, float aimag, float breal, float bimag) {
        ${t}
      }

      void main() {
        float areal = getARealAtOutCoords();
        float aimag = getAImagAtOutCoords();
        float breal = getBRealAtOutCoords();
        float bimag = getBImagAtOutCoords();
        setOutput(binaryOpComplex(areal, aimag, breal, bimag));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const _x = "return a * b;";
function xb(n) {
  const { inputs: t, backend: e } = n, { a: s, b: r } = t, o = He(s.dtype, r.dtype);
  if (s.dtype === "complex64") {
    const a = e.texData.get(s.dataId), l = e.texData.get(r.dataId), c = new Xx(Px.REAL, s.shape, r.shape), u = new Xx(Px.IMAG, s.shape, r.shape), h = [
      {
        dataId: a.complexTensorInfos.real.dataId,
        dtype: a.complexTensorInfos.real.dtype,
        shape: s.shape
      },
      {
        dataId: a.complexTensorInfos.imag.dataId,
        dtype: a.complexTensorInfos.imag.dtype,
        shape: s.shape
      },
      {
        dataId: l.complexTensorInfos.real.dataId,
        dtype: l.complexTensorInfos.real.dtype,
        shape: r.shape
      },
      {
        dataId: l.complexTensorInfos.imag.dataId,
        dtype: l.complexTensorInfos.imag.dtype,
        shape: r.shape
      }
    ], d = e.runWebGLProgram(c, h, "float32"), p = e.runWebGLProgram(u, h, "float32"), f = Er({ inputs: { real: d, imag: p }, backend: e });
    return e.disposeIntermediateTensorInfo(d), e.disposeIntermediateTensorInfo(p), f;
  }
  if (e.shouldExecuteOnCPU([s, r])) {
    const a = e.texData.get(s.dataId), l = e.texData.get(r.dataId), [c, u] = a9(s.shape, r.shape, a.values, l.values, o), h = e.makeTensorInfo(u, o), d = e.texData.get(h.dataId);
    return d.values = c, h;
  }
  let i;
  return V().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? i = new _c(_x, s.shape, r.shape) : i = new Jo(_x, s.shape, r.shape), e.runWebGLProgram(i, [s, r], o);
}
const l4 = {
  kernelName: $i,
  backendName: "webgl",
  kernelFunc: xb
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function c4(n, t, e) {
  const s = [
    Yo(n.shape),
    ...jo(n.shape)
  ], r = {
    dtype: n.dtype,
    shape: s,
    dataId: n.dataId
  }, o = [
    Yo(t),
    ...jo(t)
  ], i = new Jv(o, s), a = !0, l = [s], c = e.runWebGLProgram(i, [r], n.dtype, l, a);
  return { dataId: c.dataId, shape: t, dtype: c.dtype };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function rt(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { shape: o } = s, i = e, a = P(r.shape), l = ym(o, a), c = P(l);
  C(a === c, () => `The new shape (${l}) has ${c} elements and the old shape (${r.shape}) has ${a} elements. The new shape and old shape must have the same number of elements.`);
  const u = i.texData.get(r.dataId);
  return u.isPacked && !Uu(r.shape, l) && !(u.texture !== null && Uu(u.shape, l)) ? c4(r, l, i) : (i.incRef(r.dataId), { dataId: r.dataId, shape: l, dtype: r.dtype });
}
const u4 = {
  kernelName: Zl,
  backendName: "webgl",
  kernelFunc: rt
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Kx {
  constructor(t, e) {
    this.variableNames = ["x"];
    const { windowSize: s, batchSize: r, inSize: o, outSize: i } = t;
    this.outputShape = [r, i];
    const a = Math.floor(s / 4) * 4, l = s % 4;
    let c = "sumValue += dot(values, ones);";
    if (e != null) {
      const h = 1 / e;
      c = `sumValue += dot(values * ${Yr(h) ? h.toPrecision(2) : h}, ones);`;
    }
    let u = "";
    o % s > 0 && (u = `
        if (inIdx < 0 || inIdx >= ${o}) {
          return 0.0;
        }
      `), this.userCode = `
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${u}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${s};

        float sumValue = 0.0;

        for (int i = 0; i < ${a}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${c}
        }

        int inIdx = inOffset + ${a};
        if (${l === 1}) {
          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);

          ${c}
        } else if (${l === 2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1), 0.0, 0.0);

          ${c}
        } else if (${l === 3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2), 0.0);

          ${c}
        }
        setOutput(sumValue);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class h4 {
  constructor(t, e) {
    this.variableNames = ["x"];
    const { windowSize: s, batchSize: r, inSize: o, outSize: i } = t;
    this.outputShape = [r, i];
    let a = "0.0", l = "";
    e === "prod" ? a = "1.0" : e === "min" ? (a = "1.0 / 1e-20", l = "min") : e === "max" && (a = "-1.0 / 1e-20", l = "max");
    let c = `${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;
    e === "sum" ? c = "sumValue" : e === "prod" ? c = "prodValue" : e === "all" ? c = "allValue" : e === "any" && (c = "anyValue");
    const u = Math.floor(s / 4) * 4, h = s % 4;
    let d = `
      if (${e === "sum"}) {
        sumValue += dot(values, ones);
      } else if (${e === "prod"}) {
        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);
        prodValue *= tmp[0] * tmp[1];
      } else {
        minMaxValue = ${l}(values, minMaxValue);
        if (${e === "min"} || ${e === "max"}) {
          minMaxValue = ${l}(values, minMaxValue);
          bvec4 isNaN = isnan(values);
          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {
            minMaxValue = vec4(NAN);
          }
        }
      }
    `, p = "vec4";
    e === "all" ? (a = "1.0", d = `
        bool reducedAllValue = all(values);
        float floatedReducedAllValue = float(reducedAllValue);
        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);
      `, p = "bvec4") : e === "any" && (a = "0.0", d = `
        bool reducedAnyValue = any(values);
        float floatedReducedAnyValue = float(reducedAnyValue);
        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);
      `, p = "bvec4");
    let f = "";
    o % s > 0 && (f = `
        if (inIdx < 0 || inIdx >= ${o}) {
          return initializationValue;
        }
      `), this.userCode = `
      const float initializationValue = ${a};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${f}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${s};

        vec4 minMaxValue = vec4(${a});
        float prodValue = 1.0;
        float sumValue = 0.0;
        float allValue = 1.0;
        float anyValue = 0.0;

        for (int i = 0; i < ${u}; i += 4) {
          int inIdx = inOffset + i;
          ${p} values = ${p}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${d}
        }

        int inIdx = inOffset + ${u};
        if (${h === 1}) {
          ${p} values = ${p}(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          ${d}
        } else if (${h === 2}) {
          ${p} values = ${p}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          ${d}
        } else if (${h === 3}) {
          ${p} values = ${p}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          ${d}
        }
        setOutput(${c});
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function d4(n) {
  const t = [];
  for (; t.length === 0 || t[t.length - 1].outSize !== 1; ) {
    const e = t.length ? t[t.length - 1].outSize : n[1], s = qd(e);
    t.push({
      inSize: e,
      windowSize: s,
      outSize: Math.ceil(e / s)
    });
  }
  return t;
}
function vo(n, t, e, s) {
  const r = d4(n.shape);
  let o = n;
  for (let i = 0; i < r.length; i++) {
    const { inSize: a, windowSize: l, outSize: c } = r[i];
    let u, h;
    e === "mean" ? u = i === 0 ? new Kx({ windowSize: l, inSize: a, batchSize: n.shape[0], outSize: c }, a) : new Kx({ windowSize: l, inSize: a, batchSize: n.shape[0], outSize: c }) : u = new h4({ windowSize: l, inSize: a, batchSize: n.shape[0], outSize: c }, e), h = o, o = s.runWebGLProgram(u, [o], t), h.dataId !== n.dataId && s.disposeIntermediateTensorInfo(h);
  }
  return o;
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class p4 {
  constructor(t, e) {
    this.variableNames = ["A"];
    const s = new Array(t.length);
    for (let i = 0; i < s.length; i++)
      s[i] = t[e[i]];
    this.outputShape = s, this.rank = s.length;
    const r = _t(this.rank), o = f4(e);
    this.userCode = `
    void main() {
      ${r} resRC = getOutputCoords();
      setOutput(getA(${o}));
    }
    `;
  }
}
function f4(n) {
  const t = n.length;
  if (t > 6)
    throw Error(`Transpose for rank ${t} is not yet supported`);
  const e = ["resRC.x", "resRC.y", "resRC.z", "resRC.w", "resRC.u", "resRC.v"], s = new Array(t);
  for (let r = 0; r < n.length; r++)
    s[n[r]] = e[r];
  return s.join();
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class m4 {
  constructor(t, e) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0;
    const s = new Array(t.length);
    for (let u = 0; u < s.length; u++)
      s[u] = t[e[u]];
    if (this.outputShape = s, this.rank = s.length, this.rank > 6)
      throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);
    const r = _t(this.rank), o = jv("rc", this.rank), i = new Array(this.rank);
    for (let u = 0; u < e.length; u++)
      i[e[u]] = o[u];
    const a = `vec2(${i.slice(-2).join()})`, l = `++${o[this.rank - 1]} < ${s[this.rank - 1]}`, c = `getChannel(getA(${i.join()}), ${a})`;
    this.userCode = `
    void main() {
      ${r} rc = getOutputCoords();
      vec4 result = vec4(0.);
      result[0] = ${c};
      if(${l}) {
        result[1] = ${c};
      }
      --${o[this.rank - 1]};
      if(++${o[this.rank - 2]} < ${s[this.rank - 2]}) {
        result[2] = ${c};
        if(${l}) {
          result[3] = ${c};
        }
      }
      setOutput(result);
    }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Np(n, t, e) {
  const s = V().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new m4(n.shape, t) : new p4(n.shape, t);
  return e.runWebGLProgram(s, [n], n.dtype);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function g4(n, t, e, s) {
  const r = t, o = n.shape.length, i = vt(r, n.shape);
  let a = i;
  const l = oe(a, o), c = l != null;
  let u = n;
  c && (u = Np(n, l, s), a = pe(a.length, o)), ze("sum", a, o);
  const [h, d] = ve(u.shape, a);
  let p = h;
  e && (p = de(h, i));
  const f = P(d), g = P(n.shape) / f, y = rt({ inputs: { x: u }, attrs: { shape: [g, f] }, backend: s }), b = od(n.dtype), w = vo(y, b, "sum", s), x = rt({ inputs: { x: w }, attrs: { shape: p }, backend: s });
  return s.disposeIntermediateTensorInfo(y), s.disposeIntermediateTensorInfo(w), c && s.disposeIntermediateTensorInfo(u), x;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $p(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { axis: o, keepDims: i } = s;
  return g4(r, o, i, e);
}
const y4 = {
  kernelName: Jl,
  backendName: "webgl",
  kernelFunc: $p
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ue(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { perm: o } = s, i = e, a = r.shape.length, l = new Array(a);
  for (let u = 0; u < l.length; u++)
    l[u] = r.shape[o[u]];
  let c;
  if (i.shouldExecuteOnCPU([r])) {
    const h = i.texData.get(r.dataId).values, d = yb(h, r.shape, r.dtype, o, l);
    c = i.makeTensorInfo(l, r.dtype);
    const p = i.texData.get(c.dataId);
    p.values = d;
  } else
    c = Np(r, o, i);
  return c;
}
const b4 = {
  kernelName: Zr,
  backendName: "webgl",
  kernelFunc: Ue
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const sC = 1e3;
function ju({ a: n, b: t, transposeA: e, transposeB: s, backend: r, bias: o = null, preluActivationWeights: i = null, leakyreluAlpha: a = 0, activation: l = null }) {
  const c = n.shape.length, u = t.shape.length, h = e ? n.shape[c - 2] : n.shape[c - 1], d = s ? t.shape[u - 1] : t.shape[u - 2], p = e ? n.shape[c - 1] : n.shape[c - 2], f = s ? t.shape[u - 2] : t.shape[u - 1], m = n.shape.slice(0, -2), g = t.shape.slice(0, -2), y = P(m), b = P(g), x = bt(n.shape.slice(0, -2), t.shape.slice(0, -2)).concat([p, f]);
  C(h === d, () => `Error in matMul: inner shapes (${h}) and (${d}) of Tensors with shapes ${n.shape} and ${t.shape} and transposeA=${e} and transposeB=${s} must match.`);
  const S = e ? [y, h, p] : [y, p, h], v = s ? [b, f, d] : [b, d, f], T = rt({ inputs: { x: n }, backend: r, attrs: { shape: S } }), N = rt({ inputs: { x: t }, backend: r, attrs: { shape: v } }), $ = [T, N], R = Math.max(y, b), F = e ? T.shape[1] : T.shape[2], z = o != null, W = i != null, M = l === "leakyrelu", X = l != null ? tl(l, !0) : null, _ = z || W || M || X != null;
  let B;
  if ((p === 1 || f === 1) && F > sC && _ === !1) {
    let H = T, j = N;
    e && (H = Ue({ inputs: { x: T }, backend: r, attrs: { perm: [0, 2, 1] } }), $.push(H)), s && (j = Ue({ inputs: { x: N }, backend: r, attrs: { perm: [0, 2, 1] } }), $.push(j));
    const J = f !== 1, q = f === 1;
    let Q = H;
    J && (Q = rt({
      inputs: { x: H },
      backend: r,
      attrs: { shape: [R, F, 1] }
    }), $.push(Q));
    const st = f === 1 ? 2 : 1;
    let tt = j;
    q && (tt = rt({
      inputs: { x: j },
      backend: r,
      attrs: { shape: [R, 1, F] }
    }), $.push(tt));
    const ot = xb({ inputs: { a: Q, b: tt }, backend: r });
    B = $p({ inputs: { x: ot }, backend: r, attrs: { axis: st, keepDims: !0 } }), $.push(ot);
  } else {
    const H = He(n.dtype, t.dtype), j = new nC(S, v, [R, p, f], e, s, z, X, W, M), J = [T, N];
    if (o != null && J.push(o), W && J.push(i), M) {
      const q = r.makeTensorInfo([], "float32", Ns(a, "float32"));
      J.push(q), $.push(q);
    }
    B = r.runWebGLProgram(j, J, H);
  }
  const Z = rt({ inputs: { x: B }, backend: r, attrs: { shape: x } });
  $.push(B);
  for (const H of $)
    r.disposeIntermediateTensorInfo(H);
  return Z;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function x4(n) {
  const { inputs: t, backend: e, attrs: s } = n, { a: r, b: o, bias: i, preluActivationWeights: a } = t, { transposeA: l, transposeB: c, activation: u, leakyreluAlpha: h } = s;
  return ju({
    a: r,
    b: o,
    transposeA: l,
    transposeB: c,
    backend: e,
    bias: i,
    preluActivationWeights: a,
    leakyreluAlpha: h,
    activation: u
  });
}
const w4 = {
  kernelName: Va,
  backendName: "webgl",
  kernelFunc: x4
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Zx = "return abs(x);";
function I4(n) {
  const { inputs: t, backend: e } = n, { x: s } = t;
  if (e.shouldExecuteOnCPU([s]) && s.dtype !== "complex64") {
    const o = e.texData.get(s.dataId), i = Uv(o.values);
    return e.makeTensorInfo(s.shape, s.dtype, i);
  }
  let r;
  return V().getBool("WEBGL_PACK_UNARY_OPERATIONS") ? r = new _r(s.shape, Zx) : r = new Os(s.shape, Zx), e.runWebGLProgram(r, [s], s.dtype);
}
const S4 = {
  kernelName: sl,
  backendName: "webgl",
  kernelFunc: I4
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const v4 = Jn + `
  if (abs(x) > 1.) {
    return NAN;
  }
  return acos(x);
`, C4 = Dt({ opSnippet: v4 }), k4 = {
  kernelName: qo,
  backendName: "webgl",
  kernelFunc: C4
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const T4 = Jn + `
  if (x < 1.0) return NAN;
return log(x + sqrt(x * x - 1.0));`, N4 = Dt({ opSnippet: T4 }), $4 = {
  kernelName: ti,
  backendName: "webgl",
  kernelFunc: N4
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Bx = "return a + b;", R4 = We({
  opSnippet: Bx,
  packedOpSnippet: Bx,
  supportsComplex: !0,
  cpuKernelImpl: PU
}), E4 = {
  kernelName: uo,
  backendName: "webgl",
  kernelFunc: R4
};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class L4 {
  constructor(t, e) {
    this.outputShape = [], this.outputShape = t, this.variableNames = e.map((o, i) => `T${i}`);
    const s = [];
    this.variableNames.forEach((o) => {
      s.push(`float v${o} = get${o}AtOutCoords();`);
    });
    const r = this.variableNames.map((o) => `v${o}`).join(" + ");
    this.userCode = `
      void main() {
        ${s.join(`
        `)}

        float result = ${r};
        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class D4 {
  constructor(t, e) {
    this.outputShape = [], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = t, this.variableNames = e.map((o, i) => `T${i}`);
    const s = [];
    this.variableNames.forEach((o) => {
      s.push(`vec4 v${o} = get${o}AtOutCoords();`);
    });
    const r = this.variableNames.map((o) => `v${o}`).join(" + ");
    this.userCode = `
      void main() {
        ${s.join(`
        `)}

        vec4 result = ${r};
        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function yu(n) {
  const { inputs: t, backend: e } = n, s = t;
  if (s.length === 1)
    return In({ inputs: { x: s[0] }, backend: e });
  if (s.length > V().get("WEBGL_MAX_TEXTURES_IN_SHADER")) {
    const l = Math.floor(s.length / 2), c = yu({ inputs: s.slice(0, l), backend: e }), u = yu({ inputs: s.slice(l), backend: e });
    return yu({ inputs: [c, u], backend: e });
  }
  const r = s.map((l) => l.dtype).reduce((l, c) => He(l, c)), o = s.map((l) => l.shape), a = V().getBool("WEBGL_PACK") ? new D4(s[0].shape, o) : new L4(s[0].shape, o);
  return e.runWebGLProgram(a, s, r);
}
const G4 = {
  kernelName: rl,
  backendName: "webgl",
  kernelFunc: yu
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function F4(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { axis: o, keepDims: i } = s, a = r.shape.length, l = vt(o, r.shape);
  let c = l;
  const u = oe(c, a);
  let h = r;
  u != null && (h = Ue({ inputs: { x: r }, backend: e, attrs: { perm: u } }), c = pe(c.length, a)), ze("all", c, a);
  const [d, p] = ve(h.shape, c), f = P(p), m = rt({ inputs: { x: h }, backend: e, attrs: { shape: [-1, f] } }), g = vo(m, m.dtype, "all", e);
  let y;
  if (i) {
    const b = de(d, l);
    y = rt({ inputs: { x: g }, backend: e, attrs: { shape: b } });
  } else
    y = rt({ inputs: { x: g }, backend: e, attrs: { shape: d } });
  return e.disposeIntermediateTensorInfo(m), e.disposeIntermediateTensorInfo(g), u != null && e.disposeIntermediateTensorInfo(h), y;
}
const O4 = {
  kernelName: sh,
  backendName: "webgl",
  kernelFunc: F4
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function A4(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { axis: o, keepDims: i } = s, a = r.shape.length, l = vt(o, r.shape);
  let c = l;
  const u = oe(c, a);
  let h = r;
  u != null && (h = Ue({ inputs: { x: r }, backend: e, attrs: { perm: u } }), c = pe(c.length, a)), ze("any", c, a);
  const [d, p] = ve(h.shape, c), f = P(p), m = rt({ inputs: { x: h }, backend: e, attrs: { shape: [-1, f] } }), g = vo(m, m.dtype, "any", e);
  let y;
  if (i) {
    const b = de(d, l);
    y = rt({ inputs: { x: g }, backend: e, attrs: { shape: b } });
  } else
    y = rt({ inputs: { x: g }, backend: e, attrs: { shape: d } });
  return e.disposeIntermediateTensorInfo(m), e.disposeIntermediateTensorInfo(g), u != null && e.disposeIntermediateTensorInfo(h), y;
}
const z4 = {
  kernelName: rh,
  backendName: "webgl",
  kernelFunc: A4
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class W4 {
  constructor(t, e, s) {
    this.variableNames = ["A"];
    const { windowSize: r, batchSize: o, outSize: i } = t;
    s || this.variableNames.push("bestIndicesA"), this.outputShape = [o, i];
    const a = e === "max" ? ">" : "<", l = s ? "inOffset + i;" : "round(getBestIndicesA(batch, inOffset + i));";
    this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${r};

        int bestIndex = inOffset;
        float bestValue = getA(batch, bestIndex);

        for (int i = 0; i < ${r}; i++) {
          int inIdx = ${l};
          float candidate = getA(batch, inIdx);
          if (candidate ${a} bestValue) {
            bestValue = candidate;
            bestIndex = inIdx;
          }
        }
        setOutput(float(bestIndex));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class V4 {
  constructor(t, e, s, r) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, C(t.length > 2, () => `Packed arg${s.charAt(0).toUpperCase() + s.slice(1)} supports only inputs with rank above 2.`);
    const o = t[t.length - 1], i = Math.ceil(o / e);
    this.outputShape = t.slice(0, -1), i > 1 && this.outputShape.push(i), r || this.variableNames.push("bestIndicesA");
    const a = this.outputShape, l = a.length, c = _t(l), u = Be("coords", l);
    let h, d;
    if (i === 1) {
      d = l + 1;
      const N = _t(d);
      h = `
        ${N} sourceLocR = ${N}(${u.join()}, 0);
        ++${u[l - 1]};
        ${N} sourceLocG = ${N}(${u.join()}, 0);
        ++${u[l - 2]};
        ${N} sourceLocA = ${N}(${u.join()}, 0);
        --${u[l - 1]};
        ${N} sourceLocB = ${N}(${u.join()}, 0);
        --${u[l - 2]};`;
    } else
      d = l, h = `
        ${c} sourceLocR = coords;
        ++${u[l - 1]};
        ${c} sourceLocG = coords;
        ++${u[l - 2]};
        ${c} sourceLocA = coords;
        --${u[l - 1]};
        ${c} sourceLocB = coords;
        --${u[l - 2]};`;
    const p = ["x", "y", "z", "w", "u", "v"].slice(0, d), f = "." + p[d - 1], m = p.map((N) => "int " + N), g = Be("sourceLocR", d - 1).concat("inIdx.r"), y = Be("sourceLocG", d - 1).concat("inIdx.g"), b = Be("sourceLocB", d - 1).concat("inIdx.b"), w = Be("sourceLocA", d - 1).concat("inIdx.a"), x = s === "max" ? "greaterThan" : "lessThan", S = r ? "" : `
          inIdx = round(vec4(getBestIndicesAChannel(${g.join()}),
                             getBestIndicesAChannel(${y.join()}),
                             getBestIndicesAChannel(${b.join()}),
                             getBestIndicesAChannel(${w.join()})));`, v = `vec4(
            getAChannel(${g.join()}),
            hasNextCol ? getAChannel(${y.join()}) : 0.,
            hasNextRow ? getAChannel(${b.join()}) : 0.,
            hasNextRow && hasNextCol ? getAChannel(${w.join()}) : 0.)`, T = r ? "" : `
      float getBestIndicesAChannel(${m.join()}) {
        return getChannel(getBestIndicesA(${p.join()}),
                                          vec2(${p.slice(-2).join()}));
      }`;
    this.userCode = `
      float getAChannel(${m.join()}) {
        return getChannel(getA(${p.join()}),
                               vec2(${p.slice(-2).join()}));
      }
      ${T}
      void main() {
        ${c} coords = getOutputCoords();
        bool hasNextCol = ${u[l - 1]} < ${a[l - 1] - 1};
        bool hasNextRow = ${u[l - 2]} < ${a[l - 2] - 1};
        ${h}
        ivec4 srcIdx = ivec4(sourceLocR${f}, sourceLocG${f},
          sourceLocB${f}, sourceLocA${f}) * ${e};
        ivec4 inIdx = srcIdx;
        vec4 bestIndex = vec4(inIdx);
        vec4 bestValue = ${v};

        for (int i = 0; i < ${e}; i++) {
          inIdx = srcIdx;
          ${S}
          vec4 candidate = ${v};
          bvec4 nan = isnan(candidate);
          bvec4 replace = bvec4(
            vec4(${x}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));

          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,
                           replace.y  ? candidate.y : bestValue.y,
                           replace.z  ? candidate.z : bestValue.z,
                           replace.w  ? candidate.w : bestValue.w);
          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));
          srcIdx++;
        }
        setOutput(bestIndex);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function rC(n, t, e, s = null) {
  let r = t.shape[0], o = t.shape[1];
  s != null && (r = s.shape[0], o = s.shape[1]);
  const i = qd(o), a = { windowSize: i, inSize: o, batchSize: r, outSize: Math.ceil(o / i) }, l = new W4(a, e, s == null), c = [t];
  s != null && c.push(s);
  const u = n.runWebGLProgram(l, c, "int32");
  if (u.shape[1] === 1)
    return u;
  const h = rC(n, t, e, u);
  return n.disposeIntermediateTensorInfo(u), h;
}
function oC(n, t, e, s = null) {
  const r = s != null ? s.shape : t.shape, o = r[r.length - 1], i = qd(o), a = new V4(r, i, e, s == null), l = s == null ? [t] : [t, s], c = n.runWebGLProgram(a, l, "int32");
  if (c.shape.length === t.shape.length) {
    const u = oC(n, t, e, c);
    return n.disposeIntermediateTensorInfo(c), u;
  }
  return c;
}
function iC(n, t, e, s) {
  const r = [e];
  if (ze("arg" + s.charAt(0).toUpperCase() + s.slice(1), r, t.shape.length), !V().getBool("WEBGL_PACK_REDUCE") || t.shape.length <= 2) {
    const o = [], i = n.texData.get(t.dataId), a = i !== null && i.isPacked;
    let l = t;
    a && (l = n.unpackTensor(t), o.push(l));
    const [c, u] = ve(l.shape, r), h = P(u), d = rt({ inputs: { x: l }, backend: n, attrs: { shape: [-1, h] } });
    o.push(d);
    const p = rC(n, d, s);
    o.push(p);
    const f = rt({ inputs: { x: p }, backend: n, attrs: { shape: c } });
    return o.forEach((m) => n.disposeIntermediateTensorInfo(m)), f;
  }
  return oC(n, t, s);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function M4(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { axis: o } = s;
  let i = vt(o, r.shape);
  const a = oe(i, r.shape.length);
  let l = r;
  const c = [];
  a != null && (l = Ue({ inputs: { x: r }, backend: e, attrs: { perm: a } }), c.push(l), i = pe(i.length, l.shape.length)), ze("argMax", [i[0]], l.shape.length);
  const u = iC(e, l, i[0], "max");
  return c.forEach((h) => e.disposeIntermediateTensorInfo(h)), u;
}
const P4 = {
  kernelName: ol,
  backendName: "webgl",
  kernelFunc: M4
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function X4(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { axis: o } = s;
  let i = vt(o, r.shape);
  const a = oe(i, r.shape.length);
  let l = r;
  const c = [];
  a != null && (l = Ue({ inputs: { x: r }, backend: e, attrs: { perm: a } }), c.push(l), i = pe(i.length, l.shape.length)), ze("argMin", [i[0]], l.shape.length);
  const u = iC(e, l, i[0], "min");
  return c.forEach((h) => e.disposeIntermediateTensorInfo(h)), u;
}
const _4 = {
  kernelName: il,
  backendName: "webgl",
  kernelFunc: X4
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const K4 = Jn + `
  if (abs(x) > 1.) {
    return NAN;
  }
  return asin(x);
`, Z4 = Dt({ opSnippet: K4 }), B4 = {
  kernelName: ei,
  backendName: "webgl",
  kernelFunc: Z4
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const H4 = Jn + "return log(x + sqrt(x * x + 1.0));", U4 = Dt({ opSnippet: H4 }), Y4 = {
  kernelName: ni,
  backendName: "webgl",
  kernelFunc: U4
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const j4 = Jn + `
  return atan(x);
`, J4 = Dt({ opSnippet: j4 }), Q4 = {
  kernelName: si,
  backendName: "webgl",
  kernelFunc: J4
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const q4 = bb + `
  return atan(a, b);
`, t5 = `
  vec4 result = atan(a, b);
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  ` + Xc + `
  return result;
`, e5 = We({ opSnippet: q4, packedOpSnippet: t5 }), n5 = {
  kernelName: oi,
  backendName: "webgl",
  kernelFunc: e5
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const s5 = Jn + `
  if ((x < -1.0) || (x > 1.0)) return NAN;
return (log(1.0 + x) - log(1.0 - x)) / 2.0;`, r5 = Dt({ opSnippet: s5 }), o5 = {
  kernelName: ri,
  backendName: "webgl",
  kernelFunc: r5
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class el {
  constructor(t, e, s, r = !1, o = !1) {
    if (this.variableNames = ["x"], e === "avg" && s)
      throw new Error("Cannot compute positions for average pool.");
    const i = t.filterWidth, a = t.strideHeight, l = t.strideWidth, c = t.dilationHeight, u = t.dilationWidth, h = t.effectiveFilterHeight, d = t.effectiveFilterWidth, p = t.padInfo.top, f = t.padInfo.left;
    this.outputShape = t.outShape;
    const m = e === "avg", g = `((batch  * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + d`, y = `(xR * ${t.inWidth} + xC) * ${t.inChannels} + d`;
    let b = "0.0";
    if (m || (b = "-1.0 / 1e-20"), s) {
      const N = ">=";
      this.userCode = `
        const ivec2 strides = ivec2(${a}, ${l});
        const ivec2 pads = ivec2(${p}, ${f});

        void main() {
          ivec4 coords = getOutputCoords();
          int batch = coords[0];
          int d = coords[3];

          ivec2 xRCCorner = coords.yz * strides - pads;
          int xRCorner = xRCCorner.x;
          int xCCorner = xRCCorner.y;

          // max/min x(?, ?, d) to get y(yR, yC, d).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;
          float avgValue = 0.0;

          for (int wR = 0; wR < ${h};
              wR += ${c}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${d};
                wC += ${u}) {
              int xC = xCCorner + wC;

              if (xC < 0 || xC >= ${t.inWidth}) {
                continue;
              }

              float value = getX(batch, xR, xC, d);

              // If a min / max value has already been found, use it. If not,
              // use the current value.
              float currMinMaxValue = mix(
                  value, minMaxValue, minMaxValueFound);
              if (value ${N} currMinMaxValue) {
                minMaxValue = value;
                minMaxValueFound = 1.0;
                minMaxPosition = ${r ? o ? g : y : `wR * ${d} + wC`};
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;
      return;
    }
    const w = "max";
    let x = `${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;
    e === "avg" && (x = "avgValue / count");
    const S = Math.floor(i / 4) * 4, v = i % 4, T = `
      if (${m}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${w}(values, minMaxValue);
      }
    `;
    this.userCode = `
      const ivec2 strides = ivec2(${a}, ${l});
      const ivec2 pads = ivec2(${p}, ${f});
      const float initializationValue = ${b};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xR, int xC, int d) {
        if (xC < 0 || xC >= ${t.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xR, xC, d);
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d = coords[3];

        ivec2 xRCCorner = coords.yz * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // max/min x(?, ?, d) to get y(yR, yC, d).
        // ? = to be determined
        vec4 minMaxValue = vec4(${b});
        float avgValue = 0.0;
        count = 0.0;

        for (int wR = 0; wR < ${h};
            wR += ${c}) {
          int xR = xRCorner + wR;

          if (xR < 0 || xR >= ${t.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${S}; wC += 4) {
            int xC = xCCorner + wC * ${u};

            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${u}, d),
              getValue(batch, xR, xC + 2 * ${u}, d),
              getValue(batch, xR, xC + 3 * ${u}, d)
            );

            ${T}
          }

          int xC = xCCorner + ${S};
          if (${v === 1}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              initializationValue,
              initializationValue,
              initializationValue
            );

            ${T}
          } else if (${v === 2}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${u}, d),
              initializationValue,
              initializationValue
            );

            ${T}
          } else if (${v === 3}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${u}, d),
              getValue(batch, xR, xC + 2 * ${u}, d),
              initializationValue
            );

            ${T}
          }
        }
        setOutput(${x});
      }
    `;
  }
}
class wb {
  constructor(t, e, s, r = !1, o = !1) {
    if (this.variableNames = ["x"], e === "avg" && s)
      throw new Error("Cannot compute positions for average pool.");
    const i = t.filterWidth, a = t.strideDepth, l = t.strideHeight, c = t.strideWidth, u = t.dilationDepth, h = t.dilationHeight, d = t.dilationWidth, p = t.effectiveFilterDepth, f = t.effectiveFilterHeight, m = t.effectiveFilterWidth, g = t.padInfo.front, y = t.padInfo.top, b = t.padInfo.left;
    this.outputShape = t.outShape;
    const w = e === "avg";
    let x = "0.0";
    if (w || (x = "-1.0 / 1e-20"), s) {
      const R = ">=";
      this.userCode = `
        const ivec3 strides =
            ivec3(${a}, ${l}, ${c});
        const ivec3 pads = ivec3(${g}, ${y}, ${b});

        void main() {
          ivec5 coords = getOutputCoords();
          int batch = coords.x;
          int ch = coords.u;

          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
          int xDCorner = xCorner.x;
          int xRCorner = xCorner.y;
          int xCCorner = xCorner.z;

          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;

          for (int wD = 0; wD < ${p};
              wD += ${u}) {
            int xD = xDCorner + wD;

            if (xD < 0 || xD >= ${t.inDepth}) {
              continue;
            }

            for (int wR = 0; wR < ${f};
                wR += ${h}) {
              int xR = xRCorner + wR;

              if (xR < 0 || xR >= ${t.inHeight}) {
                continue;
              }

              for (int wC = 0; wC < ${m};
                  wC += ${d}) {
                int xC = xCCorner + wC;

                if (xC < 0 || xC >= ${t.inWidth}) {
                  continue;
                }

                float value = getX(batch, xD, xR, xC, ch);

                // If a min / max value has already been found, use it. If not,
                // use the current value.
                float currMinMaxValue = mix(
                    value, minMaxValue, minMaxValueFound);
                if (value ${R} currMinMaxValue) {
                  minMaxValue = value;
                  minMaxValueFound = 1.0;
                  minMaxPosition = ${r ? o ? `(((batch * ${t.inDepth} + xD) * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch` : `((xD * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch` : `wD * ${f} * ${m} +
                      wR * ${m} + wC`};
                }
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;
      return;
    }
    const S = "max";
    let v = `${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;
    e === "avg" && (v = "avgValue / count");
    const T = Math.floor(i / 4) * 4, N = i % 4, $ = `
      if (${w}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${S}(values, minMaxValue);
      }
    `;
    this.userCode = `
      const ivec3 strides =
        ivec3(${a}, ${l}, ${c});
      const ivec3 pads = ivec3(${g}, ${y}, ${b});
      const float initializationValue = ${x};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xD, int xR, int xC, int ch) {
        if (xC < 0 || xC >= ${t.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xD, xR, xC, ch);
      }

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xDCorner = xCorner.x;
        int xRCorner = xCorner.y;
        int xCCorner = xCorner.z;

        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).
        // ? = to be determined
        vec4 minMaxValue = vec4(${x});
        float avgValue = 0.0;
        count = 0.0;

        for (int wD = 0; wD < ${p};
            wD += ${u}) {
          int xD = xDCorner + wD;

          if (xD < 0 || xD >= ${t.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${f};
            wR += ${h}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${T}; wC += 4) {
              int xC = xCCorner + wC * ${d};

              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${d}, ch),
                getValue(batch, xD, xR, xC + 2 * ${d}, ch),
                getValue(batch, xD, xR, xC + 3 * ${d}, ch)
              );

              ${$}
            }

            int xC = xCCorner + ${T};
            if (${N === 1}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                initializationValue,
                initializationValue,
                initializationValue
              );

              ${$}
            } else if (${N === 2}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${d}, ch),
                initializationValue,
                initializationValue
              );

              ${$}
            } else if (${N === 3}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${d}, ch),
                getValue(batch, xD, xR, xC + 2 * ${d}, ch),
                initializationValue
              );

              ${$}
            }
          }
          setOutput(${v});
        }
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function i5(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t;
  Mc(r, "avgPool");
  const { filterSize: o, strides: i, pad: a, dimRoundingMode: l } = s, c = 1;
  C(Ae(i, c), () => `Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`);
  const u = Yn(r.shape, o, i, c, a, l);
  if (u.filterWidth === 1 && u.filterHeight === 1 && Nt(u.inShape, u.outShape))
    return In({ inputs: { x: r }, backend: e });
  const h = new el(u, "avg", !1);
  return e.runWebGLProgram(h, [r], "float32");
}
const a5 = {
  kernelName: al,
  backendName: "webgl",
  kernelFunc: i5
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function l5(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { filterSize: o, strides: i, pad: a, dimRoundingMode: l, dataFormat: c } = s, u = [1, 1, 1], h = Us(r.shape, o, i, u, a, l, c), d = new wb(h, "avg", !1);
  return e.runWebGLProgram(d, [r], "float32");
}
const c5 = {
  kernelName: ll,
  backendName: "webgl",
  kernelFunc: l5
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class u5 {
  constructor(t) {
    this.variableNames = ["dy"], this.outputShape = t.inShape;
    const e = t.filterHeight, s = t.filterWidth, r = t.strideHeight, o = t.strideWidth, i = t.dilationHeight, a = t.dilationWidth, l = t.effectiveFilterHeight, c = t.effectiveFilterWidth, u = l - 1 - t.padInfo.top, h = c - 1 - t.padInfo.left, d = 1 / (e * s);
    this.userCode = `
      const ivec2 pads = ivec2(${u}, ${h});
      const float avgMultiplier = float(${d});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${l};
            wR += ${i}) {
          float dyR = float(dyRCorner + wR) / ${r}.0;

          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${c};
            wC+= ${a}) {
            float dyC = float(dyCCorner + wC) / ${o}.0;

            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);

            dotProd += dyValue * avgMultiplier;
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
class h5 {
  constructor(t) {
    this.variableNames = ["dy"], this.outputShape = t.inShape;
    const e = t.filterDepth, s = t.filterHeight, r = t.filterWidth, o = t.strideDepth, i = t.strideHeight, a = t.strideWidth, l = t.dilationDepth, c = t.dilationHeight, u = t.dilationWidth, h = t.effectiveFilterDepth, d = t.effectiveFilterHeight, p = t.effectiveFilterWidth, f = h - 1 - t.padInfo.front, m = d - 1 - t.padInfo.top, g = p - 1 - t.padInfo.left, y = 1 / (e * s * r);
    this.userCode = `
      const ivec3 pads = ivec3(${f}, ${m}, ${g});
      const float avgMultiplier = float(${y});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${h};
            wD += ${l}) {
          float dyD = float(dyDCorner + wD) / ${o}.0;

          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${d};
              wR += ${c}) {
            float dyR = float(dyRCorner + wR) / ${i}.0;

            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${p};
                wC += ${u}) {
              float dyC = float(dyCCorner + wC) / ${a}.0;

              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);

              dotProd += dyValue * avgMultiplier;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function d5(n) {
  const { inputs: t, backend: e, attrs: s } = n, { dy: r, input: o } = t, i = o, { filterSize: a, strides: l, pad: c, dimRoundingMode: u } = s, h = [1, 1, 1], d = Us(i.shape, a, l, h, c, u), p = new h5(d);
  return e.runWebGLProgram(p, [r], i.dtype);
}
const p5 = {
  kernelName: ih,
  backendName: "webgl",
  kernelFunc: d5
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function f5(n) {
  const { inputs: t, backend: e, attrs: s } = n, { dy: r, input: o } = t, i = o;
  Mc([r, o], "avgPoolGrad");
  const { filterSize: a, strides: l, pad: c } = s, u = Yn(i.shape, a, l, 1, c), h = new u5(u);
  return e.runWebGLProgram(h, [r], i.dtype);
}
const m5 = {
  kernelName: oh,
  backendName: "webgl",
  kernelFunc: f5
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function g5(n) {
  const { inputs: t, backend: e, attrs: s } = n, { a: r, b: o } = t, { transposeA: i, transposeB: a } = s;
  return ju({ a: r, b: o, transposeA: i, transposeB: a, backend: e });
}
const y5 = {
  kernelName: cl,
  backendName: "webgl",
  kernelFunc: g5
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class b5 {
  constructor(t, e, s, r, o, i) {
    this.outputShape = [], this.variableNames = ["x", "mean", "variance"], bt(t, e), bt(t, s);
    let a = "0.0";
    r != null && (bt(t, r), this.variableNames.push("offset"), a = "getOffsetAtOutCoords()");
    let l = "1.0";
    o != null && (bt(t, o), this.variableNames.push("scale"), l = "getScaleAtOutCoords()"), this.outputShape = t, this.userCode = `
      void main() {
        float x = getXAtOutCoords();
        float mean = getMeanAtOutCoords();
        float variance = getVarianceAtOutCoords();
        float offset = ${a};
        float scale = ${l};
        float inv = scale * inversesqrt(variance + float(${i}));
        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class x5 {
  constructor(t, e, s, r, o, i) {
    this.packedInputs = !0, this.packedOutput = !0, this.variableNames = ["x", "mean", "variance"], bt(t, e), bt(t, s);
    let a = "vec4(0.0)";
    r != null && (bt(t, r), this.variableNames.push("offset"), a = "getOffsetAtOutCoords()");
    let l = "vec4(1.0)";
    o != null && (bt(t, o), this.variableNames.push("scale"), l = "getScaleAtOutCoords()"), this.outputShape = t, this.userCode = `
      void main() {
        vec4 offset = ${a};
        vec4 scale = ${l};

        vec4 x = getXAtOutCoords();
        vec4 mean = getMeanAtOutCoords();
        vec4 variance = getVarianceAtOutCoords();

        vec4 inv = scale * inversesqrt(variance + vec4(${i}));

        setOutput((x - mean) * inv + offset);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const w5 = ({ inputs: n, backend: t, attrs: e }) => {
  const { x: s, mean: r, variance: o, offset: i, scale: a } = n;
  C(r.shape.length === o.shape.length, () => "Batch normalization gradient requires mean and variance to have equal ranks."), C(i == null || r.shape.length === i.shape.length, () => "Batch normalization gradient requires mean and offset to have equal ranks."), C(a == null || r.shape.length === a.shape.length, () => "Batch normalization gradient requires mean and scale to have equal ranks.");
  let { varianceEpsilon: l } = e;
  l == null && (l = 1e-3);
  const c = [s, r, o];
  let u = null;
  i != null && (u = i.shape, c.push(i));
  let h = null;
  a != null && (h = a.shape, c.push(a));
  const d = V().getBool("WEBGL_PACK_NORMALIZATION") ? new x5(s.shape, r.shape, o.shape, u, h, l) : new b5(s.shape, r.shape, o.shape, u, h, l);
  return t.runWebGLProgram(d, c, c[0].dtype);
}, I5 = {
  kernelName: Il,
  backendName: "webgl",
  kernelFunc: w5
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class S5 {
  constructor(t) {
    this.variableNames = ["source"], this.outputShape = t, this.rank = t.length;
    const e = _t(this.rank);
    this.customUniforms = [{ name: "start", arrayIndex: this.rank, type: "int" }];
    const s = v5(this.rank);
    let r;
    const o = t.map((i, a) => `sourceLoc.${um[a]} = start[${a}] + coords.${um[a]};`);
    r = `
        ${e} sourceLoc;
        ${e} coords = getOutputCoords();
        ${o.join(`
`)}
      `, this.userCode = `
      void main() {
        ${r}
        setOutput(getSource(${s}));
      }
    `;
  }
}
const um = ["x", "y", "z", "w", "u", "v"];
function v5(n) {
  if (n === 1)
    return "sourceLoc";
  if (n <= 6)
    return um.slice(0, n).map((t) => "sourceLoc." + t).join(",");
  throw Error(`Slicing for rank ${n} is not yet supported`);
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class C5 {
  constructor(t) {
    this.variableNames = ["source"], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = t, this.rank = t.length, this.customUniforms = [{ name: "start", arrayIndex: this.rank, type: "int" }];
    const e = _t(this.rank), s = Be("coords", this.rank), r = Be("sourceLoc", this.rank), o = this.rank === 1 ? "sourceLoc" : `vec2(${r.slice(-2).join()})`, i = `getChannel(getSource(${r.join()}), ${o})`, a = `
      result.x = ${i};
      if (++${s[this.rank - 1]} < ${t[this.rank - 1]}) {
        ++${r[this.rank - 1]};
        result.y = ${i};
        --${r[this.rank - 1]};
      }
    `, l = this.rank === 1 ? "" : `
      --${s[this.rank - 1]};
      if (++${s[this.rank - 2]} < ${t[this.rank - 2]}) {
        ++${r[this.rank - 2]};
        result.z = ${i};
        if (++${s[this.rank - 1]} < ${t[this.rank - 1]}) {
          ++${r[this.rank - 1]};
          result.w = ${i};
        }
      }
    `, c = this.rank <= 4 ? `sourceLoc = coords +
            ${e}(${t.map((u, h) => `start[${h}]`).join()});` : t.map((u, h) => `${r[h]} = ${s[h]} + start[${h}];`).join(`
`);
    this.userCode = `
      void main() {
        ${e} coords = getOutputCoords();
        ${e} sourceLoc;
        ${c}
        vec4 result = vec4(0.);
        ${a}
        ${l}
        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function k5(n, t, e, s) {
  const r = s.texData.get(n.dataId), o = s.makeTensorInfo(e, n.dtype), i = s.texData.get(o.dataId);
  Object.assign(i, r), i.refCount = 1, i.shape = e, i.dtype = n.dtype;
  let a = ud(t, lt(n.shape));
  r.slice && (a += r.slice.flatOffset), i.slice = {
    flatOffset: a,
    origDataId: r.slice && r.slice.origDataId || n.dataId
  };
  const l = s.dataRefCount.get(i.slice.origDataId) || 1;
  return s.dataRefCount.set(i.slice.origDataId, l + 1), o;
}
function xa(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { begin: o, size: i } = s, [a, l] = hd(r, o, i);
  if (_m(r, a, l), P(l) === 0)
    return e.makeTensorInfo(l, r.dtype, []);
  if (e.shouldExecuteOnCPU([r]) || r.dtype === "string") {
    const h = e.texData.get(r.dataId), d = y9(h.values, a, l, r.shape, r.dtype);
    return e.makeTensorInfo(l, r.dtype, d);
  }
  const { isPacked: c } = e.texData.get(r.dataId), u = cd(r.shape, a, l);
  if (c || !u) {
    const h = V().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new C5(l) : new S5(l), d = [a];
    return e.runWebGLProgram(h, [r], r.dtype, d);
  }
  return e.uploadToGPU(r.dataId), k5(r, a, l, e);
}
const T5 = {
  kernelName: jl,
  backendName: "webgl",
  kernelFunc: xa
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const N5 = (n) => {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { blockShape: o, crops: i } = s;
  C(r.shape.length <= 4, () => "batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");
  const a = o.reduce((b, w) => b * w), l = kc(r.shape, o, a), c = Tc(l.length, o.length), u = Nc(r.shape, o, a), h = ny(i, o.length), d = sy(u, i, o.length), p = [], f = rt({ inputs: { x: r }, backend: e, attrs: { shape: l } }), m = Ue({ inputs: { x: f }, backend: e, attrs: { perm: c } }), g = rt({
    inputs: { x: m },
    backend: e,
    attrs: { shape: u }
  }), y = xa({
    inputs: { x: g },
    backend: e,
    attrs: { begin: h, size: d }
  });
  return p.push(f), p.push(m), p.push(g), p.forEach((b) => e.disposeIntermediateTensorInfo(b)), y;
}, $5 = {
  kernelName: ul,
  backendName: "webgl",
  kernelFunc: N5
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function R5(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r, weights: o } = t, { size: i } = s, a = e.readSync(r.dataId), l = e.readSync(o.dataId), c = Hv(a, l, o.dtype, o.shape, i);
  return e.makeTensorInfo([i], o.dtype, c);
}
const E5 = {
  kernelName: ah,
  backendName: "webgl",
  kernelFunc: R5
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function L5(n) {
  const { inputs: t, backend: e } = n, { s0: s, s1: r } = t, o = e.readSync(s.dataId), i = e.readSync(r.dataId), a = bt(Array.from(o), Array.from(i));
  return e.makeTensorInfo([a.length], "int32", Int32Array.from(a));
}
const D5 = {
  kernelName: lh,
  backendName: "webgl",
  kernelFunc: L5
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const G5 = "return float(a != b);", aC = We({ opSnippet: G5, cpuKernelImpl: c9, dtype: "bool" }), F5 = {
  kernelName: Wl,
  backendName: "webgl",
  kernelFunc: aC
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Kc(n) {
  const { inputs: t, backend: e } = n, { input: s } = t, r = e.texData.get(s.dataId);
  return In({ inputs: { x: r.complexTensorInfos.real }, backend: e });
}
const O5 = {
  kernelName: Mh,
  backendName: "webgl",
  kernelFunc: Kc
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const A5 = "return float(int(x));";
function z5(n, t) {
  const e = new Os(n.shape, A5), s = t.runWebGLProgram(e, [n], "int32");
  return { dataId: s.dataId, shape: s.shape, dtype: s.dtype };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function hm(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { dtype: o } = s;
  if (o === "complex64") {
    if (r.dtype === "complex64")
      return In({ inputs: { x: r }, backend: e });
    const i = ge(r.shape), a = hm({ inputs: { x: r }, backend: e, attrs: { dtype: "float32" } }), l = Er({ inputs: { real: a, imag: i }, backend: e });
    return i.dispose(), e.disposeIntermediateTensorInfo(a), l;
  }
  if (r.dtype === "complex64") {
    const i = Kc({ inputs: { input: r }, backend: e }), a = hm({ inputs: { x: i }, backend: e, attrs: { dtype: o } });
    return e.disposeIntermediateTensorInfo(i), a;
  }
  if (!bm(r.dtype, o)) {
    const i = In({ inputs: { x: r }, backend: e });
    return { dataId: i.dataId, shape: i.shape, dtype: o };
  }
  if (e.shouldExecuteOnCPU([r])) {
    const i = e.texData.get(r.dataId).values, [a, l, c] = _U(i, r.shape, r.dtype, o);
    return e.makeTensorInfo(a, l, c);
  }
  if (o === "int32")
    return z5(r, e);
  if (o === "bool") {
    const i = e.makeTensorInfo([], "bool", jt("bool", 1)), l = aC({ inputs: { a: r, b: i }, backend: e });
    return e.disposeIntermediateTensorInfo(i), l;
  }
  throw new Error(`Error in Cast: failed to cast ${r.dtype} to ${o}`);
}
const W5 = {
  kernelName: ii,
  backendName: "webgl",
  kernelFunc: hm
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Hx = "return ceil(x);", V5 = Dt({ opSnippet: Hx, packedOpSnippet: Hx, cpuKernelImpl: KU }), M5 = {
  kernelName: ai,
  backendName: "webgl",
  kernelFunc: V5
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class P5 {
  constructor(t) {
    this.variableNames = ["A"], this.customUniforms = [
      { name: "minVal", type: "float" },
      { name: "maxVal", type: "float" }
    ], this.outputShape = t, this.userCode = `

      void main() {
        float value = getAAtOutCoords();
        if (isnan(value)) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, minVal, maxVal));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class X5 {
  constructor(t) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, this.customUniforms = [
      { name: "minVal", type: "float" },
      { name: "maxVal", type: "float" }
    ], this.outputShape = t, this.userCode = `
      void main() {
        vec4 value = getAAtOutCoords();

        if (any(isnan(value))) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _5(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { clipValueMin: o, clipValueMax: i } = s;
  let a;
  V().getBool("WEBGL_PACK_CLIP") ? a = new X5(r.shape) : a = new P5(r.shape);
  const l = [[o], [i]];
  return e.runWebGLProgram(a, [r], r.dtype, l);
}
const K5 = {
  kernelName: li,
  backendName: "webgl",
  kernelFunc: _5
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Z5 {
  constructor(t) {
    this.variableNames = ["real", "imag"], this.outputShape = t, this.userCode = `
      void main() {
        float re = abs(getRealAtOutCoords());
        float im = abs(getImagAtOutCoords());
        float mx = max(re, im);

        // sadly the length function in glsl is not underflow-safe
        // (at least not on Intel GPUs). So the safe solution is
        // to ensure underflow-safety in all cases.
        setOutput(
          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))
        );
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ux(n, t) {
  return {
    dataId: t.dataId,
    dtype: t.dtype,
    shape: n.shape
  };
}
function B5(n) {
  const { inputs: t, backend: e } = n, { x: s } = t, r = e.texData.get(s.dataId), o = new Z5(s.shape), i = [
    Ux(s, r.complexTensorInfos.real),
    Ux(s, r.complexTensorInfos.imag)
  ];
  return e.runWebGLProgram(o, i, i[0].dtype);
}
const H5 = {
  kernelName: hl,
  backendName: "webgl",
  kernelFunc: B5
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class U5 {
  constructor(t) {
    this.outputShape = [], this.outputShape = Is(t, 1), this.variableNames = t.map((i, a) => `T${a}`);
    const e = new Array(t.length - 1);
    e[0] = t[0][1];
    for (let i = 1; i < e.length; i++)
      e[i] = e[i - 1] + t[i][1];
    const s = [`if (yC < ${e[0]}) setOutput(getT0(yR, yC));`];
    for (let i = 1; i < e.length; i++) {
      const a = e[i - 1];
      s.push(`else if (yC < ${e[i]}) setOutput(getT${i}(yR, yC-${a}));`);
    }
    const r = e.length, o = e[e.length - 1];
    s.push(`else setOutput(getT${r}(yR, yC-${o}));`), this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int yR = coords.x;
        int yC = coords.y;

        ${s.join(`
        `)}
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Y5 {
  constructor(t, e) {
    this.packedInputs = !0, this.packedOutput = !0, this.outputShape = [], this.outputShape = Is(t, e);
    const s = this.outputShape, r = s.length, o = _t(r), i = Be("coords", r), a = ["x", "y", "z", "w", "u", "v"].slice(0, r);
    this.variableNames = t.map((m, g) => `T${g}`);
    const l = new Array(t.length - 1);
    l[0] = t[0][e];
    for (let m = 1; m < l.length; m++)
      l[m] = l[m - 1] + t[m][e];
    const c = a[e], u = a.slice(-2), h = a.join();
    let d = `if (${c} < ${l[0]}) {
        return getChannel(
            getT0(${h}), vec2(${u.join()}));
        }`;
    for (let m = 1; m < l.length; m++) {
      const g = l[m - 1];
      d += `
        if (${c} < ${l[m]}  && ${c} >= ${l[m - 1]}) {
          return getChannel(
            getT${m}(${lu(a, c, g)}),
            vec2(${lu(u, c, g)}));
        }`;
    }
    const p = l.length, f = l[l.length - 1];
    d += `
        return getChannel(
          getT${p}(${lu(a, c, f)}),
          vec2(${lu(u, c, f)}));`, this.userCode = `
      float getValue(${a.map((m) => "int " + m)}) {
        ${d}
      }

      void main() {
        ${o} coords = getOutputCoords();
        vec4 result = vec4(getValue(${i}), 0., 0., 0.);

        ${i[r - 1]} = ${i[r - 1]} + 1;
        if (${i[r - 1]} < ${s[r - 1]}) {
          result.g = getValue(${i});
        }

        ${i[r - 2]} = ${i[r - 2]} + 1;
        if (${i[r - 2]} < ${s[r - 2]}) {
          result.a = getValue(${i});
        }

        ${i[r - 1]} = ${i[r - 1]} - 1;
        if (${i[r - 2]} < ${s[r - 2]} &&
            ${i[r - 1]} < ${s[r - 1]}) {
          result.b = getValue(${i});
        }
        setOutput(result);
      }
    `;
  }
}
function lu(n, t, e) {
  const s = n.indexOf(t);
  return n.map((o, i) => i === s ? `${o} - ${e}` : o).join();
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Rp(n) {
  const { inputs: t, backend: e } = n, { input: s } = t, r = e.texData.get(s.dataId);
  return In({ inputs: { x: r.complexTensorInfos.imag }, backend: e });
}
const j5 = {
  kernelName: Nh,
  backendName: "webgl",
  kernelFunc: Rp
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Aa(n, t, e) {
  const s = n[0].dtype;
  if (s === "complex64") {
    const h = n.map((g) => Kc({ inputs: { input: g }, backend: e })), d = n.map((g) => Rp({ inputs: { input: g }, backend: e })), p = Aa(h, t, e), f = Aa(d, t, e), m = Er({ inputs: { real: p, imag: f }, backend: e });
    return h.forEach((g) => e.disposeIntermediateTensorInfo(g)), d.forEach((g) => e.disposeIntermediateTensorInfo(g)), e.disposeIntermediateTensorInfo(p), e.disposeIntermediateTensorInfo(f), m;
  }
  let r = e.shouldExecuteOnCPU(n);
  if (s === "string" && (r = !0), r) {
    const h = n.map((b) => {
      const x = [-1, P(b.shape.slice(t))];
      return rt({ inputs: { x: b }, backend: e, attrs: { shape: x } });
    }), d = h.map((b) => ({ vals: e.readSync(b.dataId), shape: b.shape })), p = Is(h.map((b) => b.shape), 1), f = h[0].shape[0] === 1, m = ZU(d, p, s, f), g = Is(n.map((b) => b.shape), t), y = e.makeTensorInfo(g, s, m);
    return h.forEach((b) => e.disposeIntermediateTensorInfo(b)), y;
  }
  const o = V().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");
  if (n.length > o) {
    const h = [];
    for (let p = 0; p < n.length; p += o) {
      const f = n.slice(p, p + o);
      h.push(Aa(f, t, e));
    }
    const d = Aa(h, t, e);
    for (const p of h)
      e.disposeIntermediateTensorInfo(p);
    return d;
  }
  if (V().getBool("WEBGL_PACK_ARRAY_OPERATIONS") && n[0].shape.length > 1) {
    const h = new Y5(n.map((d) => d.shape), t);
    return e.runWebGLProgram(h, n, s);
  }
  const { tensors2D: i, outShape: a } = J5(n, t, e), l = new U5(i.map((h) => h.shape)), c = e.runWebGLProgram(l, i, s);
  i.forEach((h) => e.disposeIntermediateTensorInfo(h));
  const u = rt({ inputs: { x: c }, attrs: { shape: a }, backend: e });
  return e.disposeIntermediateTensorInfo(c), u;
}
function J5(n, t, e) {
  const s = Is(n.map((o) => o.shape), t);
  return { tensors2D: n.map((o) => rt({
    inputs: { x: o },
    attrs: { shape: [-1, P(o.shape.slice(t))] },
    backend: e
  })), outShape: s };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function lC(n) {
  const { inputs: t, backend: e, attrs: s } = n, { axis: r } = s, o = vt(r, t[0].shape)[0], i = t.map((c) => c.shape);
  Yg(i, o);
  const a = Is(t.map((c) => c.shape), o);
  if (P(a) === 0)
    return e.makeTensorInfo(a, t[0].dtype, []);
  const l = t.filter((c) => P(c.shape) > 0);
  return l.length === 1 ? In({ inputs: { x: l[0] }, backend: e }) : Aa(l, o, e);
}
const Q5 = {
  kernelName: dl,
  backendName: "webgl",
  kernelFunc: lC
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class cC {
  constructor(t, e = !1, s = null, r = !1, o = !1) {
    this.variableNames = ["x", "W"], this.outputShape = t.outShape;
    const i = t.padInfo.top, a = t.padInfo.left, l = t.strideHeight, c = t.strideWidth, u = t.dilationHeight, h = t.dilationWidth, d = t.filterHeight, p = t.filterWidth, f = Math.floor(t.inChannels / 4) * 4, m = t.inChannels % 4, g = t.dataFormat === "channelsLast", y = g ? 1 : 2, b = g ? 2 : 3, w = g ? 3 : 1;
    let x = "", S = "";
    s && (r ? x = `float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${s}
        }` : o ? x = `float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${s}
        }` : x = `
          float activation(float x) {
            ${s}
          }
        `, S = "result = activation(result);");
    const v = e ? "result += getBiasAtOutCoords();" : "";
    e && this.variableNames.push("bias"), r && this.variableNames.push("preluActivationWeights"), o && this.variableNames.push("leakyreluAlpha"), this.userCode = `
      ${x}

      const ivec2 strides = ivec2(${l}, ${c});
      const ivec2 pads = ivec2(${i}, ${a});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d2 = coords[${w}];

        ivec2 xRCCorner =
            ivec2(coords[${y}], coords[${b}]) * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${d}; wR++) {
          int xR = xRCorner + wR * ${u};

          if (xR < 0 || xR >= ${t.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${p}; wC++) {
            int xC = xCCorner + wC * ${h};

            if (xC < 0 || xC >= ${t.inWidth}) {
              continue;
            }

            for (int d1 = 0; d1 < ${f}; d1 += 4) {
              vec4 wValues = vec4(
                getW(wR, wC, d1, d2),
                getW(wR, wC, d1 + 1, d2),
                getW(wR, wC, d1 + 2, d2),
                getW(wR, wC, d1 + 3, d2)
              );

              if (${g}) {
                vec4 xValues = vec4(
                  getX(batch, xR, xC, d1),
                  getX(batch, xR, xC, d1 + 1),
                  getX(batch, xR, xC, d1 + 2),
                  getX(batch, xR, xC, d1 + 3)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec4 xValues = vec4(
                  getX(batch, d1, xR, xC),
                  getX(batch, d1 + 1, xR, xC),
                  getX(batch, d1 + 2, xR, xC),
                  getX(batch, d1 + 3, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }
            }

            if (${m === 1}) {

              if (${g}) {
                dotProd +=
                    getX(batch, xR, xC, ${f}) *
                    getW(wR, wC, ${f}, d2);
              } else {
                dotProd +=
                    getX(batch, ${f}, xR, xC) *
                    getW(wR, wC, ${f}, d2);
              }

            } else if (${m === 2}) {
              vec2 wValues = vec2(
                getW(wR, wC, ${f}, d2),
                getW(wR, wC, ${f} + 1, d2)
              );

              if (${g}) {
                vec2 xValues = vec2(
                  getX(batch, xR, xC, ${f}),
                  getX(batch, xR, xC, ${f} + 1)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec2 xValues = vec2(
                  getX(batch, ${f}, xR, xC),
                  getX(batch, ${f} + 1, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            } else if (${m === 3}) {
              vec3 wValues = vec3(
                getW(wR, wC, ${f}, d2),
                getW(wR, wC, ${f} + 1, d2),
                getW(wR, wC, ${f} + 2, d2)
              );

              if (${g}) {
                vec3 xValues = vec3(
                  getX(batch, xR, xC, ${f}),
                  getX(batch, xR, xC, ${f} + 1),
                  getX(batch, xR, xC, ${f} + 2)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec3 xValues = vec3(
                  getX(batch, ${f}, xR, xC),
                  getX(batch, ${f} + 1, xR, xC),
                  getX(batch, ${f} + 2, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            }
          }
        }

        float result = dotProd;
        ${v}
        ${S}
        setOutput(result);
      }
    `;
  }
}
class q5 {
  constructor(t) {
    this.variableNames = ["x", "W"], this.outputShape = t.outShape;
    const e = t.padInfo.front, s = t.padInfo.top, r = t.padInfo.left, o = t.strideDepth, i = t.strideHeight, a = t.strideWidth, l = t.dilationDepth, c = t.dilationHeight, u = t.dilationWidth, h = t.filterDepth, d = t.filterHeight, p = t.filterWidth, f = Math.floor(t.inChannels / 4) * 4, m = t.inChannels % 4;
    this.userCode = `
      const ivec3 strides = ivec3(${o}, ${i}, ${a});
      const ivec3 pads = ivec3(${e}, ${s}, ${r});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d2 = coords.u;

        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xFCorner = xFRCCorner.x;
        int xRCorner = xFRCCorner.y;
        int xCCorner = xFRCCorner.z;

        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get
        // y(yF, yR, yC, d2). ? = to be determined. : = across all
        // values in that axis.
        float dotProd = 0.0;
        for (int wF = 0; wF < ${h}; wF++) {
          int xF = xFCorner + wF * ${l};

          if (xF < 0 || xF >= ${t.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${d}; wR++) {
            int xR = xRCorner + wR * ${c};

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${p}; wC++) {
              int xC = xCCorner + wC * ${u};

              if (xC < 0 || xC >= ${t.inWidth}) {
                continue;
              }

              for (int d1 = 0; d1 < ${f}; d1 += 4) {
                vec4 xValues = vec4(
                  getX(batch, xF, xR, xC, d1),
                  getX(batch, xF, xR, xC, d1 + 1),
                  getX(batch, xF, xR, xC, d1 + 2),
                  getX(batch, xF, xR, xC, d1 + 3)
                );
                vec4 wValues = vec4(
                  getW(wF, wR, wC, d1, d2),
                  getW(wF, wR, wC, d1 + 1, d2),
                  getW(wF, wR, wC, d1 + 2, d2),
                  getW(wF, wR, wC, d1 + 3, d2)
                );

                dotProd += dot(xValues, wValues);
              }

              if (${m === 1}) {
                dotProd +=
                  getX(batch, xF, xR, xC, ${f}) *
                  getW(wF, wR, wC, ${f}, d2);
              } else if (${m === 2}) {
                vec2 xValues = vec2(
                  getX(batch, xF, xR, xC, ${f}),
                  getX(batch, xF, xR, xC, ${f} + 1)
                );
                vec2 wValues = vec2(
                  getW(wF, wR, wC, ${f}, d2),
                  getW(wF, wR, wC, ${f} + 1, d2)
                );
                dotProd += dot(xValues, wValues);
              } else if (${m === 3}) {
                vec3 xValues = vec3(
                  getX(batch, xF, xR, xC, ${f}),
                  getX(batch, xF, xR, xC, ${f} + 1),
                  getX(batch, xF, xR, xC, ${f} + 2)
                );
                vec3 wValues = vec3(
                  getW(wF, wR, wC, ${f}, d2),
                  getW(wF, wR, wC, ${f} + 1, d2),
                  getW(wF, wR, wC, ${f} + 2, d2)
                );
                dotProd += dot(xValues, wValues);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class uC {
  constructor(t, e = !1, s = null, r = !1, o = !1) {
    this.variableNames = ["x", "W"], this.packedInputs = !0, this.packedOutput = !0, this.customUniforms = [
      { name: "pads", type: "ivec2" },
      { name: "strides", type: "ivec2" },
      { name: "dilations", type: "ivec2" },
      { name: "inDims", type: "ivec2" }
    ], this.outputShape = t.outShape, this.enableShapeUniforms = Je(this.outputShape.length);
    const i = t.padInfo.left, a = t.strideWidth, l = t.dilationWidth, c = t.filterHeight, u = t.filterWidth, h = u;
    let d = `
       int xR; int xC; int xCOffset;
       vec4 wTexel; vec4 previous; vec4 final;`;
    for (let g = 0; g < u; g++)
      d += `
           vec4 xTexelC${g * 2};
           int xTexelC${g * 2}Ready;
           vec4 xTexelC${g * 2 + 1};
           int xTexelC${g * 2 + 1}Ready;
           vec4 xC${g};`;
    d += `
     for (int r = 0; r < ${c}; r++) {
      for (int d1 = 0; d1 < ${t.inChannels}; d1 += 2) {
       `;
    for (let g = 0; g < u; g++)
      d += `
           xTexelC${g * 2} = vec4(0.0);
           xTexelC${g * 2}Ready = 0;
           xTexelC${g * 2 + 1} = vec4(0.0);
           xTexelC${g * 2 + 1}Ready = 0;
           xC${g} = vec4(0.0);`;
    d += `
         xR = xRCorner + r * dilations[0];
         if (xR >=0 && xR < inDims[0]) {
       `;
    for (let g = 0; g < (h + 1) / 2; g++) {
      const y = g * 2;
      if (d += `
           xC = xCCorner + ${y * l};
           `, a === 1) {
        if (y < u && (i % 2 === 1 ? (d += `
                 xCOffset = xC + 1;
                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y}Ready == 0) {
                   xTexelC${y} = getX(batch, xR, xCOffset, d1);

                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${y}.zw = vec2(0.0);
                   }
                   xTexelC${y}Ready = 1;
                 }
               `, l === 1 && y > 0 ? d += `
                 xC${y} = vec4(xTexelC${y - 2}.zw, xTexelC${y}.xy);
                 ` : d += `
                   xCOffset = xC + 1 - 2;

                   if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       previous.zw = vec2(0.0);
                     }

                     xC${y} = vec4(previous.zw, xTexelC${y}.xy);
                   } else {
                     xC${y} = vec4(0.0, 0.0, xTexelC${y}.xy);
                   }
                   `) : d += `
                 if (xC >= 0 && xC < inDims[1] && xTexelC${y}Ready == 0) {
                   xTexelC${y} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${y}.zw = vec2(0.0);
                   }
                   xTexelC${y}Ready = 1;
                 }

                 xC${y} = xTexelC${y};
                 `, y + 1 < u)) {
          const b = i % 2 === 0 ? eh(l) : l;
          l % 2 === 0 && i % 2 === 1 || l % 2 !== 0 && i % 2 !== 1 ? (d += `
                   xCOffset = xC + imod(pads[1], 2) + ${b};

                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y + 1}Ready == 0) {
                     xTexelC${y + 1} = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       xTexelC${y + 1}.zw = vec2(0.0);
                     }
                     xTexelC${y + 1}Ready = 1;
                   }
                   `, l > 1 ? d += `
                     xCOffset -= 2;
                     if (xCOffset >= 0 && xCOffset < inDims[1]) {
                      previous = getX(batch, xR, xCOffset, d1);
                      xC${y + 1} = vec4(previous.zw, xTexelC${y + 1}.xy);
                     } else {
                      xC${y + 1} = vec4(0.0, 0.0, xTexelC${y + 1}.xy);
                     }
                     ` : d += `
                     xC${y + 1} = vec4(xTexelC${y}.zw, xTexelC${y + 1}.xy);
                     `) : b === 1 ? d += `
                     xC${y + 1} = xTexelC${y};
                     ` : d += `
                     xCOffset = xC + ${b};

                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y + 1}Ready == 0) {
                       xTexelC${y + 1} = getX(batch, xR, xCOffset, d1);
                       if (xCOffset + 1 >= inDims[1]) {
                         xTexelC${y + 1}.zw = vec2(0.0);
                       }
                       xTexelC${y + 1}Ready = 1;
                     }

                     xC${y + 1} = xTexelC${y + 1};
                     `;
        }
      } else
        y < u && (i % 2 === 1 ? (d += `
                 xCOffset = xC + 1 - strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y}Ready == 0) {
                   xTexelC${y} = getX(batch, xR, xCOffset, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${y}.zw = vec2(0.0);
                   }
                   xTexelC${y}Ready = 1;
                 }

                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${y + 1}Ready == 0) {
                   xTexelC${y + 1} = getX(batch, xR, xC + 1, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xC + 2 >= inDims[1]) {
                     xTexelC${y + 1}.zw = vec2(0.0);
                   }
                   xTexelC${y + 1}Ready = 1;
                 }

                 xC${y} = vec4(xTexelC${y}.zw, xTexelC${y + 1}.zw);
               `, y + 1 < u && (d += `
                   final = vec4(0.0);
                   xCOffset = xC + 1 + strides[1];
                   if(xCOffset >= 0 && xCOffset < inDims[1]) {
                     final = getX(batch, xR, xCOffset, d1);
                   }
                   xC${y + 1} = vec4(xTexelC${y + 1}.xy, final.xy);
                 `)) : (d += `
                 if(xC >= 0 && xC < inDims[1] && xTexelC${y}Ready == 0) {
                   xTexelC${y} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${y}.zw = vec2(0.0);
                   }
                   xTexelC${y}Ready = 1;
                 }

                 xCOffset = xC + strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y + 1}Ready == 0) {
                   xTexelC${y + 1} = getX(batch, xR, xCOffset, d1);
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${y + 1}.zw = vec2(0.);
                   }
                   xTexelC${y + 1}Ready = 1;
                 }

                 xC${y} = vec4(
                   xTexelC${y}.xy, xTexelC${y + 1}.xy);
               `, y + 1 < u && (d += `
                   xC${y + 1} = vec4(xTexelC${y}.zw, xTexelC${y + 1}.zw);
                 `)));
      y < u && (d += `
             wTexel = getW(r, ${y}, d1, d2);
             dotProd += xC${y}.xxzz * vec4(wTexel.xy, wTexel.xy);
             if(d1 + 1 < ${t.inChannels}) {
               dotProd += xC${y}.yyww * vec4(wTexel.zw, wTexel.zw);
             }
           `, y + 1 < u && (d += `
               wTexel = getW(r, ${y + 1}, d1, d2);
               dotProd += xC${y + 1}.xxzz * vec4(wTexel.xy, wTexel.xy);
               if(d1 + 1 < ${t.inChannels}) {
                 dotProd += xC${y + 1}.yyww * vec4(wTexel.zw, wTexel.zw);
               }
             `));
    }
    d += `
     }
   `, d += `
     }
   `, d += `
     }
   `;
    let p = "", f = "";
    s && (r ? p = `vec4 activation(vec4 a) {
           vec4 b = getPreluActivationWeightsAtOutCoords();
           ${s}
         }` : o ? p = `vec4 activation(vec4 a) {
           vec4 b = getLeakyreluAlphaAtOutCoords();
           ${s}
         }` : p = `vec4 activation(vec4 x) {
           ${s}
         }`, f = "result = activation(result);");
    const m = e ? "result += getBiasAtOutCoords();" : "";
    e && this.variableNames.push("bias"), r && this.variableNames.push("preluActivationWeights"), o && this.variableNames.push("leakyreluAlpha"), this.userCode = `
       ${p}

       void main() {
         ivec4 coords = getOutputCoords();
         int batch = coords.x;
         ivec2 xRCCorner = coords.yz * strides - pads;
         int d2 = coords.w;
         int xRCorner = xRCCorner.x;
         int xCCorner = xRCCorner.y;

         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
         vec4 dotProd = vec4(0.000000000000001);

         ${d}

         vec4 result = dotProd - vec4(0.000000000000001);
         ${m}
         ${f}
         setOutput(result);
       }
     `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class tY {
  constructor(t, e) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, this.customUniforms = [
      { name: "inputShape", type: "ivec4" },
      { name: "pad", type: "ivec2" },
      { name: "stride", type: "ivec2" },
      { name: "dilation", type: "ivec2" },
      { name: "inChannels", type: "int" },
      { name: "itemsPerBlockRow", type: "int" },
      { name: "outWidth", type: "int" }
    ], this.outputShape = t, this.enableShapeUniforms = Je(this.outputShape.length);
    const { dataFormat: s } = e, r = je(), o = s === "channelsLast", i = o ? 1 : 2, a = o ? 2 : 3, l = this.enableShapeUniforms ? "if(blockIndex < outShape[2] && pos < outShape[1]) {" : `if(blockIndex < ${t[2]} && pos < ${t[1]}) {`;
    let c = "";
    for (let u = 0; u <= 1; u++)
      for (let h = 0; h <= 1; h++)
        c += `
          blockIndex = rc.z + ${h};
          pos = rc.y + ${u};

          ${l}
            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];
            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);

            if(d0 < inputShape[${i}] && d0 >= 0) {
              // Use custom imod instead mod. On Intel GPU, mod may generate
              // unexpected value.
              // https://github.com/tensorflow/tfjs/issues/5447
              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];
              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /
                  inChannels);

              if(d1 < inputShape[${a}] && d1 >= 0) {

                ch = imod(pos, inChannels);

                if (${o}) {
                  innerDims = vec2(d1, ch);
                  result[${u * 2 + h}] = getChannel(
                    getA(rc.x, d0, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                } else {
                  innerDims = vec2(d0, d1);
                  result[${u * 2 + h}] = getChannel(
                    getA(rc.x, ch, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                }
              }
            }
          }
        `;
    this.userCode = `
      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0);

        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;
        vec2 innerDims;

        ${c}

        ${r.output} = result;
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ju(n, t) {
  const e = n.length;
  return e >= 3 ? t ? [
    ...n.slice(0, -3),
    n[e - 3] * n[e - 2],
    n[e - 1]
  ] : [
    ...n.slice(0, -3),
    n[e - 3],
    n[e - 2] * n[e - 1]
  ] : !t && e === 1 && n[0] > 1 ? [n[0], 1] : null;
}
function hC({ x: n, filter: t, convInfo: e, backend: s, bias: r = null, preluActivationWeights: o = null, leakyreluAlpha: i = 0, activation: a = null }) {
  const l = n.shape, c = s.texData.get(n.dataId), u = e.inChannels, h = l[0] * l[1] * l[2], d = e.outChannels, p = e.dataFormat === "channelsLast", f = !1, m = !1;
  let g;
  const y = [];
  if (o != null) {
    const x = Ju(o.shape, p);
    x != null && (o = rt({
      inputs: { x: o },
      backend: s,
      attrs: { shape: x }
    }), y.push(o));
  }
  if (r != null) {
    const x = Ju(r.shape, p);
    x != null && (r = rt({ inputs: { x: r }, backend: s, attrs: { shape: x } }), y.push(r));
  }
  if (!((h === 1 || d === 1) && u > sC) && c.isPacked && p && c.texture != null && l[2] % 2 !== 0 && Nt(c.shape.slice(-3), l.slice(-3))) {
    const x = l[0] * l[1] * (l[2] + 1), S = {
      dataId: n.dataId,
      shape: [1, x, e.inChannels],
      dtype: n.dtype
    }, v = c.shape;
    c.shape = c.shape.slice(), c.shape[c.shape.length - 2]++, C(Uu(c.shape, S.shape), () => `packed reshape ${c.shape} to ${S.shape} isn't free`);
    const T = rt({
      inputs: { x: t },
      backend: s,
      attrs: { shape: [1, e.inChannels, e.outChannels] }
    });
    y.push(T);
    const N = ju({
      a: S,
      b: T,
      backend: s,
      transposeA: f,
      transposeB: m,
      bias: r,
      activation: a,
      preluActivationWeights: o,
      leakyreluAlpha: i
    }), $ = s.texData.get(N.dataId);
    C($.isPacked, () => "batchMatMul result is expected to be packed"), c.shape = v, $.shape = e.outShape, g = In({ inputs: { x: N }, backend: s }), g.shape = e.outShape, y.push(N);
  } else {
    const x = e.outHeight * e.outWidth, S = rt({
      inputs: { x: n },
      backend: s,
      attrs: {
        shape: p ? [e.batchSize, x, e.inChannels] : [e.batchSize, e.inChannels, x]
      }
    }), v = rt({
      inputs: { x: t },
      backend: s,
      attrs: { shape: [1, e.inChannels, e.outChannels] }
    }), T = ju({
      a: p ? S : v,
      b: p ? v : S,
      transposeA: !p,
      transposeB: m,
      backend: s,
      bias: r,
      activation: a,
      preluActivationWeights: o,
      leakyreluAlpha: i
    });
    g = rt({ inputs: { x: T }, backend: s, attrs: { shape: e.outShape } }), y.push(S), y.push(v), y.push(T);
  }
  for (const x of y)
    s.disposeIntermediateTensorInfo(x);
  return g;
}
function dC({ x: n, filter: t, convInfo: e, backend: s, bias: r = null, preluActivationWeights: o = null, leakyreluAlpha: i = 0, activation: a = null }) {
  const { filterWidth: l, filterHeight: c, inChannels: u, outWidth: h, outHeight: d, dataFormat: p } = e, f = p === "channelsLast", m = l * c * u, g = d * h, y = [e.batchSize, m, g], b = !0, w = !1, x = [];
  if (o != null) {
    const Z = Ju(o.shape, f);
    Z != null && (o = rt({
      inputs: { x: o },
      backend: s,
      attrs: { shape: Z }
    }), x.push(o));
  }
  if (r != null) {
    const Z = Ju(r.shape, f);
    Z != null && (r = rt({ inputs: { x: r }, backend: s, attrs: { shape: Z } }), x.push(r));
  }
  const S = rt({
    inputs: { x: t },
    backend: s,
    attrs: { shape: [1, m, P(t.shape) / m] }
  });
  x.push(S);
  const v = new tY(y, e), T = [
    n.shape,
    [e.padInfo.top, e.padInfo.left],
    [e.strideHeight, e.strideWidth],
    [e.dilationHeight, e.dilationWidth],
    [e.inChannels],
    [e.filterWidth * e.inChannels],
    [e.outWidth]
  ], N = s.runWebGLProgram(v, [n], "float32", T), $ = rt({ inputs: { x: N }, backend: s, attrs: { shape: y } });
  x.push(N), x.push($);
  const R = r != null, F = o != null, z = a === "leakyrelu", W = a ? tl(a, !0) : null, M = new nC(f ? $.shape : S.shape, f ? S.shape : $.shape, f ? [e.batchSize, g, e.outChannels] : [e.batchSize, e.outChannels, g], b, w, R, W, F, z), X = f ? [$, S] : [S, $];
  if (r && X.push(r), F && X.push(o), z) {
    const Z = s.makeTensorInfo([], "float32", Ns(i, "float32"));
    X.push(Z), x.push(Z);
  }
  const _ = s.runWebGLProgram(M, X, "float32"), B = rt({ inputs: { x: _ }, backend: s, attrs: { shape: e.outShape } });
  x.push(_);
  for (const Z of x)
    s.disposeIntermediateTensorInfo(Z);
  return B;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function eY(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r, filter: o } = t, { strides: i, pad: a, dataFormat: l, dilations: c, dimRoundingMode: u } = s, h = Ys(l), d = $e(r.shape, o.shape, i, c, a, u, !1, h);
  let p;
  if (d.filterHeight === 1 && d.filterWidth === 1 && d.dilationHeight === 1 && d.dilationWidth === 1 && d.strideHeight === 1 && d.strideWidth === 1 && (d.padInfo.type === "SAME" || d.padInfo.type === "VALID"))
    p = hC({ x: r, filter: o, convInfo: d, backend: e });
  else if (d.strideWidth <= 2 && h === "channelsLast" && V().getBool("WEBGL_EXP_CONV")) {
    const m = new uC(d), g = [
      [d.padInfo.top, d.padInfo.left],
      [d.strideHeight, d.strideWidth],
      [d.dilationHeight, d.dilationWidth],
      [d.inHeight, d.inWidth]
    ];
    p = e.runWebGLProgram(m, [r, o], "float32", g);
  } else if (V().getBool("WEBGL_CONV_IM2COL"))
    p = dC({ x: r, filter: o, convInfo: d, backend: e });
  else {
    const m = new cC(d);
    p = e.runWebGLProgram(m, [r, o], "float32");
  }
  const f = rt({ inputs: { x: p }, backend: e, attrs: { shape: d.outShape } });
  return e.disposeIntermediateTensorInfo(p), f;
}
const nY = {
  kernelName: pl,
  backendName: "webgl",
  kernelFunc: eY
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class sY {
  constructor(t) {
    this.variableNames = ["x", "dy"], this.outputShape = t.filterShape;
    const e = t.strideHeight, s = t.strideWidth, r = t.padInfo.top, o = t.padInfo.left, i = t.dataFormat === "channelsLast";
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int d2 = coords.w;

        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int b = 0; b < ${t.batchSize}; b++) {
          for (int yR = 0; yR < ${t.outHeight}; yR++) {
            int xR = wR + yR * ${e} - ${r};

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${t.outWidth}; yC++) {
              int xC = wC + yC * ${s} - ${o};

              if (xC < 0 || xC >= ${t.inWidth}) {
                continue;
              }

              if (${i}) {
                float dyValue = getDy(b, yR, yC, d2);
                float xValue = getX(b, xR, xC, d1);
                dotProd += (xValue * dyValue);
              } else {
                float dyValue = getDy(b, d2, yR, yC);
                float xValue = getX(b, d1, xR, xC);
                dotProd += (xValue * dyValue);
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
class rY {
  constructor(t) {
    this.variableNames = ["dy", "W"], this.outputShape = t.inShape;
    const e = t.filterHeight, s = t.filterWidth, r = t.strideHeight, o = t.strideWidth, i = t.dataFormat === "channelsLast", a = e - 1 - t.padInfo.top, l = s - 1 - t.padInfo.left, c = i ? 1 : 2, u = i ? 2 : 3, h = i ? 3 : 1;
    this.userCode = `
      const ivec2 pads = ivec2(${a}, ${l});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[${h}];

        ivec2 dyCorner = ivec2(coords[${c}], coords[${u}]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${e}; wR++) {
          float dyR = float(dyRCorner + wR) / ${r}.0;

          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${e} - 1 - wR;

          for (int wC = 0; wC < ${s}; wC++) {
            float dyC = float(dyCCorner + wC) / ${o}.0;

            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${s} - 1 - wC;

            for (int d2 = 0; d2 < ${t.outChannels}; d2++) {

              if (${i}) {
                float xValue = getDy(batch, idyR, idyC, d2);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              } else {
                float xValue = getDy(batch, d2, idyR, idyC);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
class oY {
  constructor(t) {
    this.variableNames = ["x", "dy"], this.outputShape = t.filterShape;
    const e = t.strideDepth, s = t.strideHeight, r = t.strideWidth, o = t.padInfo.front, i = t.padInfo.top, a = t.padInfo.left;
    this.userCode = `
      void main() {
        ivec5 coords = getOutputCoords();
        int wF = coords.x;
        int wR = coords.y;
        int wC = coords.z;
        int d1 = coords.w;
        int d2 = coords.u;

        float dotProd = 0.0;

        for (int b = 0; b < ${t.batchSize}; b++) {
          for (int yF = 0; yF < ${t.outDepth}; yF++) {
            int xF = wF + yF * ${e} - ${o};

            if (xF < 0 || xF >= ${t.inDepth}) {
              continue;
            }

            for (int yR = 0; yR < ${t.outHeight}; yR++) {
              int xR = wR + yR * ${s} - ${i};

              if (xR < 0 || xR >= ${t.inHeight}) {
                continue;
              }

              for (int yC = 0; yC < ${t.outWidth}; yC++) {
                int xC = wC + yC * ${r} - ${a};

                if (xC < 0 || xC >= ${t.inWidth}) {
                  continue;
                }

                float dyValue = getDy(b, yF, yR, yC, d2);
                float xValue = getX(b, xF, xR, xC, d1);
                dotProd += (xValue * dyValue);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
class iY {
  constructor(t) {
    this.variableNames = ["dy", "W"], this.outputShape = t.inShape;
    const e = t.filterDepth, s = t.filterHeight, r = t.filterWidth, o = t.strideDepth, i = t.strideHeight, a = t.strideWidth, l = e - 1 - t.padInfo.front, c = s - 1 - t.padInfo.top, u = r - 1 - t.padInfo.left;
    this.userCode = `
      const ivec3 pads = ivec3(${l}, ${c}, ${u});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.u;


        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyFCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        float dotProd = 0.0;
        for (int wF = 0; wF < ${e}; wF++) {
          float dyF = float(dyFCorner + wF) / ${o}.0;

          if (dyF < 0.0 || dyF >= ${t.outDepth}.0 || fract(dyF) > 0.0) {
            continue;
          }
          int idyF = int(dyF);

          int wFPerm = ${e} - 1 - wF;

          for (int wR = 0; wR < ${s}; wR++) {
            float dyR = float(dyRCorner + wR) / ${i}.0;

            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||
              fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            int wRPerm = ${s} - 1 - wR;

            for (int wC = 0; wC < ${r}; wC++) {
              float dyC = float(dyCCorner + wC) / ${a}.0;

              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              int wCPerm = ${r} - 1 - wC;

              for (int d2 = 0; d2 < ${t.outChannels}; d2++) {
                float xValue = getDy(batch, idyF, idyR, idyC, d2);
                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function aY(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r, dy: o } = t, { strides: i, pad: a, dataFormat: l, dimRoundingMode: c, filterShape: u } = s, h = Ys(l), d = $e(r.shape, u, i, 1, a, c, !1, h), p = new sY(d);
  return e.runWebGLProgram(p, [r, o], "float32");
}
const lY = {
  kernelName: uh,
  backendName: "webgl",
  kernelFunc: aY
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function cY(n) {
  const { inputs: t, backend: e, attrs: s } = n, { dy: r, filter: o } = t, { inputShape: i, strides: a, pad: l, dataFormat: c, dimRoundingMode: u } = s, h = Ys(c), d = $e(i, o.shape, a, 1, l, u, !1, h), p = new rY(d);
  return e.runWebGLProgram(p, [r, o], "float32");
}
const uY = {
  kernelName: fl,
  backendName: "webgl",
  kernelFunc: cY
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function hY(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r, filter: o } = t, { strides: i, pad: a, dilations: l } = s, c = Cr(r.shape, o.shape, i, l, a), u = new q5(c);
  return e.runWebGLProgram(u, [r, o], "float32");
}
const dY = {
  kernelName: ml,
  backendName: "webgl",
  kernelFunc: hY
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function pY(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r, dy: o } = t, { strides: i, pad: a, filterShape: l } = s, c = Cr(r.shape, l, i, 1, a), u = new oY(c);
  return e.runWebGLProgram(u, [r, o], "float32");
}
const fY = {
  kernelName: hh,
  backendName: "webgl",
  kernelFunc: pY
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function mY(n) {
  const { inputs: t, backend: e, attrs: s } = n, { dy: r, filter: o } = t, { pad: i, strides: a, inputShape: l } = s, c = Cr(l, o.shape, a, 1, i), u = new iY(c);
  return e.runWebGLProgram(u, [r, o], "float32");
}
const gY = {
  kernelName: dh,
  backendName: "webgl",
  kernelFunc: mY
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const yY = ba + `
  return cos(x);
`, bY = Dt({ opSnippet: yY }), xY = {
  kernelName: ci,
  backendName: "webgl",
  kernelFunc: bY
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const wY = `
  float e2x = exp(-x);
  return (e2x + 1.0 / e2x) / 2.0;
`, IY = Dt({ opSnippet: wY }), SY = {
  kernelName: ui,
  backendName: "webgl",
  kernelFunc: IY
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class vY {
  constructor(t, e, s, r, o) {
    this.variableNames = ["Image", "Boxes", "BoxInd"], this.outputShape = [];
    const [i, a, l, c] = t, [u] = e, [h, d] = s;
    this.outputShape = [u, h, d, c];
    const p = r === "bilinear" ? 1 : 0, [f, m] = [`${a - 1}.0`, `${l - 1}.0`], [g, y, b] = h > 1 ? [
      `${(a - 1) / (h - 1)}`,
      "(y2-y1) * height_ratio",
      `y1*${f} + float(y)*(height_scale)`
    ] : [
      "0.0",
      "0.0",
      `0.5 * (y1+y2) * ${f}`
    ], [w, x, S] = d > 1 ? [
      `${(l - 1) / (d - 1)}`,
      "(x2-x1) * width_ratio",
      `x1*${m} + float(x)*(width_scale)`
    ] : [
      "0.0",
      "0.0",
      `0.5 * (x1+x2) * ${m}`
    ];
    this.userCode = `
      const float height_ratio = float(${g});
      const float width_ratio = float(${w});
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int y = coords[1];
        int x = coords[2];
        int d = coords[3];

        // get box vals
        float y1 = getBoxes(b,0);
        float x1 = getBoxes(b,1);
        float y2 = getBoxes(b,2);
        float x2 = getBoxes(b,3);

        // get image in batch index
        int bInd = round(getBoxInd(b));
        if(bInd < 0 || bInd >= ${i}) {
          return;
        }

        float height_scale = ${y};
        float width_scale = ${x};

        float in_y = ${b};
        if( in_y < 0.0 || in_y > ${f} ) {
          setOutput(float(${o}));
          return;
        }
        float in_x = ${S};
        if( in_x < 0.0 || in_x > ${m} ) {
          setOutput(float(${o}));
          return;
        }

        vec2 sourceFracIndexCR = vec2(in_x,in_y);
        if(${p} == 1) {
          // Compute the four integer indices.
          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);
          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));

          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);
          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);
          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);
          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);

          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);

          float top = topLeft + (topRight - topLeft) * fracCR.x;
          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;
          float newValue = top + (bottom - top) * fracCR.y;
          setOutput(newValue);
        } else {
          // Compute the coordinators of nearest neighbor point.
          ivec2 sourceNearestCR = ivec2(floor(
            sourceFracIndexCR + vec2(0.5,0.5)));
          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);
          setOutput(newValue);
        }
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const CY = (n) => {
  const { inputs: t, backend: e, attrs: s } = n, { image: r, boxes: o, boxInd: i } = t, { cropSize: a, method: l, extrapolationValue: c } = s, u = new vY(r.shape, o.shape, a, l, c);
  return e.runWebGLProgram(u, [r, o, i], "float32");
}, kY = {
  kernelName: fh,
  backendName: "webgl",
  kernelFunc: CY
};
var nl;
(function(n) {
  n.Prod = "*", n.Sum = "+";
})(nl || (nl = {}));
class Yx {
  constructor(t, e, s, r) {
    this.op = t, this.outputShape = e, this.variableNames = ["x"], this.customUniforms = [{ name: "index", type: "float" }];
    const o = this.outputShape.length, i = this.op === nl.Prod ? "1.0" : "0.0", a = s ? i : `getX(${jx(o, "coords", this.op)})`, l = this.outputShape[this.outputShape.length - 1];
    let c = "", u = "";
    s ? (c = r ? `end != ${l - 1}` : "end != 0", u = r ? "end + 1" : "end - 1") : (c = r ? `end + pow2 < ${l}` : "end >= pow2", u = r ? "end + pow2" : "end - pow2"), this.userCode = `
      void main() {
        ${_t(o)} coords = getOutputCoords();
        int end = ${Jx(o, "coords", this.op)};
        float val = ${a};
        int pow2 = int(pow(2.0, index));
        if (${c}) {
          int idx = ${u};
          ${Jx(o, "coords", this.op)} = idx;
          val ${this.op}= getX(${jx(o, "coords", this.op)});
        }
        setOutput(val);
      }
    `;
  }
}
function jx(n, t, e) {
  if (n === 1)
    return `${t}`;
  if (n === 2)
    return `${t}.x, ${t}.y`;
  if (n === 3)
    return `${t}.x, ${t}.y, ${t}.z`;
  if (n === 4)
    return `${t}.x, ${t}.y, ${t}.z, ${t}.w`;
  throw new Error(`Cumulative ${e} for rank ${n} is not yet supported`);
}
function Jx(n, t, e) {
  if (n === 1)
    return `${t}`;
  if (n === 2)
    return `${t}.y`;
  if (n === 3)
    return `${t}.z`;
  if (n === 4)
    return `${t}.w`;
  throw new Error(`Cumulative ${e} for rank ${n} is not yet supported`);
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function pC(n, t, e, s, r, o) {
  const i = t.shape.length, a = oe([s], i);
  let l = t;
  a != null && (l = Ue({ inputs: { x: t }, backend: e, attrs: { perm: a } }));
  const c = pe(1, i)[0];
  if (c !== i - 1)
    throw new Error(`WebGL cumprod shader expects an inner-most axis=${t.shape.length - 1} but got axis=${s}`);
  const u = l.shape[c];
  let h = In({ inputs: { x: l }, backend: e });
  for (let d = 0; d <= Math.ceil(Math.log2(u)) - 1; d++) {
    const p = new Yx(n, l.shape, !1, o), f = [[d]], m = h;
    h = e.runWebGLProgram(p, [h], h.dtype, f), e.disposeIntermediateTensorInfo(m);
  }
  if (r) {
    const d = new Yx(n, l.shape, r, o), p = h;
    h = e.runWebGLProgram(d, [h], h.dtype), e.disposeIntermediateTensorInfo(p);
  }
  if (a != null) {
    const d = kr(a), p = Ue({ inputs: { x: h }, backend: e, attrs: { perm: d } });
    return e.disposeIntermediateTensorInfo(h), e.disposeIntermediateTensorInfo(l), p;
  }
  return h;
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function TY(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { axis: o, exclusive: i, reverse: a } = s;
  return pC(nl.Prod, r, e, o, i, a);
}
const NY = {
  kernelName: ph,
  backendName: "webgl",
  kernelFunc: TY
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $Y(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { axis: o, exclusive: i, reverse: a } = s;
  return pC(nl.Sum, r, e, o, i, a);
}
const RY = {
  kernelName: gl,
  backendName: "webgl",
  kernelFunc: $Y
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function EY(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r, weights: o } = t, { size: i, binaryOutput: a } = s;
  if (r.shape.length === 1) {
    const l = e.readSync(r.dataId), c = e.readSync(o.dataId), u = Hv(l, c, o.dtype, o.shape, i);
    return e.makeTensorInfo([i], o.dtype, u);
  } else if (r.shape.length === 2) {
    const l = e.bufferSync(r), c = e.bufferSync(o), u = XU(l, c, i, a);
    return e.makeTensorInfo(u.shape, o.dtype, u.values);
  }
  throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`);
}
const LY = {
  kernelName: mh,
  backendName: "webgl",
  kernelFunc: EY
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class DY {
  constructor(t, e, s) {
    this.variableNames = ["x"], this.outputShape = [], this.outputShape = t, this.blockSize = e, this.dataFormat = s, this.userCode = `
    void main() {
      ivec4 coords = getOutputCoords();
      int b = coords[0];
      int h = ${this.getHeightCoordString()};
      int w = ${this.getWidthCoordString()};
      int d = ${this.getDepthCoordString()};

      int in_h = h / ${e};
      int offset_h = imod(h, ${e});
      int in_w = w / ${e};
      int offset_w = imod(w, ${e});
      int offset_d = (offset_h * ${e} + offset_w) *
        ${this.getOutputDepthSize()};
      int in_d = d + offset_d;

      float result = ${this.getInputSamplingString()};
      setOutput(result);
    }
  `;
  }
  getHeightCoordString() {
    return this.dataFormat === "NHWC" ? "coords[1]" : "coords[2]";
  }
  getWidthCoordString() {
    return this.dataFormat === "NHWC" ? "coords[2]" : "coords[3]";
  }
  getDepthCoordString() {
    return this.dataFormat === "NHWC" ? "coords[3]" : "coords[1]";
  }
  getOutputDepthSize() {
    return this.dataFormat === "NHWC" ? this.outputShape[3] : this.outputShape[1];
  }
  getInputSamplingString() {
    return this.dataFormat === "NHWC" ? "getX(b, in_h, in_w, in_d)" : "getX(b, in_d, in_h, in_w)";
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function GY(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { blockSize: o, dataFormat: i } = s, a = r.shape[0], l = i === "NHWC" ? r.shape[1] : r.shape[2], c = i === "NHWC" ? r.shape[2] : r.shape[3], u = i === "NHWC" ? r.shape[3] : r.shape[1], h = l * o, d = c * o, p = u / (o * o), f = i === "NHWC" ? [a, h, d, p] : [a, p, h, d], m = new DY(f, o, i);
  return e.runWebGLProgram(m, [r], r.dtype);
}
const FY = {
  kernelName: gh,
  backendName: "webgl",
  kernelFunc: GY
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class fC {
  constructor(t, e = !1, s = null, r = !1, o = !1) {
    this.variableNames = ["x", "W"], this.customUniforms = [
      { name: "pads", type: "ivec2" },
      { name: "strides", type: "ivec2" },
      { name: "dilations", type: "ivec2" },
      { name: "inDims", type: "ivec2" }
    ], this.outputShape = t.outShape, this.enableShapeUniforms = Je(this.outputShape.length);
    const i = t.filterHeight, a = t.filterWidth, l = t.outChannels / t.inChannels;
    let c = "", u = "";
    s && (r ? c = `float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${s}
        }` : o ? c = `float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${s}
        }` : c = `
          float activation(float x) {
            ${s}
          }
        `, u = "result = activation(result);");
    const h = e ? "result += getBiasAtOutCoords();" : "";
    e && this.variableNames.push("bias"), r && this.variableNames.push("preluActivationWeights"), o && this.variableNames.push("leakyreluAlpha"), this.userCode = `
      ${c}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${l};
        int q = d2 - d1 * ${l};

        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.
        for (int wR = 0; wR < ${i}; wR++) {
          int xR = xRCorner + wR * dilations[0];

          if (xR < 0 || xR >= inDims[0]) {
            continue;
          }

          for (int wC = 0; wC < ${a}; wC++) {
            int xC = xCCorner + wC * dilations[1];

            if (xC < 0 || xC >= inDims[1]) {
              continue;
            }

            float xVal = getX(batch, xR, xC, d1);
            float wVal = getW(wR, wC, d1, q);
            dotProd += xVal * wVal;
          }
        }

        float result = dotProd;
        ${h}
        ${u}
        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class mC {
  constructor(t, e = !1, s = null, r = !1, o = !1) {
    this.variableNames = ["x", "W"], this.packedInputs = !0, this.packedOutput = !0, this.customUniforms = [
      { name: "pads", type: "ivec2" },
      { name: "strides", type: "ivec2" },
      { name: "dilations", type: "ivec2" },
      { name: "inDims", type: "ivec2" }
    ], this.outputShape = t.outShape, this.enableShapeUniforms = Je(this.outputShape.length);
    const i = t.outChannels / t.inChannels, a = t.padInfo.left, l = t.strideWidth, c = t.dilationWidth, u = t.filterHeight, h = t.filterWidth, d = h;
    let p = `
      int xR; int xC; int xCOffset;
      vec4 wTexel; vec4 previous; vec4 final;`;
    for (let y = 0; y < h; y++)
      p += `
          vec4 xTexelC${y * 2};
          int xTexelC${y * 2}Ready;
          vec4 xTexelC${y * 2 + 1};
          int xTexelC${y * 2 + 1}Ready;
          vec4 xC${y};`;
    p += `
    for (int r = 0; r < ${u}; r++) {
      `;
    for (let y = 0; y < h; y++)
      p += `
          xTexelC${y * 2} = vec4(0.0);
          xTexelC${y * 2}Ready = 0;
          xTexelC${y * 2 + 1} = vec4(0.0);
          xTexelC${y * 2 + 1}Ready = 0;
          xC${y} = vec4(0.0);`;
    p += `
        xR = xRCorner + r * dilations[0];
        if (xR >=0 && xR < inDims[0]) {
      `;
    for (let y = 0; y < (d + 1) / 2; y++) {
      const b = y * 2;
      if (p += `
          xC = xCCorner + ${b * c};
          `, l === 1) {
        if (b < h && (a % 2 === 1 ? (p += `
                xCOffset = xC + 1;
                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xCOffset, d1);

                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }
              `, c === 1 && b > 0 ? p += `
                xC${b} = vec4(xTexelC${b - 2}.zw, xTexelC${b}.xy);
                ` : p += `
                  xCOffset = xC + 1 - 2;

                  if (xCOffset >= 0 && xCOffset < inDims[1]) {
                    previous = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      previous.zw = vec2(0.0);
                    }

                    xC${b} = vec4(previous.zw, xTexelC${b}.xy);
                  } else {
                    xC${b} = vec4(0.0, 0.0, xTexelC${b}.xy);
                  }
                  `) : p += `
                if (xC >= 0 && xC < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                xC${b} = xTexelC${b};
                `, b + 1 < h)) {
          const w = a % 2 === 0 ? eh(c) : c;
          c % 2 === 0 && a % 2 === 1 || c % 2 !== 0 && a % 2 !== 1 ? (p += `
                  xCOffset = xC + imod(pads[1], 2) + ${w};

                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b + 1}Ready == 0) {
                    xTexelC${b + 1} = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      xTexelC${b + 1}.zw = vec2(0.0);
                    }
                    xTexelC${b + 1}Ready = 1;
                  }
                  `, c > 1 ? p += `
                    xCOffset -= 2;
                    if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);
                     xC${b + 1} = vec4(previous.zw, xTexelC${b + 1}.xy);
                    } else {
                     xC${b + 1} = vec4(0.0, 0.0, xTexelC${b + 1}.xy);
                    }
                    ` : p += `
                    xC${b + 1} = vec4(xTexelC${b}.zw, xTexelC${b + 1}.xy);
                    `) : w === 1 ? p += `
                    xC${b + 1} = xTexelC${b};
                    ` : p += `
                    xCOffset = xC + ${w};

                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b + 1}Ready == 0) {
                      xTexelC${b + 1} = getX(batch, xR, xCOffset, d1);
                      if (xCOffset + 1 >= inDims[1]) {
                        xTexelC${b + 1}.zw = vec2(0.0);
                      }
                      xTexelC${b + 1}Ready = 1;
                    }

                    xC${b + 1} = xTexelC${b + 1};
                    `;
        }
      } else
        b < h && (a % 2 === 1 ? (p += `
                xCOffset = xC + 1 - strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xCOffset, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${b + 1}Ready == 0) {
                  xTexelC${b + 1} = getX(batch, xR, xC + 1, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xC + 2 >= inDims[1]) {
                    xTexelC${b + 1}.zw = vec2(0.0);
                  }
                  xTexelC${b + 1}Ready = 1;
                }

                xC${b} = vec4(xTexelC${b}.zw, xTexelC${b + 1}.zw);
              `, b + 1 < h && (p += `
                  final = vec4(0.0);
                  xCOffset = xC + 1 + strides[1];
                  if(xCOffset >= 0 && xCOffset < inDims[1]) {
                    final = getX(batch, xR, xCOffset, d1);
                  }
                  xC${b + 1} = vec4(xTexelC${b + 1}.xy, final.xy);
                `)) : (p += `
                if(xC >= 0 && xC < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                xCOffset = xC + strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b + 1}Ready == 0) {
                  xTexelC${b + 1} = getX(batch, xR, xCOffset, d1);
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b + 1}.zw = vec2(0.);
                  }
                  xTexelC${b + 1}Ready = 1;
                }

                xC${b} = vec4(
                  xTexelC${b}.xy, xTexelC${b + 1}.xy);
              `, b + 1 < h && (p += `
                  xC${b + 1} = vec4(xTexelC${b}.zw, xTexelC${b + 1}.zw);
                `)));
      b < h && (p += `
            wTexel = getW(r, ${b}, d1, q);
            dotProd += xC${b} * vec4(wTexel.xz, wTexel.xz);
          `, b + 1 < h && (p += `
              wTexel = getW(r, ${b + 1}, d1, q);
              dotProd += xC${b + 1} * vec4(wTexel.xz, wTexel.xz);
            `));
    }
    p += `
    }
  `, p += `
      }
    `;
    let f = "", m = "";
    s && (r ? f = `vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${s}
        }` : o ? f = `vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${s}
        }` : f = `vec4 activation(vec4 x) {
          ${s}
        }`, m = "result = activation(result);");
    const g = e ? "result += getBiasAtOutCoords();" : "";
    e && this.variableNames.push("bias"), r && this.variableNames.push("preluActivationWeights"), o && this.variableNames.push("leakyreluAlpha"), this.userCode = `
      ${f}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${i};
        int q = d2 - d1 * ${i};
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
        vec4 dotProd = vec4(0.000000000000001);

        ${p}

        vec4 result = dotProd - vec4(0.000000000000001);
        ${g}
        ${m}
        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function OY(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r, filter: o } = t, { strides: i, pad: a, dilations: l, dimRoundingMode: c } = s;
  let u = l;
  u == null && (u = [1, 1]), C(Ae(i, u), () => `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${u}'`);
  const h = $e(r.shape, o.shape, i, u, a, c, !0);
  let d;
  V().getBool("WEBGL_PACK_DEPTHWISECONV") && h.strideWidth <= 2 && h.outChannels / h.inChannels === 1 ? d = new mC(h) : d = new fC(h);
  const p = [
    [h.padInfo.top, h.padInfo.left],
    [h.strideHeight, h.strideWidth],
    [h.dilationHeight, h.dilationWidth],
    [h.inHeight, h.inWidth]
  ];
  return e.runWebGLProgram(d, [r, o], "float32", p);
}
const AY = {
  kernelName: yl,
  backendName: "webgl",
  kernelFunc: OY
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class zY {
  constructor(t) {
    this.variableNames = ["x", "dy"], this.outputShape = t.filterShape;
    const e = t.strideHeight, s = t.strideWidth, r = t.padInfo.top, o = t.padInfo.left, i = t.outChannels / t.inChannels;
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int dm = coords.w;
        int d2 = d1 * ${i} + dm;

        float dotProd = 0.0;

        // TO DO: Vec4 over the batch size
        for (int b = 0; b < ${t.batchSize}; b++) {
          for (int yR = 0; yR < ${t.outHeight}; yR++) {
            int xR = wR + yR * ${e} - ${r};

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${t.outWidth}; yC++) {
              int xC = wC + yC * ${s} - ${o};

              if (xC < 0 || xC >= ${t.inWidth}) {
                continue;
              }

              float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
class WY {
  constructor(t) {
    this.variableNames = ["dy", "W"], this.outputShape = t.inShape;
    const e = t.filterHeight, s = t.filterWidth, r = t.strideHeight, o = t.strideWidth, i = e - 1 - t.padInfo.top, a = s - 1 - t.padInfo.left, l = t.outChannels / t.inChannels;
    this.userCode = `
      const ivec2 pads = ivec2(${i}, ${a});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];
        ivec2 dyCorner = coords.yz - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        float dotProd = 0.0;

        for (int wR = 0; wR < ${e}; wR++) {
          float dyR = float(dyRCorner + wR) / ${r}.0;

          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${e} - 1 - wR;

          for (int wC = 0; wC < ${s}; wC++) {
            float dyC = float(dyCCorner + wC) / ${o}.0;

            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${s} - 1 - wC;

            // TO DO: Vec4 over the channelMul
            for (int dm = 0; dm < ${l}; dm++) {
              int d2 = d1 * ${l} + dm;
              float xValue = getDy(batch, idyR, idyC, d2);
              float wValue = getW(wRPerm, wCPerm, d1, dm);
              dotProd += xValue * wValue;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function VY(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r, dy: o } = t, { strides: i, dilations: a, pad: l, dimRoundingMode: c, filterShape: u } = s, h = $e(r.shape, u, i, a, l, c, !0), d = new zY(h);
  return e.runWebGLProgram(d, [r, o], "float32");
}
const MY = {
  kernelName: yh,
  backendName: "webgl",
  kernelFunc: VY
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function PY(n) {
  const { inputs: t, backend: e, attrs: s } = n, { dy: r, filter: o } = t, { strides: i, dilations: a, pad: l, dimRoundingMode: c, inputShape: u } = s, h = $e(u, o.shape, i, a, l, c, !0), d = new WY(h);
  return e.runWebGLProgram(d, [r, o], "float32");
}
const XY = {
  kernelName: bh,
  backendName: "webgl",
  kernelFunc: PY
};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class _Y {
  constructor(t) {
    this.variableNames = ["X"], this.outputShape = [t, t], this.userCode = `
      void main() {
          ivec2 coords = getOutputCoords();
          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;
          setOutput(val);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function KY(n) {
  const { inputs: t, backend: e } = n, { x: s } = t, r = [...s.shape, ...s.shape], o = P(s.shape), i = rt({ inputs: { x: s }, backend: e, attrs: { shape: [o] } }), a = new _Y(o), l = e.runWebGLProgram(a, [i], i.dtype), c = rt({ inputs: { x: l }, backend: e, attrs: { shape: r } });
  return e.disposeIntermediateTensorInfo(i), e.disposeIntermediateTensorInfo(l), c;
}
const ZY = {
  kernelName: xh,
  backendName: "webgl",
  kernelFunc: KY
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class BY {
  constructor(t) {
    this.variableNames = ["x", "W"], this.outputShape = t.outShape;
    const { inHeight: e, inWidth: s, padInfo: r, strideHeight: o, strideWidth: i, filterHeight: a, filterWidth: l, dilationHeight: c, dilationWidth: u } = t, { top: h, left: d } = r;
    this.userCode = `
      const ivec2 strides = ivec2(${o}, ${i});
      const ivec2 pads = ivec2(${h}, ${d});
      const float neg_infinity = -3.4e38;

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.w;
        ivec2 outTopLeftCorner =
            coords.yz * strides - pads;
        int hBeg = outTopLeftCorner.x;
        int wBeg = outTopLeftCorner.y;

        float curVal = neg_infinity;
        for (int h = 0; h < ${a}; h++) {
          int hIn = hBeg + h * ${c};

          if (hIn >= 0 && hIn < ${e}) {
            for (int w = 0; w < ${l}; w++) {
              int wIn = wBeg + w * ${u};

              if (wIn >= 0 && wIn < ${s}) {
                float xVal = getX(batch, hIn, wIn, d1);
                float wVal = getW(h, w, d1);

                float val = xVal + wVal;
                if (val > curVal) {
                  curVal = val;
                }
              }
            }
          }
        }

        float result = curVal;
        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function HY(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r, filter: o } = t, { strides: i, pad: a, dilations: l } = s, c = ac(r.shape, o.shape, i, a, "NHWC", l);
  let u;
  const h = new BY(c);
  u = e.runWebGLProgram(h, [r, o], "float32");
  const d = rt({ inputs: { x: u }, backend: e, attrs: { shape: c.outShape } });
  return e.disposeIntermediateTensorInfo(u), d;
}
const UY = {
  kernelName: bl,
  backendName: "webgl",
  kernelFunc: HY
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function YY(n) {
  const { inputs: t, backend: e, attrs: s } = n, { equation: r } = s, o = t, { allDims: i, summedDims: a, idDims: l } = hy(r, o.length);
  py(i.length, l, o);
  const { path: c, steps: u } = fy(a, l), h = u.length;
  let d = null, p = i.length;
  const f = [];
  for (let m = 0; m < h; ++m) {
    for (const g of u[m]) {
      const { permutationIndices: y, expandDims: b } = dy(p, l[g]);
      let w;
      my(y) ? w = o[g] : (w = Ue({ inputs: { x: o[g] }, backend: e, attrs: { perm: y } }), f.push(w));
      const x = w.shape.slice();
      for (let S = 0; S < b.length; ++S)
        x.splice(b[S], 0, 1);
      Nt(w.shape, x) || (w = rt({ inputs: { x: w }, backend: e, attrs: { shape: x } }), f.push(w)), d === null ? d = w : (d = xb({ inputs: { a: w, b: d }, backend: e }), f.push(d));
    }
    m < h - 1 && (c[m] >= 0 && (d = $p({
      inputs: { x: d },
      backend: e,
      attrs: {
        axis: c[m] - (i.length - p),
        keepDims: !1
      }
    }), f.push(d)), p--);
  }
  for (const m of f)
    m !== d && e.disposeIntermediateTensorInfo(m);
  return d;
}
const jY = {
  kernelName: wh,
  backendName: "webgl",
  kernelFunc: YY
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const JY = "return (x >= 0.0) ? x : (exp(x) - 1.0);", QY = `
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`, qY = Dt({ opSnippet: JY, packedOpSnippet: QY }), tj = {
  kernelName: di,
  backendName: "webgl",
  kernelFunc: qY
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ej = "return (b >= 1.0) ? a : a * (b + 1.0);", nj = `
  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));
  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));
`, sj = (n) => {
  const { inputs: t, backend: e } = n, { dy: s, y: r } = t, o = V().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new _c(nj, s.shape, r.shape) : new Jo(ej, s.shape, r.shape);
  return e.runWebGLProgram(o, [s, r], s.dtype);
}, rj = {
  kernelName: Ih,
  backendName: "webgl",
  kernelFunc: sj
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const oj = `
  return vec4(equal(a, b));
`, ij = "return float(a == b);", aj = We({
  opSnippet: ij,
  packedOpSnippet: oj,
  dtype: "bool",
  cpuKernelImpl: BU
}), lj = {
  kernelName: xl,
  backendName: "webgl",
  kernelFunc: aj
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const cj = `
  // Error function is calculated approximately with elementary function.
  // See "Handbook of Mathematical Functions with Formulas,
  // Graphs, and Mathematical Tables", Abramowitz and Stegun.
  float p = ${ry};
  float a1 = ${oy};
  float a2 = ${iy};
  float a3 = ${ay};
  float a4 = ${ly};
  float a5 = ${cy};

  float sign = sign(x);
  x = abs(x);
  float t = 1.0 / (1.0 + p * x);
  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));
`, uj = Dt({ opSnippet: cj }), hj = {
  kernelName: pi,
  backendName: "webgl",
  kernelFunc: uj
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const dj = ba + `
  return exp(x);
`, pj = `
  vec4 result = exp(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, gC = Dt({
  opSnippet: dj,
  packedOpSnippet: pj,
  cpuKernelImpl: HU,
  dtype: "float32"
}), fj = {
  kernelName: fi,
  backendName: "webgl",
  kernelFunc: gC
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function dm(n) {
  const { inputs: t, attrs: e, backend: s } = n, { dim: r } = e, { input: o } = t, i = o.shape.length, a = o.shape.slice();
  let l = r;
  return r < 0 && (C(-(i + 1) <= r, () => `Axis must be in the interval [${-(i + 1)}, ${i}]`), l = i + r + 1), a.splice(l, 0, 1), rt({ inputs: { x: o }, backend: s, attrs: { shape: a } });
}
const mj = {
  kernelName: wl,
  backendName: "webgl",
  kernelFunc: dm
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Qx = "return exp(x) - 1.0;", gj = Dt({ opSnippet: Qx, packedOpSnippet: Qx, cpuKernelImpl: UU }), yj = {
  kernelName: mi,
  backendName: "webgl",
  kernelFunc: gj
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class qx {
  constructor(t, e, s) {
    this.variableNames = ["real", "imag"];
    const r = e[1];
    this.outputShape = e;
    const o = s ? `2.0 * ${Math.PI}` : `-2.0 * ${Math.PI}`, i = s ? `${r}.0` : "1.0";
    let a;
    if (t === "real")
      a = "return real * expR - imag * expI;";
    else if (t === "imag")
      a = "return real * expI + imag * expR;";
    else
      throw new Error(`FFT component must be either "real" or "imag", got ${t}.`);
    this.userCode = `
      const float exponentMultiplier = ${o};

      float unaryOpComplex(float real, float expR, float imag, float expI) {
        ${a}
      }

      float mulMatDFT(int batch, int index) {
        float indexRatio = float(index) / float(${r});
        float exponentMultiplierTimesIndexRatio =
            exponentMultiplier * indexRatio;

        float result = 0.0;

        for (int i = 0; i < ${r}; i++) {
          // x = (-2|2 * PI / N) * index * i;
          float x = exponentMultiplierTimesIndexRatio * float(i);
          float expR = cos(x);
          float expI = sin(x);
          float real = getReal(batch, i);
          float imag = getImag(batch, i);

          result +=
              unaryOpComplex(real, expR, imag, expI) / ${i};
        }

        return result;
      }

      void main() {
        ivec2 coords = getOutputCoords();
        setOutput(mulMatDFT(coords[0], coords[1]));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function yC(n, t, e) {
  const s = e.texData.get(n.dataId), r = P(n.shape), o = n.shape[n.shape.length - 1], i = r / o, a = rt({ inputs: { x: n }, backend: e, attrs: { shape: [i, o] } }), l = a.shape, c = new qx("real", l, t), u = new qx("imag", l, t), h = [
    {
      dataId: s.complexTensorInfos.real.dataId,
      dtype: s.complexTensorInfos.real.dtype,
      shape: l
    },
    {
      dataId: s.complexTensorInfos.imag.dataId,
      dtype: s.complexTensorInfos.imag.dtype,
      shape: l
    }
  ], d = e.runWebGLProgram(c, h, "float32"), p = e.runWebGLProgram(u, h, "float32"), f = Er({ inputs: { real: d, imag: p }, backend: e });
  e.disposeIntermediateTensorInfo(d), e.disposeIntermediateTensorInfo(p);
  const m = rt({ inputs: { x: f }, backend: e, attrs: { shape: n.shape } });
  return e.disposeIntermediateTensorInfo(a), e.disposeIntermediateTensorInfo(f), m;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function bj(n) {
  const { inputs: t, backend: e } = n, { input: s } = t;
  return yC(s, !1, e);
}
const xj = {
  kernelName: Sh,
  backendName: "webgl",
  kernelFunc: bj
};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class wj {
  constructor(t, e) {
    this.outputShape = [], this.customUniforms = [{ name: "value", type: "float" }], this.variableNames = ["x"], this.outputShape = t, this.userCode = `
      void main() {
        // Input can be obtained from uniform value.
        setOutput(value);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Zc(n) {
  const { backend: t, attrs: e } = n, { shape: s, value: r } = e;
  let { dtype: o } = e;
  if (o = o || Qo(r), o === "string") {
    const i = Gt(o, P(s));
    return i.fill(r), t.makeTensorInfo(s, o, i);
  } else {
    const i = new wj(s, r), a = [[r]];
    return t.runWebGLProgram(i, [], o, a);
  }
}
const Ij = {
  kernelName: vh,
  backendName: "webgl",
  kernelFunc: Zc
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Sj {
  constructor(t) {
    this.variableNames = ["Image"], this.outputShape = [];
    const e = t[2];
    this.outputShape = t, this.userCode = `
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];

          int coordX = ${e} - x - 1;
          float outputValue;
          if(coordX >= 0 && coordX < ${e}) {
            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);
          } else {
            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);
          }
          setOutput(outputValue);
        }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const vj = {
  kernelName: Ch,
  backendName: "webgl",
  kernelFunc: ({ inputs: n, backend: t }) => {
    const { image: e } = n, s = t, r = new Sj(e.shape);
    return s.runWebGLProgram(r, [e], e.dtype);
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const t1 = "return floor(x);", Cj = Dt({ opSnippet: t1, packedOpSnippet: t1, cpuKernelImpl: YU }), kj = {
  kernelName: gi,
  backendName: "webgl",
  kernelFunc: Cj
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Tj = `
  float s = sign(a) * sign(b);
  int ia = round(a);
  int ib = round(b);
  if (ib != 0) {
    // Windows (D3D) wants guaranteed non-zero int division at compile-time.
    return float(idiv(ia, ib, s));
  } else {
    return NAN;
  }
`, Nj = `
  ivec4 ia = round(a);
  ivec4 ib = round(b);
  bvec4 cond = notEqual(ib, ivec4(0));
  ivec4 result = ivec4(0);
  vec4 s = sign(a) * sign(b);

  // Windows (D3D) wants guaranteed non-zero int division at compile-time.
  if (cond[0]) {
    result[0] = idiv(ia[0], ib[0], s[0]);
  }
  if (cond[1]) {
    result[1] = idiv(ia[1], ib[1], s[1]);
  }
  if (cond[2]) {
    result[2] = idiv(ia[2], ib[2], s[2]);
  }
  if (cond[3]) {
    result[3] = idiv(ia[3], ib[3], s[3]);
  }
  return vec4(result);
`, $j = We({ opSnippet: Tj, packedOpSnippet: Nj, dtype: "int32" }), Rj = {
  kernelName: yi,
  backendName: "webgl",
  kernelFunc: $j
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Ej {
  constructor(t) {
    this.variableNames = ["A"];
    const e = je(), [s, r] = t;
    this.outputShape = t, this.userCode = `
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${s}.0);

        vec4 values = ${e.texture2D}(A, uv);
        float value;
        if (depth == 0) {
          value = values.r;
        } else if (depth == 1) {
          value = values.g;
        } else if (depth == 2) {
          value = values.b;
        } else if (depth == 3) {
          value = values.a;
        }

        setOutput(floor(value * 255.0 + 0.5));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Lj {
  constructor(t) {
    this.variableNames = ["A"], this.packedInputs = !1, this.packedOutput = !0;
    const e = je(), [s, r] = t;
    this.outputShape = t, this.userCode = `
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];

        vec4 result = vec4(0.);

        for(int row=0; row<=1; row++) {
          for(int col=0; col<=1; col++) {
            texC = coords[1] + row;
            depth = coords[2] + col;

            vec2 uv = (vec2(texC, texR) + halfCR) /
                       vec2(${r}.0, ${s}.0);
            vec4 values = ${e.texture2D}(A, uv);
            float value;
            if (depth == 0) {
              value = values.r;
            } else if (depth == 1) {
              value = values.g;
            } else if (depth == 2) {
              value = values.b;
            } else if (depth == 3) {
              value = values.a;
            }

            result[row * 2 + col] = floor(value * 255.0 + 0.5);
          }
        }

        ${e.output} = result;
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Dj = {
  kernelName: Cu,
  backendName: "webgl",
  kernelFunc: Gj
};
let To, Jp = V().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");
function Gj(n) {
  const { inputs: t, backend: e, attrs: s } = n;
  let { pixels: r } = t;
  const { numChannels: o } = s, i = typeof HTMLVideoElement < "u" && r instanceof HTMLVideoElement, a = typeof HTMLImageElement < "u" && r instanceof HTMLImageElement, [l, c] = i ? [
    r.videoWidth,
    r.videoHeight
  ] : [r.width, r.height], u = [c, l], h = [c, l, o];
  if (a || i) {
    const m = V().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");
    (To == null || m !== Jp) && (Jp = m, To = document.createElement("canvas").getContext("2d", { willReadFrequently: Jp })), To.canvas.width = l, To.canvas.height = c, To.drawImage(r, 0, 0, l, c), r = To.canvas;
  }
  const d = e.makeTensorInfo(u, "int32");
  e.texData.get(d.dataId).usage = Rn.PIXELS, e.gpgpu.uploadPixelDataToTexture(e.getTexture(d.dataId), r);
  const p = V().getBool("WEBGL_PACK") ? new Lj(h) : new Ej(h), f = e.runWebGLProgram(p, [d], "int32");
  return e.disposeData(d.dataId), f;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Fj(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r, filter: o, bias: i, preluActivationWeights: a } = t, { strides: l, pad: c, dataFormat: u, dilations: h, dimRoundingMode: d, activation: p, leakyreluAlpha: f } = s, m = Ys(u), g = $e(r.shape, o.shape, l, h, c, d, !1, m);
  let y;
  const b = [], w = i != null, x = a != null, S = p === "leakyrelu", v = () => {
    const N = [r, o], $ = (R, F) => {
      if (F === "NCHW" && R.shape.length === 1 && R.shape[0] !== 1) {
        const z = rt({
          inputs: { x: R },
          backend: e,
          attrs: { shape: [R.shape[0], 1, 1] }
        });
        return b.push(z), z;
      }
      return R;
    };
    if (w && N.push($(i, u)), x && N.push($(a, u)), S) {
      const R = e.makeTensorInfo([], "float32", Ns(f, "float32"));
      N.push(R), b.push(R);
    }
    return N;
  };
  if (g.filterHeight === 1 && g.filterWidth === 1 && g.dilationHeight === 1 && g.dilationWidth === 1 && g.strideHeight === 1 && g.strideWidth === 1 && (g.padInfo.type === "SAME" || g.padInfo.type === "VALID"))
    y = hC({
      x: r,
      filter: o,
      convInfo: g,
      backend: e,
      bias: i,
      activation: p,
      preluActivationWeights: a,
      leakyreluAlpha: f
    });
  else if (g.strideWidth <= 2 && m === "channelsLast" && V().getBool("WEBGL_EXP_CONV")) {
    const N = p ? tl(p, !0) : null, $ = new uC(g, w, N, x, S), R = [
      [g.padInfo.top, g.padInfo.left],
      [g.strideHeight, g.strideWidth],
      [g.dilationHeight, g.dilationWidth],
      [g.inHeight, g.inWidth]
    ], F = v();
    y = e.runWebGLProgram($, F, "float32", R);
  } else if (V().getBool("WEBGL_CONV_IM2COL"))
    y = dC({
      x: r,
      filter: o,
      convInfo: g,
      backend: e,
      bias: i,
      activation: p,
      preluActivationWeights: a,
      leakyreluAlpha: f
    });
  else {
    const N = p ? tl(p, !1) : null, $ = new cC(g, w, N, x, S), R = v();
    y = e.runWebGLProgram($, R, "float32");
  }
  const T = rt({ inputs: { x: y }, backend: e, attrs: { shape: g.outShape } });
  return b.push(y), b.forEach((N) => e.disposeIntermediateTensorInfo(N)), T;
}
const Oj = {
  kernelName: Ma,
  backendName: "webgl",
  kernelFunc: Fj
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Aj(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r, filter: o, bias: i, preluActivationWeights: a } = t, { strides: l, pad: c, dilations: u, dimRoundingMode: h, activation: d, leakyreluAlpha: p } = s, f = [];
  let m = u;
  m == null && (m = [1, 1]), C(Ae(l, m), () => `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${m}'`);
  const g = $e(r.shape, o.shape, l, m, c, h, !0), y = V().getBool("WEBGL_PACK_DEPTHWISECONV") && g.strideWidth <= 2 && g.outChannels / g.inChannels === 1, b = d ? tl(d, y) : null, w = [r, o], x = i != null, S = a != null, v = d === "leakyrelu";
  if (x && w.push(i), S && w.push(a), v) {
    const R = e.makeTensorInfo([], "float32", Ns(p, "float32"));
    w.push(R), f.push(R);
  }
  let T;
  y ? T = new mC(g, x, b, S, v) : T = new fC(g, x, b, S, v);
  const N = [
    [g.padInfo.top, g.padInfo.left],
    [g.strideHeight, g.strideWidth],
    [g.dilationHeight, g.dilationWidth],
    [g.inHeight, g.inWidth]
  ], $ = e.runWebGLProgram(T, w, "float32", N);
  return f.forEach((R) => e.disposeIntermediateTensorInfo(R)), $;
}
const zj = {
  kernelName: Pa,
  backendName: "webgl",
  kernelFunc: Aj
};
class Wj {
  constructor(t, e, s, r) {
    this.sliceDim = t, this.strides = e, this.paramsShape = r, this.variableNames = ["x", "indices"], this.outputShape = s;
    const o = _t(s.length);
    let i = `
    int index;`;
    for (let a = 0; a < this.sliceDim; a++)
      i += `
          index = round(getIndices(coords[0], ${a}));
          out_of_bounds = out_of_bounds || index < 0;
          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[a]};
          flattenIndex += index * ${this.strides[a]};`;
    this.userCode = `
         void main() {
          ${o} coords = getOutputCoords();
          int flattenIndex = 0;
          bool out_of_bounds = false;

          ${i}

          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));
        }
      `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Vj(n) {
  const { inputs: t, backend: e } = n, { params: s, indices: r } = t, o = r.shape, i = o[o.length - 1], a = P(s.shape), [l, c, u, h] = ld(s, r), d = rt({ inputs: { x: r }, backend: e, attrs: { shape: [c, i] } }), p = rt({
    inputs: { x: s },
    backend: e,
    attrs: { shape: [P(s.shape) / u, u] }
  });
  if (e.shouldExecuteOnCPU([s, r]) || s.dtype === "string") {
    const y = e.readSync(r.dataId), b = e.bufferSync(s), w = jU(y, b, s.dtype, c, i, u, h, s.shape, a);
    return e.makeTensorInfo(l, s.dtype, w.values);
  }
  const f = new Wj(i, h, [c, u], s.shape), m = e.runWebGLProgram(f, [p, d], p.dtype), g = rt({ inputs: { x: m }, backend: e, attrs: { shape: l } });
  return e.disposeIntermediateTensorInfo(d), e.disposeIntermediateTensorInfo(p), e.disposeIntermediateTensorInfo(m), g;
}
const Mj = {
  kernelName: kh,
  backendName: "webgl",
  kernelFunc: Vj
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Pj {
  constructor(t, e) {
    this.variableNames = ["A", "indices"], this.outputShape = e, this.rank = e.length;
    const s = _t(this.rank), r = Xj(t);
    this.userCode = `
      void main() {
        ${s} resRC = getOutputCoords();
        int index = int(getIndices(resRC.x, resRC.z));
        float inBounds = (index >= 0) && (index < ${t[2]}) ? 1.0 : 0.0;
        setOutput(inBounds * getA(${r}));
      }
    `;
  }
}
function Xj(n, t) {
  const e = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"], s = [];
  for (let r = 0; r < n.length; r++)
    r === 2 ? s.push("index") : s.push(`${e[r]}`);
  return s.join();
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function bC(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r, indices: o } = t, { axis: i, batchDims: a } = s, l = vt(i, r.shape)[0];
  if (V().get("DEBUG")) {
    const b = e.readSync(o.dataId), w = r.shape[l];
    for (let x = 0; x < b.length; ++x) {
      const S = b[x];
      C(S <= w - 1 && S >= 0, () => `GatherV2: the index value ${S} is not in [0, ${w - 1}]`);
    }
  }
  const c = $y(r, o, l, a), u = P(o.shape), h = [], d = rt({
    inputs: { x: r },
    backend: e,
    attrs: {
      shape: [
        c.batchSize,
        c.outerSize,
        c.dimSize,
        c.sliceSize
      ]
    }
  }), p = rt({
    inputs: { x: o },
    backend: e,
    attrs: { shape: [c.batchSize, u / c.batchSize] }
  });
  h.push(d), h.push(p);
  const f = [
    c.batchSize,
    c.outerSize,
    u / c.batchSize,
    c.sliceSize
  ];
  if (e.shouldExecuteOnCPU([r, o]) || r.dtype === "string") {
    const b = e.bufferSync(p), w = e.bufferSync(d), x = JU(w, b, f);
    return h.forEach((S) => e.disposeIntermediateTensorInfo(S)), e.makeTensorInfo(c.outputShape, x.dtype, x.values);
  }
  const m = new Pj(d.shape, f), g = e.runWebGLProgram(m, [d, p], d.dtype);
  h.push(g);
  const y = rt({ inputs: { x: g }, backend: e, attrs: { shape: c.outputShape } });
  return h.forEach((b) => e.disposeIntermediateTensorInfo(b)), y;
}
const _j = {
  kernelName: Sl,
  backendName: "webgl",
  kernelFunc: bC
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Kj = "return float(a > b);", Zj = `
  return vec4(greaterThan(a, b));
`, Bj = We({
  opSnippet: Kj,
  packedOpSnippet: Zj,
  cpuKernelImpl: QU,
  dtype: "bool"
}), Hj = {
  kernelName: vl,
  backendName: "webgl",
  kernelFunc: Bj
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Uj = "return float(a >= b);", Yj = `
  return vec4(greaterThanEqual(a, b));
`, jj = We({
  opSnippet: Uj,
  packedOpSnippet: Yj,
  dtype: "bool",
  cpuKernelImpl: qU
}), Jj = {
  kernelName: bi,
  backendName: "webgl",
  kernelFunc: jj
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Qj(n) {
  const { inputs: t, backend: e } = n, { input: s } = t;
  return yC(s, !0, e);
}
const qj = {
  kernelName: Th,
  backendName: "webgl",
  kernelFunc: Qj
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const tJ = "return float(!isnan(x) && !isinf(x));", eJ = Dt({ opSnippet: tJ, dtype: "bool" }), nJ = {
  kernelName: wi,
  backendName: "webgl",
  kernelFunc: eJ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const sJ = "return float(isinf(x));", rJ = Dt({ opSnippet: sJ, dtype: "bool" }), oJ = {
  kernelName: Ii,
  backendName: "webgl",
  kernelFunc: rJ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const iJ = "return float(isnan(x));", aJ = Dt({ opSnippet: iJ, dtype: "bool" }), lJ = {
  kernelName: Si,
  backendName: "webgl",
  kernelFunc: aJ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const cJ = "return float(a < b);", uJ = `
  return vec4(lessThan(a, b));
`, hJ = We({
  opSnippet: cJ,
  packedOpSnippet: uJ,
  cpuKernelImpl: t9,
  dtype: "bool"
}), dJ = {
  kernelName: kl,
  backendName: "webgl",
  kernelFunc: hJ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const pJ = "return float(a <= b);", fJ = `
  return vec4(lessThanEqual(a, b));
`, mJ = We({
  opSnippet: pJ,
  packedOpSnippet: fJ,
  cpuKernelImpl: e9,
  dtype: "bool"
}), gJ = {
  kernelName: Tl,
  backendName: "webgl",
  kernelFunc: mJ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function yJ(n) {
  const { backend: t, attrs: e } = n, { start: s, stop: r, num: o } = e, i = n9(s, r, o);
  return t.makeTensorInfo([i.length], "float32", i);
}
const bJ = {
  kernelName: $h,
  backendName: "webgl",
  kernelFunc: yJ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const xJ = ba + `
  return x < 0.0 ? 0./0. : log(x);
`, wJ = `
  vec4 result = log(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);
  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);
  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);
  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);
  return result;
`, IJ = Dt({ opSnippet: xJ, packedOpSnippet: wJ, cpuKernelImpl: s9 }), SJ = {
  kernelName: vi,
  backendName: "webgl",
  kernelFunc: IJ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const vJ = ba + `
  return log(1.0 + x);
`, CJ = Dt({ opSnippet: vJ }), kJ = {
  kernelName: Ci,
  backendName: "webgl",
  kernelFunc: CJ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const TJ = "return float(a >= 1.0 && b >= 1.0);", NJ = `
  return vec4(
    vec4(greaterThanEqual(a, vec4(1.0))) *
    vec4(greaterThanEqual(b, vec4(1.0))));
`, $J = We({
  opSnippet: TJ,
  packedOpSnippet: NJ,
  dtype: "bool"
}), RJ = {
  kernelName: Nl,
  backendName: "webgl",
  kernelFunc: $J
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const EJ = "return float(!(x >= 1.0));", LJ = Dt({ opSnippet: EJ }), DJ = {
  kernelName: $l,
  backendName: "webgl",
  kernelFunc: LJ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const GJ = "return float(a >= 1.0 || b >= 1.0);", FJ = `
  return min(
    vec4(greaterThanEqual(a, vec4(1.0))) +
    vec4(greaterThanEqual(b, vec4(1.0))),
    vec4(1.0));
`, OJ = We({ opSnippet: GJ, packedOpSnippet: FJ, dtype: "bool" }), AJ = {
  kernelName: Rl,
  backendName: "webgl",
  kernelFunc: OJ
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class zJ {
  constructor(t, e, s, r, o) {
    this.variableNames = ["x"], this.outputShape = [];
    const i = e, a = t[3] - 1;
    this.outputShape = t;
    let l;
    const c = `float(${s}) + float(${r}) * sum`;
    o === 0.5 ? l = `inversesqrt(${c})` : o === 1 ? l = `1.0/(${c})` : l = `exp(log(${c}) * float(-${o}));`, this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];
        int d = coords[3];
        float x = getX(b, r, c, d);
        float sum = 0.0;
        for (int j = -${i}; j <= ${i}; j++) {
          int idx = d + j;
          if (idx >= 0 && idx <=  ${a}) {
            float z = getX(b, r, c, idx);
            sum += z * z;
          }
        }
        float val = x * ${l};
        setOutput(val);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class WJ {
  constructor(t, e, s, r, o) {
    this.variableNames = ["x"], this.outputShape = [], this.packedInputs = !0, this.packedOutput = !0;
    const i = e, a = t[3] - 1;
    this.outputShape = t;
    let l;
    const c = `float(${s}) + float(${r}) * sum`;
    o === 0.5 ? l = `inversesqrt(${c})` : o === 1 ? l = `1.0/(${c})` : l = `exp(log(${c}) * float(-${o}));`, this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords.x;
        int r = coords.y;
        int c = coords.z;
        int d = coords.w;

        bool hasNextCol = d < ${this.outputShape[3]};
        bool hasNextRow = c < ${this.outputShape[2]};

        vec4 sum = vec4(0.);
        vec4 xFragAtOutputCoords = getX(b, r, c, d);

        vec4 xAtOutputCoords = vec4(
          getChannel(xFragAtOutputCoords, vec2(c, d)),
          hasNextCol ?
            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,
          hasNextRow ?
            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,
          (hasNextRow && hasNextCol) ?
            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0
        );

        int firstChannel = d - ${i};
        vec2 cache = vec2(0.);
        if(firstChannel >= 0){
          vec4 firstChannelFrag = getX(b, r, c, firstChannel);
          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));
            if(hasNextRow){
              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));
            }
        }

        ivec2 depth = ivec2(d, d + 1);
        for (int j = - ${i}; j <= ${i}; j++) {
          ivec2 idx = depth + j;
          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));
          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${a}));

          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;
          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;

          if(depthInRange || depthPlusOneInRange){
            vec4 z = vec4(0.);
            vec4 xFragAtCurrentDepth;
            z.xz = cache.xy;
            if(depthPlusOneInRange && hasNextCol){
              xFragAtCurrentDepth = idx.y != d ?
                getX(b, r, c, idx.y) : xFragAtOutputCoords;
              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));
              if(hasNextRow){
                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));
              }
            }
            cache.xy = z.yw;
            sum += z * z;
          }
        }
        vec4 result = xAtOutputCoords * ${l};
        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const VJ = (n) => {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { depthRadius: o, bias: i, alpha: a, beta: l } = s, c = V().getBool("WEBGL_PACK_NORMALIZATION") ? new WJ(r.shape, o, i, a, l) : new zJ(r.shape, o, i, a, l);
  return e.runWebGLProgram(c, [r], r.dtype);
}, MJ = {
  kernelName: El,
  backendName: "webgl",
  kernelFunc: VJ
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class PJ {
  constructor(t, e, s, r, o) {
    this.variableNames = ["inputImage", "outputImage", "dy"], this.outputShape = [], this.outputShape = t, this.depth = t[3], this.depthRadius = e, this.bias = s, this.alpha = r, this.beta = o, this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];

        float result = 0.0;
        for (int d = 0; d < ${this.depth}; ++d) {
          int depthBegin = int(max(0.0, float(d - ${e})));
          int depthEnd = int(min(float(${this.depth}),
              float(d + ${e} + 1)));

          const int MIN_DEPTH_BEGIN = 0;
          const int MAX_DEPTH_END = ${this.depth};

          float norm = 0.0;
          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd) {
              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);
            }
            else {
              break;
            }
          }

          norm = float(${r}) * norm + float(${s});

          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd){
              float dyi = -2.0 * float(${r})
                * float(${o})
                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)
                / norm;
              if (k == d) {
                dyi += pow(norm, -1.0 * ${o});
              }
              if (k == coords[3]) {
                dyi *= getDy(b, r, c, d);
                result += dyi;
              }
            }
            else {
              break;
            }
          }
      }
      setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const XJ = (n) => {
  const { inputs: t, backend: e, attrs: s } = n, { x: r, y: o, dy: i } = t, { depthRadius: a, bias: l, alpha: c, beta: u } = s, h = new PJ(r.shape, a, l, c, u);
  return e.runWebGLProgram(h, [r, o, i], r.dtype);
}, _J = {
  kernelName: Rh,
  backendName: "webgl",
  kernelFunc: XJ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function KJ(n, t, e, s) {
  const r = P(t), i = P(n.shape) / r, a = rt({ inputs: { x: n }, attrs: { shape: [i, r] }, backend: s }), l = vo(a, n.dtype, "max", s), c = rt({ inputs: { x: l }, attrs: { shape: e }, backend: s });
  return s.disposeIntermediateTensorInfo(a), s.disposeIntermediateTensorInfo(l), c;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function xC(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { reductionIndices: o, keepDims: i } = s, a = r.shape.length, l = vt(o, r.shape);
  let c = l;
  const u = oe(c, a), h = u != null, d = e.shouldExecuteOnCPU([r]);
  let p = r;
  if (h) {
    if (d) {
      const w = e.texData.get(p.dataId).values, x = new Array(a);
      for (let T = 0; T < x.length; T++)
        x[T] = r.shape[u[T]];
      const S = yb(w, r.shape, r.dtype, u, x);
      p = e.makeTensorInfo(x, r.dtype);
      const v = e.texData.get(p.dataId);
      v.values = S;
    } else
      p = Np(r, u, e);
    c = pe(c.length, a);
  }
  ze("max", c, a);
  const [f, m] = ve(p.shape, c);
  let g = f;
  i && (g = de(f, l));
  let y;
  if (d) {
    const w = e.texData.get(p.dataId).values, x = r9(w, P(m), g, r.dtype);
    y = e.makeTensorInfo(g, r.dtype);
    const S = e.texData.get(y.dataId);
    S.values = x;
  } else
    y = KJ(p, m, g, e);
  return h && e.disposeIntermediateTensorInfo(p), y;
}
const ZJ = {
  kernelName: Ll,
  backendName: "webgl",
  kernelFunc: xC
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const BJ = bb + `
  return max(a, b);
`, HJ = `
  vec4 result = vec4(max(a, b));
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  ` + Xc + `
  return result;
`, UJ = We({
  opSnippet: BJ,
  packedOpSnippet: HJ,
  cpuKernelImpl: o9
}), YJ = {
  kernelName: ki,
  backendName: "webgl",
  kernelFunc: UJ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function jJ(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t;
  Mc(r, "maxPool");
  const { filterSize: o, strides: i, pad: a, dimRoundingMode: l } = s, c = 1;
  C(Ae(i, c), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`);
  const u = Yn(r.shape, o, i, c, a, l);
  if (u.filterWidth === 1 && u.filterHeight === 1 && Nt(u.inShape, u.outShape))
    return In({ inputs: { x: r }, backend: e });
  const h = new el(u, "max", !1);
  return e.runWebGLProgram(h, [r], r.dtype);
}
const JJ = {
  kernelName: Dl,
  backendName: "webgl",
  kernelFunc: jJ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function QJ(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { filterSize: o, strides: i, pad: a, dataFormat: l, dimRoundingMode: c } = s, u = [1, 1, 1], h = Us(r.shape, o, i, u, a, c, l), d = new wb(h, "max", !1);
  return e.runWebGLProgram(d, [r], r.dtype);
}
const qJ = {
  kernelName: Gl,
  backendName: "webgl",
  kernelFunc: QJ
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class tQ {
  constructor(t) {
    this.variableNames = ["dy", "maxPos"], this.outputShape = t.inShape;
    const e = t.strideHeight, s = t.strideWidth, r = t.dilationHeight, o = t.effectiveFilterHeight, i = t.effectiveFilterWidth, a = o - 1 - t.padInfo.top, l = i - 1 - t.padInfo.left, c = o * i - 1;
    this.userCode = `
      const ivec2 pads = ivec2(${a}, ${l});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${o};
          wR += ${r}) {
          float dyR = float(dyRCorner + wR) / ${e}.0;

          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${i}; wC++) {
            float dyC = float(dyCCorner + wC) / ${s}.0;

            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);
            int maxPosValue = ${c} - int(getMaxPos(b, idyR, idyC, d));

            // Get the current value, check it against the value from the
            // position matrix.
            int curPosValue = wR * ${i} + wC;
            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

            dotProd += dyValue * mask;
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
class eQ {
  constructor(t) {
    this.variableNames = ["dy", "maxPos"], this.outputShape = t.inShape;
    const e = t.strideDepth, s = t.strideHeight, r = t.strideWidth, o = t.dilationDepth, i = t.dilationHeight, a = t.dilationWidth, l = t.effectiveFilterDepth, c = t.effectiveFilterHeight, u = t.effectiveFilterWidth, h = l - 1 - t.padInfo.front, d = c - 1 - t.padInfo.top, p = u - 1 - t.padInfo.left, f = l * c * u - 1;
    this.userCode = `
      const ivec3 pads = ivec3(${h}, ${d}, ${p});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${l};
           wD += ${o}) {
          float dyD = float(dyDCorner + wD) / ${e}.0;

          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${c};
              wR += ${i}) {
            float dyR = float(dyRCorner + wR) / ${s}.0;

            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${u};
                wC += ${a}) {
              float dyC = float(dyCCorner + wC) / ${r}.0;

              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);
              int maxPosValue = ${f} -
                  int(getMaxPos(batch, idyD, idyR, idyC, ch));

              // Get the current value, check it against the value from the
              // position matrix.
              int curPosValue =
                  wD * ${c} * ${u} +
                  wR * ${u} + wC;
              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

              dotProd += dyValue * mask;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function nQ(n) {
  const { inputs: t, backend: e, attrs: s } = n, { dy: r, input: o } = t, i = o, { filterSize: a, strides: l, pad: c, dimRoundingMode: u } = s, h = [1, 1, 1], d = Us(i.shape, a, l, h, c, u), p = new wb(d, "max", !0), f = e.runWebGLProgram(p, [i], i.dtype), m = new eQ(d), g = e.runWebGLProgram(m, [r, f], i.dtype);
  return e.disposeIntermediateTensorInfo(f), g;
}
const sQ = {
  kernelName: Lh,
  backendName: "webgl",
  kernelFunc: nQ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function rQ(n) {
  const { inputs: t, backend: e, attrs: s } = n, { dy: r, input: o, output: i } = t, a = o;
  Mc([o, i], "maxPoolGrad");
  const { filterSize: l, strides: c, pad: u, dimRoundingMode: h } = s, d = Yn(a.shape, l, c, 1, u, h), p = !0, f = new el(d, "max", p), m = e.runWebGLProgram(f, [a], a.dtype), g = new tQ(d), y = e.runWebGLProgram(g, [r, m], a.dtype);
  return e.disposeIntermediateTensorInfo(m), y;
}
const oQ = {
  kernelName: Eh,
  backendName: "webgl",
  kernelFunc: rQ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function iQ(n, t, e, s) {
  let r = new el(e, "max", !1);
  const o = s.runWebGLProgram(r, [n], "float32");
  r = new el(e, "max", !0, !0, t);
  const i = s.runWebGLProgram(r, [n], "float32");
  return [o, i];
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const aQ = {
  kernelName: Dh,
  backendName: "webgl",
  kernelFunc: ({ inputs: n, attrs: t, backend: e }) => {
    const { x: s } = n, { filterSize: r, strides: o, pad: i, includeBatchInIndex: a } = t, l = e;
    C(s.shape.length === 4, () => `Error in maxPool: input must be rank 4 but got rank ${s.shape.length}.`);
    const c = [1, 1];
    C(Ae(o, c), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '${c}'`);
    const u = Yn(s.shape, r, o, c, i), [h, d] = iQ(s, a, u, l);
    return [h, d];
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function lQ(n, t, e, s) {
  const r = P(t), i = P(n.shape) / r, a = rt({ inputs: { x: n }, attrs: { shape: [i, r] }, backend: s }), l = vo(a, "float32", "mean", s), c = rt({ inputs: { x: l }, attrs: { shape: e }, backend: s });
  return s.disposeIntermediateTensorInfo(a), s.disposeIntermediateTensorInfo(l), c;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const cQ = {
  kernelName: Fl,
  backendName: "webgl",
  kernelFunc: ({ inputs: n, attrs: t, backend: e }) => {
    const { x: s } = n, { keepDims: r, axis: o } = t, i = e, a = s.shape.length, l = vt(o, s.shape);
    let c = l;
    const u = oe(c, a), h = u != null, d = i.shouldExecuteOnCPU([s]), p = [];
    let f = s;
    if (h) {
      if (d) {
        const x = i.texData.get(f.dataId).values, S = new Array(a);
        for (let N = 0; N < S.length; N++)
          S[N] = s.shape[u[N]];
        const v = yb(x, s.shape, s.dtype, u, S);
        f = i.makeTensorInfo(S, s.dtype);
        const T = i.texData.get(f.dataId);
        T.values = v;
      } else
        f = Np(s, u, i);
      p.push(f), c = pe(c.length, a);
    }
    ze("sum", c, a);
    const [m, g] = ve(f.shape, c);
    let y = m;
    r && (y = de(m, l));
    const b = lQ(f, g, y, i);
    for (const w of p)
      i.disposeIntermediateTensorInfo(w);
    return b;
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function uQ(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { axis: o, keepDims: i } = s, a = r.shape.length, l = vt(o, r.shape);
  let c = l;
  const u = oe(c, a);
  let h = r;
  u != null && (h = Ue({ inputs: { x: r }, backend: e, attrs: { perm: u } }), c = pe(c.length, r.shape.length)), ze("min", c, a);
  const [d, p] = ve(h.shape, c), f = P(p), m = rt({ inputs: { x: h }, backend: e, attrs: { shape: [-1, f] } }), g = vo(m, m.dtype, "min", e);
  let y;
  if (i) {
    const b = de(d, l);
    y = rt({ inputs: { x: g }, backend: e, attrs: { shape: b } });
  } else
    y = rt({ inputs: { x: g }, backend: e, attrs: { shape: d } });
  return e.disposeIntermediateTensorInfo(m), e.disposeIntermediateTensorInfo(g), u != null && e.disposeIntermediateTensorInfo(h), y;
}
const hQ = {
  kernelName: Ol,
  backendName: "webgl",
  kernelFunc: uQ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const dQ = bb + `
  return min(a, b);
`, pQ = `
  vec4 result = vec4(min(a, b));
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  ` + Xc + `
  return result;
`, fQ = We({
  opSnippet: dQ,
  packedOpSnippet: pQ,
  cpuKernelImpl: i9
}), mQ = {
  kernelName: Ti,
  backendName: "webgl",
  kernelFunc: fQ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class gQ {
  constructor(t, e, s) {
    this.variableNames = ["x"], this.outputShape = e.map((u, h) => u[0] + t[h] + u[1]);
    const r = t.length, o = _t(r), i = e.map((u) => u[0]).join(","), a = e.map((u, h) => u[0] + t[h]).join(","), l = ["coords[0]", "coords[1]", "coords[2]", "coords[3]"].slice(0, r), c = s === "reflect" ? 0 : 1;
    if (r === 1) {
      this.userCode = `
        int start = ${i};
        int end = ${a};

        void main() {
          int outC = getOutputCoords();
          if (outC < start) {
            outC = start * 2 - outC - ${c};
          } else if(outC >= end) {
            outC = (end - 1) * 2 - outC + ${c};
          }
          setOutput(getX(outC - start));
        }
      `;
      return;
    }
    this.userCode = `
      ${o} start = ${o}(${i});
      ${o} end = ${o}(${a});

      void main() {
        ${o} outC = getOutputCoords();
        for (int i = 0; i < ${r}; i++) {
          if (outC[i] < start[i]) {
            outC[i] = start[i] * 2 - outC[i] - ${c};
          } else if(outC[i] >= end[i]) {
            outC[i] = (end[i] - 1) * 2 - outC[i] + ${c};
          }
        }
        ${o} coords = outC - start;
        setOutput(getX(${l}));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class yQ {
  constructor(t, e, s) {
    this.variableNames = ["x"], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = e.map((f, m) => f[0] + t[m] + f[1]);
    const r = t.length, o = _t(r), i = e.map((f) => f[0]).join(","), a = e.map((f, m) => f[0] + t[m]).join(","), l = Be("rc", r), c = Be("source", r), u = `${l[r - 1]} < ${this.outputShape[r - 1]}`, h = r === 1 ? "source" : `vec2(${c.slice(-2).join()})`, d = s === "reflect" ? 0 : 1;
    let p = "";
    if (r === 1) {
      const f = `
        ${o} source = rc;
        if (source < start) {
          source = start * 2 - source - ${d};
        } else if (source >= end) {
          source = (end - 1) * 2 - source + ${d};
        }
        source -= start;
      `;
      p = `
        ${o} rc = outputLoc;
        ${f}
        result[0] = getChannel(getX(${c.join()}), ${h});
        ${l[r - 1]} += 1;
        if(${u}) {
          ${f}
          result[1] = getChannel(getX(${c.join()}), ${h});
        }
      `;
    } else {
      const f = `
        ${o} source = rc;
        ${o} lt = ${o}(lessThan(source, start));
        ${o} gte = ${o}(greaterThanEqual(source, end));
        ${o} orig = 1 - (lt + gte);
        source = orig * source +
                lt * (start * 2 - source - ${d}) +
                gte * ((end - 1) * 2 - source + ${d});
        source -= start;
      `;
      p = `
        ${o} rc = outputLoc;
        ${f}
        result[0] = getChannel(getX(${c.join()}), ${h});
        ${l[r - 1]} += 1;
        if(${u}) {
          ${f}
          result[1] = getChannel(getX(${c.join()}), ${h});
        }
        rc = outputLoc;
        ${l[r - 2]} += 1;
        if(${l[r - 2]} < ${this.outputShape[r - 2]}) {
          ${f}
          result[2] = getChannel(getX(${c.join()}), ${h});
          ${l[r - 1]} += 1;
          if(${u}) {
            ${f}
            result[3] = getChannel(getX(${c.join()}), ${h});
          }
        }
      `;
    }
    this.userCode = `
      const ${o} start = ${o}(${i});
      const ${o} end = ${o}(${a});

      void main() {
        ${o} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${p}
        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const bQ = ({ inputs: n, backend: t, attrs: e }) => {
  const { x: s } = n, { paddings: r, mode: o } = e, i = V().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new yQ(s.shape, r, o) : new gQ(s.shape, r, o);
  return t.runWebGLProgram(i, [s], s.dtype);
}, xQ = {
  kernelName: Al,
  backendName: "webgl",
  kernelFunc: bQ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const wQ = `if (b == 0.0) return NAN;
  return mod(a, b);`, IQ = `
  vec4 result = mod(a, b);
  bvec4 isNaN = equal(b, vec4(0.0));
  ` + Xc + `
  return result;
`, SQ = We({
  opSnippet: wQ,
  packedOpSnippet: IQ
}), vQ = {
  kernelName: Ni,
  backendName: "webgl",
  kernelFunc: SQ
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class CQ {
  constructor(t, e, s) {
    this.variableNames = ["probs"], this.customUniforms = [{ name: "seed", type: "float" }], this.outputShape = [t, s], this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];

        float r = random(seed);
        float cdf = 0.0;

        for (int i = 0; i < ${e - 1}; i++) {
          cdf += getProbs(batch, i);

          if (r < cdf) {
            setOutput(float(i));
            return;
          }
        }

        // If no other event happened, last event happened.
        setOutput(float(${e - 1}));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const kQ = `
if (a == b) {
  return 1.0;
};
return a / b;`, TQ = `
  // vec4 one = vec4(equal(a, b));
  // return one + (vec4(1.0) - one) * a / b;
  vec4 result = a / b;
  if(a.x == b.x) {
    result.x = 1.;
  }
  if(a.y == b.y) {
    result.y = 1.;
  }
  if(a.z == b.z) {
    result.z = 1.;
  }
  if(a.w == b.w) {
    result.w = 1.;
  }

  return result;
`, wC = We({ opSnippet: kQ, packedOpSnippet: TQ, checkOutOfBounds: !0 }), NQ = {
  kernelName: hi,
  backendName: "webgl",
  kernelFunc: wC
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const e1 = "return a - b;", IC = We({
  opSnippet: e1,
  packedOpSnippet: e1,
  supportsComplex: !0,
  cpuKernelImpl: k9
}), $Q = {
  kernelName: _i,
  backendName: "webgl",
  kernelFunc: IC
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function SC(n) {
  const { inputs: t, backend: e, attrs: s } = n, { logits: r } = t, { dim: o } = s, i = vt([o], r.shape), a = xC({
    inputs: { x: r },
    backend: e,
    attrs: { reductionIndices: i, keepDims: !1 }
  }), l = de(a.shape, i), c = rt({ inputs: { x: a }, backend: e, attrs: { shape: l } }), u = IC({ inputs: { a: r, b: c }, backend: e }), h = gC({ inputs: { x: u }, backend: e }), d = $p({ inputs: { x: h }, backend: e, attrs: { axis: i, keepDims: !1 } }), p = rt({ inputs: { x: d }, backend: e, attrs: { shape: l } }), f = wC({ inputs: { a: h, b: p }, backend: e });
  return e.disposeIntermediateTensorInfo(a), e.disposeIntermediateTensorInfo(c), e.disposeIntermediateTensorInfo(u), e.disposeIntermediateTensorInfo(h), e.disposeIntermediateTensorInfo(d), e.disposeIntermediateTensorInfo(p), f;
}
const RQ = {
  kernelName: tc,
  backendName: "webgl",
  kernelFunc: SC
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function EQ(n) {
  const { inputs: t, backend: e, attrs: s } = n, { logits: r } = t, { numSamples: o, seed: i, normalized: a } = s, l = a ? r : SC({ inputs: { logits: r }, backend: e, attrs: { dim: r.shape.length - 1 } }), c = l.shape[0], u = l.shape[1], h = new CQ(c, u, o), d = [[i]], p = e.runWebGLProgram(h, [l], "int32", d);
  return a || e.disposeIntermediateTensorInfo(l), p;
}
const LQ = {
  kernelName: Gh,
  backendName: "webgl",
  kernelFunc: EQ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const DQ = Jn + `
  return -x;
`, GQ = `
  vec4 result = -x;
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
function FQ(n) {
  const { inputs: t, backend: e } = n, { x: s } = t;
  if (e.shouldExecuteOnCPU([s])) {
    const o = e.texData.get(s.dataId), [i, a] = l9(o.values, s.shape, s.dtype);
    return e.makeTensorInfo(a, s.dtype, i);
  }
  let r;
  return V().getBool("WEBGL_PACK_UNARY_OPERATIONS") ? r = new _r(s.shape, GQ) : r = new Os(s.shape, DQ), e.runWebGLProgram(r, [s], s.dtype);
}
const OQ = {
  kernelName: zl,
  backendName: "webgl",
  kernelFunc: FQ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const AQ = Kd;
function zQ(n) {
  Tn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");
  const { inputs: t, backend: e, attrs: s } = n, { boxes: r, scores: o } = t, { maxOutputSize: i, iouThreshold: a, scoreThreshold: l } = s, c = e.readSync(r.dataId), u = e.readSync(o.dataId), { selectedIndices: h } = AQ(c, u, i, a, l);
  return e.makeTensorInfo([h.length], "int32", new Int32Array(h));
}
const WQ = {
  kernelName: Fh,
  backendName: "webgl",
  kernelFunc: zQ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const VQ = Zd;
function MQ(n) {
  Tn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");
  const { inputs: t, backend: e, attrs: s } = n, { boxes: r, scores: o } = t, { maxOutputSize: i, iouThreshold: a, scoreThreshold: l, padToMaxOutputSize: c } = s, u = e.readSync(r.dataId), h = e.readSync(o.dataId), { selectedIndices: d, validOutputs: p } = VQ(u, h, i, a, l, c);
  return [
    e.makeTensorInfo([d.length], "int32", new Int32Array(d)),
    e.makeTensorInfo([], "int32", new Int32Array([p]))
  ];
}
const PQ = {
  kernelName: Oh,
  backendName: "webgl",
  kernelFunc: MQ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const XQ = Bd;
function _Q(n) {
  Tn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");
  const { inputs: t, backend: e, attrs: s } = n, { boxes: r, scores: o } = t, { maxOutputSize: i, iouThreshold: a, scoreThreshold: l, softNmsSigma: c } = s, u = e.readSync(r.dataId), h = e.readSync(o.dataId), d = i, p = a, f = l, m = c, { selectedIndices: g, selectedScores: y } = XQ(u, h, d, p, f, m);
  return [
    e.makeTensorInfo([g.length], "int32", new Int32Array(g)),
    e.makeTensorInfo([y.length], "float32", new Float32Array(y))
  ];
}
const KQ = {
  kernelName: Ah,
  backendName: "webgl",
  kernelFunc: _Q
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ZQ {
  constructor(t, e, s, r) {
    this.variableNames = ["indices"], this.outputShape = [t, e], this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int index = round(getIndices(coords.x));
        setOutput(mix(float(${r}), float(${s}),
                      float(index == coords.y)));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const BQ = (n) => {
  const { inputs: t, backend: e, attrs: s } = n, { indices: r } = t, { dtype: o, depth: i, onValue: a, offValue: l } = s, c = P(r.shape), u = new ZQ(c, i, a, l), h = rt({ inputs: { x: r }, backend: e, attrs: { shape: [c] } }), d = e.runWebGLProgram(u, [h], o);
  e.disposeIntermediateTensorInfo(h);
  const p = [...r.shape, i], f = rt({ inputs: { x: d }, backend: e, attrs: { shape: p } });
  return e.disposeIntermediateTensorInfo(d), f;
}, HQ = {
  kernelName: Ml,
  backendName: "webgl",
  kernelFunc: BQ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Qu(n) {
  const { inputs: t, backend: e } = n, { x: s } = t;
  if (s.dtype === "complex64") {
    const r = Kc({ inputs: { input: s }, backend: e }), o = Qu({ inputs: { x: r }, backend: e }), i = Rp({ inputs: { input: s }, backend: e }), a = Qu({ inputs: { x: i }, backend: e }), l = Er({ inputs: { real: o, imag: a }, backend: e });
    return e.disposeIntermediateTensorInfo(r), e.disposeIntermediateTensorInfo(o), e.disposeIntermediateTensorInfo(i), e.disposeIntermediateTensorInfo(a), l;
  } else
    return Zc({
      attrs: {
        shape: s.shape,
        dtype: s.dtype,
        value: s.dtype === "string" ? "" : 0
      },
      backend: e
    });
}
const UQ = {
  kernelName: sc,
  backendName: "webgl",
  kernelFunc: Qu
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function vC(n) {
  const { inputs: t, backend: e } = n, { x: s } = t;
  if (s.dtype === "string")
    throw new Error("onesLike is not supported under string dtype");
  if (s.dtype === "complex64") {
    const r = Kc({ inputs: { input: s }, backend: e }), o = vC({ inputs: { x: r }, backend: e }), i = Rp({ inputs: { input: s }, backend: e }), a = Qu({ inputs: { x: i }, backend: e }), l = Er({ inputs: { real: o, imag: a }, backend: e });
    return e.disposeIntermediateTensorInfo(r), e.disposeIntermediateTensorInfo(o), e.disposeIntermediateTensorInfo(i), e.disposeIntermediateTensorInfo(a), l;
  } else
    return Zc({ attrs: { shape: s.shape, dtype: s.dtype, value: 1 }, backend: e });
}
const YQ = {
  kernelName: Vl,
  backendName: "webgl",
  kernelFunc: vC
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function jQ(n) {
  const { inputs: t, backend: e, attrs: s } = n, { axis: r } = s;
  if (t.length === 1)
    return dm({ inputs: { input: t[0] }, backend: e, attrs: { dim: r } });
  const o = t[0].shape, i = t[0].dtype;
  t.forEach((u) => {
    Oe(o, u.shape, "All tensors passed to stack must have matching shapes"), C(i === u.dtype, () => "All tensors passed to stack must have matching dtypes");
  });
  const a = [], l = t.map((u) => {
    const h = dm({ inputs: { input: u }, backend: e, attrs: { dim: r } });
    return a.push(h), h;
  }), c = lC({ inputs: l, backend: e, attrs: { axis: r } });
  return a.forEach((u) => e.disposeIntermediateTensorInfo(u)), c;
}
const JQ = {
  kernelName: Pl,
  backendName: "webgl",
  kernelFunc: jQ
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class QQ {
  constructor(t, e, s) {
    this.variableNames = ["x"], this.customUniforms = [{ name: "value", type: "float" }], this.outputShape = e.map((c, u) => c[0] + t[u] + c[1]);
    const r = t.length, o = _t(r), i = e.map((c) => c[0]).join(","), a = e.map((c, u) => c[0] + t[u]).join(","), l = ["coords[0]", "coords[1]", "coords[2]", "coords[3]"].slice(0, r);
    if (r === 1) {
      this.userCode = `
        int start = ${i};
        int end = ${a};

        void main() {
          int outC = getOutputCoords();
          if (outC < start || outC >= end) {
            setOutput(value);
          } else {
            setOutput(getX(outC - start));
          }
        }
      `;
      return;
    }
    this.userCode = `
      ${o} start = ${o}(${i});
      ${o} end = ${o}(${a});

      void main() {
        ${o} outC = getOutputCoords();
        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {
          setOutput(value);
        } else {
          ${o} coords = outC - start;
          setOutput(getX(${l}));
        }
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class qQ {
  constructor(t, e, s) {
    this.variableNames = ["x"], this.packedInputs = !0, this.packedOutput = !0, this.customUniforms = [{ name: "value", type: "float" }], this.outputShape = e.map((m, g) => m[0] + t[g] + m[1]);
    const r = t.length, o = _t(r), i = e.map((m) => m[0]).join(","), a = e.map((m, g) => m[0] + t[g]).join(","), l = Be("rc", r), c = Be("source", r), u = `${l[r - 1]} < ${this.outputShape[r - 1]}`, h = r === 1 ? "source" : `vec2(${c.slice(-2).join()})`, d = [
      `${o} rc = outputLoc;`,
      `${l[r - 1]} += 1;
       if(${u}) {
      `,
      r === 1 ? "" : `}
       rc = outputLoc;
       ${l[r - 2]} += 1;
       if(${l[r - 2]} < ${this.outputShape[r - 2]}) {`,
      r === 1 ? "" : `  ${l[r - 1]} += 1;
         if(${u}) {`
    ], p = r === 1 ? "rc < start || rc >= end" : "any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";
    let f = "";
    for (let m = 0, g = r === 1 ? 2 : 4; m < g; m++)
      f += `
        ${d[m]}
        if (${p}) {
          result[${m}] = float(value);
        } else {
          ${o} source = rc - start;
          result[${m}] = getChannel(getX(${c.join()}), ${h});
        }
      `;
    f += r === 1 ? "} " : "}}", this.userCode = `
      const ${o} start = ${o}(${i});
      const ${o} end = ${o}(${a});

      void main() {
        ${o} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${f}
        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const CC = (n) => {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { paddings: o, constantValue: i } = s;
  if (P(r.shape) === 0) {
    const c = o.map((u, h) => u[0] + r.shape[h] + u[1]);
    return Zc({
      backend: e,
      attrs: { shape: c, value: i, dtype: r.dtype }
    });
  }
  const a = V().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new qQ(r.shape, o, i) : new QQ(r.shape, o, i), l = [[i]];
  return e.runWebGLProgram(a, [r], r.dtype, l);
}, t7 = {
  kernelName: Xl,
  backendName: "webgl",
  kernelFunc: CC
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const e7 = `
  if(a < 0.0 && floor(b) < b){
    return NAN;
  }
  if (b == 0.0) {
    return 1.0;
  }
  return (round(mod(b, 2.0)) != 1) ?
      pow(abs(a), b) : sign(a) * pow(abs(a), b);
`, n7 = `
  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.
  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));
  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);
  vec4 result = multiplier * pow(abs(a), b);

  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS
  bvec4 isExpZero = equal(b, vec4(0.0));
  result.r = isExpZero.r ? 1.0 : result.r;
  result.g = isExpZero.g ? 1.0 : result.g;
  result.b = isExpZero.b ? 1.0 : result.b;
  result.a = isExpZero.a ? 1.0 : result.a;

  bvec4 isNaN1 = lessThan(a, vec4(0.0));
  bvec4 isNaN2 = lessThan(floor(b), b);
  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);
  ` + Xc + `
  return result;
`, s7 = We({ opSnippet: e7, packedOpSnippet: n7 }), r7 = {
  kernelName: Ri,
  backendName: "webgl",
  kernelFunc: s7
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function o7(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { axis: o, keepDims: i } = s, a = r.shape.length, l = [], c = vt(o, r.shape);
  let u = c;
  const h = oe(u, a);
  let d = r;
  h != null && (d = Ue({ inputs: { x: r }, backend: e, attrs: { perm: h } }), u = pe(u.length, a), l.push(d)), ze("prod", u, a);
  let p;
  if (e.shouldExecuteOnCPU([d])) {
    const f = e.texData.get(d.dataId).values, { outVals: m, outShape: g, outDtype: y } = u9(d.shape, d.dtype, f, u);
    p = e.makeTensorInfo(g, y, m);
  } else {
    const [f, m] = ve(d.shape, u), g = P(m), y = rt({ inputs: { x: d }, backend: e, attrs: { shape: [-1, g] } }), b = od(r.dtype), w = vo(y, b, "prod", e);
    p = rt({ inputs: { x: w }, backend: e, attrs: { shape: f } }), l.push(y), l.push(w);
  }
  if (i) {
    l.push(p);
    const f = de(p.shape, c);
    p = rt({ inputs: { x: p }, backend: e, attrs: { shape: f } });
  }
  return l.forEach((f) => e.disposeIntermediateTensorInfo(f)), p;
}
const i7 = {
  kernelName: Kl,
  backendName: "webgl",
  kernelFunc: o7
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function a7(n) {
  const { inputs: t, backend: e, attrs: s } = n, { paramsNestedSplits: r, paramsDenseValues: o, indices: i } = t, { outputRaggedRank: a } = s, l = r.map((y) => e.readSync(y.dataId)), c = r.map((y) => y.shape), u = e.readSync(o.dataId), h = e.readSync(i.dataId), [d, p, f] = h9(l, c, u, o.shape, o.dtype, h, i.shape, a), m = d.map((y) => e.makeTensorInfo([y.length], "int32", y)), g = e.makeTensorInfo(f, o.dtype, p);
  return m.concat([g]);
}
const l7 = {
  kernelName: zh,
  backendName: "webgl",
  kernelFunc: a7
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function c7(n) {
  const { inputs: t, backend: e, attrs: s } = n, { shape: r, values: o, defaultValue: i, rowPartitionTensors: a } = t, { rowPartitionTypes: l } = s, c = e.readSync(r.dataId), u = e.readSync(o.dataId), h = e.readSync(i.dataId), d = a.map((g) => e.readSync(g.dataId)), p = a.map((g) => g.shape), [f, m] = d9(c, r.shape, u, o.shape, o.dtype, h, i.shape, d, p, l);
  return e.makeTensorInfo(f, o.dtype, m);
}
const u7 = {
  kernelName: Wh,
  backendName: "webgl",
  kernelFunc: c7
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const kC = (n) => {
  const { backend: t, attrs: e } = n, { start: s, stop: r, step: o, dtype: i } = e, a = p9(s, r, o, i);
  return t.makeTensorInfo([a.length], i, a);
}, h7 = {
  kernelName: Vh,
  backendName: "webgl",
  kernelFunc: kC
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const d7 = "return 1.0 / x;", p7 = Dt({ opSnippet: d7 }), f7 = {
  kernelName: Ei,
  backendName: "webgl",
  kernelFunc: p7
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const m7 = Jn + `
  return (x < 0.0) ? 0.0 : x;
`, g7 = `
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, y7 = Dt({ opSnippet: m7, packedOpSnippet: g7 }), b7 = {
  kernelName: Li,
  backendName: "webgl",
  kernelFunc: y7
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const x7 = Jn + `
  return (x < 0.0) ? 0.0 : min(6.0, x);
`, w7 = `
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, I7 = Dt({ opSnippet: x7, packedOpSnippet: w7 }), S7 = {
  kernelName: Di,
  backendName: "webgl",
  kernelFunc: I7
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class v7 {
  constructor(t, e, s, r, o) {
    this.variableNames = ["A"], this.outputShape = [];
    const [i, a, l, c] = t;
    this.outputShape = [i, e, s, c];
    const u = [
      r && e > 1 ? a - 1 : a,
      r && s > 1 ? l - 1 : l
    ], h = [
      r && e > 1 ? e - 1 : e,
      r && s > 1 ? s - 1 : s
    ];
    let d;
    o ? d = "(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)" : d = "vec2(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${u[0] / h[0]},
          ${u[1] / h[1]});
      const vec2 inputShapeRC = vec2(${a}.0, ${l}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${d};

        // Compute the four integer indices.
        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));
        ivec2 sourceCeilRC = ivec2(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);
        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);
        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);
        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);

        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);

        float top = topLeft + (topRight - topLeft) * fracRC.y;
        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;
        float newValue = top + (bottom - top) * fracRC.x;

        setOutput(newValue);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class C7 {
  constructor(t, e, s, r, o) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = [];
    const [i, a, l, c] = t;
    this.outputShape = [i, e, s, c];
    const u = [
      r && e > 1 ? a - 1 : a,
      r && s > 1 ? l - 1 : l
    ], h = [
      r && e > 1 ? e - 1 : e,
      r && s > 1 ? s - 1 : s
    ];
    let d;
    o ? d = "(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)" : d = "vec3(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${u[0] / h[0]},
          ${u[1] / h[1]},
          ${u[1] / h[1]});
      const vec3 inputShapeRC = vec3(${a}.0, ${l}.0,
                                     ${l}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${d};

        // Compute the four integer indices.
        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));
        ivec3 sourceCeilRC = ivec3(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${c - 1};
        bool hasNextRow = coords.z < ${s - 1};

        // In parallel, construct four corners for all four components in
        // packed 2x2 cell.
        vec4 topLeft = vec4(
          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 bottomLeft = vec4(
          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 topRight = vec4(
          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec4 bottomRight = vec4(
          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);

        vec4 top = mix(topLeft, topRight, fracRC.yyzz);
        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);
        vec4 newValue = mix(top, bottom, fracRC.x);

        setOutput(newValue);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function k7(n) {
  const { inputs: t, backend: e, attrs: s } = n, { images: r } = t, { alignCorners: o, halfPixelCenters: i, size: a } = s, [l, c] = a, u = V().getBool("WEBGL_PACK_IMAGE_OPERATIONS") ? new C7(r.shape, l, c, o, i) : new v7(r.shape, l, c, o, i);
  return e.runWebGLProgram(u, [r], "float32");
}
const T7 = {
  kernelName: Hl,
  backendName: "webgl",
  kernelFunc: k7
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class N7 {
  constructor(t, e, s) {
    this.variableNames = ["dy"], this.outputShape = [], this.outputShape = e;
    const [, r, o] = e, [, i, a] = t, l = [
      s && i > 1 ? r - 1 : r,
      s && a > 1 ? o - 1 : o
    ], c = [
      s && i > 1 ? i - 1 : i,
      s && a > 1 ? a - 1 : a
    ], u = l[0] / c[0], h = l[1] / c[1], d = 1 / u, p = 1 / h, f = Math.ceil(d) * 2 + 2, m = Math.ceil(p) * 2 + 2;
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${u});
        const float widthScale = float(${h});

        const float invHeightScale = float(${d});
        const float invWidthScale = float(${p});

        const int winHeight = int(${f});
        const int winWidth = int(${m});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(startRLerp - float(winHeight / 2));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(startCLerp - float(winWidth / 2));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${i}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${a}) {
              continue;
            }

            float dxR = float(dyR) * heightScale;
            int topDxRIndex = int(floor(dxR));
            int bottomDxRIndex = int(min(ceil(dxR), ${r - 1}.0));
            float dxRLerp = dxR - float(topDxRIndex);
            float inverseDxRLerp = 1.0 - dxRLerp;

            float dxC = float(dyC) * widthScale;
            int leftDxCIndex = int(floor(dxC));
            int rightDxCIndex = int(min(ceil(dxC), ${o - 1}.0));
            float dxCLerp = dxC - float(leftDxCIndex);
            float inverseDxCLerp = 1.0 - dxCLerp;

            if (r == topDxRIndex && c == leftDxCIndex) {
              // topLeft
              accumulator +=
                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;
            }

            if (r == topDxRIndex && c == rightDxCIndex) {
              // topRight
              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;
            }

            if (r == bottomDxRIndex && c == leftDxCIndex) {
              // bottomLeft
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;
            }

            if (r == bottomDxRIndex && c == rightDxCIndex) {
              // bottomRight
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $7(n) {
  const { inputs: t, backend: e, attrs: s } = n, { images: r, dy: o } = t, { alignCorners: i } = s, a = new N7(o.shape, r.shape, i);
  return e.runWebGLProgram(a, [o], o.dtype);
}
const R7 = {
  kernelName: Xh,
  backendName: "webgl",
  kernelFunc: $7
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class E7 {
  constructor(t, e, s, r, o) {
    this.variableNames = ["A"], this.outputShape = [];
    const [i, a, l, c] = t;
    this.outputShape = [i, e, s, c];
    const u = [
      r && e > 1 ? a - 1 : a,
      r && s > 1 ? l - 1 : l
    ], h = [
      r && e > 1 ? e - 1 : e,
      r && s > 1 ? s - 1 : s
    ], d = r ? "0.5" : "0.0";
    let p;
    o ? p = "max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))" : p = "vec2(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${u[0] / h[0]},
          ${u[1] / h[1]});
      const vec2 inputShapeRC = vec2(${a}.0, ${l}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${p};

        // Compute the coordinators of nearest neighbor point.
        ivec2 sourceNearestRC = ivec2(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${d})));
        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);

        setOutput(newValue);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class L7 {
  constructor(t, e, s, r, o) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = [];
    const [i, a, l, c] = t;
    this.outputShape = [i, e, s, c];
    const u = [
      r && e > 1 ? a - 1 : a,
      r && s > 1 ? l - 1 : l
    ], h = [
      r && e > 1 ? e - 1 : e,
      r && s > 1 ? s - 1 : s
    ], d = r ? "0.5" : "0.0";
    let p;
    o ? p = "max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))" : p = "vec3(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${u[0] / h[0]},
          ${u[1] / h[1]},
          ${u[1] / h[1]});
      const vec3 inputShapeRC = vec3(${a}.0, ${l}.0,
                                     ${l}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${p};

        // Compute the coordinators of nearest neighbor point.
        ivec3 sourceNearestRC = ivec3(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${d})));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${c - 1};
        bool hasNextRow = coords.z < ${s - 1};

        vec4 newValue = vec4(
          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),
          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);

        setOutput(newValue);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function D7(n) {
  const { inputs: t, backend: e, attrs: s } = n, { images: r } = t, { alignCorners: o, halfPixelCenters: i, size: a } = s, [l, c] = a, u = V().getBool("WEBGL_PACK_IMAGE_OPERATIONS") ? new L7(r.shape, l, c, o, i) : new E7(r.shape, l, c, o, i);
  return e.runWebGLProgram(u, [r], r.dtype);
}
const G7 = {
  kernelName: Bl,
  backendName: "webgl",
  kernelFunc: D7
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class F7 {
  constructor(t, e, s) {
    this.variableNames = ["dy"], this.outputShape = [], this.outputShape = e;
    const [, r, o] = e, [, i, a] = t, l = [
      s && i > 1 ? r - 1 : r,
      s && a > 1 ? o - 1 : o
    ], c = [
      s && i > 1 ? i - 1 : i,
      s && a > 1 ? a - 1 : a
    ], u = l[0] / c[0], h = l[1] / c[1], d = 1 / u, p = 1 / h, f = Math.ceil(d) * 2 + 2, m = Math.ceil(p) * 2 + 2;
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${u});
        const float widthScale = float(${h});

        const float invHeightScale = float(${d});
        const float invWidthScale = float(${p});

        const int winHeight = int(${f});
        const int winWidth = int(${m});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(floor(startRLerp - float(winHeight / 2)));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(floor(startCLerp - float(winWidth / 2)));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${i}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${a}) {
              continue;
            }

            float sourceFracRow =
              float(${l[0]}) *
                (float(dyR) / float(${c[0]}));

            float sourceFracCol =
                float(${l[1]}) *
                  (float(dyC) / float(${c[1]}));

            int sourceNearestRow = int(min(
                float(int(${r}) - 1),
                ${s} ? float(round(sourceFracRow)) :
                                  float(floor(sourceFracRow))));

            int sourceNearestCol = int(min(
                float(int(${o}) - 1),
                ${s} ? float(round(sourceFracCol)) :
                                  float(floor(sourceFracCol))));

            if (r == sourceNearestRow && c == sourceNearestCol) {
              accumulator += getDy(b, dyR, dyC, d);
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function O7(n) {
  const { inputs: t, backend: e, attrs: s } = n, { images: r, dy: o } = t, { alignCorners: i } = s, a = new F7(o.shape, r.shape, i);
  return e.runWebGLProgram(a, [o], o.dtype);
}
const A7 = {
  kernelName: Ph,
  backendName: "webgl",
  kernelFunc: O7
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class z7 {
  constructor(t, e) {
    this.variableNames = ["x"];
    const s = t.length;
    if (s > 4)
      throw new Error(`WebGL backend: Reverse of rank-${s} tensor is not yet supported`);
    if (this.outputShape = t, s === 1) {
      this.userCode = `
        void main() {
          int coord = getOutputCoords();
          setOutput(getX(${t[0]} - coord - 1));
        }
      `;
      return;
    }
    const r = (a) => e.indexOf(a) !== -1 && t[a] !== 1 ? `${t[a]} - coords[${a}] - 1` : `coords[${a}]`, o = t.map((a, l) => r(l)).join(","), i = _t(s);
    this.userCode = `
      void main() {
        ${i} coords = getOutputCoords();
        setOutput(getX(${o}));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class W7 {
  constructor(t, e) {
    this.variableNames = ["x"], this.packedInputs = !0, this.packedOutput = !0;
    const s = t.length;
    if (s > 4)
      throw new Error(`WebGL backend: Reverse of rank-${s} tensor is not yet supported`);
    this.outputShape = t;
    const r = Be("rc", s), o = `${r[s - 1]} + 1 < ${this.outputShape[s - 1]}`, i = `${r[s - 2]} + 1 < ${this.outputShape[s - 2]}`, a = _t(s);
    s === 1 ? this.userCode = `
        void main(){
          int rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = getChannel(getX(${t[0]} - rc - 1),
            ${t[0]} - rc - 1);
          if(${o}){
              result.g = getChannel(getX(${t[0]} - (rc  + 1) - 1),
                ${t[0]} - (rc  + 1) - 1);
          }
          setOutput(result);
        }
      ` : this.userCode = `
        void main() {
          ${a} rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = ${l(r.slice())};
          if(${o}){
            result.g = ${c(r.slice())};
          }
          if(${i}) {
            result.b = ${u(r.slice())};
            if(${o}) {
              result.a = ${h(r.slice())};
            }
          }
          setOutput(result);
        }
    `;
    function l(f) {
      return d(f);
    }
    function c(f) {
      return f[s - 1] = "(" + f[s - 1] + " + 1)", d(f);
    }
    function u(f) {
      return f[s - 2] = "(" + f[s - 2] + " + 1)", d(f);
    }
    function h(f) {
      return f[s - 1] = "(" + f[s - 1] + " + 1)", f[s - 2] = "(" + f[s - 2] + " + 1)", d(f);
    }
    function d(f) {
      const m = t.map((b, w) => p(w, f)), g = m.join(","), y = m.slice(-2).join(",");
      return `getChannel(getX(${g}), vec2(${y}))`;
    }
    function p(f, m) {
      return e.indexOf(f) !== -1 && t[f] !== 1 ? `${t[f]} - ${m[f]} - 1` : `${m[f]}`;
    }
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function V7(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { dims: o } = s, i = r.shape.length, a = vt(o, r.shape);
  if (i === 0)
    return In({ inputs: { x: r }, backend: e });
  const l = V().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new W7(r.shape, a) : new z7(r.shape, a);
  return e.runWebGLProgram(l, [r], r.dtype);
}
const M7 = {
  kernelName: Ul,
  backendName: "webgl",
  kernelFunc: V7
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class P7 {
  constructor(t, e) {
    this.variableNames = ["Image"], this.outputShape = [], this.customUniforms = [{ name: "params", type: "vec4" }];
    const s = t[1], r = t[2];
    this.outputShape = t;
    let o = "";
    typeof e == "number" ? o = `float outputValue = ${e.toFixed(2)};` : o = `
        vec3 fill = vec3(${e.join(",")});
        float outputValue = fill[coords[3]];`, this.userCode = `
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];
          int y = coords[1];
          float coordXFloat = (float(x) - params[0]) * params[3] -
            (float(y) - params[1]) * params[2];
          float coordYFloat = (float(x) - params[0]) * params[2] +
            (float(y) - params[1]) * params[3];
          int coordX = int(round(coordXFloat + params[0]));
          int coordY = int(round(coordYFloat + params[1]));
          ${o}
          if(coordX >= 0 && coordX < ${r} && coordY >= 0 && coordY < ${s}) {
            outputValue = getImage(coords[0], coordY, coordX, coords[3]);
          }
          setOutput(outputValue);
        }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const X7 = {
  kernelName: rd,
  backendName: "webgl",
  kernelFunc: ({ inputs: n, attrs: t, backend: e }) => {
    const { image: s } = n, { radians: r, fillValue: o, center: i } = t, a = e, l = new P7(s.shape, o), [c, u] = ey(i, s.shape[1], s.shape[2]), h = [[c, u, Math.sin(r), Math.cos(r)]];
    return a.runWebGLProgram(l, [s], s.dtype, h);
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const _7 = `
  // OpenGL ES does not support round function.
  // The algorithm is based on banker's rounding.
  float base = floor(x);
  if ((x - base) < 0.5) {
    return floor(x);
  } else if ((x - base) > 0.5) {
    return ceil(x);
  } else {
    if (mod(base, 2.0) == 0.0) {
      return base;
    } else {
      return base + 1.0;
    }
  }
`, K7 = Dt({ opSnippet: _7 }), Z7 = {
  kernelName: Gi,
  backendName: "webgl",
  kernelFunc: K7
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const B7 = "return inversesqrt(x);", H7 = Dt({ opSnippet: B7, cpuKernelImpl: f9 }), U7 = {
  kernelName: Fi,
  backendName: "webgl",
  kernelFunc: H7
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class TC {
  constructor(t, e, s, r, o, i, a = !0) {
    this.variableNames = ["updates", "indices", "defaultValue"], this.outputShape = i;
    const l = _t(o.length), c = _t(i.length);
    let u = "";
    s === 1 ? u = "i" : s === 2 && (u = "i, j");
    const h = `getIndices(${u})`;
    let d = "";
    r === 1 ? d = "i" : r === 2 && (d = "i, coords[1]");
    const p = `getUpdates(${d})`, f = e > 1 ? "strides[j]" : "strides";
    this.userCode = `
        ${l} strides = ${l}(${o});

        void main() {
          ${c} coords = getOutputCoords();
          float sum = 0.0;
          bool found = false;
          for (int i = 0; i < ${t}; i++) {
            int flattenedIndex = 0;
            for (int j = 0; j < ${e}; j++) {
              int index = round(${h});
              flattenedIndex += index * ${f};
            }
            if (flattenedIndex == coords[0]) {
              sum += ${p};
              found = true;
            }
          }
          setOutput(mix(getDefaultValue(), sum, float(found)));
        }
      `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Y7(n) {
  const { inputs: t, backend: e, attrs: s } = n, { indices: r, updates: o } = t, { shape: i } = s, { sliceRank: a, numUpdates: l, sliceSize: c, strides: u, outputSize: h } = Ui(o, r, i), d = [h / c, c];
  if (h === 0)
    return e.makeTensorInfo(i, r.dtype);
  const p = rt({ inputs: { x: r }, backend: e, attrs: { shape: [l, a] } }), f = rt({ inputs: { x: o }, backend: e, attrs: { shape: [l, c] } }), m = e.makeTensorInfo([], "float32", new Float32Array([0])), g = new TC(l, a, p.shape.length, f.shape.length, u, d), y = e.runWebGLProgram(g, [f, p, m], f.dtype), b = rt({ inputs: { x: y }, backend: e, attrs: { shape: i } });
  return e.disposeIntermediateTensorInfo(p), e.disposeIntermediateTensorInfo(f), e.disposeIntermediateTensorInfo(y), e.disposeIntermediateTensorInfo(m), b;
}
const j7 = {
  kernelName: _h,
  backendName: "webgl",
  kernelFunc: Y7
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class J7 {
  constructor(t, e, s, r) {
    this.variableNames = ["sortedSequence", "values"], this.customUniforms = [{ name: "numInputs", type: "int" }], this.outputShape = [t, s];
    const o = "while (left < right) {", i = `for (int i = 0; i < ${Math.ceil(Math.log2(e + 1))}; ++i) { if (left >= right) break;`, a = V().getNumber("WEBGL_VERSION") === 2 ? o : i, l = r === "left" ? "<" : "<=";
    this.userCode = `
       int findBound(int batch, float value) {
         int left = 0;
         int right = numInputs;
         int mid;
         ${a}
           mid = (left + right) / 2;
           if (getSortedSequence(batch, mid) ${l} value) {
             left = mid + 1;
           } else {
             right = mid;
           }
         }
         return right;
       }

       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int valueIndex = coords[1];

         float value = getValues(batch, valueIndex);

         setOutput(float(findBound(batch, value)));
       }
     `;
  }
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Q7(n) {
  const { inputs: t, backend: e, attrs: s } = n, { sortedSequence: r, values: o } = t, { side: i } = s, a = new J7(r.shape[0], r.shape[1], o.shape[1], i), l = [[r.shape[1]]];
  return e.runWebGLProgram(a, [r, o], "int32", l);
}
const q7 = {
  kernelName: Kh,
  backendName: "webgl",
  kernelFunc: Q7
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class t8 {
  constructor(t, e, s) {
    this.variableNames = ["c", "a", "b"], this.outputShape = e;
    let r, o;
    if (s > 4)
      throw Error(`Where for rank ${s} is not yet supported`);
    if (s === 1)
      o = "resRC", r = "resRC";
    else {
      const a = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"], l = [], c = [];
      for (let u = 0; u < e.length; u++)
        c.push(`${a[u]}`), u < t && l.push(`${a[u]}`);
      r = l.join(), o = c.join();
    }
    const i = _t(s);
    this.userCode = `
      void main() {
        ${i} resRC = getOutputCoords();
        float cVal = getC(${r});
        if (cVal >= 1.0) {
          setOutput(getA(${o}));
        } else {
          setOutput(getB(${o}));
        }
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function e8(n) {
  const { inputs: t, backend: e } = n, { condition: s, t: r, e: o } = t, i = new t8(s.shape.length, r.shape, r.shape.length);
  return e.runWebGLProgram(i, [s, r, o], He(r.dtype, o.dtype));
}
const n8 = {
  kernelName: Yl,
  backendName: "webgl",
  kernelFunc: e8
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const s8 = `
  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.
  // see: https://arxiv.org/abs/1706.02515
  float scaleAlpha = ${tp};
  float scale = ${ep};
  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);
`, r8 = Dt({ opSnippet: s8 }), o8 = {
  kernelName: Oi,
  backendName: "webgl",
  kernelFunc: r8
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const i8 = ba + `
  return 1.0 / (1.0 + exp(-1.0 * x));
`, a8 = `
  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, l8 = Dt({
  opSnippet: i8,
  packedOpSnippet: a8,
  cpuKernelImpl: g9
}), c8 = {
  kernelName: Vi,
  backendName: "webgl",
  kernelFunc: l8
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const u8 = `
  if (isnan(x)) { return 0.0; }
  return sign(x);
`, h8 = Dt({ opSnippet: u8 }), d8 = {
  kernelName: Wi,
  backendName: "webgl",
  kernelFunc: h8
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const p8 = ba + `
  return sin(x);
`, f8 = Dt({ opSnippet: p8 }), m8 = {
  kernelName: Ai,
  backendName: "webgl",
  kernelFunc: f8
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const g8 = `
  float e2x = exp(x);
  return (e2x - 1.0 / e2x) / 2.0;
`, y8 = Dt({ opSnippet: g8 }), b8 = {
  kernelName: zi,
  backendName: "webgl",
  kernelFunc: y8
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const x8 = `
  float epsilon = 1.1920928955078125e-7;
  float threshold = log(epsilon) + 2.0;

  bool too_large = x > -threshold;
  bool too_small = x < threshold;

  float result;
  float exp_x = exp(x);

  if (too_large){
    result = x;
  }
  else if (too_small){
    result = exp_x;
  }
  else{
    result = log(exp_x + 1.0);
  }
  return result;
`, w8 = Dt({ opSnippet: x8 }), I8 = {
  kernelName: Mi,
  backendName: "webgl",
  kernelFunc: w8
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const S8 = (n) => {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { blockShape: o, paddings: i } = s;
  C(r.shape.length <= 4, () => "spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");
  const a = o.reduce((y, b) => y * b), l = [[0, 0]];
  l.push(...i);
  for (let y = 1 + o.length; y < r.shape.length; ++y)
    l.push([0, 0]);
  const c = [], u = CC({
    inputs: { x: r },
    backend: e,
    attrs: { paddings: l, constantValue: 0 }
  }), h = kc(u.shape, o, a, !1), d = Tc(h.length, o.length, !1), p = Nc(u.shape, o, a, !1), f = rt({ inputs: { x: u }, backend: e, attrs: { shape: h } }), m = Ue({
    inputs: { x: f },
    backend: e,
    attrs: { perm: d }
  }), g = rt({ inputs: { x: m }, backend: e, attrs: { shape: p } });
  return c.push(u), c.push(f), c.push(m), c.forEach((y) => e.disposeIntermediateTensorInfo(y)), g;
}, v8 = {
  kernelName: Ql,
  backendName: "webgl",
  kernelFunc: S8
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function C8(n) {
  const { inputs: t, backend: e } = n, { indices: s, values: r, denseShape: o, defaultValue: i } = t;
  if (o.shape.length !== 1)
    throw new Error(`Dense shape must be a vector, saw:
         ${o.shape}`);
  if (s.shape.length !== 2)
    throw new Error(`Indices must be a matrix, saw:
         ${s.shape}`);
  if (r.shape.length !== 1)
    throw new Error(`Values must be a vector, saw:
         ${r.shape}`);
  if (i.shape.length !== 0)
    throw new Error(`Default value must be a scalar, saw:
        ${i.shape}`);
  const a = e.readSync(s.dataId), l = e.readSync(r.dataId), c = e.readSync(o.dataId), u = e.readSync(i.dataId)[0], [h, d, p, f, m] = b9(a, s.shape, s.dtype, l, r.dtype, c, u);
  return [
    e.makeTensorInfo(d, s.dtype, h),
    e.makeTensorInfo([d[0]], r.dtype, p),
    e.makeTensorInfo([f.length], "bool", new Uint8Array(f.map((g) => Number(g)))),
    e.makeTensorInfo([m.length], s.dtype, new Int32Array(m))
  ];
}
const k8 = {
  kernelName: Zh,
  backendName: "webgl",
  kernelFunc: C8
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function T8(n) {
  const { inputs: t, backend: e } = n, { inputIndices: s, inputShape: r, newShape: o } = t;
  if (s.shape.length !== 2)
    throw new Error(`Input indices should be a matrix but received shape ${s.shape}`);
  if (r.shape.length !== 1)
    throw new Error(`Input shape should be a vector but received shape ${r.shape}`);
  if (o.shape.length !== 1)
    throw new Error(`Target shape should be a vector but received shape ${o.shape}`);
  const i = Array.from(e.readSync(r.dataId)), a = e.readSync(s.dataId), l = Array.from(e.readSync(o.dataId)), [c, u, h] = x9(a, s.shape, s.dtype, i, l);
  return [
    e.makeTensorInfo(u, s.dtype, c),
    e.makeTensorInfo([h.length], o.dtype, new Int32Array(h))
  ];
}
const N8 = {
  kernelName: Bh,
  backendName: "webgl",
  kernelFunc: T8
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $8(n) {
  const { inputs: t, backend: e } = n, { data: s, indices: r, segmentIds: o } = t;
  if (s.shape.length < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (r.shape.length !== 1)
    throw new Error(`Indices should be a vector but received shape
              ${r.shape}`);
  if (o.shape.length !== 1)
    throw new Error(`Segment ids should be a vector but received shape
              ${o.shape}`);
  const i = e.readSync(s.dataId), a = e.readSync(r.dataId), l = e.readSync(o.dataId), [c, u] = Yv(i, s.shape, s.dtype, a, l, !0);
  return e.makeTensorInfo(u, s.dtype, c);
}
const R8 = {
  kernelName: Hh,
  backendName: "webgl",
  kernelFunc: $8
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function E8(n) {
  const { inputs: t, backend: e } = n, { data: s, indices: r, segmentIds: o } = t;
  if (s.shape.length < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (r.shape.length !== 1)
    throw new Error(`Indices should be a vector but received shape
             ${r.shape}`);
  if (o.shape.length !== 1)
    throw new Error(`Segment ids should be a vector but received shape
             ${o.shape}`);
  const i = e.readSync(s.dataId), a = e.readSync(r.dataId), l = e.readSync(o.dataId), [c, u] = Yv(i, s.shape, s.dtype, a, l);
  return e.makeTensorInfo(u, s.dtype, c);
}
const L8 = {
  kernelName: Uh,
  backendName: "webgl",
  kernelFunc: E8
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function D8(n) {
  const { inputs: t, backend: e, attrs: s } = n, { sparseIndices: r, sparseValues: o, defaultValue: i } = t, { outputShape: a } = s, { sliceRank: l, numUpdates: c, sliceSize: u, strides: h, outputSize: d } = Ui(o, r, a), p = !1;
  if (o.dtype === "string") {
    const y = e.bufferSync(r), b = e.bufferSync(o), w = Ws(e.readSync(i.dataId)[0]), x = m9(y, b, a, d, u, c, l, h, w, p);
    return e.makeTensorInfo(a, x.dtype, x.values);
  }
  const f = new TC(c, l, r.shape.length, o.shape.length, h, [d, 1], p), m = e.runWebGLProgram(f, [o, r, i], o.dtype), g = rt({ inputs: { x: m }, backend: e, attrs: { shape: a } });
  return e.disposeIntermediateTensorInfo(m), g;
}
const G8 = {
  kernelName: Yh,
  backendName: "webgl",
  kernelFunc: D8
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function F8(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { numOrSizeSplits: o, axis: i } = s, a = vt(i, r.shape)[0], l = gy(r, o, a), c = r.shape.length, u = new Array(c).fill(0), h = r.shape.slice();
  return l.map((d) => {
    const p = [...h];
    p[a] = d;
    const f = xa({ inputs: { x: r }, backend: e, attrs: { begin: u, size: p } });
    return u[a] += d, f;
  });
}
const O8 = {
  kernelName: ql,
  backendName: "webgl",
  kernelFunc: F8
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const n1 = "return sqrt(x);", A8 = Dt({ opSnippet: n1, packedOpSnippet: n1, cpuKernelImpl: w9 }), z8 = {
  kernelName: Pi,
  backendName: "webgl",
  kernelFunc: A8
};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const W8 = "return x * x;", V8 = Dt({ opSnippet: W8 }), M8 = {
  kernelName: jh,
  backendName: "webgl",
  kernelFunc: V8
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const s1 = "return (a - b) * (a - b);", P8 = We({ opSnippet: s1, packedOpSnippet: s1 }), X8 = {
  kernelName: Xi,
  backendName: "webgl",
  kernelFunc: P8
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _8({ inputs: n, attrs: t, backend: e }) {
  const { x: s } = n, r = Jn + `
    return x > 0.0 ? 1.0 : float(${t.alpha});
  `, o = new Os(s.shape, r);
  return e.runWebGLProgram(o, [s], s.dtype);
}
const K8 = {
  kernelName: Hi,
  backendName: "webgl",
  kernelFunc: _8
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Z8 {
  constructor(t, e, s) {
    this.variableNames = ["x"], this.outputShape = s;
    const r = s.length, o = _t(s.length), i = _t(s.length);
    let a = "";
    if (r === 1)
      a = "coords * strides + begin";
    else {
      let l = 0;
      a = s.map((c, u) => (l++, s.length === 1 ? `coords * strides[${u}] + begin[${u}]` : `coords[${l - 1}] * strides[${u}] + begin[${u}]`)).join(",");
    }
    this.userCode = `
      ${o} begin = ${o}(${t});
      ${o} strides = ${o}(${e});

      void main() {
        ${i} coords = getOutputCoords();
        setOutput(getX(${a}));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function B8(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { begin: o, end: i, strides: a, beginMask: l, endMask: c, ellipsisMask: u, newAxisMask: h, shrinkAxisMask: d } = s, { finalShapeSparse: p, finalShape: f, isIdentity: m, sliceDim0: g, isSimpleSlice: y, begin: b, end: w, strides: x } = Zm(r.shape, o, i, a, l, c, u, h, d);
  let S;
  if (m)
    S = rt({ inputs: { x: r }, backend: e, attrs: { shape: f } });
  else if (g || y) {
    C(r.shape.length >= 1, () => `Input must have rank at least 1, got: ${r.shape.length}`);
    const T = Km(b, w, x), N = xa({ inputs: { x: r }, backend: e, attrs: { begin: b, size: T } });
    S = rt({ inputs: { x: N }, backend: e, attrs: { shape: f } }), e.disposeIntermediateTensorInfo(N);
  } else if (e.shouldExecuteOnCPU([r])) {
    const N = e.readSync(r.dataId), $ = gt(r.shape, r.dtype, N), R = I9(p, $, x, b);
    S = e.makeTensorInfo(f, r.dtype, R.values);
  } else {
    const N = new Z8(b, x, p);
    S = e.runWebGLProgram(N, [r], r.dtype);
  }
  const v = rt({ inputs: { x: S }, backend: e, attrs: { shape: f } });
  return e.disposeIntermediateTensorInfo(S), v;
}
const H8 = {
  kernelName: Jh,
  backendName: "webgl",
  kernelFunc: B8
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function U8(n) {
  const { inputs: t, backend: e, attrs: s } = n, { separator: r, nGramWidths: o, leftPad: i, rightPad: a, padWidth: l, preserveShortSequences: c } = s, { data: u, dataSplits: h } = t, d = e.readSync(u.dataId), p = e.readSync(h.dataId), [f, m] = S9(d, p, r, o, i, a, l, c);
  return [
    e.makeTensorInfo([f.length], "string", f),
    e.makeTensorInfo(h.shape, "int32", m)
  ];
}
const Y8 = {
  kernelName: Qh,
  backendName: "webgl",
  kernelFunc: U8
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function j8(n) {
  const { inputs: t, backend: e, attrs: s } = n, { skipEmpty: r } = s, { input: o, delimiter: i } = t;
  if (o.dtype !== "string")
    throw new Error("Input must be of datatype string");
  if (o.shape.length !== 1)
    throw new Error(`Input must be a vector, got shape: ${o.shape}`);
  if (i.shape.length !== 0)
    throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);
  const a = e.readSync(o.dataId), l = e.readSync(i.dataId)[0], [c, u, h] = v9(a, l, r), d = u.length;
  return [
    e.makeTensorInfo([d, 2], "int32", c),
    e.makeTensorInfo([d], "string", u),
    e.makeTensorInfo([2], "int32", new Int32Array(h))
  ];
}
const J8 = {
  kernelName: qh,
  backendName: "webgl",
  kernelFunc: j8
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Q8(n) {
  const { inputs: t, backend: e, attrs: s } = n, { numBuckets: r } = s, { input: o } = t;
  if (o.dtype !== "string")
    throw new Error("Input must be of datatype string");
  if (r <= 0)
    throw new Error("Number of buckets must be at least 1");
  const i = e.readSync(o.dataId), a = C9(i, r);
  return e.makeTensorInfo(o.shape, "int32", a);
}
const q8 = {
  kernelName: td,
  backendName: "webgl",
  kernelFunc: Q8
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const t6 = "return tan(x);", e6 = Dt({ opSnippet: t6 }), n6 = {
  kernelName: Ki,
  backendName: "webgl",
  kernelFunc: e6
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const s6 = `
  float e2x = exp(-2.0 * abs(x));
  return sign(x) * (1.0 - e2x) / (1.0 + e2x);
`, r6 = Dt({ opSnippet: s6 }), o6 = {
  kernelName: Zi,
  backendName: "webgl",
  kernelFunc: r6
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class i6 {
  constructor(t, e) {
    this.variableNames = ["A"];
    const s = new Array(t.length);
    for (let i = 0; i < s.length; i++)
      s[i] = t[i] * e[i];
    this.outputShape = s, this.rank = s.length;
    const r = _t(this.rank), o = a6(t);
    this.userCode = `
      void main() {
        ${r} resRC = getOutputCoords();
        setOutput(getA(${o}));
      }
    `;
  }
}
function a6(n) {
  const t = n.length;
  if (t > 5)
    throw Error(`Tile for rank ${t} is not yet supported`);
  if (t === 1)
    return `imod(resRC, ${n[0]})`;
  const e = ["resRC.x", "resRC.y", "resRC.z", "resRC.w", "resRC.u"], s = [];
  for (let r = 0; r < n.length; r++)
    s.push(`imod(${e[r]}, ${n[r]})`);
  return s.join();
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function NC(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { reps: o } = s;
  if (r.dtype === "string" || r.shape.length > 5) {
    const l = e.readSync(r.dataId), c = r.dtype === "string" ? l.map((d) => Ws(d)) : l, u = gt(r.shape, r.dtype, c), h = T9(u, o);
    return e.makeTensorInfo(h.shape, h.dtype, h.values);
  }
  const i = new i6(r.shape, o);
  return e.runWebGLProgram(i, [r], r.dtype);
}
const l6 = {
  kernelName: Bi,
  backendName: "webgl",
  kernelFunc: NC
};
class c6 {
  constructor(t) {
    this.variableNames = ["x", "indices"], this.customUniforms = [
      { name: "n", type: "int" },
      { name: "firstPass", type: "int" },
      { name: "negativeInf", type: "float" },
      { name: "dir", type: "int" },
      { name: "inc", type: "int" }
    ], this.outputShape = t, this.userCode = `
       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // We compare elements pair-wise within a group of size 2 * inc.
         // The comparing rule for each group alternates between ascending
         // and descending. Within each group, we compare each pair at
         // positions i and i+inc. To decide whether an element at position i
         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than
         // inc, it is in the first half of the group, we denote it as x0,
         // otherwise we denote it as x1.
         // For example, as shown in the Bitonic top K paper referenced above,
         // Figure5(a) shows that element[1] is in the
         // second half of the group when group size is 2, but it is in the
         // first half of the group when group size is 4.

         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;
         int i = isFirstInPair ? elemIdx : elemIdx - inc;

         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));
         float x0 = i0 < n ? getX(batch, i0) : negativeInf;
         float x1 = i1 < n ? getX(batch, i1) : negativeInf;

         // Denotes which direction indices are in (ascending or descending).
         bool reverse = imod(elemIdx, 2 * dir) >= dir;
         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);
         if (reverse == isGreater) { // Elements in opposite order of direction
           int iTemp = i0;
           i0 = i1;
           i1 = iTemp;
         }
         if (isFirstInPair) {
            setOutput(float(i0));
         } else {
            setOutput(float(i1));
         }
       }
     `;
  }
}
class u6 {
  constructor(t) {
    this.variableNames = ["x", "indices"], this.customUniforms = [
      { name: "n", type: "int" },
      { name: "firstPass", type: "int" },
      { name: "k", type: "int" }
    ], this.outputShape = t, this.userCode = `
    void main() {
         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // The output size is half of the previous size.
         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),
         // we only need to output the indices at positions |, the indices at
         // positions _ can be thrown away, see Figure5(b) After Phase 2
         // (Merge phase) in the Bitonic Top K paper referenced above.
         // For example, the paper shows we only need to output the orange bars.
         // The output sequence should look like this | | | | | | | |.
         // Because the sequence is halved, to map the output index back
         // to the previous sequence to find the corresponding value,
         // we need to double the index. When we double the index,
         // we basically interpolate a position, so 2i looks like
         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position
         // of each 2k positions by - elemIdx % k. E.g. for output at
         // index 4,5,6,7, we want to get the corresponding element at
         // original index 8,9,10,11, for output at index 8,9,10,11,
         // we want to get the corresponding element at original index
         // 16,17,18,19, so on and so forth.

         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));
         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));

         float x0 = getX(batch, i0);
         float x1 = i1 < n ? getX(batch, i1) : x0;

         setOutput(x0 >= x1 ? float(i0) : float(i1));
       }
     `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Gr(n, t) {
  t !== null && n.disposeIntermediateTensorInfo(t);
}
function r1(n) {
  let t = 1;
  for (; t < n; )
    t *= 2;
  return t;
}
function h6(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r } = t, { k: o, sorted: i } = s, a = V().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"), l = V().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"), c = r.shape, u = c[c.length - 1];
  if (e.shouldExecuteOnCPU([r]) || u < a || o > l) {
    const R = e.readSync(r.dataId), [F, z] = N9(R, c, r.dtype, o, i);
    return [
      e.makeTensorInfo(F.shape, F.dtype, F.values),
      e.makeTensorInfo(z.shape, z.dtype, z.values)
    ];
  }
  if (o === 0)
    return c[c.length - 1] = 0, [
      e.makeTensorInfo(c, r.dtype, []),
      e.makeTensorInfo(c, "int32", [])
    ];
  if (u === 1)
    return [
      r,
      Zc({ attrs: { shape: c, dtype: "int32", value: 0 }, backend: e })
    ];
  const h = e.texData.get(r.dataId), d = h !== null && h.isPacked, p = d ? e.unpackTensor(r) : r, m = P(c) / u, g = rt({ inputs: { x: p }, attrs: { shape: [m, u] }, backend: e });
  d && Gr(e, p);
  const y = r1(o), b = r1(u);
  let w = null;
  const x = () => w === null ? [g, g] : [g, w], S = (R, F, z) => {
    const W = x(), M = new c6(z), _ = [[u], [w === null ? 1 : 0], [Number.NEGATIVE_INFINITY], [R], [F]], B = w;
    w = e.runWebGLProgram(M, W, "int32", _), Gr(e, B);
  };
  for (let R = 1; R < y; R *= 2) {
    const F = R * 2;
    for (let z = R; z >= 1; z /= 2)
      S(F, z, [m, b]);
  }
  for (let R = b; R > y; R /= 2) {
    const F = x(), z = new u6([m, R / 2]), M = [[u], [w === null ? 1 : 0], [y]], X = w;
    w = e.runWebGLProgram(z, F, "int32", M), Gr(e, X);
    const _ = y / 2, B = _ * 2;
    for (let Z = _; Z >= 1; Z /= 2)
      S(B, Z, w.shape);
  }
  let v = w;
  w = xa({ inputs: { x: w }, backend: e, attrs: { begin: 0, size: [m, o] } }), Gr(e, v);
  let T = bC({ inputs: { x: g, indices: w }, backend: e, attrs: { axis: 1, batchDims: 1 } });
  Gr(e, g);
  const N = c.slice(0, -1);
  N.push(o), v = w, w = rt({ inputs: { x: w }, attrs: { shape: N }, backend: e }), Gr(e, v);
  const $ = T;
  return T = rt({ inputs: { x: T }, attrs: { shape: N }, backend: e }), Gr(e, $), [T, w];
}
const d6 = {
  kernelName: ed,
  backendName: "webgl",
  kernelFunc: h6
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class p6 {
  constructor(t, e, s, r, o, i) {
    this.variableNames = ["Image", "Transforms"], this.outputShape = i;
    const a = s === "nearest" ? 1 : 2;
    let l;
    switch (r) {
      case "constant":
        l = 1;
        break;
      case "reflect":
        l = 2;
        break;
      case "wrap":
        l = 3;
        break;
      case "nearest":
        l = 4;
        break;
      default:
        l = 1;
        break;
    }
    this.userCode = `
            float mapCoord(float outCoord, float len) {
              float inCoord = outCoord;
              if(${l} == 2) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    if (inCoord < sz2) {
                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +
                      inCoord;
                    }
                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    inCoord -= sz2 * float(int(float(inCoord / sz2)));
                    if (inCoord >= len) {
                      inCoord = sz2 - inCoord - 1.0;
                    }
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${l} == 3) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord -= len * float(int(float(inCoord / sz)));
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${l} == 4) {
                return clamp(outCoord, 0.0, len - 1.0);
              } else {
                return outCoord;
              }
            }

            float readWithFillValue(int batch, int coordY, int coordX,
              int channel) {
              float outputValue;
              if (0 <= coordY && coordY < ${t} && 0 <= coordX && coordX < ${e}) {
                  outputValue = getImage(batch, coordY, coordX, channel);
              } else {
                outputValue = float(${o});
              }
              return outputValue;
            }

            void main() {
              ivec4 coords = getOutputCoords();
              float outputValue;
              int batch = coords[0];
              int x = coords[2];
              int y = coords[1];
              int channel = coords[3];
              float xf = float(x);
              float yf = float(y);
              float a1 = getTransforms(batch, 0);
              float a2 = getTransforms(batch, 1);
              float a3 = getTransforms(batch, 2);
              float b1 = getTransforms(batch, 3);
              float b2 = getTransforms(batch, 4);
              float b3 = getTransforms(batch, 5);
              float c1 = getTransforms(batch, 6);
              float c2 = getTransforms(batch, 7);
              float projection = c1 * xf + c2 * yf + 1.0;
              if (projection == 0.0) {
                outputValue = float(${o});
              } else {
                float inX = (a1 * xf + a2 * yf + a3) / projection;
                float inY = (b1 * xf + b2 * yf + b3) / projection;
                float mapX = mapCoord(inX, float(${e}));
                float mapY = mapCoord(inY, float(${t}));

                if (${a} == 1) {
                  int coordY = int(round(mapY));
                  int coordX = int(round(mapX));
                  outputValue = readWithFillValue(batch, coordY, coordX,
                    channel);
                } else {
                  float yFloor = floor(mapY);
                  float xFloor = floor(mapX);
                  float yCeil = yFloor + 1.0;
                  float xCeil = xFloor + 1.0;
                  float valueYFloor = (xCeil - mapX) *
                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);
                  float valueYCeil = (xCeil - mapX) *
                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);
                  outputValue = (yCeil - mapY) * valueYFloor +
                  (mapY - yFloor) * valueYCeil;
                }
              }
              setOutput(outputValue);
            }
        `;
  }
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function f6(n) {
  const { inputs: t, backend: e, attrs: s } = n, { image: r, transforms: o } = t, { interpolation: i, fillMode: a, fillValue: l, outputShape: c } = s, [u, h, d, p] = r.shape, [f, m] = c != null ? c : [h, d], g = [
    u,
    f,
    m,
    p
  ], y = new p6(h, d, i, a, l, g);
  return e.runWebGLProgram(y, [r, o], "float32");
}
const m6 = {
  kernelName: nd,
  backendName: "webgl",
  kernelFunc: f6
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function g6(n) {
  const { inputs: t, attrs: e, backend: s } = n, { axis: r } = e, { x: o } = t;
  Mc(o, "unique"), console.warn("WARNING: ", "UI might be locked temporarily as data is being downloaded");
  const i = s.readSync(o.dataId), { outputValues: a, outputShape: l, indices: c } = $9(i, r, o.shape, o.dtype);
  return [
    s.makeTensorInfo(l, o.dtype, a),
    s.makeTensorInfo([c.length], "int32", c)
  ];
}
const y6 = {
  kernelName: sd,
  backendName: "webgl",
  kernelFunc: g6
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function b6(n) {
  const { inputs: t, backend: e, attrs: s } = n, { value: r } = t;
  let { axis: o } = s;
  o < 0 && (o += r.shape.length);
  const i = r, a = i.shape.length, l = r.shape[o], c = new Array(a - 1);
  let u = 0;
  for (let m = 0; m < a; m++)
    m !== o && (c[u++] = i.shape[m]);
  const h = [], d = new Array(a).fill(0), p = i.shape.slice();
  p[o] = 1;
  const f = new Array(l);
  for (let m = 0; m < f.length; m++) {
    d[o] = m;
    const g = xa({ inputs: { x: i }, backend: e, attrs: { begin: d, size: p } }), y = rt({ inputs: { x: g }, backend: e, attrs: { shape: c } });
    f[m] = y, h.push(g);
  }
  return h.forEach((m) => e.disposeIntermediateTensorInfo(m)), f;
}
const x6 = {
  kernelName: ec,
  backendName: "webgl",
  kernelFunc: b6
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class w6 {
  constructor(t, e) {
    this.variableNames = ["x", "segmentIds"];
    const s = t.windowSize, r = t.batchSize, o = t.inSize, i = t.numSegments, a = i * Math.ceil(o / s);
    this.outputShape = [r, a];
    const l = "0.0", c = "sumValue", u = Math.floor(s / 4) * 4, h = s % 4, d = `
        sumValue += dot(values, segFilter);
    `;
    let p = "";
    o % s > 0 && (p = `
        if (inIdx < 0 || inIdx >= ${o}) {
          return initializationValue;
        }
      `);
    let f = "";
    o % s > 0 && (f = `
        if (inIdx < 0 || inIdx >= ${o}) {
          return -1.0;
        }
      `), this.userCode = `
      const float initializationValue = ${l};

      float getValue(int batch, int inIdx) {
        ${p}
        return getX(batch, inIdx);
      }

      float getSegmentIdAtIndex(int inIdx) {
        ${f}
        return getSegmentIds(inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = int(floor(float(outIdx) / float(
          ${i})) * float(${s}));
        int currentSeg = int(mod(float(outIdx), float(${i})));

        float sumValue = 0.0;

        for (int i = 0; i < ${u}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0
          );

          ${d}
        }

        int inIdx = inOffset + ${u};
        if (${h === 1}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            0,
            0,
            0
          );

          ${d}
        } else if (${h === 2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
              0,
              0
          );

          ${d}
        } else if (${h === 3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            0
          );

          ${d}
        }
        setOutput(${c});
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function I6(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: r, segmentIds: o } = t, { numSegments: i } = s, a = r.shape.length, l = [];
  let c = 0;
  const u = oe([c], a);
  let h = r;
  u != null && (h = Ue({ inputs: { x: r }, backend: e, attrs: { perm: u } }), l.push(h), c = pe(1, a)[0]);
  const d = EI(h.shape, c, i), p = P([h.shape[c]]), f = rt({ inputs: { x: h }, backend: e, attrs: { shape: [-1, p] } });
  l.push(f);
  const m = od(r.dtype), g = (x, S, v, T, N) => {
    const $ = x.shape[0], R = x.shape[1], F = RI(R, N), z = { windowSize: F, inSize: R, batchSize: $, numSegments: N }, W = new w6(z, S), M = e.compileAndRun(W, [x, v], T);
    if (l.push(M), M.shape[1] === N)
      return M;
    const X = kC({
      backend: e,
      attrs: { start: 0, stop: N, step: 1, dtype: "float32" }
    }), _ = NC({
      inputs: { x: X },
      backend: e,
      attrs: { reps: [R / F] }
    });
    return l.push(X), l.push(_), g(M, S, _, T, N);
  }, y = g(f, "unsortedSegmentSum", o, m, i), b = rt({ inputs: { x: y }, backend: e, attrs: { shape: d } });
  let w = b;
  if (u != null) {
    l.push(b);
    const x = kr(u);
    w = Ue({ inputs: { x: w }, backend: e, attrs: { perm: x } });
  }
  return l.forEach((x) => e.disposeIntermediateTensorInfo(x)), w;
}
const S6 = {
  kernelName: nc,
  backendName: "webgl",
  kernelFunc: I6
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const v6 = [
  w4,
  S4,
  k4,
  $4,
  E4,
  G4,
  O4,
  z4,
  P4,
  _4,
  B4,
  Y4,
  Q4,
  n5,
  o5,
  a5,
  c5,
  p5,
  m5,
  y5,
  I5,
  $5,
  E5,
  D5,
  W5,
  M5,
  K5,
  s4,
  H5,
  Q5,
  nY,
  lY,
  uY,
  dY,
  fY,
  gY,
  xY,
  SY,
  kY,
  NY,
  RY,
  LY,
  FY,
  AY,
  MY,
  XY,
  ZY,
  UY,
  jY,
  tj,
  rj,
  lj,
  hj,
  fj,
  mj,
  yj,
  xj,
  Ij,
  vj,
  kj,
  Rj,
  Dj,
  Oj,
  zj,
  Mj,
  _j,
  Hj,
  Jj,
  n4,
  qj,
  j5,
  nJ,
  oJ,
  lJ,
  o4,
  dJ,
  gJ,
  bJ,
  SJ,
  kJ,
  RJ,
  DJ,
  AJ,
  MJ,
  _J,
  ZJ,
  YJ,
  JJ,
  qJ,
  sQ,
  oQ,
  aQ,
  cQ,
  hQ,
  mQ,
  xQ,
  vQ,
  LQ,
  l4,
  OQ,
  WQ,
  PQ,
  KQ,
  F5,
  HQ,
  YQ,
  JQ,
  t7,
  r7,
  a4,
  i7,
  l7,
  u7,
  h7,
  O5,
  NQ,
  f7,
  b7,
  S7,
  u4,
  T7,
  R7,
  G7,
  A7,
  M7,
  X7,
  Z7,
  U7,
  j7,
  q7,
  n8,
  o8,
  c8,
  d8,
  m8,
  b8,
  T5,
  RQ,
  I8,
  v8,
  k8,
  N8,
  R8,
  L8,
  G8,
  O8,
  z8,
  M8,
  X8,
  K8,
  H8,
  Y8,
  J8,
  q8,
  $Q,
  y4,
  n6,
  o6,
  l6,
  d6,
  m6,
  b4,
  y6,
  x6,
  S6,
  UQ
];
for (const n of v6)
  on(n);
/** @license See the LICENSE file. */
const C6 = "3.21.0";
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const k6 = {
  "tfjs-core": mw,
  "tfjs-backend-cpu": AM,
  "tfjs-backend-webgl": e4,
  "tfjs-data": cv,
  "tfjs-layers": fp,
  "tfjs-converter": HS,
  tfjs: C6
}, Ftt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  data: ZW,
  version: k6,
  AdadeltaOptimizer: Hd,
  AdagradOptimizer: Ud,
  AdamOptimizer: Yd,
  AdamaxOptimizer: jd,
  MomentumOptimizer: Jd,
  Optimizer: Qs,
  OptimizerConstructors: rr,
  RMSPropOptimizer: Qd,
  SGDOptimizer: vc,
  Tensor: Lt,
  TensorBuffer: ue,
  Variable: _a,
  get Rank() {
    return Cf;
  },
  sumOutType: od,
  upcastType: He,
  get Reduction() {
    return Ke;
  },
  customGrad: Cs,
  grad: l$,
  grads: c$,
  valueAndGrad: u$,
  valueAndGrads: h$,
  variableGrads: Tw,
  Environment: C1,
  env: V,
  get ENV() {
    return Im;
  },
  nextFrame: Cc,
  KernelBackend: th,
  DataStorage: mm,
  abs: me,
  acos: Um,
  acosh: Ym,
  add: U,
  addN: gw,
  all: pd,
  any: Ba,
  argMax: qr,
  argMin: jm,
  asin: Jm,
  asinh: Qm,
  atan: qm,
  atan2: tg,
  atanh: eg,
  avgPool: lc,
  avgPool3d: sg,
  basicLSTMCell: yw,
  batchToSpaceND: cc,
  batchNorm: Yi,
  batchNorm2d: rg,
  batchNorm3d: og,
  batchNorm4d: ig,
  bincount: ag,
  broadcastArgs: bw,
  broadcastTo: ur,
  buffer: gt,
  cast: et,
  ceil: lg,
  clipByValue: en,
  clone: ws,
  complex: Ms,
  concat: he,
  concat1d: cg,
  concat2d: ug,
  concat3d: hg,
  concat4d: dg,
  conv1d: fd,
  conv2d: Xs,
  conv2dTranspose: md,
  conv3d: fg,
  conv3dTranspose: mg,
  cos: uc,
  cosh: gd,
  cumprod: Ha,
  cumsum: yd,
  denseBincount: ww,
  depthToSpace: gg,
  depthwiseConv2d: ji,
  diag: Iw,
  dilation2d: yg,
  div: ht,
  divNoNan: bg,
  dot: xg,
  einsum: Sw,
  elu: Ji,
  equal: yn,
  erf: wg,
  euclideanNorm: Sg,
  exp: bn,
  expandDims: Qe,
  expm1: vg,
  eye: bd,
  fill: fo,
  floor: qi,
  floorDiv: dd,
  gather: ta,
  greater: an,
  greaterEqual: Tr,
  imag: ic,
  isFinite: Cg,
  isInf: kg,
  isNaN: Tg,
  leakyRelu: hc,
  less: xd,
  lessEqual: Nr,
  linspace: kw,
  localResponseNormalization: Ng,
  log: xn,
  log1p: dc,
  logSigmoid: $g,
  logSoftmax: Id,
  logSumExp: Sd,
  logicalAnd: Hn,
  logicalNot: pc,
  logicalOr: vd,
  logicalXor: Rg,
  lowerBound: Nw,
  matMul: Ct,
  max: Bn,
  maxPool: fc,
  maxPool3d: Eg,
  maxPoolWithArgmax: $w,
  maximum: $s,
  mean: ne,
  meshgrid: Rw,
  min: Ua,
  minimum: ea,
  mirrorPad: Lg,
  mod: Dg,
  moments: mc,
  mul: D,
  multiRNNCell: Ew,
  multinomial: Lw,
  neg: Yt,
  notEqual: eo,
  oneHot: Wo,
  ones: fn,
  onesLike: wn,
  outerProduct: Dw,
  pad: js,
  pad1d: Gw,
  pad2d: Fw,
  pad3d: Ow,
  pad4d: Aw,
  pool: Gg,
  pow: _s,
  prelu: yc,
  print: Fm,
  prod: Fg,
  raggedGather: zw,
  raggedTensorToTensor: Ww,
  rand: Vw,
  randomGamma: Hw,
  randomNormal: kd,
  randomStandardNormal: Uw,
  randomUniform: sa,
  range: Mo,
  real: Vo,
  reciprocal: Ag,
  relu: us,
  relu6: Td,
  reshape: G,
  reverse: Dn,
  reverse1d: Yw,
  reverse2d: jw,
  reverse3d: Jw,
  reverse4d: Qw,
  round: Nd,
  rsqrt: $d,
  scalar: ft,
  selu: Rd,
  separableConv2d: Ed,
  setdiff1dAsync: qw,
  sigmoid: ss,
  sign: zg,
  sin: Ld,
  sinh: Dd,
  slice: $t,
  slice1d: bc,
  slice2d: Gd,
  slice3d: xc,
  slice4d: Po,
  softmax: wc,
  softplus: mo,
  spaceToBatchND: gc,
  fft: Ic,
  ifft: Xo,
  irfft: Fd,
  rfft: Sc,
  split: tn,
  sqrt: Fe,
  square: Wt,
  squaredDifference: Od,
  squeeze: $r,
  stack: nn,
  step: yo,
  stridedSlice: Wg,
  sub: it,
  sum: at,
  tan: Vg,
  tanh: to,
  tensor: ee,
  tensor1d: Ve,
  tensor2d: hr,
  tensor3d: Vm,
  tensor4d: tI,
  tensor5d: eI,
  tensor6d: nI,
  tile: $n,
  topk: Mg,
  truncatedNormal: Ad,
  unique: Pg,
  unsortedSegmentSum: zd,
  unstack: Un,
  upperBound: sI,
  variable: Xg,
  where: Me,
  whereAsync: _g,
  zeros: ge,
  zerosLike: Rt,
  op: L,
  OP_SCOPE_SUFFIX: $m,
  booleanMaskAsync: rI,
  transpose: kt,
  norm: Qi,
  movingAverage: oI,
  scatterND: iI,
  searchSorted: Cd,
  sparseToDense: aI,
  gatherND: lI,
  dropout: Kg,
  enclosingPowerOfTwo: Zg,
  cosineWindow: Vd,
  inTopKAsync: cI,
  image: Xr,
  linalg: Ug,
  losses: wI,
  spectral: bI,
  fused: pI,
  signal: xI,
  sparse: II,
  string: SI,
  train: Or,
  enableProdMode: Ek,
  enableDebugMode: Lk,
  disableDeprecationWarnings: Dk,
  deprecationWarn: Gk,
  disposeVariables: Fk,
  engine: Zt,
  memory: Za,
  profile: Ok,
  tidy: A,
  dispose: xt,
  keep: ce,
  time: Ak,
  setBackend: zk,
  ready: Wk,
  getBackend: Vk,
  removeBackend: Mk,
  findBackend: Pk,
  findBackendFactory: Xk,
  registerBackend: Wm,
  backend: Fs,
  setPlatform: _k,
  getKernel: ku,
  getGradient: wf,
  getKernelsForBackend: Tu,
  registerKernel: on,
  registerGradient: $1,
  unregisterKernel: c2,
  unregisterGradient: u2,
  copyRegisteredKernels: h2,
  Abs: sl,
  Acos: qo,
  Acosh: ti,
  Add: uo,
  AddN: rl,
  All: sh,
  Any: rh,
  ArgMax: ol,
  ArgMin: il,
  Asin: ei,
  Asinh: ni,
  Atan: si,
  Atanh: ri,
  Atan2: oi,
  AvgPool: al,
  AvgPoolGrad: oh,
  AvgPool3D: ll,
  AvgPool3DGrad: ih,
  BatchMatMul: cl,
  BatchToSpaceND: ul,
  Bincount: ah,
  BroadcastTo: T1,
  BroadcastArgs: lh,
  Cast: ii,
  Ceil: ai,
  ClipByValue: li,
  Complex: ch,
  ComplexAbs: hl,
  Concat: dl,
  Conv2D: pl,
  Conv2DBackpropFilter: uh,
  Conv2DBackpropInput: fl,
  Conv3D: ml,
  Conv3DBackpropFilterV2: hh,
  Conv3DBackpropInputV2: dh,
  Cos: ci,
  Cosh: ui,
  Cumprod: ph,
  Cumsum: gl,
  CropAndResize: fh,
  DenseBincount: mh,
  DepthToSpace: gh,
  DepthwiseConv2dNative: yl,
  DepthwiseConv2dNativeBackpropFilter: yh,
  DepthwiseConv2dNativeBackpropInput: bh,
  Diag: xh,
  Dilation2D: bl,
  Dilation2DBackpropInput: Su,
  Dilation2DBackpropFilter: vu,
  RealDiv: hi,
  Einsum: wh,
  Elu: di,
  EluGrad: Ih,
  Erf: pi,
  Equal: xl,
  Exp: fi,
  ExpandDims: wl,
  Expm1: mi,
  FFT: Sh,
  Fill: vh,
  FlipLeftRight: Ch,
  Floor: gi,
  FloorDiv: yi,
  FusedBatchNorm: Il,
  GatherV2: Sl,
  GatherNd: kh,
  Greater: vl,
  GreaterEqual: bi,
  Identity: xi,
  IFFT: Th,
  Imag: Nh,
  IsFinite: wi,
  IsInf: Ii,
  IsNan: Si,
  LeakyRelu: Cl,
  Less: kl,
  LessEqual: Tl,
  LinSpace: $h,
  Log: vi,
  Log1p: Ci,
  LogicalAnd: Nl,
  LogicalNot: $l,
  LogicalOr: Rl,
  LogicalXor: r2,
  LogSoftmax: N1,
  LowerBound: o2,
  LRN: El,
  LRNGrad: Rh,
  Max: Ll,
  Maximum: ki,
  MaxPool: Dl,
  MaxPoolGrad: Eh,
  MaxPool3D: Gl,
  MaxPool3DGrad: Lh,
  MaxPoolWithArgmax: Dh,
  Mean: Fl,
  Min: Ol,
  Minimum: Ti,
  MirrorPad: Al,
  Mod: Ni,
  Multinomial: Gh,
  Multiply: $i,
  Neg: zl,
  NotEqual: Wl,
  NonMaxSuppressionV3: Fh,
  NonMaxSuppressionV4: Oh,
  NonMaxSuppressionV5: Ah,
  OnesLike: Vl,
  OneHot: Ml,
  Pack: Pl,
  PadV2: Xl,
  Pool: i2,
  Pow: Ri,
  Prelu: _l,
  Prod: Kl,
  RaggedGather: zh,
  RaggedTensorToTensor: Wh,
  Range: Vh,
  Real: Mh,
  Reciprocal: Ei,
  Relu: Li,
  Reshape: Zl,
  ResizeNearestNeighbor: Bl,
  ResizeNearestNeighborGrad: Ph,
  ResizeBilinear: Hl,
  ResizeBilinearGrad: Xh,
  Relu6: Di,
  Reverse: Ul,
  Round: Gi,
  Rsqrt: Fi,
  ScatterNd: _h,
  SearchSorted: Kh,
  Select: Yl,
  Selu: Oi,
  Slice: jl,
  Sin: Ai,
  Sinh: zi,
  Sign: Wi,
  Sigmoid: Vi,
  Softplus: Mi,
  Sqrt: Pi,
  Sum: Jl,
  SpaceToBatchND: Ql,
  SplitV: ql,
  Softmax: tc,
  SparseFillEmptyRows: Zh,
  SparseReshape: Bh,
  SparseSegmentMean: Hh,
  SparseSegmentSum: Uh,
  SparseToDense: Yh,
  SquaredDifference: Xi,
  Square: jh,
  StridedSlice: Jh,
  StringNGrams: Qh,
  StringSplit: qh,
  StringToHashBucketFast: td,
  Sub: _i,
  Tan: Ki,
  Tanh: Zi,
  Tile: Bi,
  TopK: ed,
  Transform: nd,
  Transpose: Zr,
  Unique: sd,
  Unpack: ec,
  UnsortedSegmentSum: nc,
  UpperBound: a2,
  ZerosLike: sc,
  Step: Hi,
  FromPixels: Cu,
  RotateWithOffset: rd,
  _FusedMatMul: Va,
  FusedConv2D: Ma,
  FusedDepthwiseConv2D: Pa,
  version_core: mw,
  browser: rT,
  io: zm,
  math: jk,
  serialization: hT,
  test_util: IT,
  util: x2,
  backend_util: LI,
  broadcast_util: Jk,
  tensor_util: L2,
  slice_util: dw,
  gather_util: oT,
  scatter_util: iT,
  device_util: A2,
  kernel_impls: VL,
  CallbackList: UI,
  CustomCallback: jI,
  History: YI,
  Callback: PS,
  callbacks: OA,
  EarlyStopping: XS,
  InputSpec: ye,
  SymbolicTensor: ns,
  LayersModel: As,
  input: uS,
  loadLayersModel: MF,
  model: WF,
  registerCallbackConstructor: PF,
  sequential: VF,
  RNN: ds,
  Sequential: so,
  LayerVariable: KI,
  version_layers: fp,
  constraints: R3,
  initializers: Z3,
  layers: dA,
  metrics: $A,
  models: RA,
  regularizers: GA,
  GraphModel: sb,
  loadGraphModel: iW,
  loadGraphModelSync: aW,
  deregisterOp: WA,
  registerOp: zA,
  version_converter: HS
}, Symbol.toStringTag, { value: "Module" })), $C = "", o1 = typeof window < "u" && window.Blob && new Blob([atob($C)], { type: "text/javascript;charset=utf-8" });
function T6() {
  const n = o1 && (window.URL || window.webkitURL).createObjectURL(o1);
  try {
    return n ? new Worker(n) : new Worker("data:application/javascript;base64," + $C);
  } finally {
    n && (window.URL || window.webkitURL).revokeObjectURL(n);
  }
}
const N6 = (n, t) => [
  [
    n[0][0] * t[0][0] + n[0][2] * t[2][0],
    n[0][0] * t[0][1] + n[0][2] * t[2][1],
    n[0][0] * t[0][2] + n[0][2] * t[2][2],
    n[0][0] * t[0][3] + n[0][2] * t[2][3]
  ],
  [
    n[1][1] * t[1][0] + n[1][2] * t[2][0],
    n[1][1] * t[1][1] + n[1][2] * t[2][1],
    n[1][1] * t[1][2] + n[1][2] * t[2][2],
    n[1][1] * t[1][3] + n[1][2] * t[2][3]
  ],
  [
    t[2][0],
    t[2][1],
    t[2][2],
    t[2][3]
  ]
], $6 = (n, t, e, s) => {
  const r = n[0][0] * t + n[0][1] * e + n[0][3], o = n[1][0] * t + n[1][1] * e + n[1][3], i = n[2][0] * t + n[2][1] * e + n[2][3];
  return { x: r, y: o, z: i };
}, R6 = (n, t, e, s) => {
  const { x: r, y: o, z: i } = $6(n, t, e);
  return { x: r / i, y: o / i };
}, E6 = 6, L6 = 1, D6 = 10, G6 = 1, F6 = 0.8, O6 = 1, ps = 1e3;
class A6 {
  constructor(t, e, s, r, o, i = !1) {
    this.markerDimensions = t, this.trackingDataList = e, this.projectionTransform = s, this.debugMode = i, this.trackingKeyframeList = [];
    for (let l = 0; l < e.length; l++)
      this.trackingKeyframeList.push(e[l][O6]);
    let a = 0;
    for (let l = 0; l < this.trackingKeyframeList.length; l++)
      a = Math.max(a, this.trackingKeyframeList[l].points.length);
    this.featurePointsListT = [], this.imagePixelsListT = [], this.imagePropertiesListT = [];
    for (let l = 0; l < this.trackingKeyframeList.length; l++) {
      const { featurePoints: c, imagePixels: u, imageProperties: h } = this._prebuild(this.trackingKeyframeList[l], a);
      this.featurePointsListT[l] = c, this.imagePixelsListT[l] = u, this.imagePropertiesListT[l] = h;
    }
    this.kernelCaches = {};
  }
  dummyRun(t) {
    let e = [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]];
    for (let s = 0; s < this.featurePointsListT.length; s++)
      this.track(t, e, s);
  }
  track(t, e, s) {
    let r = {};
    const o = N6(this.projectionTransform, e), i = this._buildAdjustedModelViewTransform(o);
    this.markerDimensions[s][0], this.markerDimensions[s][1], this.trackingKeyframeList[s].width, this.trackingKeyframeList[s].height;
    const a = this.featurePointsListT[s], l = this.imagePixelsListT[s], c = this.imagePropertiesListT[s], u = this._computeProjection(i, t, s), { matchingPointsT: h, simT: d } = this._computeMatching(a, l, c, u), p = h.arraySync(), f = d.arraySync(), m = this.trackingKeyframeList[s], g = [], y = [], b = [];
    for (let w = 0; w < p.length; w++)
      if (f[w] > F6 && w < m.points.length) {
        b.push(w);
        const x = R6(o, p[w][0], p[w][1]);
        y.push(x), g.push({ x: m.points[w].x / m.scale, y: m.points[w].y / m.scale, z: 0 });
      }
    return this.debugMode && (r = {
      projectedImage: u.arraySync(),
      matchingPoints: h.arraySync(),
      goodTrack: b,
      trackedPoints: y
    }), i.dispose(), u.dispose(), h.dispose(), d.dispose(), { worldCoords: g, screenCoords: y, debugExtra: r };
  }
  _computeMatching(t, e, s, r) {
    const o = E6, i = o * 2 + 1, l = D6 * L6, c = G6, u = l * 2 + 1, h = r.shape[0], d = r.shape[1], p = t.shape[0];
    if (!this.kernelCaches.computeMatching) {
      const f = {
        variableNames: ["features", "markerPixels", "markerProperties", "targetPixels"],
        outputShape: [p, u * u],
        userCode: `
	  void main() {
	    ivec2 coords = getOutputCoords();

	    int featureIndex = coords[0];
	    int searchOffsetIndex = coords[1];

	    int markerWidth = int(getMarkerProperties(0));
	    int markerHeight = int(getMarkerProperties(1));
	    float markerScale = getMarkerProperties(2);

	    int searchOffsetX = imod(searchOffsetIndex, ${u}) * ${c};
	    int searchOffsetY = searchOffsetIndex / ${u} * ${c};

	    int sCenterX = int(getFeatures(featureIndex, 0) * markerScale);
	    int sCenterY = int(getFeatures(featureIndex, 1) * markerScale);

	    int sx = sCenterX + searchOffsetX - ${l};
	    int sy = sCenterY + searchOffsetY - ${l};

	    if (sx < ${o} || sx >= (${d} - ${o}) || sy < ${o} || sy >= (${h} - ${o})) {
	      setOutput(-2.);
	    } 
	    else {
	      float sumPoint = 0.;
	      float sumPointSquare = 0.;
	      float sumTemplate = 0.;
	      float sumTemplateSquare = 0.;
	      float sumPointTemplate = 0.;

	      for (int templateOffsetY = 0; templateOffsetY < ${i}; templateOffsetY++) {
		for (int templateOffsetX = 0; templateOffsetX < ${i}; templateOffsetX++) {
		  int fx2 = sCenterX + templateOffsetX - ${o};
		  int fy2 = sCenterY + templateOffsetY - ${o};

		  int sx2 = sx + templateOffsetX - ${o};
		  int sy2 = sy + templateOffsetY - ${o};

		  int markerPixelIndex = fy2 * markerWidth + fx2;
		  float markerPixel = getMarkerPixels(markerPixelIndex);
		  float targetPixel = getTargetPixels(sy2, sx2);

		  sumTemplate += markerPixel;
		  sumTemplateSquare += markerPixel * markerPixel;
		  sumPoint += targetPixel;
		  sumPointSquare += targetPixel * targetPixel;
		  sumPointTemplate += targetPixel * markerPixel;
		}
	      }

	      // Normalized cross-correlation
	      // !important divide first avoid overflow (e.g. sumPoint / count * sumPoint)
	      float count = float(${i} * ${i});
	      float pointVariance = sqrt(sumPointSquare - sumPoint / count * sumPoint);
	      float templateVariance = sqrt(sumTemplateSquare - sumTemplate / count * sumTemplate);

	      if (pointVariance < 0.0000001) {
		setOutput(-3.);
	      } else if (templateVariance < 0.0000001) {
		//setOutput(sumTemplate);
		setOutput(-4.);
	      } else {
		sumPointTemplate -= sumPoint / count * sumTemplate;
		float sim = sumPointTemplate / pointVariance / templateVariance;  
		setOutput(sim);
	      }
	    }
	  }
	`
      }, m = {
        variableNames: ["featurePoints", "markerProperties", "maxIndex"],
        outputShape: [p, 2],
        userCode: `
	  void main() {
	    ivec2 coords = getOutputCoords();

	    float markerScale = getMarkerProperties(2);

	    int featureIndex = coords[0];

	    int maxIndex = int(getMaxIndex(featureIndex));
	    int searchLocationIndex = maxIndex / ${u * u};
	    int searchOffsetIndex = imod(maxIndex, ${u * u});

	    if (coords[1] == 0) {
	      int searchOffsetX = imod(searchOffsetIndex, ${u}) * ${c};
	      setOutput(getFeaturePoints(featureIndex, 0) + float(searchOffsetX - ${l}) / markerScale);
	    }
	    else if (coords[1] == 1) {
	      int searchOffsetY = searchOffsetIndex / ${u} * ${c};
	      setOutput(getFeaturePoints(featureIndex, 1) + float(searchOffsetY - ${l}) / markerScale);
	    }
	  }
	`
      }, g = {
        variableNames: ["sims", "maxIndex"],
        outputShape: [p],
        userCode: `
	  void main() {
	    int featureIndex = getOutputCoords();
	    int maxIndex = int(getMaxIndex(featureIndex));
	    setOutput(getSims(featureIndex, maxIndex));
	  }
	`
      };
      this.kernelCaches.computeMatching = [f, m, g];
    }
    return A(() => {
      const f = this.kernelCaches.computeMatching, m = this._compileAndRun(f[0], [t, e, s, r]), g = m.argMax(1), y = this._compileAndRun(f[1], [t, s, g]), b = this._compileAndRun(f[2], [m, g]);
      return { matchingPointsT: y, simT: b };
    });
  }
  _computeProjection(t, e, s) {
    const r = this.trackingKeyframeList[s].width, o = this.trackingKeyframeList[s].height, i = this.trackingKeyframeList[s].scale, a = r + "-" + o + "-" + i;
    if (this.kernelCaches.computeProjection || (this.kernelCaches.computeProjection = {}), !this.kernelCaches.computeProjection[a]) {
      const l = {
        variableNames: ["M", "pixel"],
        outputShape: [o, r],
        userCode: `
	  void main() {
	      ivec2 coords = getOutputCoords();

	      float m00 = getM(0, 0) * ${ps}.;
	      float m01 = getM(0, 1) * ${ps}.;
	      float m03 = getM(0, 3) * ${ps}.;
	      float m10 = getM(1, 0) * ${ps}.;
	      float m11 = getM(1, 1) * ${ps}.;
	      float m13 = getM(1, 3) * ${ps}.;
	      float m20 = getM(2, 0) * ${ps}.;
	      float m21 = getM(2, 1) * ${ps}.;
	      float m23 = getM(2, 3) * ${ps}.;

	      float y = float(coords[0]) / float(${i});
	      float x = float(coords[1]) / float(${i});
	      float uz = (x * m20) + (y * m21) + m23;
	      float oneOverUz = 1. / uz;

	      float ux = (x * m00) + (y * m01) + m03;
	      float uy = (x * m10) + (y * m11) + m13;

	      ux = floor(ux * oneOverUz + 0.5);
	      uy = floor(uy * oneOverUz + 0.5);
	      setOutput(getPixel(int(uy), int(ux)));
	    }
	`
      };
      this.kernelCaches.computeProjection[a] = l;
    }
    return A(() => {
      const l = this.kernelCaches.computeProjection[a];
      return this._compileAndRun(l, [t, e]);
    });
  }
  _buildAdjustedModelViewTransform(t) {
    return A(() => {
      let e = [];
      for (let r = 0; r < t.length; r++) {
        e.push([]);
        for (let o = 0; o < t[r].length; o++)
          e[r].push(t[r][o] / ps);
      }
      return ee(e, [3, 4]);
    });
  }
  _prebuild(t, e) {
    return A(() => {
      const s = t.scale, r = [];
      for (let l = 0; l < e; l++)
        l < t.points.length ? r.push([t.points[l].x / s, t.points[l].y / s]) : r.push([-1, -1]);
      const o = ee(t.data, [t.width * t.height]), i = ee([t.width, t.height, t.scale], [3]);
      return {
        featurePoints: ee(r, [r.length, 2], "float32"),
        imagePixels: o,
        imageProperties: i
      };
    });
  }
  _compileAndRun(t, e) {
    const s = Fs().compileAndRun(t, e);
    return Zt().makeTensorFromDataId(s.dataId, s.shape, s.dtype);
  }
}
const cu = [
  {
    sigma: 0.55,
    points: [
      [-1, 0],
      [-0.5, -0.866025],
      [0.5, -0.866025],
      [1, -0],
      [0.5, 0.866025],
      [-0.5, 0.866025]
    ]
  },
  {
    sigma: 0.475,
    points: [
      [0, 0.930969],
      [-0.806243, 0.465485],
      [-0.806243, -0.465485],
      [-0, -0.930969],
      [0.806243, -0.465485],
      [0.806243, 0.465485]
    ]
  },
  {
    sigma: 0.4,
    points: [
      [0.847306, -0],
      [0.423653, 0.733789],
      [-0.423653, 0.733789],
      [-0.847306, 0],
      [-0.423653, -0.733789],
      [0.423653, -0.733789]
    ]
  },
  {
    sigma: 0.325,
    points: [
      [-0, -0.741094],
      [0.641806, -0.370547],
      [0.641806, 0.370547],
      [0, 0.741094],
      [-0.641806, 0.370547],
      [-0.641806, -0.370547]
    ]
  },
  {
    sigma: 0.25,
    points: [
      [-0.595502, 0],
      [-0.297751, -0.51572],
      [0.297751, -0.51572],
      [0.595502, -0],
      [0.297751, 0.51572],
      [-0.297751, 0.51572]
    ]
  },
  {
    sigma: 0.175,
    points: [
      [0, 0.362783],
      [-0.314179, 0.181391],
      [-0.314179, -0.181391],
      [-0, -0.362783],
      [0.314179, -0.181391],
      [0.314179, 0.181391]
    ]
  },
  {
    sigma: 0.1,
    points: [
      [0, 0]
    ]
  }
], ao = [];
for (let n = 0; n < cu.length; n++) {
  const t = cu[n].sigma;
  for (let e = 0; e < cu[n].points.length; e++) {
    const s = cu[n].points[e];
    ao.push([t, s[0], s[1]]);
  }
}
const Qp = {};
function z6(n) {
  const t = n.shape[1], e = "w" + t;
  if (!Qp.hasOwnProperty(e)) {
    const s = n.shape[0], r = {
      variableNames: ["p"],
      outputShape: [s, t],
      userCode: `
        void main() {
          ivec2 coords = getOutputCoords();

          float sum = getP(coords[0], coords[1]-2);
          sum += getP(coords[0], coords[1]-1) * 4.;
          sum += getP(coords[0], coords[1]) * 6.;
          sum += getP(coords[0], coords[1]+1) * 4.;
          sum += getP(coords[0], coords[1]+2);
          setOutput(sum);
        }
      `
    }, o = {
      variableNames: ["p"],
      outputShape: [s, t],
      userCode: `
        void main() {
          ivec2 coords = getOutputCoords();

          float sum = getP(coords[0]-2, coords[1]);
          sum += getP(coords[0]-1, coords[1]) * 4.;
          sum += getP(coords[0], coords[1]) * 6.;
          sum += getP(coords[0]+1, coords[1]) * 4.;
          sum += getP(coords[0]+2, coords[1]);
          sum /= 256.;
          setOutput(sum);
        }
      `
    };
    Qp[e] = [r, o];
  }
  return Qp[e];
}
const W6 = (n) => {
  const t = n.inputs.image, e = n.backend, [s, r] = z6(t), o = e.runWebGLProgram(s, [t], t.dtype), i = e.runWebGLProgram(r, [o], t.dtype);
  return e.disposeIntermediateTensorInfo(o), i;
}, V6 = {
  kernelName: "BinomialFilter",
  backendName: "webgl",
  kernelFunc: W6
}, uu = 7, i1 = 3, M6 = i1 * i1, qp = 4, P6 = (qp + 1) * (qp + 1) / qp, tf = {};
function X6(n) {
  const t = n.shape[1], e = "w" + t;
  if (!tf.hasOwnProperty(e)) {
    const s = n.shape[0], r = {
      variableNames: ["image0", "image1", "image2"],
      outputShape: [s, t],
      userCode: `
        void main() {
          ivec2 coords = getOutputCoords();
    
          int y = coords[0];
          int x = coords[1];
    
          float value = getImage1(y, x);
    
          // Step 1: find local maxima/minima
          if (value * value < ${M6}.) {
            setOutput(0.);
            return;
          }
          if (y < ${uu} || y > ${s - 1 - uu}) {
            setOutput(0.);
            return;
          }
          if (x < ${uu} || x > ${t - 1 - uu}) {
            setOutput(0.);
            return;
          }
    
          bool isMax = true;
          bool isMin = true;
          for (int dy = -1; dy <= 1; dy++) {
            for (int dx = -1; dx <= 1; dx++) {
              float value0 = getImage0(y+dy, x+dx);
              float value1 = getImage1(y+dy, x+dx);
              float value2 = getImage2(y+dy, x+dx);
    
        if (value < value0 || value < value1 || value < value2) {
          isMax = false;
        }
        if (value > value0 || value > value1 || value > value2) {
          isMin = false;
        }
            }
          }
    
          if (!isMax && !isMin) {
            setOutput(0.);
            return;
          }
    
          // compute edge score and reject based on threshold
          float dxx = getImage1(y, x+1) + getImage1(y, x-1) - 2. * getImage1(y, x);
          float dyy = getImage1(y+1, x) + getImage1(y-1, x) - 2. * getImage1(y, x);
          float dxy = 0.25 * (getImage1(y-1,x-1) + getImage1(y+1,x+1) - getImage1(y-1,x+1) - getImage1(y+1,x-1));
    
          float det = (dxx * dyy) - (dxy * dxy);
    
          if (abs(det) < 0.0001) { // determinant undefined. no solution
            setOutput(0.);
            return;
          }
    
          float edgeScore = (dxx + dyy) * (dxx + dyy) / det;
    
          if (abs(edgeScore) >= ${P6} ) {
            setOutput(0.);
            return;
          }
          setOutput(getImage1(y,x));
        }
      `
    };
    tf[e] = r;
  }
  return tf[e];
}
const _6 = (n) => {
  let { image0: t, image1: e, image2: s } = n.inputs;
  const r = n.backend, o = X6(e);
  return t = Zt().runKernel("DownsampleBilinear", { image: t }), s = Zt().runKernel("UpsampleBilinear", { image: s, targetImage: e }), r.runWebGLProgram(o, [t, e, s], e.dtype);
}, K6 = {
  kernelName: "BuildExtremas",
  backendName: "webgl",
  kernelFunc: _6
}, ka = 36, ef = {};
function Z6(n) {
  const t = n.shape[0];
  if (!ef.hasOwnProperty(t)) {
    const e = {
      variableNames: ["histogram"],
      outputShape: [n.shape[0]],
      userCode: `
            void main() {
                int featureIndex = getOutputCoords();

                int maxIndex = 0;
                for (int i = 1; i < ${ka}; i++) {
                    if (getHistogram(featureIndex, i) > getHistogram(featureIndex, maxIndex)) {
                        maxIndex = i;
                    }
                }

                int prev = imod(maxIndex - 1 + ${ka}, ${ka});
                int next = imod(maxIndex + 1, ${ka});

                /**
                 * Fit a quatratic to 3 points. The system of equations is:
                 *
                 * y0 = A*x0^2 + B*x0 + C
                 * y1 = A*x1^2 + B*x1 + C
                 * y2 = A*x2^2 + B*x2 + C
                 *
                 * This system of equations is solved for A,B,C.
                 */
                float p10 = float(maxIndex - 1);
                float p11 = getHistogram(featureIndex, prev); 
                float p20 = float(maxIndex);
                float p21 = getHistogram(featureIndex, maxIndex); 
                float p30 = float(maxIndex + 1);
                float p31 = getHistogram(featureIndex, next); 

                float d1 = (p30-p20)*(p30-p10);
                float d2 = (p10-p20)*(p30-p10);
                float d3 = p10-p20;

                // If any of the denominators are zero then, just use maxIndex.
                    float fbin = float(maxIndex);
                if ( abs(d1) > 0.00001 && abs(d2) > 0.00001 && abs(d3) > 0.00001) {
                float a = p10*p10;
                float b = p20*p20;

                // Solve for the coefficients A,B,C
                float A = ((p31-p21)/d1)-((p11-p21)/d2);
                float B = ((p11-p21)+(A*(b-a)))/d3;
                float C = p11-(A*a)-(B*p10);
                fbin = -B / (2. * A);
                }

                float an = 2.0 *${Math.PI} * (fbin + 0.5) / ${ka}. - ${Math.PI};
                setOutput(an);
            }
            `
    };
    ef[t] = e;
  }
  return ef[t];
}
const B6 = (n) => {
  const { histograms: t } = n.inputs, e = n.backend, s = Z6(t);
  return e.runWebGLProgram(s, [t], t.dtype);
}, H6 = {
  kernelName: "ComputeExtremaAngles",
  backendName: "webgl",
  kernelFunc: B6
}, a1 = 7, nf = {};
function U6(n, t) {
  const e = `${n}|${t.shape[0]}`;
  if (!nf.hasOwnProperty(e)) {
    const s = [];
    for (let i = 1; i < n; i++)
      s.push("image" + i);
    let r = "float getPixel(int octave, int y, int x) {";
    for (let i = 1; i < n; i++)
      r += `
  if (octave == ${i}) {
	return getImage${i}(y, x);
  }
`;
    r += "}";
    const o = {
      variableNames: [...s, "extrema", "angles", "freakPoints"],
      outputShape: [t.shape[0], ao.length],
      userCode: `
  ${r}
  void main() {
	ivec2 coords = getOutputCoords();
	int featureIndex = coords[0];
	int freakIndex = coords[1];

	float freakSigma = getFreakPoints(freakIndex, 0);
	float freakX = getFreakPoints(freakIndex, 1);
	float freakY = getFreakPoints(freakIndex, 2);

	int octave = int(getExtrema(featureIndex, 1));
	float inputY = getExtrema(featureIndex, 2);
	float inputX = getExtrema(featureIndex, 3);
	float inputAngle = getAngles(featureIndex);
	float cos = ${a1}. * cos(inputAngle);
	float sin = ${a1}. * sin(inputAngle);

	float yp = inputY + freakX * sin + freakY * cos;
	float xp = inputX + freakX * cos + freakY * -sin;

	int x0 = int(floor(xp));
	int x1 = x0 + 1;
	int y0 = int(floor(yp));
	int y1 = y0 + 1;

	float f1 = getPixel(octave, y0, x0);
	float f2 = getPixel(octave, y0, x1);
	float f3 = getPixel(octave, y1, x0);
	float f4 = getPixel(octave, y1, x1);

	float x1f = float(x1);
	float y1f = float(y1);
	float x0f = float(x0);
	float y0f = float(y0);

	// ratio for interpolation between four neighbouring points
	float value = (x1f - xp) * (y1f - yp) * f1
		+ (xp - x0f) * (y1f - yp) * f2
		+ (x1f - xp) * (yp - y0f) * f3
		+ (xp - x0f) * (yp - y0f) * f4;

	setOutput(value);
  }
`
    };
    nf[e] = o;
  }
  return nf[e];
}
const Y6 = (n) => {
  const { gaussianImagesT: t, prunedExtremas: e, prunedExtremasAngles: s, freakPointsT: r, pyramidImagesLength: o } = n.inputs, i = n.backend, a = U6(o, e);
  return i.runWebGLProgram(a, [...t, e, s, r], "float32");
}, j6 = {
  kernelName: "ComputeExtremaFreak",
  backendName: "webgl",
  kernelFunc: Y6
}, RC = (ao.length - 1) * ao.length / 2, J6 = Math.ceil(RC / 8), sf = {};
function Q6(n) {
  const t = `${n.shape[0]}`;
  if (!sf.hasOwnProperty(t)) {
    const e = {
      variableNames: ["freak", "p"],
      outputShape: [n.shape[0], J6],
      userCode: `
  void main() {
    ivec2 coords = getOutputCoords();
    int featureIndex = coords[0];
    int descIndex = coords[1] * 8;

    int sum = 0;
    for (int i = 0; i < 8; i++) {
      if (descIndex + i >= ${RC}) {
        continue;
      }

      int p1 = int(getP(descIndex + i, 0));
      int p2 = int(getP(descIndex + i, 1));

      float v1 = getFreak(featureIndex, p1);
      float v2 = getFreak(featureIndex, p2);

      if (v1 < v2 + 0.01) {
        sum += int(pow(2.0, float(7 - i)));
      }
    }
    setOutput(float(sum));
  }
`
    };
    sf[t] = e;
  }
  return sf[t];
}
const q6 = (n) => {
  const { extremaFreaks: t, positionT: e } = n.inputs, { backend: s } = n, r = Q6(t);
  return s.runWebGLProgram(r, [t, e], "int32");
}, tq = {
  kernelName: "ComputeFreakDescriptors",
  backendName: "webgl",
  kernelFunc: q6
}, rf = {};
function eq(n, t) {
  const e = `${n}|${t}`;
  if (!rf.hasOwnProperty(e)) {
    const s = [];
    let r = "float getPixel(int octave, int y, int x) {";
    for (let o = 1; o < n; o++)
      s.push("image" + o), r += `
				if (octave == ${o}) {
					return getImage${o}(y, x);
				}
			`;
    r += "}", rf[e] = {
      variableNames: [...s, "extrema"],
      outputShape: [t, 3, 3],
      userCode: `
			${r}
		
			void main() {
				ivec3 coords = getOutputCoords();
				int featureIndex = coords[0];
				float score = getExtrema(featureIndex, 0);
				if (score == 0.0) {
					return;
				}
		
				int dy = coords[1]-1;
				int dx = coords[2]-1;
				int octave = int(getExtrema(featureIndex, 1));
				int y = int(getExtrema(featureIndex, 2));
				int x = int(getExtrema(featureIndex, 3));
				setOutput(getPixel(octave, y+dy, x+dx));
			}
			`
    };
  }
  return rf[e];
}
const nq = (n) => {
  const { prunedExtremasList: t, dogPyramidImagesT: e } = n.inputs, s = n.backend, r = eq(e.length, t.length), o = ee(t, [t.length, t[0].length], "int32");
  return s.runWebGLProgram(r, [...e.slice(1), o], e[0].dtype);
}, sq = {
  kernelName: "ComputeLocalization",
  backendName: "webgl",
  kernelFunc: nq
}, rq = 0.159154943091895, No = 36, of = {};
function oq(n, t, e) {
  const s = `${e}|${n.shape[0]}|${t.shape[0]}`;
  if (!of.hasOwnProperty(s)) {
    const r = [];
    for (let l = 1; l < e; l++)
      r.push("image" + l);
    let o = "float getPixel(int octave, int y, int x) {";
    for (let l = 1; l < e; l++)
      o += `
            if (octave == ${l}) {
                return getImage${l}(y, x);
            }
            `;
    o += "}";
    const i = {
      variableNames: [...r, "extrema", "radial"],
      outputShape: [n.shape[0], t.shape[0], 2],
      userCode: `
                ${o}

                void main() {
                    ivec3 coords = getOutputCoords();
                    int featureIndex = coords[0];
                    int radialIndex = coords[1];
                    int propertyIndex = coords[2];

                    int radialY = int(getRadial(radialIndex, 0));
                    int radialX = int(getRadial(radialIndex, 1));
                    float radialW = getRadial(radialIndex, 2);

                    int octave = int(getExtrema(featureIndex, 1));
                    int y = int(getExtrema(featureIndex, 2));
                    int x = int(getExtrema(featureIndex, 3));

                    int xp = x + radialX;
                    int yp = y + radialY;

                    float dy = getPixel(octave, yp+1, xp) - getPixel(octave, yp-1, xp);
                    float dx = getPixel(octave, yp, xp+1) - getPixel(octave, yp, xp-1);

                    if (propertyIndex == 0) {
                    // be careful that atan(0, 0) gives 1.57 instead of 0 (different from js), but doesn't matter here, coz magnitude is 0
                    
                    float angle = atan(dy, dx) + ${Math.PI};
                    float fbin = angle * ${No}. * ${rq};
                    setOutput(fbin);
                    return;
                    }

                    if (propertyIndex == 1) {
                        float mag = sqrt(dx * dx + dy * dy);
                        float magnitude = radialW * mag;
                        setOutput(magnitude);
                        return;
                    }
                }

                `
    }, a = {
      variableNames: ["fbinMag"],
      outputShape: [n.shape[0], No],
      userCode: `
            void main() {
                ivec2 coords = getOutputCoords();
                int featureIndex = coords[0];
                int binIndex = coords[1];

                float sum = 0.;
                for (int i = 0; i < ${t.shape[0]}; i++) {
                    float fbin = getFbinMag(featureIndex, i, 0);
                    int bin = int(floor(fbin - 0.5));
                    int b1 = imod(bin + ${No}, ${No});
                    int b2 = imod(bin + 1 + ${No}, ${No});

                    if (b1 == binIndex || b2 == binIndex) {
                        float magnitude = getFbinMag(featureIndex, i, 1);
                        float w2 = fbin - float(bin) - 0.5;
                        float w1 = w2 * -1. + 1.;

                        if (b1 == binIndex) {
                            sum += w1 * magnitude;
                        }
                        if (b2 == binIndex) {
                            sum += w2 * magnitude;
                        }
                    }
                }
                setOutput(sum);
            }
            `
    };
    of[s] = [i, a];
  }
  return of[s];
}
const iq = (n) => {
  const { gaussianImagesT: t, prunedExtremasT: e, radialPropertiesT: s, pyramidImagesLength: r } = n.inputs, o = n.backend, [i, a] = oq(e, s, r), l = o.runWebGLProgram(i, [...t, e, s], s.dtype), c = o.runWebGLProgram(a, [l], s.dtype);
  return o.disposeIntermediateTensorInfo(l), c;
}, aq = {
  kernelName: "ComputeOrientationHistograms",
  backendName: "webgl",
  kernelFunc: iq
}, af = {};
function lq(n) {
  const t = n.shape[0], e = n.shape[1], s = "w" + e;
  if (!af.hasOwnProperty(s)) {
    const r = {
      variableNames: ["p"],
      outputShape: [Math.floor(t / 2), Math.floor(e / 2)],
      userCode: `
            void main() {
                ivec2 coords = getOutputCoords();
                int y = coords[0] * 2;
                int x = coords[1] * 2;
        
                float sum = getP(y, x) * 0.25;
                sum += getP(y+1,x) * 0.25; 
                sum += getP(y, x+1) * 0.25; 
                sum += getP(y+1,x+1) * 0.25;
                setOutput(sum);
            }
            `
    };
    af[s] = r;
  }
  return af[s];
}
const cq = (n) => {
  const t = n.inputs.image, e = n.backend, s = lq(t);
  return e.runWebGLProgram(s, [t], t.dtype);
}, uq = {
  kernelName: "DownsampleBilinear",
  backendName: "webgl",
  kernelFunc: cq
}, hq = (n) => {
  const { extremasResultT: t } = n.inputs, e = n.backend, s = t.shape[0], r = t.shape[1], o = {
    variableNames: ["extrema"],
    outputShape: [Math.floor(s / 2), Math.floor(r / 2)],
    userCode: `
		  void main() {
			ivec2 coords = getOutputCoords();
			int y = coords[0] * 2;
			int x = coords[1] * 2;
  
			float location = 0.0;
			float values = getExtrema(y, x);
  
			if (getExtrema(y+1, x) != 0.0) {
			  location = 1.0;
		  values = getExtrema(y+1, x);
			}
			else if (getExtrema(y, x+1) != 0.0) {
			  location = 2.0;
		  values = getExtrema(y, x+1);
			}
			else if (getExtrema(y+1, x+1) != 0.0) {
			  location = 3.0;
		  values = getExtrema(y+1, x+1);
			}
  
			if (values < 0.0) {
			  setOutput(location * -1000.0 + values);
			} else {
			  setOutput(location * 1000.0 + values);
			}
		  }
		`
  };
  return e.runWebGLProgram(o, [t], t.dtype);
}, dq = {
  kernelName: "ExtremaReduction",
  backendName: "webgl",
  kernelFunc: hq
}, hu = 36, pq = 5, lf = {};
function fq(n) {
  const t = `h${n.shape[0]}`;
  if (!lf.hasOwnProperty(t)) {
    const e = {
      variableNames: ["histogram"],
      outputShape: [n.shape[0], hu],
      userCode: `
            void main() {
                ivec2 coords = getOutputCoords();

                int featureIndex = coords[0];
                int binIndex = coords[1];

                int prevBin = imod(binIndex - 1 + ${hu}, ${hu});
                int nextBin = imod(binIndex + 1, ${hu});
                float result = 0.274068619061197 * getHistogram(featureIndex, prevBin) + 0.451862761877606 * getHistogram(featureIndex, binIndex) + 0.274068619061197 * getHistogram(featureIndex, nextBin);

                setOutput(result);
            }
            `
    };
    lf[t] = e;
  }
  return lf[t];
}
const mq = (n) => {
  let { histograms: t } = n.inputs;
  const e = n.backend, s = fq(t);
  for (let r = 0; r < pq; r++) {
    const o = t;
    t = e.runWebGLProgram(s, [t], t.dtype), r > 0 && e.disposeIntermediateTensorInfo(o);
  }
  return t;
}, gq = {
  kernelName: "SmoothHistograms",
  backendName: "webgl",
  kernelFunc: mq
}, cf = {};
function yq(n, t) {
  const s = "w" + n.shape[1];
  if (!cf.hasOwnProperty(s)) {
    const r = {
      variableNames: ["p"],
      outputShape: [t.shape[0], t.shape[1]],
      userCode: `
              void main() {
                ivec2 coords = getOutputCoords();
                int j = coords[0];
                int i = coords[1];
        
                float sj = 0.5 * float(j) - 0.25; 
                float si = 0.5 * float(i) - 0.25;
        
                float sj0 = floor(sj);
                float sj1 = ceil(sj);
                float si0 = floor(si);
                float si1 = ceil(si);
        
                int sj0I = int(sj0);
                int sj1I = int(sj1);
                int si0I = int(si0);
                int si1I = int(si1);
        
                float sum = 0.0;
                sum += getP(sj0I, si0I) * (si1 - si) * (sj1 - sj);
                sum += getP(sj1I, si0I) * (si1 - si) * (sj - sj0);
                sum += getP(sj0I, si1I) * (si - si0) * (sj1 - sj);
                sum += getP(sj1I, si1I) * (si - si0) * (sj - sj0);
                setOutput(sum);
              }
            `
    };
    cf[s] = r;
  }
  return cf[s];
}
const bq = (n) => {
  const { image: t, targetImage: e } = n.inputs, s = n.backend, r = yq(t, e);
  return s.runWebGLProgram(r, [t], t.dtype);
}, xq = {
  kernelName: "UpsampleBilinear",
  backendName: "webgl",
  kernelFunc: bq
};
on(V6);
on(K6);
on(H6);
on(j6);
on(tq);
on(sq);
on(aq);
on(uq);
on(dq);
on(gq);
on(xq);
const l1 = 8, wq = 5, Ta = 10, Iq = 5, uf = 3, Sq = 1.5;
(ao.length - 1) * ao.length / 2;
class EC {
  constructor(t, e, s = !1) {
    this.debugMode = s, this.width = t, this.height = e;
    let r = 0;
    for (; t >= l1 && e >= l1 && (t /= 2, e /= 2, r++, r !== wq); )
      ;
    this.numOctaves = r, this.tensorCaches = {}, this.kernelCaches = {};
  }
  detectImageData(t) {
    const e = new Uint8ClampedArray(4 * t.length);
    for (let r = 0; r < t.length; r++)
      e[4 * r] = t[r], e[4 * r + 1] = t[r], e[4 * r + 2] = t[r], e[4 * r + 3] = 255;
    const s = new ImageData(e, this.width, this.height);
    return this.detect(s);
  }
  detect(t) {
    let e = null;
    const s = [];
    for (let y = 0; y < this.numOctaves; y++) {
      let b, w;
      y === 0 ? b = this._applyFilter(t) : b = this._downsampleBilinear(s[y - 1][s[y - 1].length - 1]), w = this._applyFilter(b), s.push([b, w]);
    }
    const r = [];
    for (let y = 0; y < this.numOctaves; y++) {
      let b = this._differenceImageBinomial(s[y][0], s[y][1]);
      r.push(b);
    }
    const o = [];
    for (let y = 1; y < this.numOctaves - 1; y++) {
      const b = this._buildExtremas(r[y - 1], r[y], r[y + 1]);
      o.push(b);
    }
    const i = this._applyPrune(o), a = this._computeLocalization(i, r), l = this._computeOrientationHistograms(a, s), c = this._smoothHistograms(l), u = this._computeExtremaAngles(c), h = this._computeExtremaFreak(s, a, u), d = this._computeFreakDescriptors(h), p = a.arraySync(), f = u.arraySync(), m = d.arraySync();
    this.debugMode && (e = {
      pyramidImages: s.map((y) => y.map((b) => b.arraySync())),
      dogPyramidImages: r.map((y) => y ? y.arraySync() : null),
      extremasResults: o.map((y) => y.arraySync()),
      extremaAngles: u.arraySync(),
      prunedExtremas: i,
      localizedExtremas: a.arraySync()
    }), s.forEach((y) => y.forEach((b) => b.dispose())), r.forEach((y) => y && y.dispose()), o.forEach((y) => y.dispose()), a.dispose(), l.dispose(), c.dispose(), u.dispose(), h.dispose(), d.dispose();
    const g = [];
    for (let y = 0; y < p.length; y++) {
      if (p[y][0] == 0)
        continue;
      const b = [];
      for (let $ = 0; $ < m[y].length; $ += 4) {
        const R = m[y][$], F = m[y][$ + 1], z = m[y][$ + 2], W = m[y][$ + 3];
        let M = R * 16777216 + F * 65536 + z * 256 + W;
        b.push(M);
      }
      const w = p[y][1], x = p[y][2], v = p[y][3] * Math.pow(2, w) + Math.pow(2, w - 1) - 0.5, T = x * Math.pow(2, w) + Math.pow(2, w - 1) - 0.5, N = Math.pow(2, w);
      g.push({
        maxima: p[y][0] > 0,
        x: v,
        y: T,
        scale: N,
        angle: f[y],
        descriptors: b
      });
    }
    return { featurePoints: g, debugExtra: e };
  }
  _computeFreakDescriptors(t) {
    if (!this.tensorCaches.computeFreakDescriptors) {
      const s = [], r = [];
      for (let a = 0; a < t.shape[1]; a++)
        for (let l = a + 1; l < t.shape[1]; l++)
          s.push(a), r.push(l);
      const o = ee(s, [s.length]).cast("int32"), i = ee(r, [r.length]).cast("int32");
      this.tensorCaches.computeFreakDescriptors = {
        positionT: ce(nn([o, i], 1))
      };
    }
    const { positionT: e } = this.tensorCaches.computeFreakDescriptors;
    return A(() => Zt().runKernel("ComputeFreakDescriptors", { extremaFreaks: t, positionT: e }));
  }
  _computeExtremaFreak(t, e, s) {
    this.tensorCaches._computeExtremaFreak || A(() => {
      const i = ee(ao);
      this.tensorCaches._computeExtremaFreak = {
        freakPointsT: ce(i)
      };
    });
    const { freakPointsT: r } = this.tensorCaches._computeExtremaFreak, o = [];
    for (let i = 1; i < t.length; i++)
      o.push(t[i][1]);
    return A(() => Zt().runKernel("ComputeExtremaFreak", { gaussianImagesT: o, prunedExtremas: e, prunedExtremasAngles: s, freakPointsT: r, pyramidImagesLength: t.length }));
  }
  _computeExtremaAngles(t) {
    return A(() => Zt().runKernel("ComputeExtremaAngles", { histograms: t }));
  }
  _computeOrientationHistograms(t, e) {
    const s = [];
    for (let o = 1; o < e.length; o++)
      s.push(e[o][1]);
    this.tensorCaches.orientationHistograms || A(() => {
      const o = -1 / (2 * uf * uf), i = uf * Sq, a = Math.ceil(i), l = [];
      for (let c = -a; c <= a; c++)
        for (let u = -a; u <= a; u++) {
          const h = u * u + c * c;
          if (h <= i * i) {
            const d = h * o;
            let p = (720 + d * (720 + d * (360 + d * (120 + d * (30 + d * (6 + d)))))) * 0.0013888888;
            l.push([c, u, p]);
          }
        }
      this.tensorCaches.orientationHistograms = {
        radialPropertiesT: ce(ee(l, [l.length, 3]))
      };
    });
    const { radialPropertiesT: r } = this.tensorCaches.orientationHistograms;
    return A(() => Zt().runKernel("ComputeOrientationHistograms", { gaussianImagesT: s, prunedExtremasT: t, radialPropertiesT: r, pyramidImagesLength: e.length }));
  }
  _smoothHistograms(t) {
    return A(() => Zt().runKernel("SmoothHistograms", { histograms: t }));
  }
  _computeLocalization(t, e) {
    return A(() => {
      const r = Zt().runKernel("ComputeLocalization", { prunedExtremasList: t, dogPyramidImagesT: e }).arraySync(), o = [];
      for (let a = 0; a < r.length; a++) {
        o.push([]);
        for (let l = 0; l < r[a].length; l++)
          o[a].push([]);
      }
      const i = [];
      for (let a = 0; a < t.length; a++)
        i[a] = [
          t[a][0],
          t[a][1],
          t[a][2],
          t[a][3]
        ];
      for (let a = 0; a < i.length; a++) {
        if (i[a][0] === 0)
          continue;
        const l = r[a], c = 0.5 * (l[1][2] - l[1][0]), u = 0.5 * (l[2][1] - l[0][1]), h = l[1][2] + l[1][0] - 2 * l[1][1], d = l[2][1] + l[0][1] - 2 * l[1][1], p = 0.25 * (l[0][0] + l[2][2] - l[0][2] - l[2][0]), f = h * d - p * p, m = (d * -c + -p * -u) / f, g = (-p * -c + h * -u) / f, y = i[a][2] + g, b = i[a][3] + m;
        Math.abs(f) < 1e-4 || (i[a][2] = y, i[a][3] = b);
      }
      return ee(i, [i.length, i[0].length], "float32");
    });
  }
  _applyPrune(t) {
    const e = Ta * Ta, s = Iq, r = [], o = [];
    for (let a = 0; a < e; a++) {
      o.push([]), r.push([]);
      for (let l = 0; l < s; l++)
        o[a].push([0, 0, 0, 0]), r[a].push(0);
    }
    A(() => {
      for (let a = 0; a < t.length; a++) {
        const l = Zt().runKernel("ExtremaReduction", { extremasResultT: t[a] }), c = a + 1, u = l.arraySync(), h = l.shape[0], d = l.shape[1], p = d * 2 / Ta, f = h * 2 / Ta;
        for (let m = 0; m < h; m++)
          for (let g = 0; g < d; g++) {
            const y = u[m][g];
            if (y == 0)
              continue;
            const b = y % 1e3, w = Math.floor(Math.abs(y) / 1e3), x = g * 2 + (w === 2 || w === 3 ? 1 : 0), S = m * 2 + (w === 1 || w === 3 ? 1 : 0), v = Math.floor(x / p), N = Math.floor(S / f) * Ta + v, $ = Math.abs(b);
            let R = s;
            for (; R >= 1 && $ > r[N][R - 1]; )
              R -= 1;
            if (R < s) {
              for (let F = s - 1; F >= R + 1; F--)
                r[N][F] = r[N][F - 1], o[N][F][0] = o[N][F - 1][0], o[N][F][1] = o[N][F - 1][1], o[N][F][2] = o[N][F - 1][2], o[N][F][3] = o[N][F - 1][3];
              r[N][R] = $, o[N][R][0] = b, o[N][R][1] = c, o[N][R][2] = S, o[N][R][3] = x;
            }
          }
      }
    });
    const i = [];
    for (let a = 0; a < e; a++)
      for (let l = 0; l < s; l++)
        i.push(o[a][l]);
    return i;
  }
  _buildExtremas(t, e, s) {
    return A(() => Zt().runKernel("BuildExtremas", { image0: t, image1: e, image2: s }));
  }
  _differenceImageBinomial(t, e) {
    return A(() => t.sub(e));
  }
  _applyFilter(t) {
    return A(() => Zt().runKernel("BinomialFilter", { image: t }));
  }
  _downsampleBilinear(t) {
    return A(() => Zt().runKernel("DownsampleBilinear", { image: t }));
  }
  _compileAndRun(t, e) {
    const s = Fs().compileAndRun(t, e);
    return Zt().makeTensorFromDataId(s.dataId, s.shape, s.dtype);
  }
  _runWebGLProgram(t, e, s) {
    const r = Fs().runWebGLProgram(t, e, s);
    return Zt().makeTensorFromDataId(r.dataId, r.shape, r.dtype);
  }
}
class vq {
  constructor(t, e, s = !1) {
    this.debugMode = s, this.width = t, this.height = e;
    let r = Math.min(t, e) / 2, o = Math.pow(2, Math.round(Math.log(r) / Math.log(2)));
    this.cropSize = o, this.detector = new EC(o, o, s), this.kernelCaches = {}, this.lastRandomIndex = 4;
  }
  detect(t) {
    const e = Math.floor(this.height / 2 - this.cropSize / 2), s = Math.floor(this.width / 2 - this.cropSize / 2), r = this._detect(t, s, e);
    return this.debugMode && (r.debugExtra.crop = { startX: s, startY: e, cropSize: this.cropSize }), r;
  }
  detectMoving(t) {
    const e = this.lastRandomIndex % 3, s = Math.floor(this.lastRandomIndex / 3);
    let r = Math.floor(this.height / 2 - this.cropSize + s * this.cropSize / 2), o = Math.floor(this.width / 2 - this.cropSize + e * this.cropSize / 2);
    return o < 0 && (o = 0), r < 0 && (r = 0), o >= this.width - this.cropSize && (o = this.width - this.cropSize - 1), r >= this.height - this.cropSize && (r = this.height - this.cropSize - 1), this.lastRandomIndex = (this.lastRandomIndex + 1) % 9, this._detect(t, o, r);
  }
  _detect(t, e, s) {
    const r = t.slice([s, e], [this.cropSize, this.cropSize]), { featurePoints: o, debugExtra: i } = this.detector.detect(r);
    return o.forEach((a) => {
      a.x += e, a.y += s;
    }), this.debugMode && (i.projectedImage = r.arraySync()), r.dispose(), { featurePoints: o, debugExtra: i };
  }
}
const LC = ({ image: n, ratio: t }) => {
  const e = Math.round(n.width * t), s = Math.round(n.height * t), r = new Uint8Array(e * s);
  for (let o = 0; o < e; o++) {
    let i = Math.round(1 * o / t), a = Math.round(1 * (o + 1) / t) - 1;
    a >= n.width && (a = n.width - 1);
    for (let l = 0; l < s; l++) {
      let c = Math.round(1 * l / t), u = Math.round(1 * (l + 1) / t) - 1;
      u >= n.height && (u = n.height - 1);
      let h = 0, d = 0;
      for (let p = i; p <= a; p++)
        for (let f = c; f <= u; f++)
          h += 1 * n.data[f * n.width + p], d += 1;
      r[l * e + o] = Math.floor(h / d);
    }
  }
  return { data: r, width: e, height: s };
}, Cq = 100, kq = (n) => {
  const t = Cq / Math.min(n.width, n.height), e = [];
  let s = t;
  for (; ; )
    if (e.push(s), s *= Math.pow(2, 1 / 3), s >= 0.95) {
      s = 1;
      break;
    }
  e.push(s), e.reverse();
  const r = [];
  for (let o = 0; o < e.length; o++)
    n.width * e[o], n.height * e[o], r.push(Object.assign(LC({ image: n, ratio: e[o] }), { scale: e[o] }));
  return r;
}, c1 = (n) => {
  const t = Math.min(n.width, n.height), e = [], s = [];
  e.push(256 / t), e.push(128 / t);
  for (let r = 0; r < e.length; r++)
    s.push(Object.assign(LC({ image: n, ratio: e[r] }), { scale: e[r] }));
  return s;
}, Tq = (n) => {
  const { v1: t, v2: e } = n;
  let s = 0;
  for (let r = 0; r < t.length; r++) {
    let o = (t[r] ^ e[r]) >>> 0;
    s += Nq(o);
  }
  return s;
}, Nq = (n) => {
  var t = n - (n >> 1 & 1431655765);
  return t = (t >> 2 & 858993459) + (t & 858993459), t = (t >> 4) + t & 252645135, t = (t >> 8) + t & 16711935, t = (t >> 16) + t & 65535, t;
}, $q = 1234, Rq = () => ({
  seed: $q,
  arrayShuffle(t) {
    const { arr: e, sampleSize: s } = t;
    for (let r = 0; r < s; r++) {
      this.seed = (214013 * this.seed + 2531011) % -2147483648;
      let o = this.seed >> 16 & 32767;
      o = o % e.length;
      let i = e[r];
      e[r] = e[o], e[o] = i;
    }
  },
  nextInt(t) {
    this.seed = (214013 * this.seed + 2531011) % -2147483648;
    let e = this.seed >> 16 & 32767;
    return e = e % t, e;
  }
}), Eq = 16, Lq = 128, pm = 8, Dq = (n) => {
  const { points: t, pointIndexes: e, randomizer: s } = n, r = [];
  for (let l = 0; l < e.length; l++)
    r.push(l);
  let o = Number.MAX_SAFE_INTEGER, i = -1;
  const a = [];
  for (let l = 0; l < Lq; l++) {
    s.arrayShuffle({ arr: r, sampleSize: pm });
    let c = 0;
    const u = [];
    for (let h = 0; h < e.length; h++) {
      let d = Number.MAX_SAFE_INTEGER;
      for (let p = 0; p < pm; p++) {
        const f = e[r[p]], m = Tq({ v1: t[e[h]].descriptors, v2: t[f].descriptors });
        m < d && (u[h] = r[p], d = m);
      }
      c += d;
    }
    a.push(u), c < o && (o = c, i = l);
  }
  return a[i];
}, u1 = ({ points: n }) => {
  const t = [];
  for (let r = 0; r < n.length; r++)
    t.push(r);
  const e = Rq();
  return { rootNode: DC({ points: n, pointIndexes: t, centerPointIndex: null, randomizer: e }) };
}, DC = (n) => {
  const { points: t, pointIndexes: e, centerPointIndex: s, randomizer: r } = n;
  let o = !1;
  (e.length <= pm || e.length <= Eq) && (o = !0);
  const i = {};
  if (!o) {
    const l = Dq({ points: t, pointIndexes: e, randomizer: r });
    for (let c = 0; c < l.length; c++)
      i[e[l[c]]] === void 0 && (i[e[l[c]]] = []), i[e[l[c]]].push(e[c]);
  }
  Object.keys(i).length === 1 && (o = !0);
  const a = {
    centerPointIndex: s
  };
  if (o) {
    a.leaf = !0, a.pointIndexes = [];
    for (let l = 0; l < e.length; l++)
      a.pointIndexes.push(e[l]);
    return a;
  }
  return a.leaf = !1, a.children = [], Object.keys(i).forEach((l) => {
    a.children.push(DC({ points: t, pointIndexes: i[l], centerPointIndex: l, randomizer: r }));
  }), a;
};
var Vr = 4294967295;
function Gq(n, t, e) {
  var s = e / 4294967296, r = e;
  n.setUint32(t, s), n.setUint32(t + 4, r);
}
function GC(n, t, e) {
  var s = Math.floor(e / 4294967296), r = e;
  n.setUint32(t, s), n.setUint32(t + 4, r);
}
function FC(n, t) {
  var e = n.getInt32(t), s = n.getUint32(t + 4);
  return e * 4294967296 + s;
}
function Fq(n, t) {
  var e = n.getUint32(t), s = n.getUint32(t + 4);
  return e * 4294967296 + s;
}
var hf, df, pf, Ep = (typeof process > "u" || ((hf = process == null ? void 0 : process.env) === null || hf === void 0 ? void 0 : hf.TEXT_ENCODING) !== "never") && typeof TextEncoder < "u" && typeof TextDecoder < "u";
function h1(n) {
  for (var t = n.length, e = 0, s = 0; s < t; ) {
    var r = n.charCodeAt(s++);
    if ((r & 4294967168) === 0) {
      e++;
      continue;
    } else if ((r & 4294965248) === 0)
      e += 2;
    else {
      if (r >= 55296 && r <= 56319 && s < t) {
        var o = n.charCodeAt(s);
        (o & 64512) === 56320 && (++s, r = ((r & 1023) << 10) + (o & 1023) + 65536);
      }
      (r & 4294901760) === 0 ? e += 3 : e += 4;
    }
  }
  return e;
}
function Oq(n, t, e) {
  for (var s = n.length, r = e, o = 0; o < s; ) {
    var i = n.charCodeAt(o++);
    if ((i & 4294967168) === 0) {
      t[r++] = i;
      continue;
    } else if ((i & 4294965248) === 0)
      t[r++] = i >> 6 & 31 | 192;
    else {
      if (i >= 55296 && i <= 56319 && o < s) {
        var a = n.charCodeAt(o);
        (a & 64512) === 56320 && (++o, i = ((i & 1023) << 10) + (a & 1023) + 65536);
      }
      (i & 4294901760) === 0 ? (t[r++] = i >> 12 & 15 | 224, t[r++] = i >> 6 & 63 | 128) : (t[r++] = i >> 18 & 7 | 240, t[r++] = i >> 12 & 63 | 128, t[r++] = i >> 6 & 63 | 128);
    }
    t[r++] = i & 63 | 128;
  }
}
var Wa = Ep ? new TextEncoder() : void 0, Aq = Ep ? typeof process < "u" && ((df = process == null ? void 0 : process.env) === null || df === void 0 ? void 0 : df.TEXT_ENCODING) !== "force" ? 200 : 0 : Vr;
function zq(n, t, e) {
  t.set(Wa.encode(n), e);
}
function Wq(n, t, e) {
  Wa.encodeInto(n, t.subarray(e));
}
var Vq = Wa != null && Wa.encodeInto ? Wq : zq, Mq = 4096;
function OC(n, t, e) {
  for (var s = t, r = s + e, o = [], i = ""; s < r; ) {
    var a = n[s++];
    if ((a & 128) === 0)
      o.push(a);
    else if ((a & 224) === 192) {
      var l = n[s++] & 63;
      o.push((a & 31) << 6 | l);
    } else if ((a & 240) === 224) {
      var l = n[s++] & 63, c = n[s++] & 63;
      o.push((a & 31) << 12 | l << 6 | c);
    } else if ((a & 248) === 240) {
      var l = n[s++] & 63, c = n[s++] & 63, u = n[s++] & 63, h = (a & 7) << 18 | l << 12 | c << 6 | u;
      h > 65535 && (h -= 65536, o.push(h >>> 10 & 1023 | 55296), h = 56320 | h & 1023), o.push(h);
    } else
      o.push(a);
    o.length >= Mq && (i += String.fromCharCode.apply(String, o), o.length = 0);
  }
  return o.length > 0 && (i += String.fromCharCode.apply(String, o)), i;
}
var Pq = Ep ? new TextDecoder() : null, Xq = Ep ? typeof process < "u" && ((pf = process == null ? void 0 : process.env) === null || pf === void 0 ? void 0 : pf.TEXT_DECODER) !== "force" ? 200 : 0 : Vr;
function _q(n, t, e) {
  var s = n.subarray(t, t + e);
  return Pq.decode(s);
}
var du = function() {
  function n(t, e) {
    this.type = t, this.data = e;
  }
  return n;
}(), Kq = globalThis && globalThis.__extends || function() {
  var n = function(t, e) {
    return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(s, r) {
      s.__proto__ = r;
    } || function(s, r) {
      for (var o in r)
        Object.prototype.hasOwnProperty.call(r, o) && (s[o] = r[o]);
    }, n(t, e);
  };
  return function(t, e) {
    if (typeof e != "function" && e !== null)
      throw new TypeError("Class extends value " + String(e) + " is not a constructor or null");
    n(t, e);
    function s() {
      this.constructor = t;
    }
    t.prototype = e === null ? Object.create(e) : (s.prototype = e.prototype, new s());
  };
}(), fs = function(n) {
  Kq(t, n);
  function t(e) {
    var s = n.call(this, e) || this, r = Object.create(t.prototype);
    return Object.setPrototypeOf(s, r), Object.defineProperty(s, "name", {
      configurable: !0,
      enumerable: !1,
      value: t.name
    }), s;
  }
  return t;
}(Error), Zq = -1, Bq = 4294967296 - 1, Hq = 17179869184 - 1;
function Uq(n) {
  var t = n.sec, e = n.nsec;
  if (t >= 0 && e >= 0 && t <= Hq)
    if (e === 0 && t <= Bq) {
      var s = new Uint8Array(4), r = new DataView(s.buffer);
      return r.setUint32(0, t), s;
    } else {
      var o = t / 4294967296, i = t & 4294967295, s = new Uint8Array(8), r = new DataView(s.buffer);
      return r.setUint32(0, e << 2 | o & 3), r.setUint32(4, i), s;
    }
  else {
    var s = new Uint8Array(12), r = new DataView(s.buffer);
    return r.setUint32(0, e), GC(r, 4, t), s;
  }
}
function Yq(n) {
  var t = n.getTime(), e = Math.floor(t / 1e3), s = (t - e * 1e3) * 1e6, r = Math.floor(s / 1e9);
  return {
    sec: e + r,
    nsec: s - r * 1e9
  };
}
function jq(n) {
  if (n instanceof Date) {
    var t = Yq(n);
    return Uq(t);
  } else
    return null;
}
function Jq(n) {
  var t = new DataView(n.buffer, n.byteOffset, n.byteLength);
  switch (n.byteLength) {
    case 4: {
      var e = t.getUint32(0), s = 0;
      return { sec: e, nsec: s };
    }
    case 8: {
      var r = t.getUint32(0), o = t.getUint32(4), e = (r & 3) * 4294967296 + o, s = r >>> 2;
      return { sec: e, nsec: s };
    }
    case 12: {
      var e = FC(t, 4), s = t.getUint32(0);
      return { sec: e, nsec: s };
    }
    default:
      throw new fs("Unrecognized data size for timestamp (expected 4, 8, or 12): ".concat(n.length));
  }
}
function Qq(n) {
  var t = Jq(n);
  return new Date(t.sec * 1e3 + t.nsec / 1e6);
}
var qq = {
  type: Zq,
  encode: jq,
  decode: Qq
}, AC = function() {
  function n() {
    this.builtInEncoders = [], this.builtInDecoders = [], this.encoders = [], this.decoders = [], this.register(qq);
  }
  return n.prototype.register = function(t) {
    var e = t.type, s = t.encode, r = t.decode;
    if (e >= 0)
      this.encoders[e] = s, this.decoders[e] = r;
    else {
      var o = 1 + e;
      this.builtInEncoders[o] = s, this.builtInDecoders[o] = r;
    }
  }, n.prototype.tryToEncode = function(t, e) {
    for (var s = 0; s < this.builtInEncoders.length; s++) {
      var r = this.builtInEncoders[s];
      if (r != null) {
        var o = r(t, e);
        if (o != null) {
          var i = -1 - s;
          return new du(i, o);
        }
      }
    }
    for (var s = 0; s < this.encoders.length; s++) {
      var r = this.encoders[s];
      if (r != null) {
        var o = r(t, e);
        if (o != null) {
          var i = s;
          return new du(i, o);
        }
      }
    }
    return t instanceof du ? t : null;
  }, n.prototype.decode = function(t, e, s) {
    var r = e < 0 ? this.builtInDecoders[-1 - e] : this.decoders[e];
    return r ? r(t, e, s) : new du(e, t);
  }, n.defaultCodec = new n(), n;
}();
function qu(n) {
  return n instanceof Uint8Array ? n : ArrayBuffer.isView(n) ? new Uint8Array(n.buffer, n.byteOffset, n.byteLength) : n instanceof ArrayBuffer ? new Uint8Array(n) : Uint8Array.from(n);
}
function ttt(n) {
  if (n instanceof ArrayBuffer)
    return new DataView(n);
  var t = qu(n);
  return new DataView(t.buffer, t.byteOffset, t.byteLength);
}
var ett = 100, ntt = 2048, stt = function() {
  function n(t, e, s, r, o, i, a, l) {
    t === void 0 && (t = AC.defaultCodec), e === void 0 && (e = void 0), s === void 0 && (s = ett), r === void 0 && (r = ntt), o === void 0 && (o = !1), i === void 0 && (i = !1), a === void 0 && (a = !1), l === void 0 && (l = !1), this.extensionCodec = t, this.context = e, this.maxDepth = s, this.initialBufferSize = r, this.sortKeys = o, this.forceFloat32 = i, this.ignoreUndefined = a, this.forceIntegerToFloat = l, this.pos = 0, this.view = new DataView(new ArrayBuffer(this.initialBufferSize)), this.bytes = new Uint8Array(this.view.buffer);
  }
  return n.prototype.reinitializeState = function() {
    this.pos = 0;
  }, n.prototype.encodeSharedRef = function(t) {
    return this.reinitializeState(), this.doEncode(t, 1), this.bytes.subarray(0, this.pos);
  }, n.prototype.encode = function(t) {
    return this.reinitializeState(), this.doEncode(t, 1), this.bytes.slice(0, this.pos);
  }, n.prototype.doEncode = function(t, e) {
    if (e > this.maxDepth)
      throw new Error("Too deep objects in depth ".concat(e));
    t == null ? this.encodeNil() : typeof t == "boolean" ? this.encodeBoolean(t) : typeof t == "number" ? this.encodeNumber(t) : typeof t == "string" ? this.encodeString(t) : this.encodeObject(t, e);
  }, n.prototype.ensureBufferSizeToWrite = function(t) {
    var e = this.pos + t;
    this.view.byteLength < e && this.resizeBuffer(e * 2);
  }, n.prototype.resizeBuffer = function(t) {
    var e = new ArrayBuffer(t), s = new Uint8Array(e), r = new DataView(e);
    s.set(this.bytes), this.view = r, this.bytes = s;
  }, n.prototype.encodeNil = function() {
    this.writeU8(192);
  }, n.prototype.encodeBoolean = function(t) {
    t === !1 ? this.writeU8(194) : this.writeU8(195);
  }, n.prototype.encodeNumber = function(t) {
    Number.isSafeInteger(t) && !this.forceIntegerToFloat ? t >= 0 ? t < 128 ? this.writeU8(t) : t < 256 ? (this.writeU8(204), this.writeU8(t)) : t < 65536 ? (this.writeU8(205), this.writeU16(t)) : t < 4294967296 ? (this.writeU8(206), this.writeU32(t)) : (this.writeU8(207), this.writeU64(t)) : t >= -32 ? this.writeU8(224 | t + 32) : t >= -128 ? (this.writeU8(208), this.writeI8(t)) : t >= -32768 ? (this.writeU8(209), this.writeI16(t)) : t >= -2147483648 ? (this.writeU8(210), this.writeI32(t)) : (this.writeU8(211), this.writeI64(t)) : this.forceFloat32 ? (this.writeU8(202), this.writeF32(t)) : (this.writeU8(203), this.writeF64(t));
  }, n.prototype.writeStringHeader = function(t) {
    if (t < 32)
      this.writeU8(160 + t);
    else if (t < 256)
      this.writeU8(217), this.writeU8(t);
    else if (t < 65536)
      this.writeU8(218), this.writeU16(t);
    else if (t < 4294967296)
      this.writeU8(219), this.writeU32(t);
    else
      throw new Error("Too long string: ".concat(t, " bytes in UTF-8"));
  }, n.prototype.encodeString = function(t) {
    var e = 5, s = t.length;
    if (s > Aq) {
      var r = h1(t);
      this.ensureBufferSizeToWrite(e + r), this.writeStringHeader(r), Vq(t, this.bytes, this.pos), this.pos += r;
    } else {
      var r = h1(t);
      this.ensureBufferSizeToWrite(e + r), this.writeStringHeader(r), Oq(t, this.bytes, this.pos), this.pos += r;
    }
  }, n.prototype.encodeObject = function(t, e) {
    var s = this.extensionCodec.tryToEncode(t, this.context);
    if (s != null)
      this.encodeExtension(s);
    else if (Array.isArray(t))
      this.encodeArray(t, e);
    else if (ArrayBuffer.isView(t))
      this.encodeBinary(t);
    else if (typeof t == "object")
      this.encodeMap(t, e);
    else
      throw new Error("Unrecognized object: ".concat(Object.prototype.toString.apply(t)));
  }, n.prototype.encodeBinary = function(t) {
    var e = t.byteLength;
    if (e < 256)
      this.writeU8(196), this.writeU8(e);
    else if (e < 65536)
      this.writeU8(197), this.writeU16(e);
    else if (e < 4294967296)
      this.writeU8(198), this.writeU32(e);
    else
      throw new Error("Too large binary: ".concat(e));
    var s = qu(t);
    this.writeU8a(s);
  }, n.prototype.encodeArray = function(t, e) {
    var s = t.length;
    if (s < 16)
      this.writeU8(144 + s);
    else if (s < 65536)
      this.writeU8(220), this.writeU16(s);
    else if (s < 4294967296)
      this.writeU8(221), this.writeU32(s);
    else
      throw new Error("Too large array: ".concat(s));
    for (var r = 0, o = t; r < o.length; r++) {
      var i = o[r];
      this.doEncode(i, e + 1);
    }
  }, n.prototype.countWithoutUndefined = function(t, e) {
    for (var s = 0, r = 0, o = e; r < o.length; r++) {
      var i = o[r];
      t[i] !== void 0 && s++;
    }
    return s;
  }, n.prototype.encodeMap = function(t, e) {
    var s = Object.keys(t);
    this.sortKeys && s.sort();
    var r = this.ignoreUndefined ? this.countWithoutUndefined(t, s) : s.length;
    if (r < 16)
      this.writeU8(128 + r);
    else if (r < 65536)
      this.writeU8(222), this.writeU16(r);
    else if (r < 4294967296)
      this.writeU8(223), this.writeU32(r);
    else
      throw new Error("Too large map object: ".concat(r));
    for (var o = 0, i = s; o < i.length; o++) {
      var a = i[o], l = t[a];
      this.ignoreUndefined && l === void 0 || (this.encodeString(a), this.doEncode(l, e + 1));
    }
  }, n.prototype.encodeExtension = function(t) {
    var e = t.data.length;
    if (e === 1)
      this.writeU8(212);
    else if (e === 2)
      this.writeU8(213);
    else if (e === 4)
      this.writeU8(214);
    else if (e === 8)
      this.writeU8(215);
    else if (e === 16)
      this.writeU8(216);
    else if (e < 256)
      this.writeU8(199), this.writeU8(e);
    else if (e < 65536)
      this.writeU8(200), this.writeU16(e);
    else if (e < 4294967296)
      this.writeU8(201), this.writeU32(e);
    else
      throw new Error("Too large extension object: ".concat(e));
    this.writeI8(t.type), this.writeU8a(t.data);
  }, n.prototype.writeU8 = function(t) {
    this.ensureBufferSizeToWrite(1), this.view.setUint8(this.pos, t), this.pos++;
  }, n.prototype.writeU8a = function(t) {
    var e = t.length;
    this.ensureBufferSizeToWrite(e), this.bytes.set(t, this.pos), this.pos += e;
  }, n.prototype.writeI8 = function(t) {
    this.ensureBufferSizeToWrite(1), this.view.setInt8(this.pos, t), this.pos++;
  }, n.prototype.writeU16 = function(t) {
    this.ensureBufferSizeToWrite(2), this.view.setUint16(this.pos, t), this.pos += 2;
  }, n.prototype.writeI16 = function(t) {
    this.ensureBufferSizeToWrite(2), this.view.setInt16(this.pos, t), this.pos += 2;
  }, n.prototype.writeU32 = function(t) {
    this.ensureBufferSizeToWrite(4), this.view.setUint32(this.pos, t), this.pos += 4;
  }, n.prototype.writeI32 = function(t) {
    this.ensureBufferSizeToWrite(4), this.view.setInt32(this.pos, t), this.pos += 4;
  }, n.prototype.writeF32 = function(t) {
    this.ensureBufferSizeToWrite(4), this.view.setFloat32(this.pos, t), this.pos += 4;
  }, n.prototype.writeF64 = function(t) {
    this.ensureBufferSizeToWrite(8), this.view.setFloat64(this.pos, t), this.pos += 8;
  }, n.prototype.writeU64 = function(t) {
    this.ensureBufferSizeToWrite(8), Gq(this.view, this.pos, t), this.pos += 8;
  }, n.prototype.writeI64 = function(t) {
    this.ensureBufferSizeToWrite(8), GC(this.view, this.pos, t), this.pos += 8;
  }, n;
}(), rtt = {};
function d1(n, t) {
  t === void 0 && (t = rtt);
  var e = new stt(t.extensionCodec, t.context, t.maxDepth, t.initialBufferSize, t.sortKeys, t.forceFloat32, t.ignoreUndefined, t.forceIntegerToFloat);
  return e.encodeSharedRef(n);
}
function ff(n) {
  return "".concat(n < 0 ? "-" : "", "0x").concat(Math.abs(n).toString(16).padStart(2, "0"));
}
var ott = 16, itt = 16, att = function() {
  function n(t, e) {
    t === void 0 && (t = ott), e === void 0 && (e = itt), this.maxKeyLength = t, this.maxLengthPerKey = e, this.hit = 0, this.miss = 0, this.caches = [];
    for (var s = 0; s < this.maxKeyLength; s++)
      this.caches.push([]);
  }
  return n.prototype.canBeCached = function(t) {
    return t > 0 && t <= this.maxKeyLength;
  }, n.prototype.find = function(t, e, s) {
    var r = this.caches[s - 1];
    t:
      for (var o = 0, i = r; o < i.length; o++) {
        for (var a = i[o], l = a.bytes, c = 0; c < s; c++)
          if (l[c] !== t[e + c])
            continue t;
        return a.str;
      }
    return null;
  }, n.prototype.store = function(t, e) {
    var s = this.caches[t.length - 1], r = { bytes: t, str: e };
    s.length >= this.maxLengthPerKey ? s[Math.random() * s.length | 0] = r : s.push(r);
  }, n.prototype.decode = function(t, e, s) {
    var r = this.find(t, e, s);
    if (r != null)
      return this.hit++, r;
    this.miss++;
    var o = OC(t, e, s), i = Uint8Array.prototype.slice.call(t, e, e + s);
    return this.store(i, o), o;
  }, n;
}(), ltt = globalThis && globalThis.__awaiter || function(n, t, e, s) {
  function r(o) {
    return o instanceof e ? o : new e(function(i) {
      i(o);
    });
  }
  return new (e || (e = Promise))(function(o, i) {
    function a(u) {
      try {
        c(s.next(u));
      } catch (h) {
        i(h);
      }
    }
    function l(u) {
      try {
        c(s.throw(u));
      } catch (h) {
        i(h);
      }
    }
    function c(u) {
      u.done ? o(u.value) : r(u.value).then(a, l);
    }
    c((s = s.apply(n, t || [])).next());
  });
}, mf = globalThis && globalThis.__generator || function(n, t) {
  var e = { label: 0, sent: function() {
    if (o[0] & 1)
      throw o[1];
    return o[1];
  }, trys: [], ops: [] }, s, r, o, i;
  return i = { next: a(0), throw: a(1), return: a(2) }, typeof Symbol == "function" && (i[Symbol.iterator] = function() {
    return this;
  }), i;
  function a(c) {
    return function(u) {
      return l([c, u]);
    };
  }
  function l(c) {
    if (s)
      throw new TypeError("Generator is already executing.");
    for (; e; )
      try {
        if (s = 1, r && (o = c[0] & 2 ? r.return : c[0] ? r.throw || ((o = r.return) && o.call(r), 0) : r.next) && !(o = o.call(r, c[1])).done)
          return o;
        switch (r = 0, o && (c = [c[0] & 2, o.value]), c[0]) {
          case 0:
          case 1:
            o = c;
            break;
          case 4:
            return e.label++, { value: c[1], done: !1 };
          case 5:
            e.label++, r = c[1], c = [0];
            continue;
          case 7:
            c = e.ops.pop(), e.trys.pop();
            continue;
          default:
            if (o = e.trys, !(o = o.length > 0 && o[o.length - 1]) && (c[0] === 6 || c[0] === 2)) {
              e = 0;
              continue;
            }
            if (c[0] === 3 && (!o || c[1] > o[0] && c[1] < o[3])) {
              e.label = c[1];
              break;
            }
            if (c[0] === 6 && e.label < o[1]) {
              e.label = o[1], o = c;
              break;
            }
            if (o && e.label < o[2]) {
              e.label = o[2], e.ops.push(c);
              break;
            }
            o[2] && e.ops.pop(), e.trys.pop();
            continue;
        }
        c = t.call(n, e);
      } catch (u) {
        c = [6, u], r = 0;
      } finally {
        s = o = 0;
      }
    if (c[0] & 5)
      throw c[1];
    return { value: c[0] ? c[1] : void 0, done: !0 };
  }
}, p1 = globalThis && globalThis.__asyncValues || function(n) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var t = n[Symbol.asyncIterator], e;
  return t ? t.call(n) : (n = typeof __values == "function" ? __values(n) : n[Symbol.iterator](), e = {}, s("next"), s("throw"), s("return"), e[Symbol.asyncIterator] = function() {
    return this;
  }, e);
  function s(o) {
    e[o] = n[o] && function(i) {
      return new Promise(function(a, l) {
        i = n[o](i), r(a, l, i.done, i.value);
      });
    };
  }
  function r(o, i, a, l) {
    Promise.resolve(l).then(function(c) {
      o({ value: c, done: a });
    }, i);
  }
}, Fo = globalThis && globalThis.__await || function(n) {
  return this instanceof Fo ? (this.v = n, this) : new Fo(n);
}, ctt = globalThis && globalThis.__asyncGenerator || function(n, t, e) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var s = e.apply(n, t || []), r, o = [];
  return r = {}, i("next"), i("throw"), i("return"), r[Symbol.asyncIterator] = function() {
    return this;
  }, r;
  function i(d) {
    s[d] && (r[d] = function(p) {
      return new Promise(function(f, m) {
        o.push([d, p, f, m]) > 1 || a(d, p);
      });
    });
  }
  function a(d, p) {
    try {
      l(s[d](p));
    } catch (f) {
      h(o[0][3], f);
    }
  }
  function l(d) {
    d.value instanceof Fo ? Promise.resolve(d.value.v).then(c, u) : h(o[0][2], d);
  }
  function c(d) {
    a("next", d);
  }
  function u(d) {
    a("throw", d);
  }
  function h(d, p) {
    d(p), o.shift(), o.length && a(o[0][0], o[0][1]);
  }
}, utt = function(n) {
  var t = typeof n;
  return t === "string" || t === "number";
}, Na = -1, Ib = new DataView(new ArrayBuffer(0)), htt = new Uint8Array(Ib.buffer), fm = function() {
  try {
    Ib.getInt8(0);
  } catch (n) {
    return n.constructor;
  }
  throw new Error("never reached");
}(), f1 = new fm("Insufficient data"), dtt = new att(), ptt = function() {
  function n(t, e, s, r, o, i, a, l) {
    t === void 0 && (t = AC.defaultCodec), e === void 0 && (e = void 0), s === void 0 && (s = Vr), r === void 0 && (r = Vr), o === void 0 && (o = Vr), i === void 0 && (i = Vr), a === void 0 && (a = Vr), l === void 0 && (l = dtt), this.extensionCodec = t, this.context = e, this.maxStrLength = s, this.maxBinLength = r, this.maxArrayLength = o, this.maxMapLength = i, this.maxExtLength = a, this.keyDecoder = l, this.totalPos = 0, this.pos = 0, this.view = Ib, this.bytes = htt, this.headByte = Na, this.stack = [];
  }
  return n.prototype.reinitializeState = function() {
    this.totalPos = 0, this.headByte = Na, this.stack.length = 0;
  }, n.prototype.setBuffer = function(t) {
    this.bytes = qu(t), this.view = ttt(this.bytes), this.pos = 0;
  }, n.prototype.appendBuffer = function(t) {
    if (this.headByte === Na && !this.hasRemaining(1))
      this.setBuffer(t);
    else {
      var e = this.bytes.subarray(this.pos), s = qu(t), r = new Uint8Array(e.length + s.length);
      r.set(e), r.set(s, e.length), this.setBuffer(r);
    }
  }, n.prototype.hasRemaining = function(t) {
    return this.view.byteLength - this.pos >= t;
  }, n.prototype.createExtraByteError = function(t) {
    var e = this, s = e.view, r = e.pos;
    return new RangeError("Extra ".concat(s.byteLength - r, " of ").concat(s.byteLength, " byte(s) found at buffer[").concat(t, "]"));
  }, n.prototype.decode = function(t) {
    this.reinitializeState(), this.setBuffer(t);
    var e = this.doDecodeSync();
    if (this.hasRemaining(1))
      throw this.createExtraByteError(this.pos);
    return e;
  }, n.prototype.decodeMulti = function(t) {
    return mf(this, function(e) {
      switch (e.label) {
        case 0:
          this.reinitializeState(), this.setBuffer(t), e.label = 1;
        case 1:
          return this.hasRemaining(1) ? [4, this.doDecodeSync()] : [3, 3];
        case 2:
          return e.sent(), [3, 1];
        case 3:
          return [2];
      }
    });
  }, n.prototype.decodeAsync = function(t) {
    var e, s, r, o;
    return ltt(this, void 0, void 0, function() {
      var i, a, l, c, u, h, d, p;
      return mf(this, function(f) {
        switch (f.label) {
          case 0:
            i = !1, f.label = 1;
          case 1:
            f.trys.push([1, 6, 7, 12]), e = p1(t), f.label = 2;
          case 2:
            return [4, e.next()];
          case 3:
            if (s = f.sent(), !!s.done)
              return [3, 5];
            if (l = s.value, i)
              throw this.createExtraByteError(this.totalPos);
            this.appendBuffer(l);
            try {
              a = this.doDecodeSync(), i = !0;
            } catch (m) {
              if (!(m instanceof fm))
                throw m;
            }
            this.totalPos += this.pos, f.label = 4;
          case 4:
            return [3, 2];
          case 5:
            return [3, 12];
          case 6:
            return c = f.sent(), r = { error: c }, [3, 12];
          case 7:
            return f.trys.push([7, , 10, 11]), s && !s.done && (o = e.return) ? [4, o.call(e)] : [3, 9];
          case 8:
            f.sent(), f.label = 9;
          case 9:
            return [3, 11];
          case 10:
            if (r)
              throw r.error;
            return [7];
          case 11:
            return [7];
          case 12:
            if (i) {
              if (this.hasRemaining(1))
                throw this.createExtraByteError(this.totalPos);
              return [2, a];
            }
            throw u = this, h = u.headByte, d = u.pos, p = u.totalPos, new RangeError("Insufficient data in parsing ".concat(ff(h), " at ").concat(p, " (").concat(d, " in the current buffer)"));
        }
      });
    });
  }, n.prototype.decodeArrayStream = function(t) {
    return this.decodeMultiAsync(t, !0);
  }, n.prototype.decodeStream = function(t) {
    return this.decodeMultiAsync(t, !1);
  }, n.prototype.decodeMultiAsync = function(t, e) {
    return ctt(this, arguments, function() {
      var r, o, i, a, l, c, u, h, d;
      return mf(this, function(p) {
        switch (p.label) {
          case 0:
            r = e, o = -1, p.label = 1;
          case 1:
            p.trys.push([1, 13, 14, 19]), i = p1(t), p.label = 2;
          case 2:
            return [4, Fo(i.next())];
          case 3:
            if (a = p.sent(), !!a.done)
              return [3, 12];
            if (l = a.value, e && o === 0)
              throw this.createExtraByteError(this.totalPos);
            this.appendBuffer(l), r && (o = this.readArraySize(), r = !1, this.complete()), p.label = 4;
          case 4:
            p.trys.push([4, 9, , 10]), p.label = 5;
          case 5:
            return [4, Fo(this.doDecodeSync())];
          case 6:
            return [4, p.sent()];
          case 7:
            return p.sent(), --o === 0 ? [3, 8] : [3, 5];
          case 8:
            return [3, 10];
          case 9:
            if (c = p.sent(), !(c instanceof fm))
              throw c;
            return [3, 10];
          case 10:
            this.totalPos += this.pos, p.label = 11;
          case 11:
            return [3, 2];
          case 12:
            return [3, 19];
          case 13:
            return u = p.sent(), h = { error: u }, [3, 19];
          case 14:
            return p.trys.push([14, , 17, 18]), a && !a.done && (d = i.return) ? [4, Fo(d.call(i))] : [3, 16];
          case 15:
            p.sent(), p.label = 16;
          case 16:
            return [3, 18];
          case 17:
            if (h)
              throw h.error;
            return [7];
          case 18:
            return [7];
          case 19:
            return [2];
        }
      });
    });
  }, n.prototype.doDecodeSync = function() {
    t:
      for (; ; ) {
        var t = this.readHeadByte(), e = void 0;
        if (t >= 224)
          e = t - 256;
        else if (t < 192)
          if (t < 128)
            e = t;
          else if (t < 144) {
            var s = t - 128;
            if (s !== 0) {
              this.pushMapState(s), this.complete();
              continue t;
            } else
              e = {};
          } else if (t < 160) {
            var s = t - 144;
            if (s !== 0) {
              this.pushArrayState(s), this.complete();
              continue t;
            } else
              e = [];
          } else {
            var r = t - 160;
            e = this.decodeUtf8String(r, 0);
          }
        else if (t === 192)
          e = null;
        else if (t === 194)
          e = !1;
        else if (t === 195)
          e = !0;
        else if (t === 202)
          e = this.readF32();
        else if (t === 203)
          e = this.readF64();
        else if (t === 204)
          e = this.readU8();
        else if (t === 205)
          e = this.readU16();
        else if (t === 206)
          e = this.readU32();
        else if (t === 207)
          e = this.readU64();
        else if (t === 208)
          e = this.readI8();
        else if (t === 209)
          e = this.readI16();
        else if (t === 210)
          e = this.readI32();
        else if (t === 211)
          e = this.readI64();
        else if (t === 217) {
          var r = this.lookU8();
          e = this.decodeUtf8String(r, 1);
        } else if (t === 218) {
          var r = this.lookU16();
          e = this.decodeUtf8String(r, 2);
        } else if (t === 219) {
          var r = this.lookU32();
          e = this.decodeUtf8String(r, 4);
        } else if (t === 220) {
          var s = this.readU16();
          if (s !== 0) {
            this.pushArrayState(s), this.complete();
            continue t;
          } else
            e = [];
        } else if (t === 221) {
          var s = this.readU32();
          if (s !== 0) {
            this.pushArrayState(s), this.complete();
            continue t;
          } else
            e = [];
        } else if (t === 222) {
          var s = this.readU16();
          if (s !== 0) {
            this.pushMapState(s), this.complete();
            continue t;
          } else
            e = {};
        } else if (t === 223) {
          var s = this.readU32();
          if (s !== 0) {
            this.pushMapState(s), this.complete();
            continue t;
          } else
            e = {};
        } else if (t === 196) {
          var s = this.lookU8();
          e = this.decodeBinary(s, 1);
        } else if (t === 197) {
          var s = this.lookU16();
          e = this.decodeBinary(s, 2);
        } else if (t === 198) {
          var s = this.lookU32();
          e = this.decodeBinary(s, 4);
        } else if (t === 212)
          e = this.decodeExtension(1, 0);
        else if (t === 213)
          e = this.decodeExtension(2, 0);
        else if (t === 214)
          e = this.decodeExtension(4, 0);
        else if (t === 215)
          e = this.decodeExtension(8, 0);
        else if (t === 216)
          e = this.decodeExtension(16, 0);
        else if (t === 199) {
          var s = this.lookU8();
          e = this.decodeExtension(s, 1);
        } else if (t === 200) {
          var s = this.lookU16();
          e = this.decodeExtension(s, 2);
        } else if (t === 201) {
          var s = this.lookU32();
          e = this.decodeExtension(s, 4);
        } else
          throw new fs("Unrecognized type byte: ".concat(ff(t)));
        this.complete();
        for (var o = this.stack; o.length > 0; ) {
          var i = o[o.length - 1];
          if (i.type === 0)
            if (i.array[i.position] = e, i.position++, i.position === i.size)
              o.pop(), e = i.array;
            else
              continue t;
          else if (i.type === 1) {
            if (!utt(e))
              throw new fs("The type of key must be string or number but " + typeof e);
            if (e === "__proto__")
              throw new fs("The key __proto__ is not allowed");
            i.key = e, i.type = 2;
            continue t;
          } else if (i.map[i.key] = e, i.readCount++, i.readCount === i.size)
            o.pop(), e = i.map;
          else {
            i.key = null, i.type = 1;
            continue t;
          }
        }
        return e;
      }
  }, n.prototype.readHeadByte = function() {
    return this.headByte === Na && (this.headByte = this.readU8()), this.headByte;
  }, n.prototype.complete = function() {
    this.headByte = Na;
  }, n.prototype.readArraySize = function() {
    var t = this.readHeadByte();
    switch (t) {
      case 220:
        return this.readU16();
      case 221:
        return this.readU32();
      default: {
        if (t < 160)
          return t - 144;
        throw new fs("Unrecognized array type byte: ".concat(ff(t)));
      }
    }
  }, n.prototype.pushMapState = function(t) {
    if (t > this.maxMapLength)
      throw new fs("Max length exceeded: map length (".concat(t, ") > maxMapLengthLength (").concat(this.maxMapLength, ")"));
    this.stack.push({
      type: 1,
      size: t,
      key: null,
      readCount: 0,
      map: {}
    });
  }, n.prototype.pushArrayState = function(t) {
    if (t > this.maxArrayLength)
      throw new fs("Max length exceeded: array length (".concat(t, ") > maxArrayLength (").concat(this.maxArrayLength, ")"));
    this.stack.push({
      type: 0,
      size: t,
      array: new Array(t),
      position: 0
    });
  }, n.prototype.decodeUtf8String = function(t, e) {
    var s;
    if (t > this.maxStrLength)
      throw new fs("Max length exceeded: UTF-8 byte length (".concat(t, ") > maxStrLength (").concat(this.maxStrLength, ")"));
    if (this.bytes.byteLength < this.pos + e + t)
      throw f1;
    var r = this.pos + e, o;
    return this.stateIsMapKey() && ((s = this.keyDecoder) === null || s === void 0 ? void 0 : s.canBeCached(t)) ? o = this.keyDecoder.decode(this.bytes, r, t) : t > Xq ? o = _q(this.bytes, r, t) : o = OC(this.bytes, r, t), this.pos += e + t, o;
  }, n.prototype.stateIsMapKey = function() {
    if (this.stack.length > 0) {
      var t = this.stack[this.stack.length - 1];
      return t.type === 1;
    }
    return !1;
  }, n.prototype.decodeBinary = function(t, e) {
    if (t > this.maxBinLength)
      throw new fs("Max length exceeded: bin length (".concat(t, ") > maxBinLength (").concat(this.maxBinLength, ")"));
    if (!this.hasRemaining(t + e))
      throw f1;
    var s = this.pos + e, r = this.bytes.subarray(s, s + t);
    return this.pos += e + t, r;
  }, n.prototype.decodeExtension = function(t, e) {
    if (t > this.maxExtLength)
      throw new fs("Max length exceeded: ext length (".concat(t, ") > maxExtLength (").concat(this.maxExtLength, ")"));
    var s = this.view.getInt8(this.pos + e), r = this.decodeBinary(t, e + 1);
    return this.extensionCodec.decode(r, s, this.context);
  }, n.prototype.lookU8 = function() {
    return this.view.getUint8(this.pos);
  }, n.prototype.lookU16 = function() {
    return this.view.getUint16(this.pos);
  }, n.prototype.lookU32 = function() {
    return this.view.getUint32(this.pos);
  }, n.prototype.readU8 = function() {
    var t = this.view.getUint8(this.pos);
    return this.pos++, t;
  }, n.prototype.readI8 = function() {
    var t = this.view.getInt8(this.pos);
    return this.pos++, t;
  }, n.prototype.readU16 = function() {
    var t = this.view.getUint16(this.pos);
    return this.pos += 2, t;
  }, n.prototype.readI16 = function() {
    var t = this.view.getInt16(this.pos);
    return this.pos += 2, t;
  }, n.prototype.readU32 = function() {
    var t = this.view.getUint32(this.pos);
    return this.pos += 4, t;
  }, n.prototype.readI32 = function() {
    var t = this.view.getInt32(this.pos);
    return this.pos += 4, t;
  }, n.prototype.readU64 = function() {
    var t = Fq(this.view, this.pos);
    return this.pos += 8, t;
  }, n.prototype.readI64 = function() {
    var t = FC(this.view, this.pos);
    return this.pos += 8, t;
  }, n.prototype.readF32 = function() {
    var t = this.view.getFloat32(this.pos);
    return this.pos += 4, t;
  }, n.prototype.readF64 = function() {
    var t = this.view.getFloat64(this.pos);
    return this.pos += 8, t;
  }, n;
}(), ftt = {};
function m1(n, t) {
  t === void 0 && (t = ftt);
  var e = new ptt(t.extensionCodec, t.context, t.maxStrLength, t.maxBinLength, t.maxArrayLength, t.maxMapLength, t.maxExtLength);
  return e.decode(n);
}
var mtt = function(n, t) {
  return Object.assign(document.createElement("canvas"), { width: n, height: t });
};
class g1 {
  constructor(t, e, s) {
    this.cumsum = [];
    for (let r = 0; r < s; r++) {
      this.cumsum.push([]);
      for (let o = 0; o < e; o++)
        this.cumsum[r].push(0);
    }
    this.cumsum[0][0] = t[0];
    for (let r = 1; r < e; r++)
      this.cumsum[0][r] = this.cumsum[0][r - 1] + t[r];
    for (let r = 1; r < s; r++)
      this.cumsum[r][0] = this.cumsum[r - 1][0] + t[r * e];
    for (let r = 1; r < s; r++)
      for (let o = 1; o < e; o++)
        this.cumsum[r][o] = t[r * e + o] + this.cumsum[r - 1][o] + this.cumsum[r][o - 1] - this.cumsum[r - 1][o - 1];
  }
  query(t, e, s, r) {
    let o = this.cumsum[r][s];
    return e > 0 && (o -= this.cumsum[e - 1][s]), t > 0 && (o -= this.cumsum[r][t - 1]), t > 0 && e > 0 && (o += this.cumsum[e - 1][t - 1]), o;
  }
}
const pu = 10, gf = 2, Ce = 6, gtt = 5, y1 = 0.95, ytt = 0.9, btt = 0.2, xtt = 8, wtt = 24 * 2 / 3, Itt = (n) => {
  const { data: t, width: e, height: s, scale: r } = n, o = [e * s];
  for (let y = 0; y < o.length; y++)
    o[y] = !1;
  const i = new Float32Array(t.length);
  for (let y = 0; y < e; y++)
    i[y] = -1, i[e * (s - 1) + y] = -1;
  for (let y = 0; y < s; y++)
    i[y * e] = -1, i[y * e + e - 1] = -1;
  for (let y = 1; y < e - 1; y++)
    for (let b = 1; b < s - 1; b++) {
      let w = y + e * b, x = 0, S = 0;
      for (let v = -1; v <= 1; v++)
        x += t[w + e * v + 1] - t[w + e * v - 1], S += t[w + e + v] - t[w - e + v];
      x /= 3 * 256, S /= 3 * 256, i[w] = Math.sqrt((x * x + S * S) / 2);
    }
  const a = new Uint32Array(1e3);
  for (let y = 0; y < 1e3; y++)
    a[y] = 0;
  const l = [-1, 1, -e, e];
  for (let y = 1; y < e - 1; y++)
    for (let b = 1; b < s - 1; b++) {
      let w = y + e * b, x = !0;
      for (let S = 0; S < l.length; S++)
        if (i[w] <= i[w + l[S]]) {
          x = !1;
          break;
        }
      if (x) {
        let S = Math.floor(i[w] * 1e3);
        S > 999 && (S = 999), S < 0 && (S = 0), a[S] += 1, o[w] = !0;
      }
    }
  const c = 0.02 * e * s;
  let u = 999, h = 0;
  for (; u >= 0 && (h += a[u], !(h > c)); )
    u--;
  for (let y = 0; y < o.length; y++)
    o[y] && i[y] * 1e3 < u && (o[y] = !1);
  const d = [];
  for (let y = 0; y < t.length; y++)
    d[y] = t[y] * t[y];
  const p = new g1(t, e, s), f = new g1(d, e, s), m = new Float32Array(t.length);
  for (let y = 0; y < e; y++)
    for (let b = 0; b < s; b++) {
      const w = b * e + y;
      if (!o[w]) {
        m[w] = 1;
        continue;
      }
      const x = zC({ image: n, cx: y, cy: b, sdThresh: gtt, imageDataCumsum: p, imageDataSqrCumsum: f });
      if (x === null) {
        m[w] = 1;
        continue;
      }
      let S = -1;
      for (let v = -pu; v <= pu; v++) {
        for (let T = -pu; T <= pu; T++) {
          if (T * T + v * v <= gf * gf)
            continue;
          const N = WC({ image: n, cx: y + T, cy: b + v, vlen: x, tx: y, ty: b, imageDataCumsum: p, imageDataSqrCumsum: f });
          if (N !== null && N > S && (S = N, S > y1))
            break;
        }
        if (S > y1)
          break;
      }
      m[w] = S;
    }
  return Stt({ image: n, featureMap: m, templateSize: Ce, searchSize: gf, occSize: wtt, maxSimThresh: ytt, minSimThresh: btt, sdThresh: xtt, imageDataCumsum: p, imageDataSqrCumsum: f });
}, Stt = (n) => {
  let { image: t, featureMap: e, templateSize: s, searchSize: r, occSize: o, maxSimThresh: i, minSimThresh: a, sdThresh: l, imageDataCumsum: c, imageDataSqrCumsum: u } = n;
  const { data: h, width: d, height: p, scale: f } = t;
  o = Math.floor(Math.min(t.width, t.height) / 10);
  const m = (s * 2 + 1) * 3, g = Math.floor(d / m), y = Math.floor(p / m);
  let b = Math.floor(d / o) * Math.floor(p / o) + g * y;
  const w = [], x = new Float32Array(h.length);
  for (let v = 0; v < x.length; v++)
    x[v] = e[v];
  let S = 0;
  for (; S < b; ) {
    let v = i, T = -1, N = -1;
    for (let z = 0; z < p; z++)
      for (let W = 0; W < d; W++)
        x[z * d + W] < v && (v = x[z * d + W], T = W, N = z);
    if (T === -1)
      break;
    const $ = zC({ image: t, cx: T, cy: N, sdThresh: 0, imageDataCumsum: c, imageDataSqrCumsum: u });
    if ($ === null) {
      x[N * d + T] = 1;
      continue;
    }
    if ($ / (s * 2 + 1) < l) {
      x[N * d + T] = 1;
      continue;
    }
    let R = 1, F = -1;
    for (let z = -r; z <= r; z++) {
      for (let W = -r; W <= r; W++) {
        if (W * W + z * z > r * r || W === 0 && z === 0)
          continue;
        const M = WC({ image: t, vlen: $, cx: T + W, cy: N + z, tx: T, ty: N, imageDataCumsum: c, imageDataSqrCumsum: u });
        if (M !== null && (M < R && (R = M, R < a && R < v) || M > F && (F = M, F > 0.99)))
          break;
      }
      if (R < a && R < v || F > 0.99)
        break;
    }
    if (R < a && R < v || F > 0.99) {
      x[N * d + T] = 1;
      continue;
    }
    w.push({ x: T, y: N }), S += 1;
    for (let z = -o; z <= o; z++)
      for (let W = -o; W <= o; W++)
        N + z < 0 || N + z >= p || T + W < 0 || T + W >= d || (x[(N + z) * d + (T + W)] = 1);
  }
  return w;
}, zC = ({ image: n, cx: t, cy: e, sdThresh: s, imageDataCumsum: r, imageDataSqrCumsum: o }) => {
  if (t - Ce < 0 || t + Ce >= n.width || e - Ce < 0 || e + Ce >= n.height)
    return null;
  const i = 2 * Ce + 1, a = i * i;
  let l = r.query(t - Ce, e - Ce, t + Ce, e + Ce);
  l /= a;
  let c = o.query(t - Ce, e - Ce, t + Ce, e + Ce);
  return c -= 2 * l * r.query(t - Ce, e - Ce, t + Ce, e + Ce), c += a * l * l, c / a < s * s ? null : (c = Math.sqrt(c), c);
}, WC = (n) => {
  const { image: t, cx: e, cy: s, vlen: r, tx: o, ty: i, imageDataCumsum: a, imageDataSqrCumsum: l } = n, { data: c, width: u, height: h } = t, d = Ce;
  if (e - d < 0 || e + d >= u || s - d < 0 || s + d >= h)
    return null;
  const p = 2 * d + 1;
  let f = a.query(e - d, s - d, e + d, s + d), m = l.query(e - d, s - d, e + d, s + d), g = 0, y = (s - d) * u + (e - d), b = (i - d) * u + (o - d), w = u - p;
  for (let T = 0; T < p; T++) {
    for (let N = 0; N < p; N++)
      g += c[y] * c[b], y += 1, b += 1;
    y += w, b += w;
  }
  let x = a.query(o - d, i - d, o + d, i + d);
  x /= p * p, g -= x * f;
  let S = m - f * f / (p * p);
  return S == 0 ? null : (S = Math.sqrt(S), 1 * g / (r * S));
}, yf = 2;
class vtt {
  constructor(t = !1) {
    this.data = null, this.avoidWorker = t;
  }
  compileImageTargets(t, e) {
    return new Promise(async (s, r) => {
      const o = [];
      for (let h = 0; h < t.length; h++) {
        const d = t[h], f = mtt(d.width, d.height).getContext("2d");
        f.drawImage(d, 0, 0, d.width, d.height);
        const m = f.getImageData(
          0,
          0,
          d.width,
          d.height
        ), g = new Uint8Array(d.width * d.height);
        for (let b = 0; b < g.length; b++) {
          const w = b * 4;
          g[b] = Math.floor(
            (m.data[w] + m.data[w + 1] + m.data[w + 2]) / 3
          );
        }
        const y = {
          data: g,
          height: d.height,
          width: d.width
        };
        o.push(y);
      }
      const i = 50 / o.length;
      let a = 0;
      this.data = [];
      for (let h = 0; h < o.length; h++) {
        const d = o[h], p = kq(d), f = i / p.length, m = await Ctt(p, () => {
          a += f, e(a);
        });
        this.data.push({
          targetImage: d,
          imageList: p,
          matchingData: m
        });
      }
      for (let h = 0; h < o.length; h++) {
        const d = c1(o[h]);
        this.data[h].trackingImageList = d;
      }
      const c = await (() => new Promise((h, d) => {
        if (this.avoidWorker) {
          const p = 50 / o.length;
          let f = 0;
          const m = [];
          for (let g = 0; g < o.length; g++) {
            const y = o[g], b = c1(y), w = p / b.length, x = ktt(
              b,
              (S) => {
                f += w, e(50 + f);
              }
            );
            m.push(x);
          }
          h(m);
        } else {
          const p = new Worker(
            new URL("" + new URL("assets/compiler.worker.a69dc9d5.js", import.meta.url).href, self.location)
          );
          p.onmessage = (f) => {
            f.data.type === "progress" ? e(50 + f.data.percent) : f.data.type === "compileDone" && h(f.data.list);
          }, p.postMessage({ type: "compile", targetImages: o });
        }
      }))();
      for (let h = 0; h < o.length; h++)
        this.data[h].trackingData = c[h];
      const u = [];
      for (let h = 0; h < this.data.length; h++)
        u.push({
          targetImage: {
            width: this.data[h].targetImage.width,
            height: this.data[h].targetImage.height
          },
          trackingData: this.data[h].trackingData,
          matchingData: this.data[h].matchingData
        });
      s(u[0]);
    });
  }
  encodeData(t) {
    return d1({
      v: yf,
      data: t
    });
  }
  decodeData(t) {
    return m1(new Uint8Array(t));
  }
  exportData(t) {
    return d1({
      v: yf,
      dataList: t
    });
  }
  importData(t) {
    const e = m1(new Uint8Array(t));
    if (!e.v || e.v !== yf)
      return console.error("Your compiled .mind might be outdated. Please recompile"), [];
    const { dataList: s } = e;
    this.data = [];
    for (let r = 0; r < s.length; r++)
      this.data.push({
        targetImage: s[r].targetImage,
        trackingData: s[r].trackingData,
        matchingData: s[r].matchingData
      });
    return this.data;
  }
}
const Ctt = async (n, t) => {
  const e = [];
  for (let s = 0; s < n.length; s++) {
    const r = n[s], o = new EC(r.width, r.height);
    await Cc(), A(() => {
      const i = ee(r.data, [r.data.length], "float32").reshape([r.height, r.width]), { featurePoints: a } = o.detect(i), l = a.filter((d) => d.maxima), c = a.filter((d) => !d.maxima), u = u1({
        points: l
      }), h = u1({
        points: c
      });
      e.push({
        maximaPoints: l,
        minimaPoints: c,
        maximaPointsCluster: u,
        minimaPointsCluster: h,
        width: r.width,
        height: r.height,
        scale: r.scale
      }), t(s);
    });
  }
  return e;
}, ktt = (n, t) => {
  const e = [];
  for (let s = 0; s < n.length; s++) {
    const r = n[s], o = Itt(r), i = {
      data: r.data,
      scale: r.scale,
      width: r.width,
      height: r.height,
      points: o
    };
    e.push(i), t(s);
  }
  return e;
};
class Ttt {
  constructor(t, e) {
    this.width = t, this.height = e, this.texShape = [e, t];
    const s = document.createElement("canvas").getContext("2d");
    s.canvas.width = t, s.canvas.height = e, this.context = s, this.program = this.buildProgram(t, e);
    const r = Fs();
    this.tempPixelHandle = r.makeTensorInfo(this.texShape, "float32"), r.texData.get(this.tempPixelHandle.dataId).usage = 2;
  }
  _loadInput(t) {
    return A(() => {
      let e = Mm(t);
      return e = e.mean(2), e;
    });
  }
  loadInput(t) {
    this.context.drawImage(t, 0, 0, this.width, this.height);
    const e = Fs();
    return e.gpgpu.uploadPixelDataToTexture(e.getTexture(this.tempPixelHandle.dataId), this.context.canvas), this._compileAndRun(this.program, [this.tempPixelHandle]);
  }
  buildProgram(t, e) {
    const s = V().getNumber("WEBGL_VERSION") === 2 ? "texture" : "texture2D";
    return {
      variableNames: ["A"],
      outputShape: this.texShape,
      userCode: `
	void main() {
	  ivec2 coords = getOutputCoords();
	  int texR = coords[0];
	  int texC = coords[1];
	  vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${t}.0, ${e}.0);

	  vec4 values = ${s}(A, uv);
	  setOutput((0.299 * values.r + 0.587 * values.g + 0.114 * values.b) * 255.0);
	}
      `
    };
  }
  _compileAndRun(t, e) {
    const s = Fs().compileAndRun(t, e);
    return Zt().makeTensorFromDataId(s.dataId, s.shape, s.dtype);
  }
  _runWebGLProgram(t, e, s) {
    const r = Fs().runWebGLProgram(t, e, s);
    return Zt().makeTensorFromDataId(r.dataId, r.shape, r.dtype);
  }
}
const bf = { memory: Za, nextFrame: Cc }, Ntt = 1e-3, $tt = 1e3, Rtt = 5, Ett = 5;
class Ott {
  constructor({
    inputWidth: t,
    inputHeight: e,
    onUpdate: s = null,
    debugMode: r = !1,
    maxTrack: o = 1,
    warmupTolerance: i = null,
    missTolerance: a = null,
    filterMinCF: l = null,
    filterBeta: c = null
  }) {
    this.inputWidth = t, this.inputHeight = e, this.maxTrack = o, this.filterMinCF = l === null ? Ntt : l, this.filterBeta = c === null ? $tt : c, this.warmupTolerance = i === null ? Rtt : i, this.missTolerance = a === null ? Ett : a, this.cropDetector = new vq(this.inputWidth, this.inputHeight, r), this.inputLoader = new Ttt(this.inputWidth, this.inputHeight), this.markerDimensions = null, this.onUpdate = s, this.debugMode = r, this.processingVideo = !1, this.interestedTargetIndex = -1, this.trackingStates = [];
    const u = 10, h = 1e5, d = 45 * Math.PI / 180, p = this.inputHeight / 2 / Math.tan(d / 2);
    this.projectionTransform = [
      [p, 0, this.inputWidth / 2],
      [0, p, this.inputHeight / 2],
      [0, 0, 1]
    ], this.projectionMatrix = this._glProjectionMatrix({
      projectionTransform: this.projectionTransform,
      width: this.inputWidth,
      height: this.inputHeight,
      near: u,
      far: h
    }), this.worker = new T6(), this.workerMatchDone = null, this.workerTrackDone = null, this.worker.onmessage = (f) => {
      f.data.type === "matchDone" && this.workerMatchDone !== null && this.workerMatchDone(f.data), f.data.type === "trackUpdateDone" && this.workerTrackDone !== null && this.workerTrackDone(f.data);
    };
  }
  showTFStats() {
    console.log(bf.memory().numTensors), console.table(bf.memory());
  }
  addImageTargets(t) {
    return new Promise(async (e, s) => {
      const o = await (await fetch(t)).arrayBuffer(), i = this.addImageTargetsFromBuffer(o);
      e(i);
    });
  }
  addImageTargetsFromBuffer(t) {
    const s = new vtt().importData(t), r = [], o = [], i = [];
    for (let a = 0; a < s.length; a++)
      o.push(s[a].matchingData), r.push(s[a].trackingData), i.push([s[a].targetImage.width, s[a].targetImage.height]);
    return this.tracker = new A6(i, r, this.projectionTransform, this.inputWidth, this.inputHeight, this.debugMode), this.worker.postMessage({
      type: "setup",
      inputWidth: this.inputWidth,
      inputHeight: this.inputHeight,
      projectionTransform: this.projectionTransform,
      debugMode: this.debugMode,
      matchingDataList: o
    }), this.markerDimensions = i, { dimensions: i, matchingDataList: o, trackingDataList: r };
  }
  dispose() {
    this.stopProcessVideo(), this.worker.postMessage({
      type: "dispose"
    });
  }
  dummyRun(t) {
    const e = this.inputLoader.loadInput(t);
    this.cropDetector.detect(e), this.tracker.dummyRun(e), e.dispose();
  }
  getProjectionMatrix() {
    return this.projectionMatrix;
  }
  getWorldMatrix(t, e) {
    return this._glModelViewMatrix(t, e);
  }
  async _detectAndMatch(t, e) {
    const { featurePoints: s } = this.cropDetector.detectMoving(t), { targetIndex: r, modelViewTransform: o } = await this._workerMatch(s, e);
    return { targetIndex: r, modelViewTransform: o };
  }
  async _trackAndUpdate(t, e, s) {
    const { worldCoords: r, screenCoords: o } = this.tracker.track(t, e, s);
    return r.length < 4 ? null : await this._workerTrackUpdate(e, { worldCoords: r, screenCoords: o });
  }
  processVideo(t) {
    if (this.processingVideo)
      return;
    this.processingVideo = !0, this.trackingStates = [];
    for (let s = 0; s < this.markerDimensions.length; s++)
      this.trackingStates.push({
        showing: !1,
        isTracking: !1,
        currentModelViewTransform: null,
        trackCount: 0,
        trackMiss: 0,
        filter: new _C({ minCutOff: this.filterMinCF, beta: this.filterBeta })
      });
    (async () => {
      for (; this.processingVideo; ) {
        const s = this.inputLoader.loadInput(t);
        if (this.trackingStates.reduce((o, i) => o + (i.isTracking ? 1 : 0), 0) < this.maxTrack) {
          const o = [];
          for (let l = 0; l < this.trackingStates.length; l++)
            this.trackingStates[l].isTracking !== !0 && (this.interestedTargetIndex !== -1 && this.interestedTargetIndex !== l || o.push(l));
          const { targetIndex: i, modelViewTransform: a } = await this._detectAndMatch(s, o);
          i !== -1 && (this.trackingStates[i].isTracking = !0, this.trackingStates[i].currentModelViewTransform = a);
        }
        for (let o = 0; o < this.trackingStates.length; o++) {
          const i = this.trackingStates[o];
          if (i.isTracking) {
            let a = await this._trackAndUpdate(s, i.currentModelViewTransform, o);
            a === null ? i.isTracking = !1 : i.currentModelViewTransform = a;
          }
          if (i.showing || i.isTracking && (i.trackMiss = 0, i.trackCount += 1, i.trackCount > this.warmupTolerance && (i.showing = !0, i.trackingMatrix = null, i.filter.reset())), i.showing && (i.isTracking ? i.trackMiss = 0 : (i.trackCount = 0, i.trackMiss += 1, i.trackMiss > this.missTolerance && (i.showing = !1, i.trackingMatrix = null, this.onUpdate && this.onUpdate({ type: "updateMatrix", targetIndex: o, worldMatrix: null })))), i.showing) {
            const a = this._glModelViewMatrix(i.currentModelViewTransform, o);
            i.trackingMatrix = i.filter.filter(Date.now(), a);
            const l = [];
            for (let c = 0; c < i.trackingMatrix.length; c++)
              l[c] = i.trackingMatrix[c];
            this.onUpdate && this.onUpdate({ type: "updateMatrix", targetIndex: o, worldMatrix: l });
          }
        }
        s.dispose(), this.onUpdate && this.onUpdate({ type: "processDone" }), await bf.nextFrame();
      }
    })();
  }
  stopProcessVideo() {
    this.processingVideo = !1;
  }
  async detect(t) {
    const e = this.inputLoader.loadInput(t), { featurePoints: s, debugExtra: r } = await this.cropDetector.detect(e);
    return e.dispose(), { featurePoints: s, debugExtra: r };
  }
  async match(t, e) {
    const { modelViewTransform: s, debugExtra: r } = await this._workerMatch(t, [e]);
    return { modelViewTransform: s, debugExtra: r };
  }
  async track(t, e, s) {
    const r = this.inputLoader.loadInput(t), o = this.tracker.track(r, e, s);
    return r.dispose(), o;
  }
  async trackUpdate(t, e) {
    return e.worldCoords.length < 4 ? null : await this._workerTrackUpdate(t, e);
  }
  _workerMatch(t, e) {
    return new Promise(async (s, r) => {
      this.workerMatchDone = (o) => {
        s({ targetIndex: o.targetIndex, modelViewTransform: o.modelViewTransform, debugExtra: o.debugExtra });
      }, this.worker.postMessage({ type: "match", featurePoints: t, targetIndexes: e });
    });
  }
  _workerTrackUpdate(t, e) {
    return new Promise(async (s, r) => {
      this.workerTrackDone = (a) => {
        s(a.modelViewTransform);
      };
      const { worldCoords: o, screenCoords: i } = e;
      this.worker.postMessage({ type: "trackUpdate", modelViewTransform: t, worldCoords: o, screenCoords: i });
    });
  }
  _glModelViewMatrix(t, e) {
    const s = this.markerDimensions[e][1];
    return [
      t[0][0],
      -t[1][0],
      -t[2][0],
      0,
      -t[0][1],
      t[1][1],
      t[2][1],
      0,
      -t[0][2],
      t[1][2],
      t[2][2],
      0,
      t[0][1] * s + t[0][3],
      -(t[1][1] * s + t[1][3]),
      -(t[2][1] * s + t[2][3]),
      1
    ];
  }
  _glProjectionMatrix({ projectionTransform: t, width: e, height: s, near: r, far: o }) {
    const i = [
      [2 * t[0][0] / e, 0, -(2 * t[0][2] / e - 1), 0],
      [0, 2 * t[1][1] / s, -(2 * t[1][2] / s - 1), 0],
      [0, 0, -(o + r) / (o - r), -2 * o * r / (o - r)],
      [0, 0, -1, 0]
    ], a = [];
    for (let l = 0; l < 4; l++)
      for (let c = 0; c < 4; c++)
        a.push(i[c][l]);
    return a;
  }
}
export {
  Ott as C,
  vtt as a,
  Ftt as t
};
