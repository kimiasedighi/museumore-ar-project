/*! For license information please see compiler.worker.prod.js.LICENSE.txt */
(()=>{var e={563:(e,t,n)=>{"use strict";n.r(t),n.d(t,{Abs:()=>He,Acos:()=>je,Acosh:()=>qe,AdadeltaOptimizer:()=>Po,AdagradOptimizer:()=>Wo,AdamOptimizer:()=>Go,AdamaxOptimizer:()=>Yo,Add:()=>Ke,AddN:()=>Xe,All:()=>Ye,Any:()=>Je,ArgMax:()=>Ze,ArgMin:()=>Qe,Asin:()=>et,Asinh:()=>tt,Atan:()=>nt,Atan2:()=>rt,Atanh:()=>st,AvgPool:()=>at,AvgPool3D:()=>ot,AvgPool3DGrad:()=>lt,AvgPoolGrad:()=>it,BatchMatMul:()=>ut,BatchToSpaceND:()=>ct,Bincount:()=>ht,BroadcastTo:()=>pt,Callback:()=>$v,CallbackList:()=>Ty,Cast:()=>dt,Ceil:()=>ft,ClipByValue:()=>mt,Complex:()=>gt,ComplexAbs:()=>yt,Concat:()=>bt,Conv2D:()=>xt,Conv2DBackpropFilter:()=>wt,Conv2DBackpropInput:()=>kt,Conv3D:()=>vt,Conv3DBackpropFilterV2:()=>It,Conv3DBackpropInputV2:()=>Nt,Cos:()=>St,Cosh:()=>Ct,CropAndResize:()=>Tt,Cumsum:()=>$t,CustomCallback:()=>Ry,DataStorage:()=>U,DenseBincount:()=>Et,DepthToSpace:()=>At,DepthwiseConv2dNative:()=>Rt,DepthwiseConv2dNativeBackpropFilter:()=>Dt,DepthwiseConv2dNativeBackpropInput:()=>Ft,Diag:()=>_t,Dilation2D:()=>Ot,Dilation2DBackpropFilter:()=>Lt,Dilation2DBackpropInput:()=>Mt,ENV:()=>Ve,EarlyStopping:()=>Av,Elu:()=>Pt,EluGrad:()=>Bt,Environment:()=>Pe,Equal:()=>Vt,Erf:()=>Wt,Exp:()=>Ut,ExpandDims:()=>Gt,Expm1:()=>Ht,FFT:()=>jt,Fill:()=>qt,FlipLeftRight:()=>Kt,Floor:()=>Xt,FloorDiv:()=>Yt,FromPixels:()=>Ms,FusedBatchNorm:()=>Jt,FusedConv2D:()=>Ps,FusedDepthwiseConv2D:()=>Bs,GatherNd:()=>Qt,GatherV2:()=>Zt,GraphModel:()=>iN,Greater:()=>en,GreaterEqual:()=>tn,History:()=>Ay,IFFT:()=>sn,Identity:()=>nn,Imag:()=>rn,InputSpec:()=>my,IsFinite:()=>an,IsInf:()=>on,IsNan:()=>ln,KernelBackend:()=>G,LRN:()=>xn,LRNGrad:()=>wn,LayerVariable:()=>py,LayersModel:()=>zb,LeakyRelu:()=>un,Less:()=>cn,LessEqual:()=>hn,LinSpace:()=>pn,Log:()=>dn,Log1p:()=>fn,LogSoftmax:()=>bn,LogicalAnd:()=>mn,LogicalNot:()=>gn,LogicalOr:()=>yn,Max:()=>kn,MaxPool:()=>In,MaxPool3D:()=>Sn,MaxPool3DGrad:()=>Cn,MaxPoolGrad:()=>Nn,MaxPoolWithArgmax:()=>$n,Maximum:()=>vn,Mean:()=>Tn,Min:()=>En,Minimum:()=>An,MirrorPad:()=>Rn,Mod:()=>Dn,MomentumOptimizer:()=>Zo,Multinomial:()=>Fn,Multiply:()=>_n,Neg:()=>On,NonMaxSuppressionV3:()=>Ln,NonMaxSuppressionV4:()=>zn,NonMaxSuppressionV5:()=>Pn,NotEqual:()=>Mn,OP_SCOPE_SUFFIX:()=>qr,OneHot:()=>Wn,OnesLike:()=>Bn,Optimizer:()=>zo,Pack:()=>Vn,PadV2:()=>Un,Pool:()=>Gn,Pow:()=>Hn,Prelu:()=>jn,Prod:()=>qn,RMSPropOptimizer:()=>Qo,RNN:()=>Vx,Range:()=>Kn,Rank:()=>kr,Real:()=>Xn,RealDiv:()=>zt,Reciprocal:()=>Yn,Reduction:()=>Dp,Relu:()=>Jn,Relu6:()=>ss,Reshape:()=>Zn,ResizeBilinear:()=>ts,ResizeBilinearGrad:()=>ns,ResizeNearestNeighbor:()=>Qn,ResizeNearestNeighborGrad:()=>es,Reverse:()=>rs,RotateWithOffset:()=>Ls,Round:()=>as,Rsqrt:()=>is,SGDOptimizer:()=>Jo,ScatterNd:()=>os,Select:()=>ls,Selu:()=>us,Sequential:()=>Wb,Sigmoid:()=>fs,Sign:()=>ds,Sin:()=>hs,Sinh:()=>ps,Slice:()=>cs,Softmax:()=>ws,Softplus:()=>ms,SpaceToBatchND:()=>bs,SparseToDense:()=>Ns,SplitV:()=>xs,Sqrt:()=>gs,Square:()=>vs,SquaredDifference:()=>ks,Step:()=>Os,StridedSlice:()=>Ss,Sub:()=>Is,Sum:()=>ys,SymbolicTensor:()=>gy,Tan:()=>Cs,Tanh:()=>$s,Tensor:()=>xr,TensorBuffer:()=>mr,Tile:()=>Ts,TopK:()=>Es,Transpose:()=>As,Unique:()=>Rs,Unpack:()=>Ds,UnsortedSegmentSum:()=>Fs,Variable:()=>wr,ZerosLike:()=>_s,_FusedMatMul:()=>zs,abs:()=>Ho,acos:()=>el,acosh:()=>tl,add:()=>Io,addN:()=>nl,addStrict:()=>Rh,all:()=>sl,any:()=>rl,argMax:()=>al,argMin:()=>il,asin:()=>ol,asinh:()=>ll,atan:()=>ul,atan2:()=>cl,atanh:()=>hl,avgPool:()=>Cl,avgPool3d:()=>$l,backend:()=>ko,backend_util:()=>g,basicLSTMCell:()=>Dl,batchNorm:()=>_l,batchNorm2d:()=>Ol,batchNorm3d:()=>Ml,batchNorm4d:()=>Ll,batchToSpaceND:()=>Fl,bincount:()=>zl,booleanMaskAsync:()=>Nh,broadcastTo:()=>Pl,browser:()=>l,buffer:()=>Ga,callbacks:()=>Rv,cast:()=>Ha,ceil:()=>Bl,clipByValue:()=>Wl,clone:()=>ja,complex:()=>Xr,concat:()=>Tl,concat1d:()=>Vl,concat2d:()=>Ul,concat3d:()=>Gl,concat4d:()=>Hl,constraints:()=>b,conv1d:()=>ql,conv2d:()=>jl,conv2dTranspose:()=>Xl,conv3d:()=>Yl,conv3dTranspose:()=>Zl,copyRegisteredKernels:()=>Ys,cos:()=>Ql,cosh:()=>eu,cosineWindow:()=>Kh,cumsum:()=>tu,customGrad:()=>Oo,data:()=>W,denseBincount:()=>nu,deprecationWarn:()=>ro,depthToSpace:()=>su,depthwiseConv2d:()=>ru,deregisterOp:()=>Lv,device_util:()=>a,diag:()=>au,dilation2d:()=>iu,disableDeprecationWarnings:()=>so,dispose:()=>co,disposeVariables:()=>ao,div:()=>So,divNoNan:()=>uu,divStrict:()=>Dh,dot:()=>cu,dropout:()=>jh,elu:()=>hu,enableDebugMode:()=>no,enableProdMode:()=>to,enclosingPowerOfTwo:()=>qh,engine:()=>io,env:()=>Be,equal:()=>ou,equalStrict:()=>Sh,erf:()=>pu,exp:()=>du,expandDims:()=>fu,expm1:()=>mu,eye:()=>yu,fft:()=>eh,fill:()=>Bo,findBackend:()=>bo,findBackendFactory:()=>xo,floor:()=>bu,floorDiv:()=>No,fused:()=>f,gather:()=>xu,gatherND:()=>Hh,gather_util:()=>u,getBackend:()=>go,getGradient:()=>Gs,getKernel:()=>Us,getKernelsForBackend:()=>Hs,grad:()=>Ao,grads:()=>Ro,greater:()=>wu,greaterEqual:()=>ku,greaterEqualStrict:()=>Ch,greaterStrict:()=>$h,ifft:()=>th,imag:()=>vu,image:()=>Gp,inTopKAsync:()=>Xh,initializers:()=>x,input:()=>Hb,io:()=>i,irfft:()=>nh,isFinite:()=>Iu,isInf:()=>Nu,isNaN:()=>Su,keep:()=>ho,kernel_impls:()=>y,layers:()=>w,leakyRelu:()=>Cu,less:()=>$u,lessEqual:()=>Tu,lessEqualStrict:()=>Th,lessStrict:()=>Eh,linalg:()=>Hp,linspace:()=>Eu,loadGraphModel:()=>oN,loadLayersModel:()=>Gb,localResponseNormalization:()=>Au,log:()=>Ru,log1p:()=>Du,logSigmoid:()=>Ou,logSoftmax:()=>zu,logSumExp:()=>qu,logicalAnd:()=>Ku,logicalNot:()=>Xu,logicalOr:()=>Yu,logicalXor:()=>Ju,losses:()=>jp,matMul:()=>hi,math:()=>o,max:()=>Mu,maxPool:()=>Zu,maxPool3d:()=>Qu,maxPoolWithArgmax:()=>ec,maximum:()=>Xo,maximumStrict:()=>Fh,mean:()=>tc,memory:()=>oo,metrics:()=>k,min:()=>nc,minimum:()=>sc,minimumStrict:()=>_h,mirrorPad:()=>rc,mod:()=>ac,modStrict:()=>Oh,model:()=>Vb,models:()=>v,moments:()=>ic,movingAverage:()=>Vh,mul:()=>Co,mulStrict:()=>Mh,multiRNNCell:()=>oc,multinomial:()=>lc,neg:()=>Fu,nextFrame:()=>Yp,norm:()=>Wh,notEqual:()=>uc,notEqualStrict:()=>Ah,oneHot:()=>pi,ones:()=>hc,onesLike:()=>pc,op:()=>Kr,outerProduct:()=>dc,pad:()=>fc,pad1d:()=>mc,pad2d:()=>gc,pad3d:()=>yc,pad4d:()=>bc,pool:()=>wc,pow:()=>Vo,powStrict:()=>Lh,prelu:()=>kc,print:()=>qa,prod:()=>vc,profile:()=>lo,rand:()=>Ic,randomGamma:()=>Tc,randomNormal:()=>Ec,randomUniform:()=>Ac,range:()=>Rc,ready:()=>mo,real:()=>Dc,reciprocal:()=>Fc,registerBackend:()=>wo,registerCallbackConstructor:()=>jb,registerGradient:()=>qs,registerKernel:()=>js,registerOp:()=>Ov,regularizers:()=>I,relu:()=>_c,relu6:()=>Oc,removeBackend:()=>yo,reshape:()=>Sl,reverse:()=>Mc,reverse1d:()=>Lc,reverse2d:()=>zc,reverse3d:()=>Pc,reverse4d:()=>Bc,rfft:()=>rh,round:()=>Wc,rsqrt:()=>Vc,scalar:()=>Lo,scatterND:()=>Uh,scatter_util:()=>c,selu:()=>Uc,separableConv2d:()=>Gc,sequential:()=>Ub,serialization:()=>p,setBackend:()=>fo,setPlatform:()=>vo,setdiff1dAsync:()=>Hc,sigmoid:()=>El,sign:()=>jc,signal:()=>Up,sin:()=>qc,sinh:()=>Kc,slice:()=>Al,slice1d:()=>Xc,slice2d:()=>Yc,slice3d:()=>Jc,slice4d:()=>Zc,slice_util:()=>h,softmax:()=>Qc,softplus:()=>_u,spaceToBatchND:()=>xc,sparseToDense:()=>Gh,spectral:()=>Vp,split:()=>sh,sqrt:()=>$o,square:()=>To,squaredDifference:()=>ah,squaredDifferenceStrict:()=>zh,squeeze:()=>ih,stack:()=>oh,step:()=>lh,stridedSlice:()=>uh,sub:()=>Uo,subStrict:()=>Ph,sum:()=>Lu,sumOutType:()=>Tr,tan:()=>ch,tanh:()=>Rl,tensor:()=>Jr,tensor1d:()=>hh,tensor2d:()=>ph,tensor3d:()=>mi,tensor4d:()=>dh,tensor5d:()=>fh,tensor6d:()=>mh,tensor_util:()=>r,test_util:()=>d,tidy:()=>uo,tile:()=>gu,time:()=>po,topk:()=>gh,train:()=>Kp,transpose:()=>di,truncatedNormal:()=>yh,unique:()=>bh,unregisterGradient:()=>Xs,unregisterKernel:()=>Ks,unsortedSegmentSum:()=>xh,unstack:()=>wh,upcastType:()=>$r,util:()=>s,valueAndGrad:()=>Do,valueAndGrads:()=>Fo,variable:()=>kh,variableGrads:()=>_o,version:()=>vP,version_converter:()=>lN,version_core:()=>eo,version_layers:()=>pb,where:()=>lu,whereAsync:()=>Ih,zeros:()=>cc,zerosLike:()=>Eo});var s={};n.r(s),n.d(s,{arraysEqual:()=>re,assert:()=>Z,assertNonNegativeIntegerDimensions:()=>_e,assertNonNull:()=>ee,assertShapesMatch:()=>Q,bytesFromStringArray:()=>ke,bytesPerElement:()=>we,checkConversionForErrors:()=>ge,clamp:()=>q,computeStrides:()=>Te,createScalarValue:()=>ur,createShuffledIndices:()=>le,decodeString:()=>fr,distSquared:()=>J,encodeString:()=>dr,fetch:()=>pr,flatten:()=>te,getArrayFromDType:()=>me,getTypedArrayFromDType:()=>fe,hasEncodingLoss:()=>be,indexToLoc:()=>Me,inferDtype:()=>Se,inferFromImplicitShape:()=>he,isBoolean:()=>Ie,isFunction:()=>Ce,isInt:()=>ae,isNumber:()=>Ne,isPromise:()=>Le,isScalarShape:()=>se,isString:()=>ve,isTypedArray:()=>xe,isValidDtype:()=>ye,locToIndex:()=>Oe,makeOnesTypedArray:()=>Re,makeZerosNestedTypedArray:()=>Fe,makeZerosTypedArray:()=>De,nearestDivisor:()=>$e,nearestLargerEven:()=>K,now:()=>hr,parseAxisParam:()=>pe,randUniform:()=>Y,repeatedTry:()=>ce,rightPad:()=>ue,shuffle:()=>j,sizeFromShape:()=>ne,sizeToSquarishShape:()=>oe,squeezeShape:()=>de,sum:()=>X,tanh:()=>ie,toNestedArray:()=>Ae,toTypedArray:()=>cr});var r={};n.r(r),n.d(r,{assertTypesMatch:()=>Ar,getTensorsInContainer:()=>Dr,isTensorInList:()=>Rr,makeTypesMatch:()=>Er});var a={};n.r(a),n.d(a,{isBrowser:()=>Br,isMobile:()=>Pr});var i={};n.r(i),n.d(i,{browserFiles:()=>Ja,browserHTTPRequest:()=>ii,concatenateArrayBuffers:()=>aa,copyModel:()=>Ba,decodeWeights:()=>ta,encodeWeights:()=>ea,fromMemory:()=>ui,getLoadHandlers:()=>da,getModelArtifactsInfoForJSON:()=>oa,getSaveHandlers:()=>pa,http:()=>ai,isHTTPScheme:()=>si,listModels:()=>za,loadWeights:()=>ei,moveModel:()=>Wa,registerLoadRouter:()=>ha,registerSaveRouter:()=>ca,removeModel:()=>Pa,weightsLoaderFactory:()=>ti,withSaveHandler:()=>ci});var o={};n.r(o),n.d(o,{confusionMatrix:()=>fi});var l={};n.r(l),n.d(l,{fromPixels:()=>bi,toPixels:()=>yi});var u={};n.r(u),n.d(u,{prepareAndValidate:()=>xi});var c={};n.r(c),n.d(c,{calculateShapes:()=>vi,validateInput:()=>ki,validateUpdateShape:()=>wi});var h={};n.r(h),n.d(h,{assertParamsValid:()=>Ii,computeFlatOffset:()=>Mi,computeOutShape:()=>Si,getNormalizedAxes:()=>Ei,isSliceContinous:()=>Oi,maskToAxes:()=>Ni,parseSliceParams:()=>Li,sliceInfo:()=>zi,startForAxis:()=>Fi,startIndicesWithElidedDims:()=>Ai,stopForAxis:()=>_i,stopIndicesWithElidedDims:()=>Ri,stridesForAxis:()=>Di,stridesWithElidedDims:()=>Ci});var p={};n.r(p),n.d(p,{Serializable:()=>Pi,SerializationMap:()=>Bi,registerClass:()=>Wi});var d={};n.r(d),n.d(d,{TEST_EPSILON_FLOAT16:()=>Ui,encodeStrings:()=>Qi,expectArrayBuffersEqual:()=>Zi,expectArraysClose:()=>Gi,expectArraysEqual:()=>Ki,expectNumbersClose:()=>Xi,expectPromiseToFail:()=>qi,expectValuesInRange:()=>Ji,testEpsilon:()=>Hi});var f={};n.r(f),n.d(f,{conv2d:()=>tp,depthwiseConv2d:()=>rp,matMul:()=>ap});var m={};n.r(m),n.d(m,{collectGatherOpShapeInfo:()=>Td,computeOutShape:()=>$d,segOpComputeOptimalWindowSize:()=>Cd});var g={};n.r(g),n.d(g,{ERF_A1:()=>cd,ERF_A2:()=>hd,ERF_A3:()=>pd,ERF_A4:()=>dd,ERF_A5:()=>fd,ERF_P:()=>ud,PARALLELIZE_THRESHOLD:()=>Qp,SELU_SCALE:()=>ld,SELU_SCALEALPHA:()=>od,applyActivation:()=>Qh,assertAndGetBroadcastShape:()=>Ko,assertAxesAreInnerMostDims:()=>Uu,assertParamsConsistent:()=>Jp,assignToTypedArray:()=>vd,axesAreInnerMostDims:()=>Pu,calculateShapes:()=>vi,castTensor:()=>Ed,combineLocations:()=>Bu,complexWithEvenIndex:()=>xd,complexWithOddIndex:()=>wd,computeConv2DInfo:()=>ml,computeConv3DInfo:()=>gl,computeDefaultPad:()=>yl,computeDilation2DInfo:()=>pl,computeOptimalWindowSize:()=>ed,computeOutAndReduceShapes:()=>Wu,computeOutShape:()=>Zp,computePool2DInfo:()=>dl,computePool3DInfo:()=>fl,convertConv2DDataFormat:()=>Nl,eitherStridesOrDilationsAreOne:()=>Il,expandShapeToKeepDim:()=>Vu,exponent:()=>Nd,exponents:()=>Id,fromStringArrayToUint8:()=>Dd,fromUint8ToStringArray:()=>Rd,getAxesPermutation:()=>Gu,getBroadcastDims:()=>jo,getComplexWithIndex:()=>kd,getFusedBiasGradient:()=>Zh,getFusedDyActivation:()=>Jh,getImageCenter:()=>td,getInnerMostAxes:()=>ju,getPermuted:()=>sd,getReductionAxes:()=>qo,getReshaped:()=>nd,getReshapedPermuted:()=>rd,getSliceBeginCoords:()=>ad,getSliceSize:()=>id,getUndoAxesPermutation:()=>Hu,log:()=>gd,mergeRealAndImagArrays:()=>yd,prepareAndValidate:()=>xi,prepareSplitSize:()=>Sd,reshapeTensor:()=>Ad,segment_util:()=>m,shouldFuse:()=>ep,slice_util:()=>h,splitRealAndImagArrays:()=>bd,tupleValuesAreOne:()=>vl,upcastType:()=>$r,validateInput:()=>ki,validateUpdateShape:()=>wi,warn:()=>md});var y={};n.r(y),n.d(y,{nonMaxSuppressionV3Impl:()=>yp,nonMaxSuppressionV4Impl:()=>bp,nonMaxSuppressionV5Impl:()=>xp,whereImpl:()=>vh});var b={};n.r(b),n.d(b,{maxNorm:()=>Dm,minMaxNorm:()=>Om,nonNeg:()=>_m,unitNorm:()=>Fm});var x={};n.r(x),n.d(x,{constant:()=>Ug,glorotNormal:()=>Yg,glorotUniform:()=>Xg,heNormal:()=>Jg,heUniform:()=>Zg,identity:()=>qg,leCunNormal:()=>Qg,leCunUniform:()=>ey,ones:()=>Vg,orthogonal:()=>ty,randomNormal:()=>Hg,randomUniform:()=>Gg,truncatedNormal:()=>jg,varianceScaling:()=>Kg,zeros:()=>Wg});var w={};n.r(w),n.d(w,{Layer:()=>wy,RNN:()=>Vx,RNNCell:()=>Ux,activation:()=>lk,add:()=>yk,alphaDropout:()=>ov,average:()=>bk,averagePooling1d:()=>$k,averagePooling2d:()=>Ak,averagePooling3d:()=>Fk,avgPool1d:()=>Tk,avgPool2d:()=>Rk,avgPool3d:()=>_k,avgPooling1d:()=>Ek,avgPooling2d:()=>Dk,avgPooling3d:()=>Ok,batchNormalization:()=>Nk,bidirectional:()=>Qk,concatenate:()=>xk,conv1d:()=>ek,conv2d:()=>tk,conv2dTranspose:()=>nk,conv3d:()=>sk,convLstm2d:()=>Xk,convLstm2dCell:()=>Yk,cropping2D:()=>ak,dense:()=>uk,depthwiseConv2d:()=>ok,dot:()=>Ik,dropout:()=>ck,elu:()=>Kw,embedding:()=>gk,flatten:()=>pk,gaussianDropout:()=>iv,gaussianNoise:()=>av,globalAveragePooling1d:()=>Mk,globalAveragePooling2d:()=>Lk,globalMaxPool1d:()=>tv,globalMaxPool2d:()=>nv,globalMaxPooling1d:()=>zk,globalMaxPooling2d:()=>Pk,gru:()=>Uk,gruCell:()=>Gk,input:()=>Hb,inputLayer:()=>qw,layerNormalization:()=>Sk,leakyReLU:()=>Yw,lstm:()=>Hk,lstmCell:()=>jk,masking:()=>lv,maxPool1d:()=>sv,maxPool2d:()=>rv,maxPooling1d:()=>Bk,maxPooling2d:()=>Wk,maxPooling3d:()=>Vk,maximum:()=>wk,minimum:()=>kk,multiply:()=>vk,permute:()=>mk,prelu:()=>Jw,reLU:()=>Xw,repeatVector:()=>dk,reshape:()=>fk,rnn:()=>Jk,separableConv2d:()=>rk,simpleRNN:()=>qk,simpleRNNCell:()=>Kk,softmax:()=>Zw,spatialDropout1d:()=>hk,stackedRNNCells:()=>Zk,thresholdedReLU:()=>Qw,timeDistributed:()=>ev,upSampling2d:()=>ik,zeroPadding2d:()=>Ck});var k={};n.r(k),n.d(k,{MAPE:()=>xv,MSE:()=>vv,binaryAccuracy:()=>uv,binaryCrossentropy:()=>cv,categoricalAccuracy:()=>pv,categoricalCrossentropy:()=>dv,cosineProximity:()=>gv,mape:()=>wv,meanAbsoluteError:()=>yv,meanAbsolutePercentageError:()=>bv,meanSquaredError:()=>kv,mse:()=>Iv,precision:()=>fv,recall:()=>mv,sparseCategoricalAccuracy:()=>hv});var v={};n.r(v),n.d(v,{modelFromJSON:()=>Bb});var I={};n.r(I),n.d(I,{l1:()=>Sv,l1l2:()=>Nv,l2:()=>Cv});var N={};n.r(N),n.d(N,{json:()=>Hv});var S={};n.r(S),n.d(S,{json:()=>jv});var C={};n.r(C),n.d(C,{json:()=>qv});var $={};n.r($),n.d($,{json:()=>Kv});var T={};n.r(T),n.d(T,{json:()=>Xv});var E={};n.r(E),n.d(E,{json:()=>Yv});var A={};n.r(A),n.d(A,{json:()=>Jv});var R={};n.r(R),n.d(R,{json:()=>Zv});var D={};n.r(D),n.d(D,{json:()=>Qv});var F={};n.r(F),n.d(F,{json:()=>eI});var _={};n.r(_),n.d(_,{json:()=>tI});var O={};n.r(O),n.d(O,{json:()=>nI});var M={};n.r(M),n.d(M,{json:()=>sI});var L={};n.r(L),n.d(L,{json:()=>rI});var z={};n.r(z),n.d(z,{json:()=>aI});var P={};n.r(P),n.d(P,{json:()=>iI});var B={};n.r(B),n.d(B,{json:()=>oI});var W={};n.r(W),n.d(W,{CSVDataset:()=>YN,Dataset:()=>zN,FileDataSource:()=>lS,TextLineDataset:()=>UN,URLDataSource:()=>uS,array:()=>BN,csv:()=>cS,func:()=>hS,generator:()=>pS,microphone:()=>fS,version_data:()=>mS,webcam:()=>dS,zip:()=>WN});var V={};n.r(V),n.d(V,{addImpl:()=>HS,bincountImpl:()=>LC,bincountReduceImpl:()=>zC,ceilImpl:()=>WC,concatImpl:()=>qC,expImpl:()=>F$,expm1Impl:()=>z$,floorImpl:()=>aT,gatherV2Impl:()=>fT,greaterImpl:()=>gT,lessImpl:()=>ET,linSpaceImpl:()=>OT,logImpl:()=>LT,maxImpl:()=>ZT,maximumImpl:()=>tE,minimumImpl:()=>dE,multiplyImpl:()=>W$,negImpl:()=>IE,notEqualImpl:()=>RE,prodImpl:()=>GE,rangeImpl:()=>jE,rsqrtImpl:()=>rA,simpleAbsImpl:()=>eC,sliceImpl:()=>FC,squaredDifferenceImpl:()=>RA,stridedSliceImpl:()=>MA,subImpl:()=>K$,tileImpl:()=>WA,topKImpl:()=>UA,transposeImpl:()=>oC,uniqueImpl:()=>HA});class U{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class G{decComplexRef(e){}time(e){return H("time")}read(e){return H("read")}readSync(e){return H("readSync")}numDataIds(){return H("numDataIds")}disposeData(e){return H("disposeData")}write(e,t,n){return H("write")}move(e,t,n,s){return H("move")}memory(){return H("memory")}floatPrecision(){return H("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}batchMatMul(e,t,n,s){return H("batchMatMul")}fusedBatchMatMul({a:e,b:t,transposeA:n,transposeB:s,bias:r,activation:a,preluActivationWeights:i}){return H("fusedBatchMatMul")}slice(e,t,n){return H("slice")}stridedSlice(e,t,n,s){return H("stridedSlice")}unstack(e,t){return H("unstack")}reverse(e,t){return H("reverse")}concat(e,t){return H("concat")}neg(e){return H("neg")}add(e,t){return H("add")}addN(e){return H("addN")}subtract(e,t){return H("subtract")}multiply(e,t){return H("multiply")}realDivide(e,t){return H("realDivide")}floorDiv(e,t){return H("floorDiv")}sum(e,t){return H("sum")}prod(e,t){return H("prod")}unsortedSegmentSum(e,t,n){return H("unsortedSegmentSum")}argMin(e,t){return H("argMin")}argMax(e,t){return H("argMax")}equal(e,t){return H("equal")}notEqual(e,t){return H("notEqual")}less(e,t){return H("less")}lessEqual(e,t){return H("lessEqual")}greater(e,t){return H("greater")}greaterEqual(e,t){return H("greaterEqual")}logicalNot(e){return H("logicalNot")}logicalAnd(e,t){return H("logicalAnd")}logicalOr(e,t){return H("logicalOr")}where(e){return H("where")}select(e,t,n){return H("select")}topk(e,t,n){return H("topk")}min(e,t){return H("min")}minimum(e,t){return H("minimum")}mod(e,t){return H("mod")}max(e,t){return H("max")}maximum(e,t){return H("maximum")}all(e,t){return H("all")}any(e,t){return H("any")}squaredDifference(e,t){return H("squaredDifference")}ceil(e){return H("ceil")}floor(e){return H("floor")}round(e){return H("round")}sign(e){return H("sign")}isNaN(e){return H("isNaN")}isInf(e){return H("isInf")}isFinite(e){return H("isFinite")}pow(e,t){return H("pow")}exp(e){return H("exp")}expm1(e){return H("expm1")}softmax(e,t){return H("softmax")}log(e){return H("log")}log1p(e){return H("log1p")}sqrt(e){return H("sqrt")}rsqrt(e){return H("rsqrt")}square(e){return H("square")}reciprocal(e){return H("reciprocal")}relu(e){return H("relu")}relu6(e){return H("relu6")}prelu(e,t){return H("prelu")}elu(e){return H("elu")}eluDer(e,t){return H("eluDer")}selu(e){return H("selu")}int(e){return H("int")}clip(e,t,n){return H("clip")}abs(e){return H("abs")}complexAbs(e){return H("complexAbs")}sigmoid(e){return H("sigmoid")}softplus(e){return H("softplus")}sin(e){return H("sin")}cos(e){return H("cos")}tan(e){return H("tan")}asin(e){return H("asin")}acos(e){return H("acos")}atan(e){return H("atan")}atan2(e,t){return H("atan2")}sinh(e){return H("sinh")}cosh(e){return H("cosh")}tanh(e){return H("tanh")}asinh(e){return H("asinh")}acosh(e){return H("acosh")}atanh(e){return H("atanh")}erf(e){return H("erf")}step(e,t){return H("step")}fusedConv2d({input:e,filter:t,convInfo:n,bias:s,activation:r,preluActivationWeights:a}){return H("fusedConv2d")}conv2d(e,t,n){return H("conv2d")}conv2dDerInput(e,t,n){return H("conv2dDerInput")}conv2dDerFilter(e,t,n){return H("conv2dDerFilter")}fusedDepthwiseConv2D({input:e,filter:t,convInfo:n,bias:s,activation:r,preluActivationWeights:a}){return H("fusedDepthwiseConv2D")}depthwiseConv2D(e,t,n){return H("depthwiseConv2D")}depthwiseConv2DDerInput(e,t,n){return H("depthwiseConv2DDerInput")}depthwiseConv2DDerFilter(e,t,n){return H("depthwiseConv2DDerFilter")}conv3d(e,t,n){return H("conv3d")}conv3dDerInput(e,t,n){return H("conv3dDerInput")}conv3dDerFilter(e,t,n){return H("conv3dDerFilter")}maxPool(e,t){return H("maxPool")}maxPoolBackprop(e,t,n,s){return H("maxPoolBackprop")}avgPool(e,t){return H("avgPool")}avgPoolBackprop(e,t,n){return H("avgPoolBackprop")}avgPool3d(e,t){return H("avgPool3d")}avgPool3dBackprop(e,t,n){return H("avgPool3dBackprop")}maxPool3d(e,t){return H("maxPool3d")}maxPool3dBackprop(e,t,n,s){return H("maxPool3dBackprop")}reshape(e,t){return H("reshape")}cast(e,t){return H("cast")}tile(e,t){return H("tile")}pad(e,t,n){return H("pad")}transpose(e,t){return H("transpose")}gather(e,t,n,s=0){return H("gather")}gatherND(e,t){return H("gatherND")}scatterND(e,t,n){return H("scatterND")}batchToSpaceND(e,t,n){return H("batchToSpaceND")}spaceToBatchND(e,t,n){return H("spaceToBatchND")}resizeBilinear(e,t,n,s,r){return H("resizeBilinear")}resizeBilinearBackprop(e,t,n){return H("resizeBilinearBackprop")}resizeNearestNeighbor(e,t,n,s,r){return H("resizeNearestNeighbor")}resizeNearestNeighborBackprop(e,t,n){return H("resizeNearestNeighborBackprop")}batchNorm(e,t,n,s,r,a){return H("batchNorm")}localResponseNormalization4D(e,t,n,s,r){return H("localResponseNormalization4D")}LRNGrad(e,t,n,s,r,a,i){return H("LRNGrad")}multinomial(e,t,n,s){return H("multinomial")}oneHot(e,t,n,s){return H("oneHot")}cumsum(e,t,n,s){return H("cumsum")}nonMaxSuppression(e,t,n,s,r){return H("nonMaxSuppression")}fft(e){return H("fft")}ifft(e){return H("ifft")}complex(e,t){return H("complex")}real(e){return H("real")}imag(e){return H("imag")}cropAndResize(e,t,n,s,r,a){return H("cropAndResize")}depthToSpace(e,t,n){return H("depthToSpace")}split(e,t,n){return H("split")}sparseToDense(e,t,n,s){return H("sparseToDense")}diag(e){return H("diag")}fill(e,t,n){return H("fill")}onesLike(e){return H("onesLike")}zerosLike(e){return H("zerosLike")}linspace(e,t,n){return H("linspace")}dispose(){return H("dispose")}}function H(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function j(e){let t=e.length,n=0,s=0;for(;t>0;)s=Math.random()*t|0,t--,n=e[t],e[t]=e[s],e[s]=n}function q(e,t,n){return Math.max(e,Math.min(t,n))}function K(e){return e%2==0?e:e+1}function X(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}function Y(e,t){const n=Math.random();return t*n+(1-n)*e}function J(e,t){let n=0;for(let s=0;s<e.length;s++){const r=Number(e[s])-Number(t[s]);n+=r*r}return n}function Z(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function Q(e,t,n=""){Z(re(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}function ee(e){Z(null!=e,(()=>"The input to the tensor constructor must be a non-null value."))}function te(e,t=[],n=!1){if(null==t&&(t=[]),Array.isArray(e)||xe(e)&&!n)for(let s=0;s<e.length;++s)te(e[s],t,n);else t.push(e);return t}function ne(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function se(e){return 0===e.length}function re(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function ae(e){return e%1==0}function ie(e){if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;if(e===-1/0)return-1;{const t=Math.exp(2*e);return(t-1)/(t+1)}}function oe(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function le(e){const t=new Uint32Array(e);for(let n=0;n<e;++n)t[n]=n;return j(t),t}function ue(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function ce(e,t=(e=>0),n){return new Promise(((s,r)=>{let a=0;const i=()=>{if(e())return void s();a++;const o=t(a);null!=n&&a>=n?r():setTimeout(i,o)};i()}))}function he(e,t){let n=1,s=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)n*=e[t];else if(-1===e[t]){if(-1!==s)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${s} and dim ${t}`);s=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===s){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const r=e.slice();return r[s]=t/n,r}function pe(e,t){const n=t.length;return Z((e=null==e?t.map(((e,t)=>t)):[].concat(e)).every((e=>e>=-n&&e<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`)),Z(e.every((e=>ae(e))),(()=>`All values in axis param must be integers but got axis ${e}`)),e.map((e=>e<0?n+e:e))}function de(e,t){const n=[],s=[],r=null!=t&&Array.isArray(t)&&0===t.length,a=null==t||r?null:pe(t,e).sort();let i=0;for(let t=0;t<e.length;++t){if(null!=a){if(a[i]===t&&1!==e[t])throw new Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==a[i]||a[i]>t)&&1===e[t]&&(n.push(e[t]),s.push(t)),a[i]<=t&&i++}1!==e[t]&&(n.push(e[t]),s.push(t))}return{newShape:n,keptDims:s}}function fe(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else{if("bool"!==e)throw new Error(`Unknown data type ${e}`);n=new Uint8Array(t)}return n}function me(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}function ge(e,t){for(let n=0;n<e.length;n++){const s=e[n];if(isNaN(s)||!isFinite(s))throw Error(`A tensor of type ${t} being uploaded contains ${s}.`)}}function ye(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function be(e,t){return!("complex64"===t||"float32"===t&&"complex64"!==e||"int32"===t&&"float32"!==e&&"complex64"!==e||"bool"===t&&"bool"===e)}function xe(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array}function we(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function ke(e){if(null==e)return 0;let t=0;return e.forEach((e=>t+=e.length)),t}function ve(e){return"string"==typeof e||e instanceof String}function Ie(e){return"boolean"==typeof e}function Ne(e){return"number"==typeof e}function Se(e){return Array.isArray(e)?Se(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array?"int32":Ne(e)?"float32":ve(e)?"string":Ie(e)?"bool":"float32"}function Ce(e){return!!(e&&e.constructor&&e.call&&e.apply)}function $e(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function Te(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let s=t-3;s>=0;--s)n[s]=n[s+1]*e[s+1];return n}function Ee(e,t,n){const s=new Array;if(1===t.length){const r=t[0];for(let t=0;t<r;t++)s[t]=n[e+t]}else{const r=t[0],a=t.slice(1),i=a.reduce(((e,t)=>e*t));for(let t=0;t<r;t++)s[t]=Ee(e+t*i,a,n)}return s}function Ae(e,t){if(0===e.length)return t[0];const n=e.reduce(((e,t)=>e*t));if(0===n)return[];if(n!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}.`);return Ee(0,e,t)}function Re(e,t){const n=De(e,t);for(let e=0;e<n.length;e++)n[e]=1;return n}function De(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function Fe(e,t){const n=e.reduce(((e,t)=>e*t),1);if(null==t||"float32"===t)return Ae(e,new Float32Array(n));if("int32"===t)return Ae(e,new Int32Array(n));if("bool"===t)return Ae(e,new Uint8Array(n));throw new Error(`Unknown data type ${t}`)}function _e(e){e.forEach((t=>{Z(Number.isInteger(t)&&t>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`))}))}function Oe(e,t,n){if(0===t)return 0;if(1===t)return e[0];let s=e[e.length-1];for(let t=0;t<e.length-1;++t)s+=n[t]*e[t];return s}function Me(e,t,n){if(0===t)return[];if(1===t)return[e];const s=new Array(t);for(let t=0;t<s.length-1;++t)s[t]=Math.floor(e/n[t]),e-=s[t]*n[t];return s[s.length-1]=e,s}function Le(e){return e&&e.then&&"function"==typeof e.then}const ze="tfjsflags";class Pe{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${t}.`),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(Le(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=function(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("=")))),t}(this.global.location.search);ze in e&&e[ze].split(",").forEach((e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${e}.`)}(t,n)}))}}function Be(){return Ve}let We,Ve=null;function Ue(){if(null==We){let e;if("undefined"!=typeof window)e=window;else if(void 0!==n.g)e=n.g;else if("undefined"!=typeof process)e=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}We=e}return We}function Ge(e,t){const n=function(){const e=Ue();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const s=t();return n.set(e,s),n.get(e)}}const He="Abs",je="Acos",qe="Acosh",Ke="Add",Xe="AddN",Ye="All",Je="Any",Ze="ArgMax",Qe="ArgMin",et="Asin",tt="Asinh",nt="Atan",st="Atanh",rt="Atan2",at="AvgPool",it="AvgPoolGrad",ot="AvgPool3D",lt="AvgPool3DGrad",ut="BatchMatMul",ct="BatchToSpaceND",ht="Bincount",pt="BroadcastTo",dt="Cast",ft="Ceil",mt="ClipByValue",gt="Complex",yt="ComplexAbs",bt="Concat",xt="Conv2D",wt="Conv2DBackpropFilter",kt="Conv2DBackpropInput",vt="Conv3D",It="Conv3DBackpropFilterV2",Nt="Conv3DBackpropInputV2",St="Cos",Ct="Cosh",$t="Cumsum",Tt="CropAndResize",Et="DenseBincount",At="DepthToSpace",Rt="DepthwiseConv2dNative",Dt="DepthwiseConv2dNativeBackpropFilter",Ft="DepthwiseConv2dNativeBackpropInput",_t="Diag",Ot="Dilation2D",Mt="Dilation2DBackpropInput",Lt="Dilation2DBackpropFilter",zt="RealDiv",Pt="Elu",Bt="EluGrad",Wt="Erf",Vt="Equal",Ut="Exp",Gt="ExpandDims",Ht="Expm1",jt="FFT",qt="Fill",Kt="FlipLeftRight",Xt="Floor",Yt="FloorDiv",Jt="FusedBatchNorm",Zt="GatherV2",Qt="GatherNd",en="Greater",tn="GreaterEqual",nn="Identity",sn="IFFT",rn="Imag",an="IsFinite",on="IsInf",ln="IsNan",un="LeakyRelu",cn="Less",hn="LessEqual",pn="LinSpace",dn="Log",fn="Log1p",mn="LogicalAnd",gn="LogicalNot",yn="LogicalOr",bn="LogSoftmax",xn="LRN",wn="LRNGrad",kn="Max",vn="Maximum",In="MaxPool",Nn="MaxPoolGrad",Sn="MaxPool3D",Cn="MaxPool3DGrad",$n="MaxPoolWithArgmax",Tn="Mean",En="Min",An="Minimum",Rn="MirrorPad",Dn="Mod",Fn="Multinomial",_n="Multiply",On="Neg",Mn="NotEqual",Ln="NonMaxSuppressionV3",zn="NonMaxSuppressionV4",Pn="NonMaxSuppressionV5",Bn="OnesLike",Wn="OneHot",Vn="Pack",Un="PadV2",Gn="Pool",Hn="Pow",jn="Prelu",qn="Prod",Kn="Range",Xn="Real",Yn="Reciprocal",Jn="Relu",Zn="Reshape",Qn="ResizeNearestNeighbor",es="ResizeNearestNeighborGrad",ts="ResizeBilinear",ns="ResizeBilinearGrad",ss="Relu6",rs="Reverse",as="Round",is="Rsqrt",os="ScatterNd",ls="Select",us="Selu",cs="Slice",hs="Sin",ps="Sinh",ds="Sign",fs="Sigmoid",ms="Softplus",gs="Sqrt",ys="Sum",bs="SpaceToBatchND",xs="SplitV",ws="Softmax",ks="SquaredDifference",vs="Square",Is="Sub",Ns="SparseToDense",Ss="StridedSlice",Cs="Tan",$s="Tanh",Ts="Tile",Es="TopK",As="Transpose",Rs="Unique",Ds="Unpack",Fs="UnsortedSegmentSum",_s="ZerosLike",Os="Step",Ms="FromPixels",Ls="RotateWithOffset",zs="_FusedMatMul",Ps="FusedConv2D",Bs="FusedDepthwiseConv2D",Ws=Ge("kernelRegistry",(()=>new Map)),Vs=Ge("gradRegistry",(()=>new Map));function Us(e,t){const n=Js(e,t);return Ws.get(n)}function Gs(e){return Vs.get(e)}function Hs(e){const t=Ws.entries(),n=[];for(;;){const{done:s,value:r}=t.next();if(s)break;const[a,i]=r,[o]=a.split("_");o===e&&n.push(i)}return n}function js(e){const{kernelName:t,backendName:n}=e,s=Js(t,n);Ws.has(s)&&console.warn(`The kernel '${t}' for backend '${n}' is already registered`),Ws.set(s,e)}function qs(e){const{kernelName:t}=e;Vs.has(t)&&Be().getBool("DEBUG")&&console.warn(`Overriding the gradient for '${t}'`),Vs.set(t,e)}function Ks(e,t){const n=Js(e,t);if(!Ws.has(n))throw new Error(`The kernel '${e}' for backend '${t}' is not registered`);Ws.delete(n)}function Xs(e){if(!Vs.has(e))throw new Error(`The gradient '${e}' for backend is not registered`);Vs.delete(e)}function Ys(e,t){Hs(e).forEach((e=>{js(Object.assign({},e,{backendName:t}))}))}function Js(e,t){return`${t}_${e}`}class Zs{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new er)}profileKernel(e,t,n){let s;const r=this.backendTimer.time((()=>{s=n()}));if(Be().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let t=0;t<s.length;t++){const n=s[t];n.data().then((t=>{Qs(t,n.dtype,e)}))}return{kernelName:e,outputs:s,inputs:t,timeMs:r.then((e=>e.kernelMs)),extraInfo:r.then((e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():""))}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:s,inputs:r,extraInfo:a}=e;n.forEach((e=>{Promise.all([e.data(),s,a]).then((n=>{this.logger.logKernelProfile(t,e,n[0],n[1],r,n[2])}))}))}}function Qs(e,t,n){if("float32"!==t)return!1;for(let t=0;t<e.length;t++){const s=e[t];if(isNaN(s)||!isFinite(s))return console.warn(`Found ${s} in the result of '${n}'`),!0}return!1}class er{logKernelProfile(e,t,n,s,r,a){const i="number"==typeof s?ue(`${s}ms`,9):s.error,o=ue(e,25),l=t.rank,u=t.size,c=ue(t.shape.toString(),14);let h="";for(const e in r){const n=r[e];if(null!=n){const s=n.shape||t.shape,r=s.length;h+=`${e}: ${r}D ${r>0?s:""} `}}console.log(`%c${o}\t%c${i}\t%c${l}D ${c}\t%c${u}\t%c${h}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}const tr=20,nr=3,sr=7;function rr(e,t,n,s){const r=Te(t),a=function(e,t,n,s){const r=ne(t),a=s[s.length-1],i=new Array(a).fill(0),o=t.length,l="complex64"===n?lr(e):e;if(o>1)for(let e=0;e<r/a;e++){const t=e*a;for(let e=0;e<a;e++)i[e]=Math.max(i[e],ar(l[t+e],0,n).length)}return i}(e,t,n,r),i=t.length,o=or(e,t,n,r,a),l=["Tensor"];return s&&(l.push(`  dtype: ${n}`),l.push(`  rank: ${i}`),l.push(`  shape: [${t}]`),l.push("  values:")),l.push(o.map((e=>"    "+e)).join("\n")),l.join("\n")}function ar(e,t,n){let s;return s=Array.isArray(e)?`${parseFloat(e[0].toFixed(sr))} + ${parseFloat(e[1].toFixed(sr))}j`:ve(e)?`'${e}'`:"bool"===n?ir(e):parseFloat(e.toFixed(sr)).toString(),ue(s,t)}function ir(e){return 0===e?"false":"true"}function or(e,t,n,s,r,a=!0){const i="complex64"===n?2:1,o=t[0],l=t.length;if(0===l)return"complex64"===n?[ar(lr(e)[0],0,n)]:"bool"===n?[ir(e[0])]:[e[0].toString()];if(1===l){if(o>tr){const t=nr*i;let s=Array.from(e.slice(0,t)),a=Array.from(e.slice((o-nr)*i,o*i));return"complex64"===n&&(s=lr(s),a=lr(a)),["["+s.map(((e,t)=>ar(e,r[t],n))).join(", ")+", ..., "+a.map(((e,t)=>ar(e,r[o-nr+t],n))).join(", ")+"]"]}return["["+("complex64"===n?lr(e):Array.from(e)).map(((e,t)=>ar(e,r[t],n))).join(", ")+"]"]}const u=t.slice(1),c=s.slice(1),h=s[0]*i,p=[];if(o>tr){for(let t=0;t<nr;t++){const s=t*h,a=s+h;p.push(...or(e.slice(s,a),u,n,c,r,!1))}p.push("...");for(let t=o-nr;t<o;t++){const s=t*h,a=s+h;p.push(...or(e.slice(s,a),u,n,c,r,t===o-1))}}else for(let t=0;t<o;t++){const s=t*h,a=s+h;p.push(...or(e.slice(s,a),u,n,c,r,t===o-1))}const d=2===l?",":"";p[0]="["+p[0]+d;for(let e=1;e<p.length-1;e++)p[e]=" "+p[e]+d;let f=",\n";for(let e=2;e<l;e++)f+="\n";return p[p.length-1]=" "+p[p.length-1]+"]"+(a?"":f),p}function lr(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}function ur(e,t){return"string"===t?dr(e):cr([e],t)}function cr(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=te(e)),Be().getBool("DEBUG")&&ge(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error(`Unknown data type ${t}`)}function hr(){return Be().platform.now()}function pr(e,t){return Be().platform.fetch(e,t)}function dr(e,t="utf-8"){return t=t||"utf-8",Be().platform.encode(e,t)}function fr(e,t="utf-8"){return t=t||"utf-8",Be().platform.decode(e,t)}class mr{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=ne(e),null!=n){const e=n.length;Z(e===this.size,(()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||me(t,this.size),this.strides=Te(e)}set(e,...t){0===t.length&&(t=[0]),Z(t.length===this.rank,(()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`));const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const n of e){if(n<0||n>=this.shape[t]){const t=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(t)}t++}let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=this.strides[t]*e[t];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return gr().makeTensor(this.values,this.shape,this.dtype)}}let gr=null,yr=null,br=null;class xr{constructor(e,t,n,s){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=ne(e),this.strides=Te(e),this.dataId=n,this.id=s,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return yr.buffer(this.shape,this.dtype,e)}bufferSync(){return yr.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return Ae(this.shape,e)}arraySync(){return Ae(this.shape,this.dataSync())}async data(){this.throwIfDisposed();const e=gr().read(this.dataId);if("string"===this.dtype){const t=await e;try{return t.map((e=>fr(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataSync(){this.throwIfDisposed();const e=gr().readSync(this.dataId);if("string"===this.dtype)try{return e.map((e=>fr(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await gr().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(gr().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return yr.print(this,e)}clone(){return this.throwIfDisposed(),yr.clone(this)}toString(e=!1){return rr(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),yr.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),gr().makeVariable(this,e,t,n)}}Object.defineProperty(xr,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed});class wr extends xr{constructor(e,t,n,s){super(e.shape,e.dtype,e.dataId,s),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!re(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);gr().disposeTensor(this),this.dataId=e.dataId,gr().incRef(this,null)}dispose(){gr().disposeVariable(this),this.isDisposedInternal=!0}}var kr,vr,Ir,Nr,Sr;Object.defineProperty(wr,Symbol.hasInstance,{value:e=>e instanceof xr&&null!=e.assign&&e.assign instanceof Function}),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(kr||(kr={})),function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(vr||(vr={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(Ir||(Ir={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(Nr||(Nr={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(Sr||(Sr={}));const Cr={float32:Nr,int32:vr,bool:Ir,complex64:Sr};function $r(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return Cr[e][t]}function Tr(e){return $r(e,"int32")}function Er(e,t){if(e.dtype===t.dtype)return[e,t];const n=$r(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function Ar(e,t){Z(e.dtype===t.dtype,(()=>`The dtypes of the first(${e.dtype}) and second(${t.dtype}) input must match`))}function Rr(e,t){return t.some((t=>t.id===e.id))}function Dr(e){const t=[];return Fr(e,t,new Set),t}function Fr(e,t,n){if(null==e)return;if(e instanceof xr)return void t.push(e);if(s=e,!Array.isArray(s)&&"object"!=typeof s)return;var s;const r=e;for(const e in r){const s=r[e];n.has(s)||(n.add(s),Fr(s,t,n))}}class _r{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((e=>e.name))))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class Or{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new _r}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(console.warn(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new Zs(this.backendInstance),!0}setupRegisteredKernels(){Hs(this.backendName).forEach((e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(e){Hs(e).forEach((t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])}))}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(!n||n instanceof G||"function"!=typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,s=n.then((n=>!(t<this.pendingBackendInitId||(this.registry[e]=n,this.pendingBackendInit=null,0)))).catch((n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,console.warn(`Initialization of backend ${e} failed`),console.warn(n.stack||n.message)),!1)));return this.pendingBackendInit=s,{success:s,asyncInit:!0}}}catch(t){return console.warn(`Initialization of backend ${e} failed`),console.warn(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority))}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:s,asyncInit:r}=this.initializeBackend(n);if(r||s)return{name:n,asyncInit:r}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),s=n.backend,r=this.readSync(t);s.disposeData(t),n.backend=e,e.move(t,r,n.shape,n.dtype),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,s=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");s=e}return this.scopedRun((()=>this.startScope(s)),(()=>this.endScope(n)),(()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return Or.nextTensorId++}nextVariableId(){return Or.nextVariableId++}clone(e){const t=this.makeTensorFromDataId(e.dataId,e.shape,e.dtype),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],(e=>({x:()=>{const t="float32",n={x:e},s={dtype:t};return Lr.runKernelFunc((n=>n.cast(e,t)),n,null,dt,s)}})),[],{}),t}runKernel(e,t,n,s,r){return this.runKernelFunc(null,t,null,e,n,s,r)}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const s=this.backend.numDataIds();let r=0;n.forEach((e=>{r+="complex64"===e.dtype?3:1}));const a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],i=s-t-r-a;if(i>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${i} data ids) after running '${e}'`)}runKernelFunc(e,t,n,s,r,a,i){let o,l=[];const u=this.isTapeOn();null==s&&(s=null!=this.state.activeScope?this.state.activeScope.name:"");const c=this.state.numBytes,h=this.state.numTensors;let p;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const d=Us(s,this.backendName);let f,m;if(null!=d)p=()=>{const e=this.backend.numDataIds();f=d.kernelFunc({inputs:t,attrs:r,backend:this.backend});const n=Array.isArray(f)?f:[f];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(s,e,n);const o=n.map((e=>{if(null!=e.rank)return e;const{dataId:t,shape:n,dtype:s}=e;return this.makeTensorFromDataId(t,n,s)}));if(u){let e=this.getTensorsForGradient(s,t,o);if(null==e){null==i&&(i=[]);const t=o.filter(((e,t)=>i[t]));e=(a||[]).slice().concat(t)}l=this.saveTensorsForBackwardMode(e)}return o};else{if(null==e)throw new Error(`Error running ${s}: Neither modular kernel nor forward func passed`);const t=e=>{u&&(l=e.map((e=>this.keep(this.clone(e)))))};p=()=>{const n=this.backend.numDataIds();f=this.tidy((()=>e(this.backend,t)));const r=Array.isArray(f)?f:[f];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(s,n,r),r}}return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(m=this.profiler.profileKernel(s,t,(()=>p())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(m),o=m.outputs):o=p()})),u&&this.addTapeNode(s,t,o,n,l,r),this.state.profiling&&this.state.activeProfile.kernels.push({name:s,bytesAdded:this.state.numBytes-c,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-h,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(t).map((e=>null!=t[e]?t[e].shape:null)),outputShapes:o.map((e=>e.shape)),kernelTimeMs:m.timeMs,extraInfo:m.extraInfo}),Array.isArray(f)?o:o[0]}saveTensorsForBackwardMode(e){const t=e.map((e=>this.keep(this.clone(e))));return t}getTensorsForGradient(e,t,n){const s=Gs(e);if(null!=s){const e=s.inputsToSave||[],r=s.outputsToSave||[];let a;s.saveAllInputs?(Z(Array.isArray(t),(()=>"saveAllInputs is true, expected inputs to be an array.")),a=Object.keys(t).map((e=>t[e]))):a=e.map((e=>t[e]));const i=n.filter(((e,t)=>r[t]));return a.concat(i)}return null}makeTensor(e,t,n,s){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",s=s||this.backend;let r=e;"string"===n&&ve(e[0])&&(r=e.map((e=>dr(e))));const a=s.write(r,t,n),i=new xr(t,n,a,this.nextTensorId());if(this.incRef(i,s),"string"===n){const e=this.state.tensorInfo.get(a),t=ke(r);this.state.numBytes+=t-e.bytes,e.bytes=t}return i}makeTensorFromDataId(e,t,n,s){const r=new xr(t,n=n||"float32",e,this.nextTensorId());return this.incRef(r,s),r}makeVariable(e,t=!0,n,s){n=n||this.nextVariableId().toString(),null!=s&&s!==e.dtype&&(e=e.cast(s));const r=new wr(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[r.name])throw new Error(`Variable with name ${r.name} was already registered`);return this.state.registeredVariables[r.name]=r,this.incRef(r,this.backend),r}incRef(e,t){const n=this.state.tensorInfo.has(e.dataId)?this.state.tensorInfo.get(e.dataId).refCount:0;if(this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++,0===n){this.state.numDataBuffers++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*we(e.dtype)),this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n,refCount:0}),this.state.numBytes+=n}this.state.tensorInfo.get(e.dataId).refCount++,e instanceof wr||this.track(e)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;this.state.numTensors--,"string"===e.dtype&&this.state.numStringTensors--;const t=this.state.tensorInfo.get(e.dataId);t.refCount<=1?("complex64"!==e.dtype&&(this.state.numBytes-=t.bytes),this.state.numDataBuffers--,t.backend.disposeData(e.dataId),this.state.tensorInfo.delete(e.dataId)):(t.backend.decComplexRef(e.dataId),this.state.tensorInfo.get(e.dataId).refCount--)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((e=>e.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const e of this.state.activeProfile.kernels)e.kernelTimeMs=await e.kernelTimeMs,e.extraInfo=await e.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,s,r,a){const i={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:r},o=Gs(e);null!=o&&(s=o.gradFunc),null!=s&&(i.gradient=e=>(e=e.map(((e,t)=>{if(null==e){const e=n[t],s=De(e.size,e.dtype);return this.makeTensor(s,e.shape,e.dtype)}return e})),s(e.length>1?e:e[0],r,a))),this.state.activeTape.push(i)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=Dr(e),n=new Set(t.map((e=>e.id)));for(let e=0;e<this.state.activeScope.track.length;e++){const t=this.state.activeScope.track[e];t.kept||n.has(t.id)||t.dispose()}const s=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach((e=>{e.kept||e.scopeId!==s.id||this.track(e)}))}gradients(e,t,n,s=!1){if(Z(t.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const r=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",e)));Z(r instanceof xr,(()=>"The result y returned by f() must be a tensor."));const a=function(e,t,n){const s={},r={};for(let e=0;e<t.length;e++)s[t[e].id]=!0;for(let n=0;n<e.length;n++){const a=e[n],i=a.inputs;for(const e in i){const n=i[e];let o=!1;for(let e=0;e<t.length;e++)if(s[n.id]){a.outputs.forEach((e=>s[e.id]=!0)),o=!0,r[a.id]=!0;break}if(o)break}}const a={};a[n.id]=!0;const i={};for(let t=e.length-1;t>=0;t--){const n=e[t],s=n.inputs;for(let e=0;e<n.outputs.length;e++)if(a[n.outputs[e].id]){for(const e in s)a[s[e].id]=!0,i[n.id]=!0;break}}const o=[];for(let t=0;t<e.length;t++){const n=e[t];if(r[n.id]&&i[n.id]){const e={};for(const t in n.inputs){const r=n.inputs[t];s[r.id]&&(e[t]=r)}const t=Object.assign({},n);t.inputs=e,t.outputs=n.outputs,o.push(t)}}return o}(this.state.activeTape,t,r);if(!s&&0===a.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const e={};e[r.id]=null==n?function(e){const t=Re(ne(e),"float32");return Lr.makeTensor(t,e,"float32")}(r.shape):n,function(e,t,n,s){for(let r=t.length-1;r>=0;r--){const a=t[r],i=[];if(a.outputs.forEach((t=>{const n=e[t.id];null!=n?i.push(n):i.push(null)})),null==a.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);const o=a.gradient(i);for(const t in a.inputs){if(!(t in o))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(o)}.`);const r=n((()=>o[t]()));if("float32"!==r.dtype)throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${r.dtype}'`);const i=a.inputs[t];if(!re(r.shape,i.shape))throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${t}' has shape '${r.shape}', which does not match the shape of the input '${i.shape}'`);if(null==e[i.id])e[i.id]=r;else{const t=e[i.id];e[i.id]=s(t,r),t.dispose()}}}}(e,a,(e=>this.tidy(e)),zr);const s=t.map((t=>e[t.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((e=>{for(const t of e.saved)t.dispose()})),this.state.activeTape=null),{value:r,grads:s}}))}customGrad(e){return Z(Ce(e),(()=>"The f passed in customGrad(f) must be a function.")),(...t)=>{let n;Z(t.every((e=>e instanceof xr)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const s={};return t.forEach(((e,t)=>{s[t]=e})),this.runKernelFunc(((s,r)=>(n=e(...t,r),Z(n.value instanceof xr,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),Z(Ce(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value)),s,((e,s)=>{const r=n.gradFunc(e,s),a=Array.isArray(r)?r:[r];Z(a.length===t.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),Z(a.every((e=>e instanceof xr)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const i={};return a.forEach(((e,t)=>{i[t]=()=>e})),i}))}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}async time(e){const t=hr(),n=await this.backend.time(e);return n.wallMs=hr()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new _r;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function Mr(){const e=Ue();if(null==e._tfengine){const t=new Pe(e);e._tfengine=new Or(t)}var t;return t=e._tfengine.ENV,Ve=t,gr=()=>e._tfengine,e._tfengine}Or.nextTensorId=0,Or.nextVariableId=0;const Lr=Mr();function zr(e,t){const n={a:e,b:t};return Lr.runKernel(Ke,n)}function Pr(){if("undefined"!=typeof navigator&&null!=navigator){const e=navigator.userAgent||navigator.vendor||window.opera;return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(e)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(e.substr(0,4))}return!1}function Br(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}const Wr=Be();function Vr(e,t){let n=e;if(xe(e))return"string"===t?[]:[e.length];if(!Array.isArray(e))return[];const s=[];for(;Array.isArray(n)||xe(n)&&"string"!==t;)s.push(n.length),n=n[0];return Array.isArray(e)&&Be().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&Ur(e,s,[]),s}function Ur(e,t,n){if(n=n||[],!Array.isArray(e)&&!xe(e))return void Z(0===t.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`));Z(t.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`)),Z(e.length===t[0],(()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`));const s=t.slice(1);for(let t=0;t<e.length;++t)Ur(e[t],s,n.concat(t))}function Gr(e,t,n,s){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${s}' must be ${e} tensor, but got ${t} tensor`)}}function Hr(e,t,n,s="numeric"){if(e instanceof xr)return Gr(s,e.dtype,t,n),e;let r=Se(e);if("string"!==r&&["bool","int32","float32"].indexOf(s)>=0&&(r=s),Gr(s,r,t,n),null==e||!xe(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const s=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${s}'`)}const a=Vr(e,r);xe(e)||Array.isArray(e)||(e=[e]);const i="string"!==r?cr(e,r):te(e,[],!0);return Lr.makeTensor(i,a,r)}function jr(e,t,n,s="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map(((e,r)=>Hr(e,`${t}[${r}]`,n,s)))}Wr.registerFlag("DEBUG",(()=>!1),(e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),Wr.registerFlag("IS_BROWSER",(()=>Br())),Wr.registerFlag("IS_NODE",(()=>"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node)),Wr.registerFlag("IS_CHROME",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),Wr.registerFlag("PROD",(()=>!1)),Wr.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>Wr.getBool("DEBUG"))),Wr.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),Wr.registerFlag("IS_TEST",(()=>!1)),Wr.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",(()=>!0));const qr="__op";function Kr(e){const t=Object.keys(e);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0];const s=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+=qr;const r=(...e)=>{Lr.startScope(n);try{const t=s(...e);return Le(t)&&console.error("Cannot return a Promise inside of tidy."),Lr.endScope(t),t}catch(e){throw Lr.endScope(null),e}};return Object.defineProperty(r,"name",{value:n,configurable:!0}),r}const Xr=Kr({complex_:function(e,t){const n=Hr(e,"real","complex"),s=Hr(t,"imag","complex");Q(n.shape,s.shape,`real and imag shapes, ${n.shape} and ${s.shape}, must match in call to tf.complex().`);const r={real:n,imag:s};return Lr.runKernel(gt,r)}});function Yr(e,t,n,s){if(null==s&&(s=Se(e)),"complex64"===s)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!xe(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){_e(t);const e=ne(t),s=ne(n);Z(e===s,(()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${s}`));for(let e=0;e<n.length;++e){const s=n[e],r=e!==n.length-1||s!==ne(t.slice(e));Z(n[e]===t[e]||!r,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `))}}return xe(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==s?cr(e,s):te(e,[],!0),Lr.makeTensor(e,t,s)}function Jr(e,t,n){return Yr(e,t,Vr(e,n),n)}const Zr={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8},Qr=4;async function ea(e,t){const n=[],s=[],r=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);for(let a=0;a<r.length;++a){const i=r[a],o=Array.isArray(e)?e[a].tensor:e[i];if("float32"!==o.dtype&&"int32"!==o.dtype&&"bool"!==o.dtype&&"string"!==o.dtype&&"complex64"!==o.dtype)throw new Error(`Unsupported dtype in weight '${i}': ${o.dtype}`);const l={name:i,shape:o.shape,dtype:o.dtype};if("string"===o.dtype){const e=new Promise((async e=>{const t=await o.bytes(),n=t.reduce(((e,t)=>e+t.length),0)+Qr*t.length,s=new Uint8Array(n);let r=0;for(let e=0;e<t.length;e++){const n=t[e],a=new Uint8Array(new Uint32Array([n.length]).buffer);s.set(a,r),r+=Qr,s.set(n,r),r+=n.length}e(s)}));s.push(e)}else s.push(o.data());null!=t&&(l.group=t),n.push(l)}return{data:na(await Promise.all(s)),specs:n}}function ta(e,t){const n={};let s,r=0;for(const a of t){const t=a.name,i=a.dtype,o=a.shape,l=ne(o);let u;if("quantization"in a){const n=a.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${a.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${a.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==i)throw new Error(`Weight ${a.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${i}.`)}const o=Zr[n.dtype],c=e.slice(r,r+l*o),h="uint8"===n.dtype?new Uint8Array(c):new Uint16Array(c);if("float32"===i)if("uint8"===n.dtype||"uint16"===n.dtype){u=new Float32Array(h.length);for(let e=0;e<h.length;e++){const t=h[e];u[e]=t*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===s&&(s=la()),u=s(h)}else{if("int32"!==i)throw new Error(`Unsupported dtype in weight '${t}': ${i}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);u=new Int32Array(h.length);for(let e=0;e<h.length;e++){const t=h[e];u[e]=Math.round(t*n.scale+n.min)}}r+=l*o}else if("string"===i){const t=ne(a.shape);u=[];for(let n=0;n<t;n++){const t=new Uint32Array(e.slice(r,r+Qr))[0];r+=Qr;const n=new Uint8Array(e.slice(r,r+t));u.push(n),r+=t}}else{const s=Zr[i],a=e.slice(r,r+l*s);if("float32"===i)u=new Float32Array(a);else if("int32"===i)u=new Int32Array(a);else if("bool"===i)u=new Uint8Array(a);else{if("complex64"!==i)throw new Error(`Unsupported dtype in weight '${t}': ${i}`);{u=new Float32Array(a);const e=new Float32Array(u.length/2),s=new Float32Array(u.length/2);for(let t=0;t<e.length;t++)e[t]=u[2*t],s[t]=u[2*t+1];const r=Jr(e,o,"float32"),i=Jr(s,o,"float32");n[t]=Xr(r,i),r.dispose(),i.dispose()}}r+=l*s}"complex64"!==i&&(n[t]=Jr(u,o,i))}return n}function na(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0;const n=[];e.forEach((e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)}));const s=new Uint8Array(t);let r=0;return n.forEach((e=>{s.set(new Uint8Array(e.buffer),r),r+=e.byteLength})),s.buffer}const sa="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function ra(e){return sa?Buffer.byteLength(e):new Blob([e]).size}function aa(e){if(1===e.length)return e[0];let t=0;e.forEach((e=>{t+=e.byteLength}));const n=new Uint8Array(t);let s=0;return e.forEach((e=>{n.set(new Uint8Array(e),s),s+=e.byteLength})),n.buffer}function ia(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);const t=e.split("/");return t[t.length-1]}function oa(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:ra(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:ra(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function la(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;0==(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return s=>{const r=new ArrayBuffer(4*s.length),a=new Uint32Array(r);for(let r=0;r<s.length;r++){const i=s[r],o=e[n[i>>10]+(1023&i)]+t[i>>10];a[r]=o}return new Float32Array(r)}}class ua{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==ua.instance&&(ua.instance=new ua),ua.instance}static registerSaveRouter(e){ua.getInstance().saveRouters.push(e)}static registerLoadRouter(e){ua.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return ua.getHandlers(e,"save")}static getLoadHandlers(e,t){return ua.getHandlers(e,"load",t)}static getHandlers(e,t,n){const s=[];return("load"===t?ua.getInstance().loadRouters:ua.getInstance().saveRouters).forEach((t=>{const r=t(e,n);null!==r&&s.push(r)})),s}}const ca=e=>ua.registerSaveRouter(e),ha=e=>ua.registerLoadRouter(e),pa=e=>ua.getSaveHandlers(e),da=(e,t)=>ua.getLoadHandlers(e,t),fa="tensorflowjs",ma="models_store",ga="model_info_store";function ya(){if(!Be().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function ba(e){const t=e.result;t.createObjectStore(ma,{keyPath:"modelPath"}),t.createObjectStore(ga,{keyPath:"modelPath"})}class xa{constructor(e){if(this.indexedDB=ya(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise(((e,n)=>{const s=this.indexedDB.open(fa,1);s.onupgradeneeded=()=>ba(s),s.onsuccess=()=>{const r=s.result;if(null==t){const t=r.transaction(ma,"readonly"),s=t.objectStore(ma).get(this.modelPath);s.onsuccess=()=>{if(null==s.result)return r.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(s.result.modelArtifacts)},s.onerror=e=>(r.close(),n(s.error)),t.oncomplete=()=>r.close()}else{const s=oa(t),a=r.transaction(ga,"readwrite");let i=a.objectStore(ga);const o=i.put({modelPath:this.modelPath,modelArtifactsInfo:s});let l;o.onsuccess=()=>{l=r.transaction(ma,"readwrite");const o=l.objectStore(ma).put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:s});o.onsuccess=()=>e({modelArtifactsInfo:s}),o.onerror=e=>{i=a.objectStore(ga);const t=i.delete(this.modelPath);t.onsuccess=()=>(r.close(),n(o.error)),t.onerror=e=>(r.close(),n(o.error))}},o.onerror=e=>(r.close(),n(o.error)),a.oncomplete=()=>{null==l?r.close():l.oncomplete=()=>r.close()}}},s.onerror=e=>n(s.error)}))}}xa.URL_SCHEME="indexeddb://";const wa=e=>{return Be().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(xa.URL_SCHEME)?(t=e.slice(xa.URL_SCHEME.length),new xa(t)):null;var t};ua.registerSaveRouter(wa),ua.registerLoadRouter(wa);class ka{constructor(){this.indexedDB=ya()}async listModels(){return new Promise(((e,t)=>{const n=this.indexedDB.open(fa,1);n.onupgradeneeded=()=>ba(n),n.onsuccess=()=>{const s=n.result,r=s.transaction(ga,"readonly"),a=r.objectStore(ga).getAll();a.onsuccess=()=>{const t={};for(const e of a.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},a.onerror=e=>(s.close(),t(a.error)),r.oncomplete=()=>s.close()},n.onerror=e=>t(n.error)}))}async removeModel(e){var t;return e=(t=e).startsWith(xa.URL_SCHEME)?t.slice(xa.URL_SCHEME.length):t,new Promise(((t,n)=>{const s=this.indexedDB.open(fa,1);s.onupgradeneeded=()=>ba(s),s.onsuccess=()=>{const r=s.result,a=r.transaction(ga,"readwrite"),i=a.objectStore(ga),o=i.get(e);let l;o.onsuccess=()=>{if(null==o.result)return r.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const s=i.delete(e),a=()=>{l=r.transaction(ma,"readwrite");const s=l.objectStore(ma).delete(e);s.onsuccess=()=>t(o.result.modelArtifactsInfo),s.onerror=e=>n(o.error)};s.onsuccess=a,s.onerror=e=>(a(),r.close(),n(o.error))}},o.onerror=e=>(r.close(),n(o.error)),a.oncomplete=()=>{null==l?r.close():l.oncomplete=()=>r.close()}},s.onerror=e=>n(s.error)}))}}const va="/",Ia="tensorflowjs_models",Na="info",Sa="model_topology",Ca="weight_specs",$a="weight_data",Ta="model_metadata";function Ea(e){return{info:[Ia,e,Na].join(va),topology:[Ia,e,Sa].join(va),weightSpecs:[Ia,e,Ca].join(va),weightData:[Ia,e,$a].join(va),modelMetadata:[Ia,e,Ta].join(va)}}function Aa(e){const t=e.split(va);if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join(va)}class Ra{constructor(e){if(!Be().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=Ea(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),s=oa(e);try{this.LS.setItem(this.keys.info,JSON.stringify(s)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(e){if(sa)return Buffer.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let e=0,s=t.length;e<s;e++)n+=String.fromCharCode(t[e]);return btoa(n)}(e.weightData));const r={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};return null!=e.signature&&(r.signature=e.signature),null!=e.userDefinedMetadata&&(r.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(r.modelInitializer=e.modelInitializer),this.LS.setItem(this.keys.modelMetadata,JSON.stringify(r)),{modelArtifactsInfo:s}}catch(e){throw this.LS.removeItem(this.keys.info),this.LS.removeItem(this.keys.topology),this.LS.removeItem(this.keys.weightSpecs),this.LS.removeItem(this.keys.weightData),this.LS.removeItem(this.keys.modelMetadata),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${s.modelTopologyBytes}, weightSpecsBytes=${s.weightSpecsBytes}, weightDataBytes=${s.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const s=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==s)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=s;const r=this.LS.getItem(this.keys.modelMetadata);if(null!=r){const e=JSON.parse(r);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer)}const a=this.LS.getItem(this.keys.weightData);if(null==a)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=function(e){if(sa){const t=Buffer.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n.set([t.charCodeAt(e)],e);return n.buffer}(a),t}}Ra.URL_SCHEME="localstorage://";const Da=e=>{return Be().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Ra.URL_SCHEME)?(t=e.slice(Ra.URL_SCHEME.length),new Ra(t)):null;var t};ua.registerSaveRouter(Da),ua.registerLoadRouter(Da);class Fa{constructor(){Z(Be().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),Z("undefined"==typeof window||void 0!==window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const e={},t=Ia+va,n=va+Na;for(let s=0;s<this.LS.length;++s){const r=this.LS.key(s);r.startsWith(t)&&r.endsWith(n)&&(e[Aa(r)]=JSON.parse(this.LS.getItem(r)))}return e}async removeModel(e){var t;const n=Ea(e=(t=e).startsWith(Ra.URL_SCHEME)?t.slice(Ra.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${e}'`);const s=JSON.parse(this.LS.getItem(n.info));return this.LS.removeItem(n.info),this.LS.removeItem(n.topology),this.LS.removeItem(n.weightSpecs),this.LS.removeItem(n.weightData),s}}const _a="://";class Oa{constructor(){this.managers={}}static getInstance(){return null==Oa.instance&&(Oa.instance=new Oa),Oa.instance}static registerManager(e,t){Z(null!=e,(()=>"scheme must not be undefined or null.")),e.endsWith(_a)&&(e=e.slice(0,e.indexOf(_a))),Z(e.length>0,(()=>"scheme must not be an empty string."));const n=Oa.getInstance();Z(null==n.managers[e],(()=>`A model store manager is already registered for scheme '${e}'.`)),n.managers[e]=t}static getManager(e){const t=this.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(this.getInstance().managers)}}function Ma(e){if(-1===e.indexOf(_a))throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${Oa.getSchemes().join(",")}`);return{scheme:e.split(_a)[0],path:e.split(_a)[1]}}async function La(e,t,n=!1){Z(e!==t,(()=>`Old path and new path are the same: '${e}'`));const s=ua.getLoadHandlers(e);Z(s.length>0,(()=>`Copying failed because no load handler is found for source URL ${e}.`)),Z(s.length<2,(()=>`Copying failed because more than one (${s.length}) load handlers for source URL ${e}.`));const r=s[0],a=ua.getSaveHandlers(t);Z(a.length>0,(()=>`Copying failed because no save handler is found for destination URL ${t}.`)),Z(a.length<2,(()=>`Copying failed because more than one (${s.length}) save handlers for destination URL ${t}.`));const i=a[0],o=Ma(e).scheme,l=Ma(e).path,u=o===Ma(e).scheme,c=await r.load();n&&u&&await Oa.getManager(o).removeModel(l);const h=await i.save(c);return n&&!u&&await Oa.getManager(o).removeModel(l),h.modelArtifactsInfo}async function za(){const e=Oa.getSchemes(),t={};for(const n of e){const e=await Oa.getManager(n).listModels();for(const s in e)t[n+_a+s]=e[s]}return t}async function Pa(e){const t=Ma(e);return Oa.getManager(t.scheme).removeModel(t.path)}async function Ba(e,t){return La(e,t,!1)}async function Wa(e,t){return La(e,t,!0)}class Va{fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}}if(Be().get("IS_BROWSER")){Be().setPlatform("browser",new Va);try{Oa.registerManager(Ra.URL_SCHEME,new Fa)}catch(e){}try{Oa.registerManager(xa.URL_SCHEME,new ka)}catch(e){}}let Ua;function Ga(e,t="float32",n){return t=t||"float32",_e(e),new mr(e,t,n)}Be().get("IS_NODE")&&Be().setPlatform("node",new class{constructor(){this.util=n(758),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=Be().global.fetch?Be().global.fetch(e,t):(null==Ua&&(Ua=n(352)),Ua(e,t))}now(){const e=process.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}});const Ha=Kr({cast_:function(e,t){const n=Hr(e,"x","cast");if(!ye(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const s={x:n},r={dtype:t};return Lr.runKernel(dt,s,r)}}),ja=Kr({clone_:function(e){const t={x:Hr(e,"x","clone","string_or_numeric")};return Lr.runKernel(nn,t)}});function qa(e,t=!1){console.log(e.toString(t))}function Ka(e){return new Promise((e=>setTimeout(e))).then(e)}Mr(),yr={buffer:Ga,cast:Ha,clone:ja,print:qa};class Xa{constructor(e){if(!Be().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(Xa.URL_SCHEME)&&(e=e.slice(Xa.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelTopologyFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}],s={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:n};null!=e.signature&&(s.signature=e.signature),null!=e.userDefinedMetadata&&(s.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(s.modelInitializer=e.modelInitializer);const r=window.URL.createObjectURL(new Blob([JSON.stringify(s)],{type:"application/json"})),a=null==this.jsonAnchor?document.createElement("a"):this.jsonAnchor;if(a.download=this.modelTopologyFileName,a.href=r,await Ka((()=>a.dispatchEvent(new MouseEvent("click")))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,await Ka((()=>e.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:oa(e)}}}}Xa.URL_SCHEME="downloads://";class Ya{constructor(e){if(null==e||e.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.files=e}async load(){const e=this.files[0],t=this.files.slice(1);return new Promise(((n,s)=>{const r=new FileReader;r.onload=r=>{const a=JSON.parse(r.target.result),i=a.modelTopology;if(null==i)return void s(new Error(`modelTopology field is missing from file ${e.name}`));0===t.length&&n({modelTopology:i});const o=a.weightsManifest;if(null==o)return void s(new Error(`weightManifest field is missing from file ${e.name}`));let l;try{l=this.checkManifestAndWeightFiles(o,t)}catch(e){return void s(e)}const u=[],c=[],h=[];o.forEach((e=>{e.paths.forEach((e=>{c.push(e),h.push(null)})),u.push(...e.weights)})),o.forEach((e=>{e.paths.forEach((e=>{const t=new FileReader;t.onload=t=>{const s=t.target.result,r=c.indexOf(e);if(h[r]=s,-1===h.indexOf(null)){const e={modelTopology:i,weightSpecs:u,weightData:aa(h),format:a.format,generatedBy:a.generatedBy,convertedBy:a.convertedBy};null!=a.signature&&(e.signature=a.signature),null!=a.userDefinedMetadata&&(e.userDefinedMetadata=a.userDefinedMetadata),null!=a.modelInitializer&&(e.modelInitializer=a.modelInitializer),n(e)}},t.onerror=t=>s(`Failed to weights data from file of path '${e}'.`),t.readAsArrayBuffer(l[e])}))}))},r.onerror=t=>s(`Failed to read model topology and weights manifest JSON from file '${e.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),r.readAsText(e)}))}checkManifestAndWeightFiles(e,t){const n=[],s=t.map((e=>ia(e.name))),r={};for(const a of e)a.paths.forEach((e=>{const a=ia(e);if(-1!==n.indexOf(a))throw new Error(`Duplicate file basename found in weights manifest: '${a}'`);if(n.push(a),-1===s.indexOf(a))throw new Error(`Weight file with basename '${a}' is not provided.`);r[e]=t[s.indexOf(a)]}));if(n.length!==t.length)throw new Error(`Mismatch in the number of files in weights manifest (${n.length}) and the number of weight files provided (${t.length}).`);return r}}function Ja(e){return new Ya(e)}function Za(e,t,n,s){!function(e){Z(null!=e&&Array.isArray(e)&&e.length>0,(()=>"promises must be a none empty array"))}(e),function(e,t){Z(e>=0&&e<=1,(()=>`Progress fraction must be in range [0, 1], but got startFraction ${e}`)),Z(t>=0&&t<=1,(()=>`Progress fraction must be in range [0, 1], but got endFraction ${t}`)),Z(t>=e,(()=>`startFraction must be no more than endFraction, but got startFraction ${e} and endFraction ${t}`))}(n=null==n?0:n,s=null==s?1:s);let r=0;return Promise.all(e.map((a=>(a.then((a=>{const i=n+ ++r/e.length*(s-n);return t(i),a})),a))))}async function Qa(e,t){null==t&&(t={});const n=null==t.fetchFunc?Be().platform.fetch:t.fetchFunc,s=e.map((e=>n(e,t.requestInit,{isBinary:!0}))),r=(null==t.onProgress?await Promise.all(s):await Za(s,t.onProgress,0,.5)).map((e=>e.arrayBuffer()));return null==t.onProgress?await Promise.all(r):await Za(r,t.onProgress,.5,1)}async function ei(e,t="",n,s){return ti((e=>Qa(e,{requestInit:s})))(e,t,n)}function ti(e){return async(t,n="",s)=>{const r=t.map((()=>!1)),a={},i=null!=s?s.map((()=>!1)):[],o=[];if(t.forEach(((e,t)=>{let n=0;e.weights.forEach((e=>{const l="quantization"in e?e.quantization.dtype:e.dtype,u=Zr[l]*ne(e.shape),c=()=>{r[t]=!0,null==a[t]&&(a[t]=[]),a[t].push({manifestEntry:e,groupOffset:n,sizeBytes:u})};null!=s?s.forEach(((t,n)=>{t===e.name&&(c(),i[n]=!0)})):c(),o.push(e.name),n+=u}))})),!i.every((e=>e))){const e=s.filter(((e,t)=>!i[t]));throw new Error(`Could not find weights in manifest with names: ${e.join(", ")}. \nManifest JSON has weights with names: ${o.join(", ")}.`)}const l=r.reduce(((e,t,n)=>(t&&e.push(n),e)),[]),u=[];l.forEach((e=>{t[e].paths.forEach((e=>{const t=n+(n.endsWith("/")?"":"/")+e;u.push(t)}))}));const c=await e(u),h={};let p=0;return l.forEach((e=>{const n=t[e].paths.length;let s=0;for(let e=0;e<n;e++)s+=c[p+e].byteLength;const r=new ArrayBuffer(s),i=new Uint8Array(r);let o=0;for(let e=0;e<n;e++){const t=new Uint8Array(c[p+e]);i.set(t,o),o+=t.byteLength}a[e].forEach((e=>{const t=ta(r.slice(e.groupOffset,e.groupOffset+e.sizeBytes),[e.manifestEntry]);for(const e in t)h[e]=t[e]})),p+=n})),h}}ua.registerSaveRouter((e=>Be().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Xa.URL_SCHEME)?function(e="model"){return new Xa(e)}(e.slice(Xa.URL_SCHEME.length)):null));class ni{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?(Z("function"==typeof t.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=t.fetchFunc):this.fetch=Be().platform.fetch,Z(null!=e&&e.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(e)&&Z(2===e.length,(()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`)),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=[{paths:["./model.weights.bin"],weights:e.weightSpecs}],s={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:n};null!=e.signature&&(s.signature=e.signature),null!=e.userDefinedMetadata&&(s.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(s.modelInitializer=e.modelInitializer),t.body.append("model.json",new Blob([JSON.stringify(s)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const r=await this.fetch(this.path,t);if(r.ok)return{modelArtifactsInfo:oa(e),responses:[r]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${r.status}.`)}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let t;try{t=await e.json()}catch(e){let t=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?t+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":t+=" Please make sure the server is serving valid JSON for this request.",new Error(t)}const n=t.modelTopology,s=t.weightsManifest,r=t.generatedBy,a=t.convertedBy,i=t.format,o=t.signature,l=t.userDefinedMetadata;if(null==n&&null==s)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);let u,c;if(null!=s){const e=await this.loadWeights(s);[u,c]=e}const h={modelTopology:n,weightSpecs:u,weightData:c,generatedBy:r,convertedBy:a,format:i};null!=o&&(h.signature=o),null!=l&&(h.userDefinedMetadata=l);const p=t.modelInitializer;return p&&(h.modelInitializer=p),h}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,s]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?");return[e.substring(0,t)+"/",n>t?e.substring(n):""]}(t),r=this.weightPathPrefix||n,a=[];for(const t of e)a.push(...t.weights);const i=[],o=[];for(const t of e)for(const e of t.paths)null!=this.weightUrlConverter?o.push(this.weightUrlConverter(e)):i.push(r+e+s);return this.weightUrlConverter&&i.push(...await Promise.all(o)),[a,aa(await Qa(i,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function si(e){return null!=e.match(ni.URL_SCHEME_REGEX)}ni.URL_SCHEME_REGEX=/^https?:\/\//;const ri=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every((e=>si(e))):si(e),n)return ai(e,t)}return null};function ai(e,t){return new ni(e,t)}function ii(e,t){return ai(e,t)}ua.registerSaveRouter(ri),ua.registerLoadRouter(ri);class oi{constructor(e){this.modelArtifacts=e}async load(){return this.modelArtifacts}}class li{constructor(e){this.saveHandler=e}async save(e){return this.saveHandler(e)}}function ui(e,t,n,s){return 1===arguments.length?null!=e.modelTopology||null!=e.weightSpecs?new oi(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new oi({modelTopology:e})):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new oi({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:s}))}function ci(e){return new li(e)}const hi=Kr({matMul_:function(e,t,n=!1,s=!1){let r=Hr(e,"a","matMul"),a=Hr(t,"b","matMul");[r,a]=Er(r,a);const i={a:r,b:a},o={transposeA:n,transposeB:s};return Lr.runKernel(ut,i,o)}}),pi=Kr({oneHot_:function(e,t,n=1,s=0){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const r={indices:Hr(e,"indices","oneHot","int32")},a={depth:t,onValue:n,offValue:s};return Lr.runKernel(Wn,r,a)}}),di=Kr({transpose_:function(e,t){const n=Hr(e,"x","transpose");if(null==t&&(t=n.shape.map(((e,t)=>t)).reverse()),Z(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of perm ${t}.`)),t.forEach((e=>{Z(e>=0&&e<n.rank,(()=>"All entries in 'perm' must be between 0 and "+(n.rank-1)+` but got ${t}`))})),n.rank<=1)return n.clone();const s={x:n},r={perm:t};return Lr.runKernel(As,s,r)}}),fi=Kr({confusionMatrix_:function(e,t,n){const s=Hr(e,"labels","confusionMatrix"),r=Hr(t,"predictions","confusionMatrix");Z(null==n||n>0&&Number.isInteger(n),(()=>`If provided, numClasses must be a positive integer, but got ${n}`)),Z(1===s.rank,(()=>`Expected the rank of labels to be 1, but got ${s.rank}`)),Z(1===r.rank,(()=>`Expected the rank of predictions to be 1, but got ${r.rank}`)),Z(s.shape[0]===r.shape[0],(()=>`Mismatch in the number of examples: ${s.shape[0]} vs. ${r.shape[0]}. Labels and predictions should have the same number of elements.`)),Z(n>0&&Number.isInteger(n),(()=>`numClasses is required to be a positive integer, but got ${n}`));const a=pi(Ha(s,"int32"),n),i=pi(Ha(r,"int32"),n),o=di(a),l=hi(o,i);return Ha(l,"int32")}});function mi(e,t,n){if(ee(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const s=Vr(e,n);if(3!==s.length&&1!==s.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return Yr(e,t,s,n)}let gi;async function yi(e,t){let n=Hr(e,"img","toPixels");if(!(e instanceof xr)){const e=n;n=Ha(e,"int32"),e.dispose()}if(2!==n.rank&&3!==n.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${n.rank}.`);const[s,r]=n.shape.slice(0,2),a=2===n.rank?1:n.shape[2];if(a>4||2===a)throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${a}`);if("float32"!==n.dtype&&"int32"!==n.dtype)throw new Error(`Unsupported type for toPixels: ${n.dtype}. Please use float32 or int32 tensors.`);const i=await n.data(),o="float32"===n.dtype?255:1,l=new Uint8ClampedArray(r*s*4);for(let e=0;e<s*r;++e){const t=[0,0,0,255];for(let s=0;s<a;s++){const r=i[e*a+s];if("float32"===n.dtype){if(r<0||r>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${r}.`)}else if("int32"===n.dtype&&(r<0||r>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${r}.`);1===a?(t[0]=r*o,t[1]=r*o,t[2]=r*o):t[s]=r*o}const s=4*e;l[s+0]=Math.round(t[0]),l[s+1]=Math.round(t[1]),l[s+2]=Math.round(t[2]),l[s+3]=Math.round(t[3])}if(null!=t){t.width=r,t.height=s;const e=t.getContext("2d"),n=new ImageData(l,r,s);e.putImageData(n,0,0)}return n!==e&&n.dispose(),l}const bi=Kr({fromPixels_:function(e,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,s=!1,r=!1,a=!1,i=!1,o=!1;if(e.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)s=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)r=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)a=!0;else if(null!=e.getContext)i=!0;else{if(!("undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap))throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${e.constructor.name}`);o=!0}if(r){const t=2;if(r&&e.readyState<t)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.")}if(null!=Us(Ms,Lr.backendName)){const n={pixels:e},s={numChannels:t};return Lr.runKernel(Ms,n,s)}const[l,u]=r?[e.videoWidth,e.videoHeight]:[e.width,e.height];let c,h;if(i?c=e.getContext("2d").getImageData(0,0,l,u).data:s||n?c=e.data:(a||r||o)&&(null==gi&&(gi=document.createElement("canvas").getContext("2d")),gi.canvas.width=l,gi.canvas.height=u,gi.drawImage(e,0,0,l,u),c=gi.getImageData(0,0,l,u).data),4===t)h=new Int32Array(c);else{const e=l*u;h=new Int32Array(e*t);for(let n=0;n<e;n++)for(let e=0;e<t;++e)h[n*t+e]=c[4*n+e]}return mi(h,[u,l,t],"int32")}});function xi(e,t){const n=e.shape.length,s=t.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(s<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${s}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[s-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[s-1]} vs. ${n}`);if(0===ne(e.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const r=t.shape,a=r[r.length-1];let i=1;for(let e=0;e<r.length-1;++e)i*=r[e];const o=e.shape,l=r.slice();l.pop();let u=1;for(let e=a;e<n;++e)u*=o[e],l.push(o[e]);const c=[...Te(e.shape).map((e=>e/u)),1].slice(0,a);return[l,i,u,c]}function wi(e,t,n){const s=t.rank>1?t.shape[t.rank-1]:1,r=t.rank>1?t.rank-1:1,a=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${s}, and batchDim: ${r}.`;if(n.rank<r)throw new Error(a+` update.rank < ${r}. `);if(e.length<s+(n.rank-r))throw new Error(a+` Output shape length < ${s+(n.rank-r)}`);if(n.rank!==r+e.length-s)throw new Error(a+" update.rank != "+(r+e.length-s));for(let e=0;e<r;++e)if(n.shape[e]!==t.shape[e])throw new Error(a+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-r;++t)if(n.shape[t+r]!==e[t+s])throw new Error(a+` updates.shape[${t+r}] (${n.shape[t+r]}) != shape[${t+r}] (${e[t+r]})`)}function ki(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}wi(n,t,e)}function vi(e,t,n){const s=t.shape.length,r=s>1?t.shape[s-1]:1,a=n.length;let i=1;for(let e=r;e<a;++e)i*=n[e];const o=r<1?1:r;return{sliceRank:r,numUpdates:ne(t.shape)/o,sliceSize:i,strides:[...Te(n.slice(0,r)),1],outputSize:ne(n)}}function Ii(e,t,n){const s=e.shape.length;Z(s===t.length,(()=>`Error in slice${s}D: Length of begin ${t} must match the rank of the array (${s}).`)),Z(s===n.length,(()=>`Error in slice${s}D: Length of size ${n} must match the rank of the array (${s}).`));for(let r=0;r<s;++r)Z(t[r]+n[r]<=e.shape[r],(()=>`Error in slice${s}D: begin[${r}] + size[${r}] (${t[r]+n[r]}) would overflow input.shape[${r}] (${e.shape[r]})`))}function Ni(e){const t=[];let n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t}function Si(e,t,n){const s=[];for(let r=0;r<e.length;r++)s[r]=Math.ceil((t[r]-e[r])/n[r]);return s}function Ci(e,t,n,s){const r=[...e];for(let e=r.length;e<s.length;e++)r.push(1);for(let e=0;e<n;e++)0===e?r[t]=1:(r.splice(t,0,1),r.pop());return r}function $i(e,t,n){return n<=e?n:n-(t-1)}function Ti(e,t){const n=[];for(let s=0;s<e;s++)n.push(t+s);return n}function Ei(e,t,n,s,r,a,i,o,l){const u=e.length;let c=new Array(u),h=new Array(u),p=new Array(u);if(t.length&&n>0){const l=t[0],u=n+1;c=Ai(i,l,u,s,e),h=Ri(o,l,u,r,e),p=Ci(a,l,u,e)}else for(let t=0;t<u;t++)c[t]=Fi(i,s,a,e,t,l),h[t]=_i(o,r,a,e,t,l),p[t]=Di(a,t,l);return{begin:c,end:h,strides:p}}function Ai(e,t,n,s,r){const a=[...r],i=Ti(n,t);for(let r=0;r<a.length;r++)if(i.indexOf(r)>-1)a[r]=0;else{const i=$i(t,n,r);let o=s[i];e&1<<i&&(o=0),a[r]=o}return a}function Ri(e,t,n,s,r){const a=[...r],i=Ti(n,t);for(let r=0;r<a.length;r++)if(i.indexOf(r)>-1)a[r]=Number.MAX_SAFE_INTEGER;else{const i=$i(t,n,r);let o=s[i];e&1<<i&&(o=Number.MAX_SAFE_INTEGER),a[r]=o}for(let e=0;e<a.length;e++){const t=r[e];a[e]<0&&(a[e]+=t),a[e]=q(0,a[e],r[e])}return a}function Di(e,t,n){let s=e[t];return(n&1<<t||null==s)&&(s=1),s}function Fi(e,t,n,s,r,a){let i=t[r];const o=n[r]||1;(e&1<<r||a&1<<r||null==i)&&(i=o>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const l=s[r];return i<0&&(i+=l),i=q(0,i,l-1),i}function _i(e,t,n,s,r,a){let i=t[r];const o=n[r]||1;(e&1<<r||a&1<<r||null==i)&&(i=o>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const l=s[r];return i<0&&(i+=l),i=o>0?q(0,i,l):q(-1,i,l-1),i}function Oi(e,t,n){let s=n.length;for(let e=0;e<n.length;e++)if(n[e]>1){s=e;break}for(let r=s+1;r<n.length;r++)if(t[r]>0||n[r]!==e[r])return!1;return!0}function Mi(e,t){let n=e.length>0?e[e.length-1]:1;for(let s=0;s<e.length-1;s++)n+=e[s]*t[s];return n}function Li(e,t,n){let s;const r=e.shape.length;let a;return s="number"==typeof t?[t,...new Array(r-1).fill(0)]:t.length<r?t.concat(new Array(r-t.length).fill(0)):t.slice(),s.forEach((e=>{Z(-1!==e,(()=>"slice() does not support negative begin indexing."))})),a=null==n?new Array(r).fill(-1):"number"==typeof n?[n,...new Array(r-1).fill(-1)]:n.length<r?n.concat(new Array(r-n.length).fill(-1)):n,a=a.map(((t,n)=>t>=0?t:(Z(-1===t,(()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`)),e.shape[n]-s[n]))),[s,a]}function zi(e,t,n,s,r,a,i,o,l){let u=t.slice(),c=n.slice(),h=s;null==s&&(h=new Array(u.length));const p=Ni(i);if(p.length>1)throw new Error("Multiple ellipses in slice is not allowed.");if(0!==i&&0!==o)throw new Error("Using both ellipsisMask and newAxisMask is not yet supported.");if(0!==i&&0!==l)throw new Error("Using both ellipsisMask and shrinkAxisMask is not yet supported.");const d=e.length-u.length,f=Ni(o),m=e.slice();f.forEach((e=>{u[e]=0,c[e]=1,m.splice(e,0,1)}));const{begin:g,end:y,strides:b}=Ei(m,p,d,u,c,h,r,a,i);u=g,c=y,h=b;const x=Ni(l);x.forEach((e=>{c[e]=u[e]+1,h[e]=1}));const w=Si(u,c,h),k=w.filter(((e,t)=>-1===x.indexOf(t)));return{nonStrided:h.every((e=>1===e)),$begin:u,$end:c,$strides:h,size:w,newShape:m,outShape:k}}class Pi{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class Bi{constructor(){this.classNameMap={}}static getMap(){return null==Bi.instance&&(Bi.instance=new Bi),Bi.instance}static register(e){Bi.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function Wi(e){Z(null!=e.className,(()=>"Class being registered does not have the static className property defined.")),Z("string"==typeof e.className,(()=>"className is required to be a string, but got type "+typeof e.className)),Z(e.className.length>0,(()=>"Class being registered has an empty-string as its className, which is disallowed.")),Bi.register(e)}const Vi=.001,Ui=.1;function Gi(e,t,n){return null==n&&(n=Hi()),ji(e,t,((e,t)=>Yi(e,t,n)))}function Hi(){return 32===Lr.backend.floatPrecision()?Vi:Ui}function ji(e,t,n){let s=!0;if((xe(e)||xe(t))&&(s=!1),xe(e)&&xe(t)&&(s=!0),s){const n=e.constructor.name,s=t.constructor.name;if(n!==s)throw new Error(`Arrays are of different type. Actual: ${n}. Expected: ${s}`)}if(Array.isArray(e)&&Array.isArray(t)){const n=Vr(e),s=Vr(t);if(!re(n,s))throw new Error(`Arrays have different shapes. Actual: [${n}]. Expected: [${s}]`)}const r=xe(e)?e:te(e),a=xe(t)?t:te(t);if(r.length!==a.length)throw new Error(`Arrays have different lengths actual: ${r.length} vs expected: ${a.length}.\nActual:   ${r}.\nExpected: ${a}.`);for(let e=0;e<a.length;++e){const t=r[e],s=a[e];if(!n(t,s))throw new Error(`Arrays differ: actual[${e}] = ${t}, expected[${e}] = ${s}.\nActual:   ${r}.\nExpected: ${a}.`)}}function qi(e,t){e().then((()=>t.fail()),(()=>t()))}function Ki(e,t){const n="string"==typeof t||"number"==typeof t||"boolean"==typeof t?[t]:t;return ve(e)||ve(e[0])||ve(t)||ve(t[0])?ji(e,n,((e,t)=>e==t)):ji(e,t,((e,t)=>Yi(e,t,0)))}function Xi(e,t,n){if(null==n&&(n=Hi()),!Yi(e,t,n))throw new Error(`Numbers differ: actual === ${e}, expected === ${t}`)}function Yi(e,t,n){return!isFinite(e)&&!isFinite(t)||!(isNaN(e)||isNaN(t)||Math.abs(e-t)>n)}function Ji(e,t,n){for(let s=0;s<e.length;s++)if(e[s]<t||e[s]>n)throw new Error(`Value out of range:${e[s]} low: ${t}, high: ${n}`)}function Zi(e,t){expect(new Float32Array(e)).toEqual(new Float32Array(t))}function Qi(e){for(let t=0;t<e.length;t++){const n=e[t];Array.isArray(n)?Qi(n):e[t]=dr(n)}return e}const eo="2.8.6";function to(){Be().set("PROD",!0)}function no(){Be().set("DEBUG",!0)}function so(){Be().set("DEPRECATION_WARNINGS_ENABLED",!1),console.warn("TensorFlow.js deprecation warnings have been disabled.")}function ro(e){Be().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function ao(){Lr.disposeVariables()}function io(){return Lr}function oo(){return Lr.memory()}function lo(e){return Lr.profile(e)}function uo(e,t){return Lr.tidy(e,t)}function co(e){Dr(e).forEach((e=>e.dispose()))}function ho(e){return Lr.keep(e)}function po(e){return Lr.time(e)}function fo(e){return Lr.setBackend(e)}function mo(){return Lr.ready()}function go(){return Lr.backendName}function yo(e){Lr.removeBackend(e)}function bo(e){return Lr.findBackend(e)}function xo(e){return Lr.findBackendFactory(e)}function wo(e,t,n=1){return Lr.registerBackend(e,t,n)}function ko(){return Lr.backend}function vo(e,t){Be().setPlatform(e,t)}br=ro;const Io=Kr({add_:function(e,t){let n=Hr(e,"a","add"),s=Hr(t,"b","add");[n,s]=Er(n,s);const r={a:n,b:s};return Lr.runKernel(Ke,r)}}),No=Kr({floorDiv_:function(e,t){let n=Hr(e,"a","floorDiv"),s=Hr(t,"b","floorDiv");[n,s]=Er(n,s);const r={a:n,b:s};return Lr.runKernel(Yt,r)}}),So=Kr({div_:function(e,t){let n=Hr(e,"a","div"),s=Hr(t,"b","div");if([n,s]=Er(n,s),"int32"===n.dtype&&"int32"===s.dtype)return No(n,s);const r={a:n,b:s};return Lr.runKernel(zt,r,{})}}),Co=Kr({mul_:function(e,t){let n=Hr(e,"a","mul"),s=Hr(t,"b","mul");[n,s]=Er(n,s);const r={a:n,b:s};return Lr.runKernel(_n,r)}}),$o=Kr({sqrt_:function(e){const t={x:Hr(e,"x","sqrt")};return Lr.runKernel(gs,t)}}),To=Kr({square_:function(e){const t=Hr(e,"x","square");return Lr.runKernel("Square",{x:t},{})}}),Eo=Kr({zerosLike_:function(e){const t={x:Hr(e,"x","zerosLike")};return Lr.runKernel(_s,t)}});function Ao(e){return Z(Ce(e),(()=>"The f passed in grad(f) must be a function")),(t,n)=>{const s=Hr(t,"x","tf.grad","string_or_numeric"),r=null!=n?Hr(n,"dy","tf.grad"):null;return Lr.tidy((()=>{const{value:t,grads:n}=Lr.gradients((()=>e(s)),[s],r);return null!=r&&Q(t.shape,r.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),Mo(n),n[0]}))}}function Ro(e){return Z(Ce(e),(()=>"The f passed in grads(f) must be a function")),(t,n)=>{Z(Array.isArray(t),(()=>"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s"));const s=jr(t,"args","tf.grads","string_or_numeric"),r=null!=n?Hr(n,"dy","tf.grads"):null;return Lr.tidy((()=>{const{value:t,grads:n}=Lr.gradients((()=>e(...s)),s,r);return null!=r&&Q(t.shape,r.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),Mo(n),n}))}}function Do(e){return Z(Ce(e),(()=>"The f passed in valueAndGrad(f) must be a function")),(t,n)=>{Z(t instanceof xr,(()=>"The x passed in valueAndGrad(f)(x) must be a tensor")),Z(null==n||n instanceof xr,(()=>"The dy passed in valueAndGrad(f)(x, dy) must be a tensor"));const{grads:s,value:r}=Lr.gradients((()=>e(t)),[t],n);return Mo(s),{grad:s[0],value:r}}}function Fo(e){return Z(Ce(e),(()=>"The f passed in valueAndGrads(f) must be a function")),(t,n)=>{Z(Array.isArray(t)&&t.every((e=>e instanceof xr)),(()=>"The args passed in valueAndGrads(f)(args) must be array of tensors")),Z(null==n||n instanceof xr,(()=>"The dy passed in valueAndGrads(f)(args, dy) must be a tensor"));const s=Lr.gradients((()=>e(...t)),t,n);return null!=n&&Q(s.value.shape,n.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),Mo(s.grads),s}}function _o(e,t){Z(Ce(e),(()=>"The f passed in variableGrads(f) must be a function")),Z(null==t||Array.isArray(t)&&t.every((e=>e instanceof wr)),(()=>"The varList passed in variableGrads(f, varList) must be an array of variables"));const n=null!=t;if(!n){t=[];for(const e in Lr.registeredVariables)t.push(Lr.registeredVariables[e])}const s=n?t.filter((e=>!e.trainable)):null,r=t.length;t=t.filter((e=>e.trainable)),Z(t.length>0,(()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${r} variables is trainable.`));const{value:a,grads:i}=Lr.gradients(e,t,null,!0);Z(i.some((e=>null!=e)),(()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().")),Z(0===a.rank,(()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`));const o={};return t.forEach(((e,t)=>{null!=i[t]&&(o[e.name]=i[t])})),null!=s&&s.forEach((e=>o[e.name]=null)),{value:a,grads:o}}function Oo(e){return Lr.customGrad(e)}function Mo(e){if(e.filter((e=>null==e)).length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.")}function Lo(e,t){if((xe(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&xe(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return Yr(e,[],[],t)}class zo extends Pi{minimize(e,t=!1,n){const{value:s,grads:r}=this.computeGradients(e,n);if(null!=n){const e=n.map((e=>({name:e.name,tensor:r[e.name]})));this.applyGradients(e)}else this.applyGradients(r);return co(r),t?s:(s.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return _o(e,t)}dispose(){null!=this.iterations_&&co(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:Lo(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(zo,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});class Po extends zo{constructor(e,t,n=null){super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=Lr.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Lr.registeredVariables[t];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:`${t}/accum_grad`,variable:uo((()=>Eo(s).variable(!1)))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:`${t}/accum_var`,variable:uo((()=>Eo(s).variable(!1)))});const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const a=this.accumulatedGrads[n].variable,i=this.accumulatedUpdates[n].variable;uo((()=>{const e=Io(Co(a,this.rho),Co(To(r),1-this.rho)),t=Co(So($o(Io(i,this.epsilon)),$o(Io(a,this.epsilon))),r),n=Io(Co(i,this.rho),Co(To(t),1-this.rho));a.assign(e),i.assign(n);const o=Io(Co(t,-this.learningRate),s);s.assign(o)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(co(this.accumulatedGrads.map((e=>e.variable))),co(this.accumulatedUpdates.map((e=>e.variable))))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){const t=(e=await this.extractIterations(e)).length/2;this.accumulatedGrads=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)}))),this.accumulatedUpdates=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}function Bo(e,t,n){const s={shape:e,value:t,dtype:n};return Lr.runKernel(qt,{},s)}Po.className="Adadelta",Wi(Po);class Wo extends zo{constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Lr.registeredVariables[t];if(null==this.accumulatedGrads[n]){const e=!1;this.accumulatedGrads[n]={originalName:`${t}/accumulator`,variable:uo((()=>Bo(s.shape,this.initialAccumulatorValue).variable(e)))}}const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const a=this.accumulatedGrads[n].variable;uo((()=>{const e=Io(a,To(r));a.assign(e);const t=Io(Co(So(r,$o(Io(e,Lr.backend.epsilon()))),-this.learningRate),s);s.assign(t)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&co(this.accumulatedGrads.map((e=>e.variable)))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),this.accumulatedGrads=e.map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}Wo.className="Adagrad",Wi(Wo);const Vo=Kr({pow_:function(e,t){let n=Hr(e,"base","pow"),s=Hr(t,"exp","pow");[n,s]=Er(n,s);const r={a:n,b:s};return Lr.runKernel(Hn,r)}}),Uo=Kr({sub_:function(e,t){let n=Hr(e,"a","sub"),s=Hr(t,"b","sub");[n,s]=Er(n,s);const r={a:n,b:s};return Lr.runKernel(Is,r)}});class Go extends zo{constructor(e,t,n,s=null){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=s,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],uo((()=>{this.accBeta1=Lo(t).variable(),this.accBeta2=Lo(n).variable()})),null==s&&(this.epsilon=Lr.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);uo((()=>{const n=Uo(1,this.accBeta1),s=Uo(1,this.accBeta2);t.forEach(((t,r)=>{const a=Lr.registeredVariables[t];null==this.accumulatedFirstMoment[r]&&(this.accumulatedFirstMoment[r]={originalName:`${t}/m`,variable:uo((()=>Eo(a).variable(!1)))}),null==this.accumulatedSecondMoment[r]&&(this.accumulatedSecondMoment[r]={originalName:`${t}/v`,variable:uo((()=>Eo(a).variable(!1)))});const i=Array.isArray(e)?e[r].tensor:e[t];if(null==i)return;const o=this.accumulatedFirstMoment[r].variable,l=this.accumulatedSecondMoment[r].variable,u=Io(Co(o,this.beta1),Co(i,1-this.beta1)),c=Io(Co(l,this.beta2),Co(To(i),1-this.beta2)),h=So(u,n),p=So(c,s);o.assign(u),l.assign(c);const d=Io(Co(So(h,Io($o(p),this.epsilon)),-this.learningRate),a);a.assign(d)})),this.accBeta1.assign(Co(this.accBeta1,this.beta1)),this.accBeta2.assign(Co(this.accBeta2,this.beta2))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&co(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedSecondMoment&&co(this.accumulatedSecondMoment.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),uo((()=>{this.accBeta1.assign(Vo(this.beta1,this.iterations_+1)),this.accBeta2.assign(Vo(this.beta2,this.iterations_+1))}));const t=e.length/2;this.accumulatedFirstMoment=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)}))),this.accumulatedSecondMoment=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}Go.className="Adam",Wi(Go);const Ho=Kr({abs_:function(e){const t=Hr(e,"x","abs");if("complex64"===t.dtype){const e={x:t};return Lr.runKernel(yt,e)}{const e={x:t};return Lr.runKernel(He,e)}}});function jo(e,t){const n=e.length,s=[];for(let r=0;r<n;r++){const a=n-1-r,i=e[a]||1;(t[t.length-1-r]||1)>1&&1===i&&s.unshift(a)}return s}function qo(e,t){const n=[];for(let s=0;s<t.length;s++){const r=e[e.length-s-1],a=t.length-s-1,i=t[a];(null==r||1===r&&i>1)&&n.unshift(a)}return n}function Ko(e,t){const n=[],s=Math.max(e.length,t.length);for(let r=0;r<s;r++){let s=e[e.length-r-1];null==s&&(s=1);let a=t[t.length-r-1];if(null==a&&(a=1),1===s)n.unshift(a);else if(1===a)n.unshift(s);else{if(s!==a)throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`);n.unshift(s)}}return n}const Xo=Kr({maximum_:function(e,t){let n=Hr(e,"a","maximum"),s=Hr(t,"b","maximum");[n,s]=Er(n,s),"bool"===n.dtype&&(n=Ha(n,"int32"),s=Ha(s,"int32")),Ko(n.shape,s.shape);const r={a:n,b:s};return Lr.runKernel(vn,r)}});class Yo extends zo{constructor(e,t,n,s=null,r=0){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=s,this.decay=r,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],uo((()=>{this.iteration=Lo(0).variable(),this.accBeta1=Lo(t).variable()})),null==s&&(this.epsilon=Lr.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);uo((()=>{const n=Uo(1,this.accBeta1),s=So(-this.learningRate,Io(Co(this.iteration,this.decay),1));t.forEach(((t,r)=>{const a=Lr.registeredVariables[t];null==this.accumulatedFirstMoment[r]&&(this.accumulatedFirstMoment[r]={originalName:`${t}/m`,variable:Eo(a).variable(!1)}),null==this.accumulatedWeightedInfNorm[r]&&(this.accumulatedWeightedInfNorm[r]={originalName:`${t}/v`,variable:Eo(a).variable(!1)});const i=Array.isArray(e)?e[r].tensor:e[t];if(null==i)return;const o=this.accumulatedFirstMoment[r].variable,l=this.accumulatedWeightedInfNorm[r].variable,u=Io(Co(o,this.beta1),Co(i,1-this.beta1)),c=Co(l,this.beta2),h=Ho(i),p=Xo(c,h);o.assign(u),l.assign(p);const d=Io(Co(So(s,n),So(u,Io(p,this.epsilon))),a);a.assign(d)})),this.iteration.assign(Io(this.iteration,1)),this.accBeta1.assign(Co(this.accBeta1,this.beta1))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&co(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedWeightedInfNorm&&co(this.accumulatedWeightedInfNorm.map((e=>e.variable)))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}Yo.className="Adamax",Wi(Yo);class Jo extends zo{constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const r=Lr.registeredVariables[t];uo((()=>{const e=Io(Co(this.c,s),r);r.assign(e)}))})),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=ho(Lo(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}Jo.className="SGD",Wi(Jo);class Zo extends Jo{constructor(e,t,n=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=Lo(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Lr.registeredVariables[t];if(null==this.accumulations[n]){const e=!1;this.accumulations[n]={originalName:`${t}/momentum`,variable:uo((()=>Eo(s).variable(e)))}}const r=this.accumulations[n].variable,a=Array.isArray(e)?e[n].tensor:e[t];null!=a&&uo((()=>{let e;const t=Io(Co(this.m,r),a);e=this.useNesterov?Io(Co(this.c,Io(a,Co(t,this.m))),s):Io(Co(this.c,t),s),r.assign(t),s.assign(e)}))})),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&co(this.accumulations.map((e=>e.variable)))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),this.accumulations=e.map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}Zo.className="Momentum",Wi(Zo);class Qo extends zo{constructor(e,t=.9,n=0,s=null,r=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=s,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=r,null==s&&(this.epsilon=Lr.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Lr.registeredVariables[t],r=!1;null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:`${t}/rms`,variable:uo((()=>Eo(s).variable(r)))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:`${t}/momentum`,variable:uo((()=>Eo(s).variable(r)))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${t}/mg`,variable:uo((()=>Eo(s).variable(r)))});const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const i=this.accumulatedMeanSquares[n].variable,o=this.accumulatedMoments[n].variable;uo((()=>{const e=Io(Co(i,this.decay),Co(To(a),1-this.decay));if(this.centered){const t=this.accumulatedMeanGrads[n].variable,r=Io(Co(t,this.decay),Co(a,1-this.decay)),l=So(Co(a,this.learningRate),$o(Uo(e,Io(To(r),this.epsilon)))),u=Io(Co(o,this.momentum),l);i.assign(e),t.assign(r),o.assign(u);const c=Uo(s,u);s.assign(c)}else{const e=Io(Co(i,this.decay),Co(To(a),1-this.decay)),t=Io(Co(o,this.momentum),So(Co(a,this.learningRate),$o(Io(e,this.epsilon))));i.assign(e),o.assign(t);const n=Uo(s,t);s.assign(n)}}))})),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&co(this.accumulatedMeanSquares.map((e=>e.variable))),null!=this.accumulatedMeanGrads&&this.centered&&co(this.accumulatedMeanGrads.map((e=>e.variable))),null!=this.accumulatedMoments&&co(this.accumulatedMoments.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2,n=!1;this.accumulatedMeanSquares=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.accumulatedMoments=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}Qo.className="RMSProp",Wi(Qo);const el=Kr({acos_:function(e){const t={x:Hr(e,"x","acos")};return Lr.runKernel(je,t)}}),tl=Kr({acosh_:function(e){const t={x:Hr(e,"x","acosh")};return Lr.runKernel(qe,t)}}),nl=Kr({addN_:function(e){Z(Array.isArray(e),(()=>"The argument passed to tf.addN() must be a list of tensors")),Z(e.length>=1,(()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`));const t=e.map(((e,t)=>Hr(e,`tensors${t}`,"addN"))),n=t[0];t.forEach((e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),t.forEach((e=>{if(!re(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));const s=t;return Lr.runKernel(Xe,s)}}),sl=Kr({all_:function(e,t=null,n=!1){const s={x:Hr(e,"x","all","bool")},r={axis:t,keepDims:n};return Lr.runKernel(Ye,s,r)}}),rl=Kr({any_:function(e,t=null,n=!1){const s={x:Hr(e,"x","any","bool")},r={axis:t,keepDims:n};return Lr.runKernel(Je,s,r)}}),al=Kr({argMax_:function(e,t=0){const n={x:Hr(e,"x","argMax")},s={axis:t};return Lr.runKernel(Ze,n,s)}}),il=Kr({argMin_:function(e,t=0){const n={x:Hr(e,"x","argMin")},s={axis:t};return Lr.runKernel(Qe,n,s)}}),ol=Kr({asin_:function(e){const t={x:Hr(e,"x","asin")};return Lr.runKernel(et,t)}}),ll=Kr({asinh_:function(e){const t={x:Hr(e,"x","asinh")};return Lr.runKernel(tt,t)}}),ul=Kr({atan_:function(e){const t={x:Hr(e,"x","atan")};return Lr.runKernel(nt,t)}}),cl=Kr({atan2_:function(e,t){let n=Hr(e,"a","atan2"),s=Hr(t,"b","atan2");[n,s]=Er(n,s);const r={a:n,b:s};return Lr.runKernel(rt,r)}}),hl=Kr({atanh_:function(e){const t={x:Hr(e,"x","atanh")};return Lr.runKernel(st,t)}});function pl(e,t,n,s,r="NHWC",a){return ml(e,[...t,e[3]],n,a,s,null,null,Nl(r))}function dl(e,t,n,s,r,a,i="channelsLast"){const[o,l]=bl(t);let u;if("channelsLast"===i)u=[o,l,e[3],e[3]];else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);u=[o,l,e[1],e[1]]}return ml(e,u,n,s,r,a,!1,i)}function fl(e,t,n,s,r,a,i="NDHWC"){const[o,l,u]=xl(t);let c,h;if("NDHWC"===i)h="channelsLast",c=[o,l,u,e[4],e[4]];else{if("NCDHW"!==i)throw new Error(`Unknown dataFormat ${i}`);h="channelsFirst",c=[o,l,u,e[1],e[1]]}return gl(e,c,n,s,r,!1,h,a)}function ml(e,t,n,s,r,a,i=!1,o="channelsLast"){let[l,u,c,h]=[-1,-1,-1,-1];if("channelsLast"===o)[l,u,c,h]=e;else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);[l,h,u,c]=e}const[p,d,,f]=t,[m,g]=bl(n),[y,b]=bl(s),x=wl(p,y),w=wl(d,b),{padInfo:k,outHeight:v,outWidth:I}=function(e,t,n,s,r,a,i,o,l){let u,c,h;if("number"==typeof e){u={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const r=function(e,t,n,s,r){null==s&&(s=yl(e,t,n));const a=e[1];return[kl((e[0]-t+2*s)/n+1,r),kl((a-t+2*s)/n+1,r)]}([t,n],a,s,e,o);c=r[0],h=r[1]}else if("same"===e){c=Math.ceil(t/s),h=Math.ceil(n/r);const e=Math.max(0,(c-1)*s+a-t),o=Math.max(0,(h-1)*r+i-n),l=Math.floor(e/2),p=e-l,d=Math.floor(o/2);u={top:l,bottom:p,left:d,right:o-d,type:"SAME"}}else if("valid"===e)u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-a+1)/s),h=Math.ceil((n-i+1)/r);else{if("object"!=typeof e)throw Error(`Unknown padding parameter: ${e}`);{const p="channelsLast"===l?e[1][0]:e[2][0],d="channelsLast"===l?e[1][1]:e[2][1],f="channelsLast"===l?e[2][0]:e[3][0],m="channelsLast"===l?e[2][1]:e[3][1];u={top:p,bottom:d,left:f,right:m,type:0===p&&0===d&&0===f&&0===m?"VALID":"EXPLICIT"},c=kl((t-a+p+d)/s+1,o),h=kl((n-i+f+m)/r+1,o)}}return{padInfo:u,outHeight:c,outWidth:h}}(r,u,c,m,g,x,w,a,o),N=i?f*h:f;let S;return"channelsFirst"===o?S=[l,N,v,I]:"channelsLast"===o&&(S=[l,v,I,N]),{batchSize:l,dataFormat:o,inHeight:u,inWidth:c,inChannels:h,outHeight:v,outWidth:I,outChannels:N,padInfo:k,strideHeight:m,strideWidth:g,filterHeight:p,filterWidth:d,effectiveFilterHeight:x,effectiveFilterWidth:w,dilationHeight:y,dilationWidth:b,inShape:e,outShape:S,filterShape:t}}function gl(e,t,n,s,r,a=!1,i="channelsLast",o){let[l,u,c,h,p]=[-1,-1,-1,-1,-1];if("channelsLast"===i)[l,u,c,h,p]=e;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[l,p,u,c,h]=e}const[d,f,m,,g]=t,[y,b,x]=xl(n),[w,k,v]=xl(s),I=wl(d,w),N=wl(f,k),S=wl(m,v),{padInfo:C,outDepth:$,outHeight:T,outWidth:E}=function(e,t,n,s,r,a,i,o,l,u,c){let h,p,d,f;if("number"==typeof e){h={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const a=function(e,t,n,s,r,a){null==r&&(r=yl(e,t,s));const i=e[1],o=e[2];return[kl((e[0]-t+2*r)/s+1,a),kl((i-t+2*r)/s+1,a),kl((o-t+2*r)/s+1,a),1]}([t,n,s,1],o,0,r,e,c);p=a[0],d=a[1],f=a[2]}else if("same"===e){p=Math.ceil(t/r),d=Math.ceil(n/a),f=Math.ceil(s/i);const e=(p-1)*r+o-t,c=(d-1)*a+l-n,m=(f-1)*i+u-s,g=Math.floor(e/2),y=e-g,b=Math.floor(c/2),x=c-b,w=Math.floor(m/2);h={top:b,bottom:x,left:w,right:m-w,front:g,back:y,type:"SAME"}}else{if("valid"!==e)throw Error(`Unknown padding parameter: ${e}`);h={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},p=Math.ceil((t-o+1)/r),d=Math.ceil((n-l+1)/a),f=Math.ceil((s-u+1)/i)}return{padInfo:h,outDepth:p,outHeight:d,outWidth:f}}(r,u,c,h,y,b,x,I,N,S,o),A=a?g*p:g;let R;return"channelsFirst"===i?R=[l,A,$,T,E]:"channelsLast"===i&&(R=[l,$,T,E,A]),{batchSize:l,dataFormat:i,inDepth:u,inHeight:c,inWidth:h,inChannels:p,outDepth:$,outHeight:T,outWidth:E,outChannels:A,padInfo:C,strideDepth:y,strideHeight:b,strideWidth:x,filterDepth:d,filterHeight:f,filterWidth:m,effectiveFilterDepth:I,effectiveFilterHeight:N,effectiveFilterWidth:S,dilationDepth:w,dilationHeight:k,dilationWidth:v,inShape:e,outShape:R,filterShape:t}}function yl(e,t,n,s=1){const r=wl(t,s);return Math.floor((e[0]*(n-1)-n+r)/2)}function bl(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function xl(e){return"number"==typeof e?[e,e,e]:e}function wl(e,t){return t<=1?e:e+(e-1)*(t-1)}function kl(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function vl(e){const[t,n,s]=bl(e);return 1===t&&1===n&&1===s}function Il(e,t){return vl(e)||vl(t)}function Nl(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error(`Unknown dataFormat ${e}`)}const Sl=Kr({reshape_:function(e,t){const n={x:Hr(e,"x","reshape","string_or_numeric")},s={shape:t};return Lr.runKernel(Zn,n,s)}}),Cl=Kr({avgPool_:function(e,t,n,s,r){const a=Hr(e,"x","avgPool","float32");Z(Il(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let i=a,o=!1;3===a.rank&&(o=!0,i=Sl(a,[1,a.shape[0],a.shape[1],a.shape[2]])),Z(4===i.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${i.rank}.`)),null!=r&&Z(ae(s),(()=>`Error in avgPool: pad must be an integer when using, dimRoundingMode ${r} but got pad ${s}.`));const l={x:i},u={filterSize:t,strides:n,pad:s,dimRoundingMode:r};let c=Lr.runKernel(at,l,u);return c=Ha(c,a.dtype),o?Sl(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),$l=Kr({avgPool3d_:function(e,t,n,s,r,a="NDHWC",i){null==i?i=[1,1,1]:ro("dilations is deprecated, this field will be gone in v3.0.0.");const o=Hr(e,"x","avgPool3d","float32");let l=o,u=!1;4===o.rank&&(u=!0,l=Sl(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),Z(5===l.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${l.rank}.`)),Z("NDHWC"===a,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),Z(Il(n,i),(()=>`Error in avgPool3d: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`)),null!=r&&Z(ae(s),(()=>`Error in avgPool3d: pad must be an integer when using, dimRoundingMode ${r} but got pad ${s}.`));const c={x:l},h={filterSize:t,strides:n,pad:s,dimRoundingMode:r,dataFormat:a,dilations:i};let p=Lr.runKernel(ot,c,h);return p=Ha(p,l.dtype),u?Sl(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}}),Tl=Kr({concat_:function(e,t=0){Z(e.length>=1,(()=>"Pass at least one tensor to concat"));const n=jr(e,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach((e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)})),1===n.length)return ja(n[0]);const s=n,r={axis:t};return Lr.runKernel(bt,s,r)}}),El=Kr({sigmoid_:function(e){const t={x:Hr(e,"x","sigmoid")};return Lr.runKernel(fs,t)}}),Al=Kr({slice_:function(e,t,n){const s=Hr(e,"x","slice","string_or_numeric");if(0===s.rank)throw new Error("Slicing scalar is not possible");const r={x:s},a={begin:t,size:n};return Lr.runKernel(cs,r,a)}}),Rl=Kr({tanh_:function(e){const t={x:Hr(e,"x","tanh")};return Lr.runKernel($s,t)}}),Dl=Kr({basicLSTMCell_:function(e,t,n,s,r,a){const i=Hr(e,"forgetBias","basicLSTMCell"),o=Hr(t,"lstmKernel","basicLSTMCell"),l=Hr(n,"lstmBias","basicLSTMCell"),u=Hr(s,"data","basicLSTMCell"),c=Hr(r,"c","basicLSTMCell"),h=Hr(a,"h","basicLSTMCell"),p=Tl([u,h],1),d=hi(p,o),f=Io(d,l),m=f.shape[0],g=f.shape[1]/4,y=[m,g],b=Al(f,[0,0],y),x=Al(f,[0,g],y),w=Al(f,[0,2*g],y),k=Al(f,[0,3*g],y),v=Io(Co(El(b),Rl(x)),Co(c,El(Io(i,w))));return[v,Co(Rl(v),El(k))]}}),Fl=Kr({batchToSpaceND_:function(e,t,n){const s=Hr(e,"x","batchToSpaceND"),r=t.reduce(((e,t)=>e*t));Z(s.rank>=1+t.length,(()=>`input rank is ${s.rank} but should be > than blockShape.length ${t.length}`)),Z(n.length===t.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`)),Z(s.shape[0]%r==0,(()=>`input tensor batch is ${s.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${r}`));const a={x:s},i={blockShape:t,crops:n};return Lr.runKernel(ct,a,i)}}),_l=Kr({batchNorm_:function(e,t,n,s,r,a){null==a&&(a=.001);const i=Hr(e,"x","batchNorm"),o=Hr(t,"mean","batchNorm"),l=Hr(n,"variance","batchNorm");let u,c;null!=r&&(u=Hr(r,"scale","batchNorm")),null!=s&&(c=Hr(s,"offset","batchNorm")),Z(o.rank===l.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),Z(null==c||o.rank===c.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),Z(null==u||o.rank===u.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const h={x:function(e){let t;return t=0===e.rank||1===e.rank?Sl(e,[1,1,1,e.size]):2===e.rank?Sl(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?Sl(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}(i),scale:u,offset:c,mean:o,variance:l},p={varianceEpsilon:a},d=Lr.runKernel(Jt,h,p);return Sl(d,i.shape)}}),Ol=Kr({batchNorm2d_:function(e,t,n,s,r,a){const i=Hr(e,"x","batchNorm"),o=Hr(t,"mean","batchNorm"),l=Hr(n,"variance","batchNorm");let u,c;return null!=r&&(u=Hr(r,"scale","batchNorm")),null!=s&&(c=Hr(s,"offset","batchNorm")),Z(2===i.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${i.rank}.`)),Z(2===o.rank||1===o.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${o.rank}.`)),Z(2===l.rank||1===l.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`)),null!=u&&Z(2===u.rank||1===u.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`)),null!=c&&Z(2===c.rank||1===c.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`)),_l(i,o,l,c,u,a)}}),Ml=Kr({batchNorm3d_:function(e,t,n,s,r,a){const i=Hr(e,"x","batchNorm"),o=Hr(t,"mean","batchNorm"),l=Hr(n,"variance","batchNorm");let u,c;return null!=r&&(u=Hr(r,"scale","batchNorm")),null!=s&&(c=Hr(s,"offset","batchNorm")),Z(3===i.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${i.rank}.`)),Z(3===o.rank||1===o.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${o.rank}.`)),Z(3===l.rank||1===l.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`)),null!=u&&Z(3===u.rank||1===u.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`)),null!=c&&Z(3===c.rank||1===c.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`)),_l(i,o,l,c,u,a)}}),Ll=Kr({batchNorm4d_:function(e,t,n,s,r,a){const i=Hr(e,"x","batchNorm"),o=Hr(t,"mean","batchNorm"),l=Hr(n,"variance","batchNorm");let u,c;return null!=r&&(u=Hr(r,"scale","batchNorm")),null!=s&&(c=Hr(s,"offset","batchNorm")),Z(4===i.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${i.rank}.`)),Z(4===o.rank||1===o.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${o.rank}.`)),Z(4===l.rank||1===l.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`)),null!=u&&Z(4===u.rank||1===u.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`)),null!=c&&Z(4===c.rank||1===c.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`)),_l(i,o,l,c,u,a)}}),zl=Kr({bincount_:function(e,t,n){const s=Hr(e,"x","bincount"),r=Hr(t,"weights","bincount");Z("int32"===s.dtype,(()=>`Error in bincount: input dtype must be int32, but got ${s.dtype}`)),Z(n>=0,(()=>`size must be non-negative, but got ${n}.`)),Z(r.size===s.size||0===r.size,(()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${s.shape}, weights shape: ${r.shape}.`));const a={x:s,weights:r},i={size:n};return Lr.runKernel(ht,a,i)}}),Pl=Kr({broadcastTo_:function(e,t){let n=Hr(e,"broadcastTo","x");const s=n.shape;if(t.some((e=>!(e>0)||e%1!=0)))throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=Sl(n,e)}const r=n.shape,a=Array.from(t);for(let e=t.length-1;e>=0;e--)if(r[e]===t[e])a[e]=1;else if(1!==n.shape[e])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${t}].`);if(0===a.map(((e,t)=>e>1?t:-1)).filter((e=>e>=0)).length)return ja(n);const i={x:n},o={reps:a};return Lr.runKernel(Ts,i,o)}}),Bl=Kr({ceil_:function(e){const t={x:Hr(e,"x","ceil")};return Lr.runKernel(ft,t)}}),Wl=Kr({clipByValue_:function(e,t,n){const s=Hr(e,"x","clipByValue");Z(t<=n,(()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`));const r={x:s},a={clipValueMin:t,clipValueMax:n};return Lr.runKernel(mt,r,a)}}),Vl=Kr({concat1d_:function(e){return Tl(e,0)}}),Ul=Kr({concat2d_:function(e,t){return Tl(e,t)}}),Gl=Kr({concat3d_:function(e,t){return Tl(e,t)}}),Hl=Kr({concat4d_:function(e,t){return Tl(e,t)}}),jl=Kr({conv2d_:function(e,t,n,s,r="NHWC",a=[1,1],i){const o=Hr(e,"x","conv2d"),l=Hr(t,"filter","conv2d");let u=o,c=!1;3===o.rank&&(c=!0,u=Sl(o,[1,o.shape[0],o.shape[1],o.shape[2]])),Z(4===u.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${u.rank}.`)),Z(4===l.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`)),null!=i&&Z(ae(s),(()=>`Error in conv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`));const h="NHWC"===r?u.shape[3]:u.shape[1];Z(h===l.shape[2],(()=>`Error in conv2d: depth of input (${h}) must match input depth for filter ${l.shape[2]}.`)),Z(Il(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`));const p={x:u,filter:l},d={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i},f=Lr.runKernel(xt,p,d);return c?Sl(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),ql=Kr({conv1d_:function(e,t,n,s,r="NWC",a=1,i){const o=Hr(e,"x","conv1d"),l=Hr(t,"filter","conv1d");let u=o,c=!1;2===o.rank&&(c=!0,u=Sl(o,[1,o.shape[0],o.shape[1]])),Z(3===u.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${u.rank}.`)),Z(3===l.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`)),null!=i&&Z(ae(s),(()=>`Error in conv1d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`)),Z(u.shape[2]===l.shape[1],(()=>`Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`)),Z(Il(n,a),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${a}'`)),Z("NWC"===r,(()=>`Error in conv1d: got dataFormat of ${r} but only NWC is currently supported.`));const h=Sl(l,[1,l.shape[0],l.shape[1],l.shape[2]]),p=Sl(u,[u.shape[0],1,u.shape[1],u.shape[2]]),d=jl(p,h,[1,n],s,"NHWC",[1,a],i);return Sl(d,c?[d.shape[2],d.shape[3]]:[d.shape[0],d.shape[2],d.shape[3]])}}),Kl=Kr({conv2DBackpropInput_:function(e,t,n,s,r,a="NHWC",i){Z(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let o=e,l=t,u=!1;3===t.rank&&(u=!0,l=Sl(t,[1,t.shape[0],t.shape[1],t.shape[2]]),o=[1,e[0],e[1],e[2]]),Z(4===o.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${o.length}.`)),Z(4===l.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`)),Z(4===n.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`));const c="NHWC"===a?o[3]:o[1],h="NHWC"===a?l.shape[3]:l.shape[1];Z(c===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${n.shape[2]}.`)),Z(h===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${h}) must match output depth for filter ${n.shape[3]}.`)),null!=i&&Z(ae(r),(()=>`Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`));const p={dy:l,filter:n},d={strides:s,pad:r,dataFormat:a,dimRoundingMode:i,inputShape:o},f=Lr.runKernel(kt,p,d);return u?Sl(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),Xl=Kr({conv2dTranspose_:function(e,t,n,s,r,a){const i=Hr(e,"x","conv2dTranspose"),o=Hr(t,"filter","conv2dTranspose");return Kl(n,i,o,s,r,"NHWC",a)}}),Yl=Kr({conv3d_:function(e,t,n,s,r="NDHWC",a=[1,1,1]){const i=Hr(e,"x","conv3d"),o=Hr(t,"filter","conv3d");let l=i,u=!1;4===i.rank&&(u=!0,l=Sl(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),Z(5===l.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`)),Z(5===o.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${o.rank}.`)),Z(l.shape[4]===o.shape[3],(()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${o.shape[3]}.`)),Z(Il(n,a),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),Z("NDHWC"===r,(()=>`Error in conv3d: got dataFormat of ${r} but only NDHWC is currently supported.`));const c={x:l,filter:o},h={strides:n,pad:s,dataFormat:r,dilations:a},p=Lr.runKernel(vt,c,h);return u?Sl(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}}),Jl=Kr({conv3DBackpropInput_:function(e,t,n,s,r){Z(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let a=e,i=t,o=!1;4===t.rank&&(o=!0,i=Sl(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),a=[1,e[0],e[1],e[2],e[3]]);const l=a[4],u=i.shape[4];Z(5===a.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${a.length}.`)),Z(5===i.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${i.rank}`)),Z(5===n.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`)),Z(l===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${n.shape[3]}.`)),Z(u===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${n.shape[4]}.`));const c={dy:i,filter:n},h={pad:r,strides:s,inputShape:a},p=Lr.runKernel(Nt,c,h);return o?Sl(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}}),Zl=Kr({conv3dTranspose_:function(e,t,n,s,r){const a=Hr(e,"x","conv3dTranspose"),i=Hr(t,"filter","conv3dTranspose");return Jl(n,a,i,s,r)}}),Ql=Kr({cos_:function(e){const t={x:Hr(e,"x","cos")};return Lr.runKernel(St,t)}}),eu=Kr({cosh_:function(e){const t={x:Hr(e,"x","cosh")};return Lr.runKernel(Ct,t)}}),tu=Kr({cumsum_:function(e,t=0,n=!1,s=!1){const r={x:Hr(e,"x","cumsum")},a={axis:t,exclusive:n,reverse:s};return Lr.runKernel($t,r,a)}}),nu=Kr({denseBincount_:function(e,t,n,s=!1){const r=Hr(e,"x","denseBincount"),a=Hr(t,"weights","denseBincount");Z("int32"===r.dtype,(()=>`Error in denseBincount: input dtype must be int32, but got ${r.dtype}`)),Z(r.rank<=2,(()=>`Error in denseBincount: input must be at most rank 2, but got rank ${r.rank}.`)),Z(n>=0,(()=>`size must be non-negative, but got ${n}.`)),Z(a.size===r.size||0===a.size,(()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${r.shape}, weights shape: ${a.shape}.`));const i={x:r,weights:a},o={size:n,binaryOutput:s};return Lr.runKernel(Et,i,o)}}),su=Kr({depthToSpace_:function(e,t,n="NHWC"){const s=Hr(e,"x","depthToSpace"),r="NHWC"===n?s.shape[1]:s.shape[2],a="NHWC"===n?s.shape[2]:s.shape[3],i="NHWC"===n?s.shape[3]:s.shape[1];Z(r*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${r} and ${t}  for depthToSpace with input shape\n    ${s.shape}`)),Z(a*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${t} for depthToSpace with input shape\n        ${s.shape}`)),Z(i%(t*t)==0,(()=>`Dimension size must be evenly divisible by ${t*t} but is ${i} for depthToSpace with input shape ${s.shape}`));const o={x:s},l={blockSize:t,dataFormat:n};return Lr.runKernel(At,o,l)}}),ru=Kr({depthwiseConv2d_:function(e,t,n,s,r="NHWC",a=[1,1],i){const o=Hr(e,"x","depthwiseConv2d"),l=Hr(t,"filter","depthwiseConv2d");let u=o,c=!1;3===o.rank&&(c=!0,u=Sl(o,[1,o.shape[0],o.shape[1],o.shape[2]])),Z(4===u.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`)),Z(4===l.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`)),Z(u.shape[3]===l.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${u.shape[3]}) must match the inChannels dimension in filter ${l.shape[2]}.`)),null!=i&&Z(ae(s),(()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`));const h={x:u,filter:l},p={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i},d=Lr.runKernel(Rt,h,p);return c?Sl(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),au=Kr({diag_:function(e){const t={x:Hr(e,"x","diag")};return Lr.runKernel(_t,t)}}),iu=Kr({dilation2d_:function(e,t,n,s,r=[1,1],a="NHWC"){const i=Hr(e,"x","dilation2d"),o=Hr(t,"filter","dilation2d");Z(3===i.rank||4===i.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${i.rank}.`)),Z(3===o.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${o.rank}.`)),Z("NHWC"===a,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${a}`));let l=i,u=!1;3===i.rank&&(l=Sl(i,[1,i.shape[0],i.shape[1],i.shape[2]]),u=!0);const c={x:l,filter:o},h={strides:n,pad:s,dilations:r},p=Lr.runKernel(Ot,c,h);return u?Sl(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),ou=Kr({equal_:function(e,t){let n=Hr(e,"a","equal"),s=Hr(t,"b","equal");[n,s]=Er(n,s),Ko(n.shape,s.shape);const r={a:n,b:s};return Lr.runKernel(Vt,r)}}),lu=Kr({where_:function(e,t,n){const s=Hr(t,"a","where"),r=Hr(n,"b","where"),a=Hr(e,"condition","where","bool"),i=Ko(s.shape,r.shape),o=Pl(s,i),l=Pl(r,i);1===a.rank&&Z(a.shape[0]===s.shape[0],(()=>"The first dimension of `a` must match the size of `condition`.")),1!==a.rank&&Q(a.shape,l.shape,"Error in where: ");const u={condition:a,t:o,e:l};return Lr.runKernel(ls,u)}}),uu=Kr({divNoNan_:function(e,t){let n=Hr(e,"a","div"),s=Hr(t,"b","div");[n,s]=Er(n,s);const r=So(n,s),a=Eo(r),i=ou(s,a);return lu(i,a,r)}}),cu=Kr({dot_:function(e,t){const n=Hr(e,"t1","dot"),s=Hr(t,"t2","dot");Z(!(1!==n.rank&&2!==n.rank||1!==s.rank&&2!==s.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${s.rank}.`));const r=1===n.rank?n.size:n.shape[1],a=1===s.rank?s.size:s.shape[0];if(Z(r===a,(()=>`Error in dot: inner dimensions of inputs must match, but got ${r} and ${a}.`)),1===n.rank&&1===s.rank){const e=Sl(n,[1,-1]),t=Sl(s,[-1,1]),r=hi(e,t);return Sl(r,[])}if(1===n.rank&&2===s.rank){const e=Sl(n,[1,-1]),t=Sl(s,[s.shape[0],s.shape[1]]),r=hi(e,t);return Sl(r,[r.size])}if(2===n.rank&&1===s.rank){const e=Sl(s,[-1,1]),t=hi(n,e);return Sl(t,[t.size])}{const e=Sl(s,[s.shape[0],s.shape[1]]);return hi(n,e)}}}),hu=Kr({elu_:function(e){const t={x:Hr(e,"x","elu")};return Lr.runKernel(Pt,t)}}),pu=Kr({erf_:function(e){let t=Hr(e,"x","erf");Z("int32"===t.dtype||"float32"===t.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===t.dtype&&(t=Ha(t,"float32"));const n={x:t};return Lr.runKernel(Wt,n)}}),du=Kr({exp_:function(e){const t={x:Hr(e,"x","exp")};return Lr.runKernel(Ut,t)}}),fu=Kr({expandDims_:function(e,t=0){const n=Hr(e,"x","expandDims","string_or_numeric");Z(t<=n.rank,(()=>"Axis must be <= rank of the tensor"));const s={input:n},r={dim:t};return Lr.runKernel(Gt,s,r)}}),mu=Kr({expm1_:function(e){const t={x:Hr(e,"x","expm1")};return Lr.runKernel(Ht,t)}}),gu=Kr({tile_:function(e,t){const n=Hr(e,"x","tile","string_or_numeric");Z(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`));const s={x:n},r={reps:t};return Lr.runKernel(Ts,s,r)}}),yu=Kr({eye_:function(e,t,n,s="float32"){null==t&&(t=e);const r=Ga([e,t],s),a=e<=t?e:t;for(let e=0;e<a;++e)r.set(1,e,e);const i=Sl(r.toTensor(),[e,t]);if(null==n)return i;if(1===n.length)return gu(fu(i,0),[n[0],1,1]);if(2===n.length)return gu(fu(fu(i,0),0),[n[0],n[1],1,1]);if(3===n.length)return gu(fu(fu(fu(i,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}}),bu=Kr({floor_:function(e){const t={x:Hr(e,"x","floor")};return Lr.runKernel(Xt,t)}}),xu=Kr({gather_:function(e,t,n=0,s=0){const r={x:Hr(e,"x","gather"),indices:Hr(t,"indices","gather","int32")},a={axis:n,batchDims:s};return Lr.runKernel(Zt,r,a)}}),wu=Kr({greater_:function(e,t){let n=Hr(e,"a","greater"),s=Hr(t,"b","greater");[n,s]=Er(n,s),Ko(n.shape,s.shape);const r={a:n,b:s};return Lr.runKernel(en,r)}}),ku=Kr({greaterEqual_:function(e,t){let n=Hr(e,"a","greaterEqual"),s=Hr(t,"b","greaterEqual");[n,s]=Er(n,s),Ko(n.shape,s.shape);const r={a:n,b:s};return Lr.runKernel(tn,r)}}),vu=Kr({imag_:function(e){const t={input:Hr(e,"input","imag")};return Lr.runKernel(rn,t)}}),Iu=Kr({isFinite_:function(e){const t={x:Hr(e,"x","isFinite")};return Lr.runKernel(an,t)}}),Nu=Kr({isInf_:function(e){const t={x:Hr(e,"x","isInf")};return Lr.runKernel(on,t)}}),Su=Kr({isNaN_:function(e){const t={x:Hr(e,"x","isNaN")};return Lr.runKernel(ln,t)}}),Cu=Kr({leakyRelu_:function(e,t=.2){const n={x:Hr(e,"x","leakyRelu")},s={alpha:t};return Lr.runKernel(un,n,s)}}),$u=Kr({less_:function(e,t){let n=Hr(e,"a","less"),s=Hr(t,"b","less");[n,s]=Er(n,s),Ko(n.shape,s.shape);const r={a:n,b:s};return Lr.runKernel(cn,r)}}),Tu=Kr({lessEqual_:function(e,t){let n=Hr(e,"a","lessEqual"),s=Hr(t,"b","lessEqual");[n,s]=Er(n,s),Ko(n.shape,s.shape);const r={a:n,b:s};return Lr.runKernel(hn,r)}});function Eu(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");const s={start:e,stop:t,num:n};return Lr.runKernel(pn,{},s)}const Au=Kr({localResponseNormalization_:function(e,t=5,n=1,s=1,r=.5){const a=Hr(e,"x","localResponseNormalization");Z(4===a.rank||3===a.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${a.rank}.`)),Z(ae(t),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`));let i=a,o=!1;3===a.rank&&(o=!0,i=Sl(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const l={x:i},u={depthRadius:t,bias:n,alpha:s,beta:r},c=Lr.runKernel(xn,l,u);return o?Sl(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),Ru=Kr({log_:function(e){const t={x:Hr(e,"x","log")};return Lr.runKernel(dn,t)}}),Du=Kr({log1p_:function(e){const t={x:Hr(e,"x","log1p")};return Lr.runKernel(fn,t)}}),Fu=Kr({neg_:function(e){const t={x:Hr(e,"x","neg")};return Lr.runKernel(On,t)}}),_u=Kr({softplus_:function(e){const t={x:Hr(e,"x","softplus")};return Lr.runKernel(ms,t)}}),Ou=Kr({logSigmoid_:function(e){const t=Hr(e,"x","logSigmoid");return Oo((e=>({value:Fu(_u(Fu(e))),gradFunc:t=>Co(t,El(Fu(e)))})))(t)}}),Mu=Kr({max_:function(e,t=null,n=!1){const s={x:Hr(e,"x","max")},r={reductionIndices:t,keepDims:n};return Lr.runKernel(kn,s,r)}}),Lu=Kr({sum_:function(e,t=null,n=!1){let s=Hr(e,"x","sum");"bool"===s.dtype&&(s=Ha(s,"int32"));const r={x:s},a={axis:t,keepDims:n};return Lr.runKernel(ys,r,a)}}),zu=Kr({logSoftmax_:function(e,t=-1){const n=Hr(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);const s=Oo(((e,n)=>{const s=Mu(e,t,!0),r=Uo(e,s),a=Uo(Ha(r,"float32"),Ru(Lu(du(r),t,!0)));return n([a]),{value:a,gradFunc:(e,n)=>{const[s]=n,r=du(s);return Uo(e,Co(Lu(e,t,!0),r))}}}));return s(n)}});function Pu(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function Bu(e,t,n){const s=e.length+t.length,r=[];let a=0,i=0;for(let o=0;o<s;o++)-1===n.indexOf(o)?r.push(e[a++]):r.push(t[i++]);return r}function Wu(e,t){const n=[],s=e.length;for(let r=0;r<s;r++)-1===t.indexOf(r)&&n.push(e[r]);return[n,t.map((t=>e[t]))]}function Vu(e,t){return Bu(e,t.map((e=>1)),t)}function Uu(e,t,n){Z(Pu(t,n),(()=>`${e} supports only inner-most axes for now. Got axes ${t} and rank-${n} input.`))}function Gu(e,t){if(Pu(e,t))return null;const n=[];for(let s=0;s<t;++s)-1===e.indexOf(s)&&n.push(s);return e.forEach((e=>n.push(e))),n}function Hu(e){return e.map(((e,t)=>[t,e])).sort(((e,t)=>e[1]-t[1])).map((e=>e[0]))}function ju(e,t){const n=[];for(let s=t-e;s<t;++s)n.push(s);return n}const qu=Kr({logSumExp_:function(e,t=null,n=!1){const s=Hr(e,"x","logSumExp"),r=pe(t,s.shape),a=Mu(s,r,!0),i=Uo(s,a),o=du(i),l=Lu(o,r),u=Ru(l),c=Io(Sl(a,u.shape),u);if(n){const e=Vu(c.shape,r);return Sl(c,e)}return c}}),Ku=Kr({logicalAnd_:function(e,t){const n=Hr(e,"a","logicalAnd","bool"),s=Hr(t,"b","logicalAnd","bool");Ko(n.shape,s.shape);const r={a:n,b:s};return Lr.runKernel(mn,r)}}),Xu=Kr({logicalNot_:function(e){const t={x:Hr(e,"x","logicalNot","bool")};return Lr.runKernel(gn,t)}}),Yu=Kr({logicalOr_:function(e,t){const n=Hr(e,"a","logicalOr","bool"),s=Hr(t,"b","logicalOr","bool");Ko(n.shape,s.shape);const r={a:n,b:s};return Lr.runKernel(yn,r)}}),Ju=Kr({logicalXor_:function(e,t){const n=Hr(e,"a","logicalXor","bool"),s=Hr(t,"b","logicalXor","bool");return Ko(n.shape,s.shape),Ku(Yu(e,t),Xu(Ku(e,t)))}}),Zu=Kr({maxPool_:function(e,t,n,s,r){const a=Hr(e,"x","maxPool");let i=a,o=!1;3===a.rank&&(o=!0,i=Sl(a,[1,a.shape[0],a.shape[1],a.shape[2]])),Z(4===i.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${i.rank}.`)),Z(Il(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),null!=r&&Z(ae(s),(()=>`Error in maxPool: pad must be an integer when using, dimRoundingMode ${r} but got pad ${s}.`));const l={x:i},u={filterSize:t,strides:n,pad:s,dimRoundingMode:r},c=Lr.runKernel(In,l,u);return o?Sl(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),Qu=Kr({maxPool3d_:function(e,t=[1,1,1],n,s,r,a="NDHWC",i){null==i?i=[1,1,1]:ro("dilations is deprecated, this field will be gone in v3.0.0.");const o=Hr(e,"x","maxPool3d");let l=o,u=!1;4===o.rank&&(u=!0,l=Sl(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),Z(5===l.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${l.rank}.`)),Z("NDHWC"===a,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),Z(Il(n,i),(()=>`Error in maxPool3d: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`)),null!=r&&Z(ae(s),(()=>`Error in maxPool3d: pad must be an integer when using, dimRoundingMode ${r} but got pad ${s}.`));const c={x:l},h={filterSize:t,strides:n,pad:s,dimRoundingMode:r,dataFormat:a,dilations:i},p=Lr.runKernel(Sn,c,h);return u?Sl(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}}),ec=Kr({maxPoolWithArgmax_:function(e,t,n,s,r=!1){const a={x:Hr(e,"x","maxPoolWithArgmax")},i={filterSize:t,strides:n,pad:s,includeBatchInIndex:r},o=Lr.runKernel($n,a,i);return{result:o[0],indexes:o[1]}}}),tc=Kr({mean_:function(e,t=null,n=!1){const s={x:Hr(e,"x","mean")},r={axis:t,keepDims:n};return Lr.runKernel(Tn,s,r)}}),nc=Kr({min_:function(e,t=null,n=!1){const s={x:Hr(e,"x","min")},r={axis:t,keepDims:n};return Lr.runKernel(En,s,r)}}),sc=Kr({minimum_:function(e,t){let n=Hr(e,"a","minimum"),s=Hr(t,"b","minimum");[n,s]=Er(n,s),"bool"===n.dtype&&(n=Ha(n,"int32"),s=Ha(s,"int32")),Ko(n.shape,s.shape);const r={a:n,b:s};return Lr.runKernel(An,r)}}),rc=Kr({mirrorPad_:function(e,t,n){Z("reflect"===n||"symmetric"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));const s=Hr(e,"x","mirrorPad");if(0===s.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");Z(t.length===s.rank,(()=>`Padding doesn't match input. Must be ${s.rank}. Got ${t.length}.`));const r="reflect"===n?1:0;for(let e=0;e<s.rank;e++)Z(2===t[e].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),Z(t[e][0]>=0&&t[e][0]<=s.shape[e]-r&&t[e][1]>=0&&t[e][1]<=s.shape[e]-r,(()=>`Padding in dimension ${e} cannot be greater than or equal to ${s.shape[e]-r} or less than 0 for input of shape ${s.shape}`));const a={paddings:t,mode:n},i={x:s};return Lr.runKernel(Rn,i,a)}}),ac=Kr({mod_:function(e,t){let n=Hr(e,"a","mod"),s=Hr(t,"b","mod");[n,s]=Er(n,s);const r={a:n,b:s};return Lr.runKernel(Dn,r)}}),ic=Kr({moments_:function(e,t=null,n=!1){const s=pe(t,(e=Hr(e,"x","moments")).shape),r=tc(e,s,n);let a=r.shape;n||(a=Vu(r.shape,s));const i=To(Uo(Ha(e,"float32"),Sl(r,a)));return{mean:r,variance:tc(i,s,n)}}}),oc=Kr({multiRNNCell_:function(e,t,n,s){const r=Hr(t,"data","multiRNNCell"),a=jr(n,"c","multiRNNCell"),i=jr(s,"h","multiRNNCell");let o=r;const l=[];for(let t=0;t<e.length;t++){const n=e[t](o,a[t],i[t]);l.push(n[0]),l.push(n[1]),o=n[1]}const u=[],c=[];for(let e=0;e<l.length;e+=2)u.push(l[e]),c.push(l[e+1]);return[u,c]}}),lc=Kr({multinomial_:function(e,t,n,s=!1){const r=Hr(e,"logits","multinomial"),a=r.size,i=r.rank;if(a<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${a}.`);if(i>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${i}`);n=n||Math.random();const o={logits:1===i?Sl(r,[1,-1]):r},l={numSamples:t,seed:n,normalized:s},u=Lr.runKernel(Fn,o,l);return 1===i?Sl(u,[u.size]):u}}),uc=Kr({notEqual_:function(e,t){let n=Hr(e,"a","notEqual"),s=Hr(t,"b","notEqual");[n,s]=Er(n,s),Ko(n.shape,s.shape);const r={a:n,b:s};return Lr.runKernel(Mn,r)}});function cc(e,t="float32"){if("complex64"===t){const t=cc(e,"float32"),n=cc(e,"float32");return Xr(t,n)}const n=De(ne(e),t);return Lr.makeTensor(n,e,t)}function hc(e,t="float32"){if("complex64"===t){const t=hc(e,"float32"),n=cc(e,"float32");return Xr(t,n)}const n=Re(ne(e),t);return Lr.makeTensor(n,e,t)}const pc=Kr({onesLike_:function(e){const t={x:Hr(e,"x","onesLike")};return Lr.runKernel(Bn,t)}}),dc=Kr({outerProduct_:function(e,t){const n=Hr(e,"v1","outerProduct"),s=Hr(t,"v2","outerProduct");Z(1===n.rank&&1===s.rank,(()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${s.rank}.`));const r=Sl(n,[-1,1]),a=Sl(s,[1,-1]);return hi(r,a)}}),fc=Kr({pad_:function(e,t,n=0){const s=Hr(e,"x","pad");if(0===s.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const r={paddings:t,constantValue:n},a={x:s};return Lr.runKernel(Un,a,r)}}),mc=Kr({pad1d_:function(e,t,n=0){return Z(2===t.length,(()=>"Invalid number of paddings. Must be length of 2.")),fc(e,[t],n)}}),gc=Kr({pad2d_:function(e,t,n=0){return Z(2===t.length&&2===t[0].length&&2===t[1].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),fc(e,t,n)}}),yc=Kr({pad3d_:function(e,t,n=0){return Z(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),fc(e,t,n)}}),bc=Kr({pad4d_:function(e,t,n=0){return Z(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),fc(e,t,n)}}),xc=Kr({spaceToBatchND_:function(e,t,n){const s=Hr(e,"x","spaceToBatchND");Z(s.rank>=1+t.length,(()=>`input rank ${s.rank} should be > than [blockShape] ${t.length}`)),Z(n.length===t.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`)),Z(s.shape.reduce(((e,s,r)=>r>0&&r<=t.length?e&&(s+n[r-1][0]+n[r-1][1])%t[r-1]==0:e),!0),(()=>`input spatial dimensions ${s.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`));const r={x:s},a={blockShape:t,paddings:n};return Lr.runKernel(bs,r,a)}}),wc=Kr({pool_:function(e,t,n,s,r,a){null==r&&(r=[1,1]),null==a&&(a=1),0===s&&(s="valid");const i=Hr(e,"x","maxPool");let o=i,l=!1;3===i.rank&&(l=!0,o=Sl(i,[1,i.shape[0],i.shape[1],i.shape[2]])),Z(Il(a,r),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${r}'`));const u=dl(o.shape,t,a,r,s),c=[u.dilationHeight,u.dilationWidth];let h;h="same"===s?function(e,t){const n=e.map(((e,n)=>e+(e-1)*(t[n]-1))).map((e=>e-1)),s=n.map((e=>Math.floor(e/2))),r=n.map(((e,t)=>e-s[t]));return n.map(((e,t)=>[s[t],r[t]]))}([u.filterHeight,u.filterWidth],c):[[0,0],[0,0]];const p=1===c[0]&&1===c[1],[d,f]=function(e,t,n){const s=n.map((e=>e[0])),r=n.map((e=>e[1])),a=e.concat(s,r),i=t.map(((e,t)=>(e-a[t]%e)%e)),o=r.map(((e,t)=>e+i[t]));return[t.map(((e,t)=>[s[t],o[t]])),t.map(((e,t)=>[0,i[t]]))]}([u.inHeight,u.inWidth],c,h),m=p?s:"valid",g=p?o:xc(o,c,d),y=("avg"===n?()=>Cl(g,t,a,m):()=>Zu(g,t,a,m))(),b=p?y:Fl(y,c,f);return l?Sl(b,[b.shape[1],b.shape[2],b.shape[3]]):b}}),kc=Kr({prelu_:function(e,t){const n={x:Hr(e,"x","prelu"),alpha:Hr(t,"alpha","prelu")};return Lr.runKernel(jn,n)}}),vc=Kr({prod_:function(e,t=null,n=!1){let s=Hr(e,"x","prod");"bool"===s.dtype&&(s=Ha(s,"int32"));const r={x:s},a={axis:t,keepDims:n};return Lr.runKernel(qn,r,a)}}),Ic=Kr({rand_:function(e,t,n){const s=ne(e);let r=null;if(null==n||"float32"===n)r=new Float32Array(s);else if("int32"===n)r=new Int32Array(s);else{if("bool"!==n)throw new Error(`Unknown data type ${n}`);r=new Uint8Array(s)}for(let e=0;e<s;e++)r[e]=t();return Lr.makeTensor(r,e,n)}});var Nc=n(377);class Sc{constructor(e,t,n,s,r){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=s,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=r||Math.random();this.random=Nc.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let s,r,a;do{s=2*this.random()-1,r=2*this.random()-1,a=s*s+r*r}while(a>=1||0===a);const i=Math.sqrt(-2*Math.log(a)/a);e=this.mean+this.stdDev*s*i,t=this.mean+this.stdDev*r*i,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class Cc{constructor(e,t,n,s){this.alpha=e,this.beta=1/t,this.dtype=n;const r=s||Math.random();this.randu=Nc.alea(r.toString()),this.randn=new Sc(0,1,n,!1,this.randu()),this.d=e<1?e+2/3:e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,n,s,r,a;for(;;){do{s=this.randn.nextValue(),a=1+this.c*s}while(a<=0);if(a*=a*a,e=s*s,t=1-.331*e*e,n=.5*e+this.d*(1-a+Math.log(a)),r=this.randu(),r<t||Math.log(r)<n)break}return a=1/this.beta*this.d*a,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)}convertValue(e){return"float32"===this.dtype?e:Math.round(e)}}class $c{constructor(e=0,t=1,n,s){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==s&&(s=Math.random()),"number"==typeof s&&(s=s.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=Nc.alea(s)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const Tc=Kr({randomGamma_:function(e,t,n=1,s="float32",r){if(null==n&&(n=1),null==s&&(s="float32"),"float32"!==s&&"int32"!==s)throw new Error(`Unsupported data type ${s}`);const a=new Cc(t,n,s,r),i=Ga(e,s);for(let e=0;e<i.values.length;e++)i.values[e]=a.nextValue();return i.toTensor()}}),Ec=Kr({randomNormal_:function(e,t=0,n=1,s,r){if(null!=s&&"bool"===s)throw new Error(`Unsupported data type ${s}`);const a=new Sc(t,n,s,!1,r),i=Ga(e,s);for(let e=0;e<i.values.length;e++)i.values[e]=a.nextValue();return i.toTensor()}}),Ac=Kr({randomUniform_:function(e,t=0,n=1,s="float32",r){const a=Ga(e,s),i=new $c(t,n,null,r);for(let e=0;e<a.values.length;e++)a.values[e]=i.nextValue();return a.toTensor()}});function Rc(e,t,n=1,s="float32"){if(0===n)throw new Error("Cannot have a step of zero");const r={start:e,stop:t,step:n,dtype:s};return Lr.runKernel(Kn,{},r)}const Dc=Kr({real_:function(e){const t={input:Hr(e,"input","real")};return Lr.runKernel(Xn,t)}}),Fc=Kr({reciprocal_:function(e){const t={x:Hr(e,"x","reciprocal")};return Lr.runKernel(Yn,t)}}),_c=Kr({relu_:function(e){const t={x:Hr(e,"x","relu")};return Lr.runKernel(Jn,t)}}),Oc=Kr({relu6_:function(e){const t={x:Hr(e,"x","relu6")};return Lr.runKernel(ss,t)}}),Mc=Kr({reverse_:function(e,t){const n={x:Hr(e,"x","reverse")},s={dims:t};return Lr.runKernel(rs,n,s)}}),Lc=Kr({reverse1d_:function(e){const t=Hr(e,"x","reverse");return Z(1===t.rank,(()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`)),Mc(t,0)}}),zc=Kr({reverse2d_:function(e,t){const n=Hr(e,"x","reverse");return Z(2===n.rank,(()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`)),Mc(n,t)}}),Pc=Kr({reverse3d_:function(e,t){const n=Hr(e,"x","reverse");return Z(3===n.rank,(()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`)),Mc(n,t)}}),Bc=Kr({reverse4d_:function(e,t){const n=Hr(e,"x","reverse");return Z(4===n.rank,(()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`)),Mc(n,t)}}),Wc=Kr({round_:function(e){const t={x:Hr(e,"x","round")};return Lr.runKernel(as,t)}}),Vc=Kr({rsqrt_:function(e){const t={x:Hr(e,"x","rsqrt")};return Lr.runKernel(is,t)}}),Uc=Kr({selu_:function(e){const t={x:Hr(e,"x","selu")};return Lr.runKernel(us,t)}}),Gc=Kr({separableConv2d_:function(e,t,n,s,r,a=[1,1],i="NHWC"){const o=Hr(e,"x","separableConv2d"),l=Hr(t,"depthwiseFilter","separableConv2d"),u=Hr(n,"pointwiseFilter","separableConv2d");let c=o,h=!1;if(3===o.rank&&(h=!0,c=Sl(o,[1,o.shape[0],o.shape[1],o.shape[2]])),"NCHW"===i)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");Z(4===c.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`)),Z(4===l.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`)),Z(4===u.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`)),Z(1===u.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`)),Z(1===u.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`));const p=l.shape[2],d=l.shape[3];Z(u.shape[2]===p*d,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${p*d}, but got ${u.shape[2]}.`));const f=ru(c,l,s,r,i,a),m=jl(f,u,1,"valid",i);return h?Sl(m,[m.shape[1],m.shape[2],m.shape[3]]):m}}),Hc=async function(e,t){const n=Hr(e,"x","setdiff1d"),s=Hr(t,"y","setdiff1d");Z(n.dtype===s.dtype,(()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${s.dtype}).`)),Z(1===n.rank,(()=>`x should be 1D tensor, but got x (${n.shape}).`)),Z(1===s.rank,(()=>`y should be 1D tensor, but got y (${s.shape}).`));const r=await n.data(),a=await s.data(),i=new Set(a);let o=0;for(let e=0;e<r.length;e++)i.has(r[e])||o++;const l=new mr([o],n.dtype),u=new mr([o],"int32");for(let e=0,t=0;e<r.length;e++)i.has(r[e])||(l.values[t]=r[e],u.values[t]=e,t++);return[l.toTensor(),u.toTensor()]},jc=Kr({sign_:function(e){const t={x:Hr(e,"x","sign")};return Lr.runKernel(ds,t)}}),qc=Kr({sin_:function(e){const t={x:Hr(e,"x","sin")};return Lr.runKernel(hs,t)}}),Kc=Kr({sinh_:function(e){const t={x:Hr(e,"x","sinh")};return Lr.runKernel(ps,t)}}),Xc=Kr({slice1d_:function(e,t,n){const s=Hr(e,"x","slice1d");return Z(1===s.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${s.rank} tensor`)),Al(s,[t],[n])}}),Yc=Kr({slice2d_:function(e,t,n){const s=Hr(e,"x","slice2d");return Z(2===s.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${s.rank} tensor`)),Al(s,t,n)}}),Jc=Kr({slice3d_:function(e,t,n){const s=Hr(e,"x","slice3d");return Z(3===s.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${s.rank} tensor`)),Al(s,t,n)}}),Zc=Kr({slice4d_:function(e,t,n){const s=Hr(e,"x","slice4d");return Z(4===s.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${s.rank} tensor`)),Al(s,t,n)}}),Qc=Kr({softmax_:function(e,t=-1){const n=Hr(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const s={logits:n},r={dim:t};return Lr.runKernel(ws,s,r)}}),eh=Kr({fft_:function(e){Z("complex64"===e.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`));const t={input:e};return Lr.runKernel(jt,t)}}),th=Kr({ifft_:function(e){Z("complex64"===e.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`));const t={input:e};return Lr.runKernel(sn,t)}}),nh=Kr({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let s;if(t<=2){const r=Sl(e,[n,t]);s=th(r)}else{const r=[n,2*(t-1)],a=Sl(Dc(e),[n,t]),i=Sl(vu(e),[n,t]),o=Mc(Al(a,[0,1],[n,t-2]),1),l=Co(Mc(Al(i,[0,1],[n,t-2]),1),Lo(-1)),u=Tl([a,o],1),c=Tl([i,l],1),h=Sl(Xr(u,c),[r[0],r[1]]);s=th(h)}if(s=Dc(s),3===e.rank&&0!==e.shape[0]){const t=s,n=e.shape[0];s=Sl(s,[n,s.shape[0]/n,s.shape[1]]),t.dispose()}return s}}),sh=Kr({split_:function(e,t,n=0){const s={x:Hr(e,"x","split")},r={numOrSizeSplits:t,axis:n};return Lr.runKernel(xs,s,r)}}),rh=Kr({rfft_:function(e,t){Z("float32"===e.dtype,(()=>`The dtype for rfft() must be real value but got ${e.dtype}`));let n=e.shape[e.shape.length-1];const s=e.size/n;let r;if(null!=t&&t<n){const s=e.shape.map((e=>0)),a=e.shape.map((e=>e));a[e.shape.length-1]=t,r=Al(e,s,a),n=t}else if(null!=t&&t>n){const s=e.shape.map((e=>e));s[e.shape.length-1]=t-n,r=Tl([e,cc(s)],e.shape.length-1),n=t}else r=e;const a=Eo(r),i=Sl(Xr(r,a),[s,n]),o=eh(i),l=Math.floor(n/2)+1,u=Dc(o),c=vu(o),h=sh(u,[l,n-l],u.shape.length-1),p=sh(c,[l,n-l],c.shape.length-1),d=r.shape.slice();return d[r.shape.length-1]=l,Sl(Xr(h[0],p[0]),d)}}),ah=Kr({squaredDifference_:function(e,t){let n=Hr(e,"a","squaredDifference"),s=Hr(t,"b","squaredDifference");[n,s]=Er(n,s),Ko(n.shape,s.shape);const r={a:n,b:s};return Lr.runKernel(ks,r,{})}}),ih=Kr({squeeze_:function(e,t){const n=Hr(e,"x","squeeze");return Sl(n,de(n.shape,t).newShape)}}),oh=Kr({stack_:function(e,t=0){const n=jr(e,"tensors","stack","string_or_numeric");Z(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),n.length>0&&Z(t<=n[0].rank,(()=>"Axis must be <= rank of the tensor"));const s=n,r={axis:t};return Lr.runKernel(Vn,s,r)}}),lh=Kr({step_:function(e,t=0){const n={x:Hr(e,"x","step")},s={alpha:t};return Lr.runKernel(Os,n,s)}}),uh=Kr({stridedSlice_:function(e,t,n,s,r=0,a=0,i=0,o=0,l=0){const u={x:Hr(e,"x","stridedSlice")},c={begin:t,end:n,strides:s,beginMask:r,endMask:a,ellipsisMask:i,newAxisMask:o,shrinkAxisMask:l};return Lr.runKernel(Ss,u,c)}}),ch=Kr({tan_:function(e){const t={x:Hr(e,"x","tan")};return Lr.runKernel(Cs,t)}});function hh(e,t){ee(e);const n=Vr(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return Yr(e,null,n,t)}function ph(e,t,n){if(ee(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const s=Vr(e,n);if(2!==s.length&&1!==s.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return Yr(e,t,s,n)}function dh(e,t,n){if(ee(e),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const s=Vr(e,n);if(4!==s.length&&1!==s.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return Yr(e,t,s,n)}function fh(e,t,n){if(ee(e),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");const s=Vr(e,n);if(5!==s.length&&1!==s.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return Yr(e,t,s,n)}function mh(e,t,n){if(ee(e),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");const s=Vr(e,n);if(6!==s.length&&1!==s.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return Yr(e,t=t||s,s,n)}const gh=Kr({topk_:function(e,t=1,n=!0){const s=Hr(e,"x","topk");if(0===s.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const r=s.shape[s.shape.length-1];if(t>r)throw new Error(`'k' passed to topk() must be <= the last dimension (${r}) but got ${t}`);const a={x:s},i={k:t,sorted:n},[o,l]=Lr.runKernel(Es,a,i);return{values:o,indices:l}}}),yh=Kr({truncatedNormal_:function(e,t=0,n=1,s,r){if(null!=s&&"bool"===s)throw new Error("Unsupported data type $ { dtype }");const a=new Sc(t,n,s,!0,r),i=Ga(e,s);for(let e=0;e<i.values.length;e++)i.values[e]=a.nextValue();return i.toTensor()}}),bh=Kr({unique_:function(e,t=0){const n=Hr(e,"x","unique","string_or_numeric");Z(n.rank>0,(()=>"The input tensor must be at least 1D"));const s={x:n},r={axis:t},[a,i]=Lr.runKernel(Rs,s,r);return{values:a,indices:i}}}),xh=Kr({unsortedSegmentSum_:function(e,t,n){const s=Hr(e,"x","unsortedSegmentSum"),r=Hr(t,"segmentIds","unsortedSegmentSum","int32");Z(ae(n),(()=>"numSegments must be of dtype int"));const a={x:s,segmentIds:r},i={numSegments:n};return Lr.runKernel(Fs,a,i)}}),wh=Kr({unstack_:function(e,t=0){const n=Hr(e,"x","unstack","string_or_numeric");Z(t>=-n.shape.length&&t<n.shape.length,(()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`));const s={value:n},r={axis:t};return Lr.runKernel(Ds,s,r)}});function kh(e,t=!0,n,s){return Lr.makeVariable(e,t,n,s)}function vh(e,t){const n=[];for(let e=0;e<t.length;e++)t[e]&&n.push(e);const s=Ga(e,"int32"),r=Ga([n.length,e.length],"int32");for(let t=0;t<n.length;t++){const a=s.indexToLoc(n[t]),i=t*e.length;r.values.set(a,i)}return r.toTensor()}const Ih=async function(e){const t=Hr(e,"condition","whereAsync","bool"),n=await t.data(),s=vh(t.shape,n);return e!==t&&t.dispose(),s},Nh=async function(e,t,n){const s=Hr(e,"tensor","boolMask"),r=Hr(t,"mask","boolMask","bool"),a=null==n?0:n,i=r.rank,o=s.shape;Z(i>0,(()=>"mask cannot be scalar")),Q(o.slice(a,a+i),r.shape,"mask's shape must match the first K dimensions of tensor's shape,");let l=1;for(let e=a;e<a+i;e++)l*=o[e];const u=o.slice(0,a).concat([l],o.slice(a+i)),c=Sl(s,u),h=Sl(r,[-1]),p=await Ih(h),d=ih(p,[1]),f=xu(c,d,a);return e!==s&&s.dispose(),t!==r&&r.dispose(),d.dispose(),c.dispose(),h.dispose(),p.dispose(),f},Sh=Kr({equalStrict_:function(e,t){ro("strict variants of ops have been deprecated and will be removed in future");const n=Hr(e,"a","equalStrict"),s=Hr(t,"b","equalStrict");return Q(n.shape,s.shape,"Error in equalStrict: "),ou(n,s)}}),Ch=Kr({greaterEqualStrict_:function(e,t){ro("strict variants of ops have been deprecated and will be removed in future");const n=Hr(e,"a","greaterEqualStrict"),s=Hr(t,"b","greaterEqualStrict");return Q(n.shape,s.shape,"Error in greaterEqualStrict: "),ku(n,s)}}),$h=Kr({greaterStrict_:function(e,t){ro("strict variants of ops have been deprecated and will be removed in future");const n=Hr(e,"a","greaterStrict"),s=Hr(t,"b","greaterStrict");return Q(n.shape,s.shape,"Error in greaterStrict: "),wu(n,s)}}),Th=Kr({lessEqualStrict_:function(e,t){ro("strict variants of ops have been deprecated and will be removed in future");const n=Hr(e,"a","lessEqualStrict"),s=Hr(t,"b","lessEqualStrict");return Q(n.shape,s.shape,"Error in lessEqualStrict: "),Tu(n,s)}}),Eh=Kr({lessStrict_:function(e,t){ro("strict variants of ops have been deprecated and will be removed in future");const n=Hr(e,"a","lessStrict"),s=Hr(t,"b","lessStrict");return Q(n.shape,s.shape,"Error in lessStrict: "),$u(n,s)}}),Ah=Kr({notEqualStrict_:function(e,t){ro("strict variants of ops have been deprecated and will be removed in future");const n=Hr(e,"a","notEqualStrict"),s=Hr(t,"b","notEqualStrict");return Q(n.shape,s.shape,"Error in notEqualStrict: "),uc(n,s)}}),Rh=Kr({addStrict_:function(e,t){ro("strict variants of ops have been deprecated and will be removed in future");const n=Hr(e,"a","addStrict"),s=Hr(t,"b","addStrict");return Q(n.shape,s.shape,"Error in addStrict: "),Io(n,s)}}),Dh=Kr({divStrict_:function(e,t){ro("strict variants of ops have been deprecated and will be removed in future");const n=Hr(e,"a","div"),s=Hr(t,"b","div");return Q(n.shape,s.shape,"Error in divideStrict: "),So(n,s)}}),Fh=Kr({maximumStrict_:function(e,t){ro("strict variants of ops have been deprecated and will be removed in future");const n=Hr(e,"a","maximumStrict"),s=Hr(t,"b","maximumStrict");return Q(n.shape,s.shape,"Error in maximumStrict: "),Xo(n,s)}}),_h=Kr({minimumStrict_:function(e,t){ro("strict variants of ops have been deprecated and will be removed in future");const n=Hr(e,"a","minimumStrict"),s=Hr(t,"b","minimumStrict");return Q(n.shape,s.shape,"Error in minimumStrict: "),sc(n,s)}}),Oh=Kr({modStrict_:function(e,t){ro("strict variants of ops have been deprecated and will be removed in future");const n=Hr(e,"a","modStrict"),s=Hr(t,"b","modStrict");return Q(n.shape,s.shape,"Error in modStrict: "),ac(n,s)}}),Mh=Kr({mulStrict_:function(e,t){ro("strict variants of ops have been deprecated and will be removed in future");const n=Hr(e,"a","mul"),s=Hr(t,"b","mul");return Q(n.shape,s.shape,"Error in multiplyStrict: "),Co(n,s)}}),Lh=Kr({powStrict_:function(e,t){return ro("strict variants of ops have been deprecated and will be removed in future"),Q(e.shape,t.shape,"Error in powStrict: "),Vo(e,t)}}),zh=Kr({squaredDifferenceStrict_:function(e,t){ro("strict variants of ops have been deprecated and will be removed in future");const n=Hr(e,"a","squaredDifferenceStrict"),s=Hr(t,"b","squaredDifferenceStrict");return Q(n.shape,s.shape,"Error in squaredDifferenceStrict: "),ah(n,s)}}),Ph=Kr({subStrict_:function(e,t){ro("strict variants of ops have been deprecated and will be removed in future");const n=Hr(e,"a","subStrict"),s=Hr(t,"b","subStrict");return Q(n.shape,s.shape,"Error in subStrict: "),Uo(n,s)}});function Bh(e,t,n=null){if(0===e.rank)return Ho(e);if(1!==e.rank&&null===n)return Bh(Sl(e,[-1]),t,n);if(1===e.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===t)return Lu(Ho(e),n);if(t===1/0)return Mu(Ho(e),n);if(t===-1/0)return nc(Ho(e),n);if("euclidean"===t||2===t)return $o(Lu(Vo(Ho(e),Lo(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(n)&&2===n.length){if(1===t)return Mu(Lu(Ho(e),n[0]),n[1]-1);if(t===1/0)return Mu(Lu(Ho(e),n[1]),n[0]);if(t===-1/0)return nc(Lu(Ho(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return $o(Lu(To(e),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const Wh=Kr({norm_:function(e,t="euclidean",n=null,s=!1){const r=Bh(e=Hr(e,"x","norm"),t,n);let a=r.shape;if(s){const t=pe(n,e.shape);a=Vu(r.shape,t)}return Sl(r,a)}}),Vh=Kr({movingAverage_:function(e,t,n,s,r=!0){const a=Hr(e,"v","movingAverage"),i=Hr(t,"x","movingAverage"),o=Hr(n,"decay","movingAverage");Ar(a,i),Z(re(a.shape,i.shape),(()=>"Shape mismatch in v and x"));const l=Lo(1),u=Uo(l,o);let c=Co(Uo(i,a),u);if(r){Z(null!=s,(()=>"When using zeroDebias: true, step is required."));const e=Hr(s,"step","movingAverage");c=So(c,Uo(l,Vo(o,e)))}return Io(a,c)}}),Uh=Kr({scatterND_:function(e,t,n){const s=Hr(e,"indices","scatterND","int32"),r=Hr(t,"updates","scatterND");ki(r,s,n);const a={indices:s,updates:r},i={shape:n};return Lr.runKernel(os,a,i)}}),Gh=Kr({sparseToDense_:function(e,t,n,s=0){const r=Hr(e,"sparseIndices","sparseToDense","int32"),a=Hr(t,"sparseValues","sparseToDense"),i=Hr(s,"defaultValue","sparseToDense",a.dtype);!function(e,t,n,s){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const r=e.rank>0?e.shape[0]:1,a=e.rank>1?e.shape[1]:1;if(n.length!==a)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${a}.`);const i=t.size;if(0!==t.rank&&(1!==t.rank||i!==r))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${r}]`);if(t.dtype!==s.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(r,a,n,i);const o={sparseIndices:r,sparseValues:a,defaultValue:i},l={outputShape:n};return Lr.runKernel(Ns,o,l)}}),Hh=Kr({gatherND_:function(e,t){const n=Hr(t,"indices","gatherND","int32"),s={params:Hr(e,"x","gatherND"),indices:n};return Lr.runKernel(Qt,s)}}),jh=Kr({dropout_:function(e,t,n,s){const r=Hr(e,"x","dropout");if(Z("float32"===r.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${r.dtype} tensor instead.`)),Z(t>=0&&t<1,(()=>`rate must be a float in the range [0, 1), but got ${t}.`)),0===t)return e instanceof xr?r.clone():r;const a=function(e,t){if(null==t)return e.shape.slice();if(re(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let s=0;s<e.shape.length;s++)null==t[s]&&null!=e.shape[s]?n.push(e.shape[s]):n.push(t[s]);return n}return t}(r,n),i=1-t,o=So(bu(Io(Ac(a,0,1,"float32",s),i)),i);return Co(r,o)}});function qh(e){return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function Kh(e,t,n){const s=1-e%2,r=new Float32Array(e);for(let a=0;a<e;++a){const i=2*Math.PI*a/(e+s-1);r[a]=t-n*Math.cos(i)}return hh(r,"float32")}const Xh=async function(e,t,n=1){const s=Hr(e,"predictions","inTopK"),r=Hr(t,"targets","inTopK");Z(s.rank>1,(()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${s.rank}`)),Z(s.rank-1===r.rank,(()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${s.rank} and targets rank ${r.rank}`)),Q(s.shape.slice(0,s.shape.length-1),r.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const a=s.shape[s.shape.length-1];Z(n>0&&n<=a,(()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${a}), but got ${n}`));const i=await s.data(),o=await r.data(),[l,u]=[i.length/a,a],c=fe("bool",l);for(let e=0;e<l;e++){const t=e*u,s=i.subarray(t,t+u),r=[];for(let e=0;e<s.length;e++)r.push({value:s[e],index:e});r.sort(((e,t)=>t.value-e.value)),c[e]=0;for(let t=0;t<n;t++)if(r[t].index===o[e]){c[e]=1;break}}return e!==s&&s.dispose(),t!==r&&r.dispose(),Jr(c,r.shape,"bool")},Yh=Kr({conv2DBackpropFilter_:function(e,t,n,s,r,a="NHWC",i){let o=e;3===e.rank&&(o=Sl(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=Sl(t,[1,t.shape[0],t.shape[1],t.shape[2]])),Z(4===o.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${o.shape}.`)),Z(4===l.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`)),Z(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));const u="NHWC"===a?o.shape[3]:o.shape[1],c="NHWC"===a?l.shape[3]:l.shape[1];Z(u===n[2],(()=>`Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${n[2]}.`)),Z(c===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${n[3]}).`)),null!=i&&Z(ae(r),(()=>`Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`));const h={x:o,dy:l},p={strides:s,pad:r,dataFormat:a,dimRoundingMode:i,filterShape:n};return Lr.runKernel(wt,h,p)}});function Jh(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return Co(e,lh(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function Zh(e,t){let n=t;const s=qo(e.shape,t.shape);return s.length>0&&(n=Lu(n,s)),Sl(n,e.shape)}function Qh(e,t,n,s){if("linear"===t)return e;if("relu"===t)return _c(e);if("elu"===t)return hu(e);if("relu6"===t)return Oc(e);if("prelu"===t)return kc(e,n);if("leakyrelu"===t)return Cu(e,s);throw new Error(`Unknown fused activation ${t}.`)}const ep=(e,t)=>!(e>0)||"linear"===t,tp=Kr({fusedConv2d_:function({x:e,filter:t,strides:n,pad:s,dataFormat:r="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(l=l||"linear",!1===ep(Lr.state.gradientDepth,l)){let h=jl(e,t,n,s,r,a,i);return null!=o&&(h=Io(h,o)),Qh(h,l,u,c)}const h=Hr(e,"x","conv2d"),p=Hr(t,"filter","conv2d");let d=h,f=!1;3===h.rank&&(f=!0,d=Sl(h,[1,h.shape[0],h.shape[1],h.shape[2]])),Z(4===d.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${d.rank}.`)),Z(4===p.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${p.rank}.`)),null!=i&&Z(ae(s),(()=>`Error in fused conv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`)),Z(d.shape[3]===p.shape[2],(()=>`Error in conv2d: depth of input (${d.shape[3]}) must match input depth for filter ${p.shape[2]}.`)),Z(Il(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),Z("NHWC"===r,(()=>`Error in conv2d: got dataFormat of ${r} but only NHWC is currently supported.`));const m=ml(d.shape,p.shape,n,a,s,i);let g,y;null!=o&&(g=Hr(o,"bias","fused conv2d"),[g]=Er(g,h),Ko(m.outShape,g.shape)),null!=u&&(y=Hr(u,"prelu weights","fused conv2d"));const b=(e,t)=>{const[r,i,o,u]=t,c=Jh(e,o,l);Z(vl(a),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`));const h=[Kl(i.shape,c,r,n,s),Yh(i,c,r.shape,n,s)];if(null!=u){const e=Zh(u,c);h.push(e)}return h},x={x:d,filter:p,bias:g,preluActivationWeights:y},w={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i,activation:l,leakyreluAlpha:c};if(null==o){const e=Oo(((e,t,n)=>{let s=Lr.runKernel(Ps,x,w);return n([t,e,s]),f&&(s=Sl(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:b}}));return e(d,p)}{const e=Oo(((e,t,n,s)=>{let r=Lr.runKernel(Ps,x,w);return s([t,e,r,n]),f&&(r=Sl(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:b}}));return e(d,p,g)}}}),np=Kr({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,s,r,a=[1,1],i){let o=e;3===e.rank&&(o=Sl(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=Sl(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const u={x:o,dy:l},c={strides:s,pad:r,dimRoundingMode:i,dilations:a,filterShape:n};return Lr.runKernel(Dt,u,c)}}),sp=Kr({depthwiseConv2dNativeBackpropInput_:function(e,t,n,s,r,a=[1,1],i){let o=t,l=!1;3===t.rank&&(l=!0,o=Sl(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const u={dy:o,filter:n},c={strides:s,pad:r,dimRoundingMode:i,dilations:a,inputShape:e},h=Lr.runKernel(Ft,u,c);return l?Sl(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),rp=Kr({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:s,dataFormat:r="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(!1===ep(Lr.state.gradientDepth,l)){let h=ru(e,t,n,s,r,a,i);return null!=o&&(h=Io(h,o)),Qh(h,l,u,c)}const h=Hr(e,"x","depthwiseConv2d"),p=Hr(t,"filter","depthwiseConv2d");let d=h,f=!1;3===h.rank&&(f=!0,d=Sl(h,[1,h.shape[0],h.shape[1],h.shape[2]])),Z(4===d.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${d.rank}.`)),Z(4===p.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${p.rank}.`)),Z(d.shape[3]===p.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${d.shape[3]}) must match the inChannels dimension in filter ${p.shape[2]}.`)),null==a&&(a=[1,1]),Z(Il(n,a),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),null!=i&&Z(ae(s),(()=>`Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode ${i} but got pad ${s}.`));const m=ml(d.shape,p.shape,n,a,s,i,!0);let g,y;null!=o&&(g=Hr(o,"bias","fused conv2d"),[g]=Er(g,h),Ko(m.outShape,g.shape)),null!=u&&(y=Hr(u,"prelu weights","fused depthwiseConv2d"));const b=(e,t)=>{Z(vl(a),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`));const[r,o,u,c]=t,h=Jh(e,u,l),p=sp(o.shape,h,r,n,s,a,i),d=np(o,h,r.shape,n,s,a,i);return null!=c?[p,d,Zh(g,h)]:[p,d]},x={x:d,filter:p,bias:g,preluActivationWeights:y},w={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i,activation:l,leakyreluAlpha:c};if(null==o){const e=Oo(((e,t,n)=>{let s=Lr.runKernel(Bs,x,w);return n([t,e,s]),f&&(s=Sl(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:b}}));return e(d,p)}{const e=Oo(((e,t,n,s)=>{let r=Lr.runKernel(Bs,x,w);return s([t,e,r,n]),f&&(r=Sl(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:b}}));return e(d,p,g)}}}),ap=Kr({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:s=!1,bias:r,activation:a="linear",preluActivationWeights:i,leakyreluAlpha:o}){if(!1===ep(Lr.state.gradientDepth,a)){let l=hi(e,t,n,s);return null!=r&&(l=Io(l,r)),Qh(l,a,i,o)}let l=Hr(e,"a","fused matMul"),u=Hr(t,"b","fused matMul");[l,u]=Er(l,u);const c=n?l.shape[l.rank-2]:l.shape[l.rank-1],h=s?u.shape[u.rank-1]:u.shape[u.rank-2],p=n?l.shape[l.rank-1]:l.shape[l.rank-2],d=s?u.shape[u.rank-2]:u.shape[u.rank-1],f=l.shape.slice(0,-2),m=u.shape.slice(0,-2),g=ne(f),y=ne(m);Z(l.rank>=2&&u.rank>=2&&l.rank===u.rank,(()=>`Error in fused matMul: inputs must have the same rank of at least 2, got ranks ${l.rank} and ${u.rank}.`)),Z(re(f,m),(()=>`Error in fused matMul: outer dimensions (${f}) and (${m}) of Tensors with shapes ${l.shape} and ${u.shape} must match.`)),Z(c===h,(()=>`Error in fused matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${l.shape} and ${u.shape} and transposeA=${n} and transposeB=${s} must match.`));const b=l.shape.slice(0,-2).concat([p,d]),x=Sl(l,n?[g,c,p]:[g,p,c]),w=Sl(u,s?[y,d,h]:[y,h,d]);let k,v;null!=r&&(k=Hr(r,"bias","fused matMul"),[k]=Er(k,l),Ko(b,k.shape)),null!=i&&(v=Hr(i,"prelu weights","fused matMul"));const I=(e,t)=>{const[i,o,l,u]=t,c=Jh(Sl(e,l.shape),l,a);let h,p;return n||s?!n&&s?(h=hi(c,o,!1,!1),p=hi(c,i,!0,!1)):n&&!s?(h=hi(o,c,!1,!0),p=hi(i,c,!1,!1)):(h=hi(o,c,!0,!0),p=hi(c,i,!0,!0)):(h=hi(c,o,!1,!0),p=hi(i,c,!0,!1)),null!=r?[h,p,Zh(u,c)]:[h,p]},N={a:x,b:w,bias:k,preluActivationWeights:v},S={transposeA:n,transposeB:s,activation:a,leakyreluAlpha:o};if(null==r){const e=Oo(((e,t,n)=>{const s=Lr.runKernel(zs,N,S);return n([e,t,s]),{value:Sl(s,b),gradFunc:I}}));return e(x,w)}{const e=Oo(((e,t,n,s)=>{const r=Lr.runKernel(zs,N,S);return s([e,t,r,n]),{value:Sl(r,b),gradFunc:I}}));return e(x,w,k)}}}),ip=Kr({hammingWindow_:function(e){return Kh(e,.54,.46)}}),op=Kr({hannWindow_:function(e){return Kh(e,.5,.5)}}),lp=Kr({frame_:function(e,t,n,s=!1,r=0){let a=0;const i=[];for(;a+t<=e.size;)i.push(Al(e,a,t)),a+=n;if(s)for(;a<e.size;){const s=a+t-e.size,o=Tl([Al(e,a,t-s),Bo([s],r)]);i.push(o),a+=n}return 0===i.length?ph([],[0,t]):Sl(Tl(i),[i.length,t])}}),up=Kr({stft_:function(e,t,n,s,r=op){null==s&&(s=qh(t));const a=lp(e,t,n),i=Co(a,r(t)),o=[];for(let e=0;e<a.shape[0];e++)o.push(rh(Al(i,[e,0],[1,t]),s));return Tl(o)}}),cp=Kr({cropAndResize_:function(e,t,n,s,r="bilinear",a=0){const i=Hr(e,"image","cropAndResize"),o=Hr(t,"boxes","cropAndResize","float32"),l=Hr(n,"boxInd","cropAndResize","int32"),u=o.shape[0];Z(4===i.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`)),Z(2===o.rank&&4===o.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${u},4] but had shape ${o.shape}.`)),Z(1===l.rank&&l.shape[0]===u,(()=>`Error in cropAndResize: boxInd must be have size [${u}] but had shape ${o.shape}.`)),Z(2===s.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${s.length}.`)),Z(s[0]>=1&&s[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${s}`)),Z("bilinear"===r||"nearest"===r,(()=>`method must be bilinear or nearest, but was ${r}`));const c={image:i,boxes:o,boxInd:l},h={method:r,extrapolationValue:a,cropSize:s};return Lr.runKernel(Tt,c,h)}}),hp=Kr({flipLeftRight_:function(e){const t=Hr(e,"image","flipLeftRight","float32");Z(4===t.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`));const n={image:t};return Lr.runKernel(Kt,n,{})}}),pp=Kr({rotateWithOffset_:function(e,t,n=0,s=.5){const r=Hr(e,"image","rotateWithOffset","float32");Z(4===r.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${r.rank}.`));const a={image:r},i={radians:t,fillValue:n,center:s};return Lr.runKernel(Ls,a,i)}});function dp(e,t,n,s,r,a){null==s&&(s=.5),null==r&&(r=Number.NEGATIVE_INFINITY),null==a&&(a=0);const i=e.shape[0];return n=Math.min(n,i),Z(0<=s&&s<=1,(()=>`iouThreshold must be in [0, 1], but was '${s}'`)),Z(2===e.rank,(()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`)),Z(4===e.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`)),Z(1===t.rank,(()=>"scores must be a 1D tensor")),Z(t.shape[0]===i,(()=>`scores has incompatible shape with boxes. Expected ${i}, but was ${t.shape[0]}`)),Z(0<=a&&a<=1,(()=>`softNmsSigma must be in [0, 1], but was '${a}'`)),{maxOutputSize:n,iouThreshold:s,scoreThreshold:r,softNmsSigma:a}}const fp=Kr({nonMaxSuppression_:function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY){const a=Hr(e,"boxes","nonMaxSuppression"),i=Hr(t,"scores","nonMaxSuppression"),o=dp(a,i,n,s,r),l={maxOutputSize:n=o.maxOutputSize,iouThreshold:s=o.iouThreshold,scoreThreshold:r=o.scoreThreshold};return Lr.runKernel(Ln,{boxes:a,scores:i},l)}});function mp(e,t,n){const s=function(e,t,n){return function(e,t,n){let s=0,r=e.length,a=0,i=!1;for(;s<r;){a=s+(r-s>>>1);const o=n(t,e[a]);o>0?s=a+1:(r=a,i=!o)}return i?s:-s-1}(e,t,n||gp)}(e,t,n),r=s<0?-(s+1):s;e.splice(r,0,t)}function gp(e,t){return e>t?1:e<t?-1:0}function yp(e,t,n,s,r){return wp(e,t,n,s,r,0)}function bp(e,t,n,s,r,a){return wp(e,t,n,s,r,0,!1,a,!0)}function xp(e,t,n,s,r,a){return wp(e,t,n,s,r,a,!0)}function wp(e,t,n,s,r,a,i=!1,o=!1,l=!1){const u=[];for(let e=0;e<t.length;e++)t[e]>r&&u.push({score:t[e],boxIndex:e,suppressBeginIndex:0});u.sort(Ip);const c=a>0?-.5/a:0,h=[],p=[];for(;h.length<n&&u.length>0;){const t=u.pop(),{score:n,boxIndex:a,suppressBeginIndex:i}=t;if(n<r)break;let o=!1;for(let n=h.length-1;n>=i;--n){const i=kp(e,a,h[n]);if(i>=s){o=!0;break}if(t.score=t.score*vp(s,c,i),t.score<=r)break}t.suppressBeginIndex=h.length,o||(t.score===n?(h.push(a),p.push(t.score)):t.score>r&&mp(u,t,Ip))}const d=h.length,f=n-d;o&&f>0&&(h.push(...new Array(f).fill(0)),p.push(...new Array(f).fill(0)));const m={selectedIndices:h};return i&&(m.selectedScores=p),l&&(m.validOutputs=d),m}function kp(e,t,n){const s=e.subarray(4*t,4*t+4),r=e.subarray(4*n,4*n+4),a=Math.min(s[0],s[2]),i=Math.min(s[1],s[3]),o=Math.max(s[0],s[2]),l=Math.max(s[1],s[3]),u=Math.min(r[0],r[2]),c=Math.min(r[1],r[3]),h=Math.max(r[0],r[2]),p=Math.max(r[1],r[3]),d=(o-a)*(l-i),f=(h-u)*(p-c);if(d<=0||f<=0)return 0;const m=Math.max(a,u),g=Math.max(i,c),y=Math.min(o,h),b=Math.min(l,p),x=Math.max(y-m,0)*Math.max(b-g,0);return x/(d+f-x)}function vp(e,t,n){const s=Math.exp(t*n*n);return n<=e?s:0}function Ip(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}const Np=Kr({nonMaxSuppressionWithScore_:function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=0){const i=Hr(e,"boxes","nonMaxSuppression"),o=Hr(t,"scores","nonMaxSuppression"),l=dp(i,o,n,s,r,a),u={boxes:i,scores:o},c={maxOutputSize:n=l.maxOutputSize,iouThreshold:s=l.iouThreshold,scoreThreshold:r=l.scoreThreshold,softNmsSigma:a=l.softNmsSigma},h=Lr.runKernel(Pn,u,c);return{selectedIndices:h[0],selectedScores:h[1]}}}),Sp=Kr({nonMaxSuppressionPadded_:function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=!1){const i=Hr(e,"boxes","nonMaxSuppression"),o=Hr(t,"scores","nonMaxSuppression"),l=dp(i,o,n,s,r,null),u={boxes:i,scores:o},c={maxOutputSize:l.maxOutputSize,iouThreshold:l.iouThreshold,scoreThreshold:l.scoreThreshold,padToMaxOutputSize:a},h=Lr.runKernel(zn,u,c);return{selectedIndices:h[0],validOutputs:h[1]}}}),Cp=Kr({resizeBilinear_:function(e,t,n=!1,s=!1){const r=Hr(e,"images","resizeBilinear");Z(3===r.rank||4===r.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${r.rank}.`)),Z(2===t.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`)),Z(!1===s||!1===n,(()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."));let a=r,i=!1;3===r.rank&&(i=!0,a=Sl(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[]=t,o={images:a},l={alignCorners:n,halfPixelCenters:s,size:t},u=Lr.runKernel(ts,o,l);return i?Sl(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),$p=Kr({resizeNearestNeighbor_:function(e,t,n=!1,s=!1){const r=Hr(e,"images","resizeNearestNeighbor");Z(3===r.rank||4===r.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${r.rank}.`)),Z(2===t.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`)),Z("float32"===r.dtype||"int32"===r.dtype,(()=>"`images` must have `int32` or `float32` as dtype")),Z(!1===s||!1===n,(()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."));let a=r,i=!1;3===r.rank&&(i=!0,a=Sl(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[]=t,o={images:a},l={alignCorners:n,halfPixelCenters:s,size:t},u=Lr.runKernel(Qn,o,l);return i?Sl(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),Tp=Kr({bandPart_:function(e,t,n){Z(t%1==0,(()=>`bandPart(): numLower must be an integer, got ${t}.`)),Z(n%1==0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`));const s=Hr(e,"a","bandPart");Z(s.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${s.rank}.`));const r=s.shape,[a,i]=s.shape.slice(-2);if(!(t<=a))throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${a}).`);if(!(n<=i))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${i}).`);t<0&&(t=a),n<0&&(n=i);const o=Sl(Rc(0,a,1,"int32"),[-1,1]),l=Rc(0,i,1,"int32"),u=Uo(o,l),c=Ku(Tu(u,Lo(+t,"int32")),ku(u,Lo(-n,"int32"))),h=cc([a,i],s.dtype);return Sl(oh(wh(Sl(s,[-1,a,i])).map((e=>lu(c,e,h)))),r)}}),Ep=Kr({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,Z(null!=e&&e.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=e[0].shape[0];for(let t=1;t<e.length;++t)Z(e[t].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`))}else t=!0,e=sh(e,e.shape[0],0).map((e=>ih(e,[0])));Z(e.length<=e[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`));const n=[],s=e;for(let t=0;t<e.length;++t)n.push(Lr.tidy((()=>{let e=s[t];if(t>0)for(let s=0;s<t;++s){const t=Co(Lu(Co(n[s],e)),n[s]);e=Uo(e,t)}return So(e,Wh(e,"euclidean"))})));return t?oh(n,0):n}});function Ap(e,t=!1){return Lr.tidy((()=>{Z(2===e.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`));const n=e.shape[0],s=e.shape[1];let r=yu(n),a=ja(e);const i=ph([[1]],[1,1]);let o=ja(i);const l=n>=s?s:n;for(let e=0;e<l;++e){const t=a,l=o,u=r;[o,a,r]=Lr.tidy((()=>{const t=Al(a,[e,e],[n-e,1]),l=Wh(t),u=Al(a,[e,e],[1,1]),c=lu(wu(u,0),ph([[-1]]),ph([[1]])),h=Uo(u,Co(c,l)),p=So(t,h);o=1===p.shape[0]?ja(i):Tl([i,Al(p,[1,0],[p.shape[0]-1,p.shape[1]])],0);const d=Fu(So(hi(c,h),l)),f=Al(a,[e,0],[n-e,s]),m=Co(d,o),g=di(o);if(0===e)a=Uo(f,hi(m,hi(g,f)));else{const t=Uo(f,hi(m,hi(g,f)));a=Tl([Al(a,[0,0],[e,s]),t],0)}const y=di(m),b=Al(r,[0,e],[n,r.shape[1]-e]);if(0===e)r=Uo(b,hi(hi(b,o),y));else{const t=Uo(b,hi(hi(b,o),y));r=Tl([Al(r,[0,0],[n,e]),t],1)}return[o,a,r]})),co([t,l,u])}return!t&&n>s&&(r=Al(r,[0,0],[n,s]),a=Al(a,[0,0],[s,s])),[r,a]}))}const Rp=Kr({qr_:function(e,t=!1){if(Z(e.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`)),2===e.rank)return Ap(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce(((e,t)=>e*t)),s=wh(Sl(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),r=[],a=[];return s.forEach((e=>{const[n,s]=Ap(e,t);r.push(n),a.push(s)})),[Sl(oh(r,0),e.shape),Sl(oh(a,0),e.shape)]}}});var Dp;!function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(Dp||(Dp={}));const Fp=Kr({computeWeightedLoss_:function(e,t,n=Dp.SUM_BY_NONZERO_WEIGHTS){const s=Hr(e,"losses","computeWeightedLoss");let r=null;null!=t&&(r=Hr(t,"weights","computeWeightedLoss"));const a=null==r?s:Co(s,r);if(n===Dp.NONE)return a;if(n===Dp.SUM)return Lu(a);if(n===Dp.MEAN){if(null==r)return tc(a);{const e=s.size/r.size,t=So(Lu(a),Lu(r));return e>1?So(t,Lo(e)):t}}if(n===Dp.SUM_BY_NONZERO_WEIGHTS){if(null==r)return So(Lu(a),Lo(s.size));{const e=Co(r,hc(s.shape)),t=Ha(Lu(uc(e,Lo(0))),"float32");return So(Lu(a),t)}}throw Error(`Unknown reduction: ${n}`)}}),_p=Kr({absoluteDifference_:function(e,t,n,s=Dp.SUM_BY_NONZERO_WEIGHTS){const r=Hr(e,"labels","absoluteDifference"),a=Hr(t,"predictions","absoluteDifference");let i=null;null!=n&&(i=Hr(n,"weights","absoluteDifference")),Q(r.shape,a.shape,"Error in absoluteDifference: ");const o=Ho(Uo(r,a));return Fp(o,i,s)}}),Op=Kr({cosineDistance_:function(e,t,n,s,r=Dp.SUM_BY_NONZERO_WEIGHTS){const a=Hr(e,"labels","cosineDistance"),i=Hr(t,"predictions","cosineDistance");let o=null;null!=s&&(o=Hr(s,"weights","cosineDistance")),Q(a.shape,i.shape,"Error in cosineDistance: ");const l=Lo(1),u=Uo(l,Lu(Co(a,i),n,!0));return Fp(u,o,r)}}),Mp=Kr({hingeLoss_:function(e,t,n,s=Dp.SUM_BY_NONZERO_WEIGHTS){let r=Hr(e,"labels","hingeLoss");const a=Hr(t,"predictions","hingeLoss");let i=null;null!=n&&(i=Hr(n,"weights","hingeLoss")),Q(r.shape,a.shape,"Error in hingeLoss: ");const o=Lo(1);r=Uo(Co(Lo(2),r),o);const l=_c(Uo(o,Co(r,a)));return Fp(l,i,s)}}),Lp=Kr({huberLoss_:function(e,t,n,s=1,r=Dp.SUM_BY_NONZERO_WEIGHTS){const a=Hr(e,"labels","huberLoss"),i=Hr(t,"predictions","huberLoss");let o=null;null!=n&&(o=Hr(n,"weights","huberLoss")),Q(a.shape,i.shape,"Error in huberLoss: ");const l=Lo(s),u=Ho(Uo(i,a)),c=sc(u,l),h=Uo(u,c),p=Io(Co(Lo(.5),To(c)),Co(l,h));return Fp(p,o,r)}}),zp=Kr({logLoss_:function(e,t,n,s=1e-7,r=Dp.SUM_BY_NONZERO_WEIGHTS){const a=Hr(e,"labels","logLoss"),i=Hr(t,"predictions","logLoss");let o=null;null!=n&&(o=Hr(n,"weights","logLoss")),Q(a.shape,i.shape,"Error in logLoss: ");const l=Lo(1),u=Lo(s),c=Fu(Co(a,Ru(Io(i,u)))),h=Co(Uo(l,a),Ru(Io(Uo(l,i),u))),p=Uo(c,h);return Fp(p,o,r)}}),Pp=Kr({meanSquaredError_:function(e,t,n,s=Dp.SUM_BY_NONZERO_WEIGHTS){const r=Hr(e,"labels","meanSquaredError"),a=Hr(t,"predictions","meanSquaredError");let i=null;null!=n&&(i=Hr(n,"weights","meanSquaredError")),Q(r.shape,a.shape,"Error in meanSquaredError: ");const o=ah(r,a);return Fp(o,i,s)}}),Bp=Kr({sigmoidCrossEntropy_:function(e,t,n,s=0,r=Dp.SUM_BY_NONZERO_WEIGHTS){let a=Hr(e,"multiClassLabels","sigmoidCrossEntropy");const i=Hr(t,"logits","sigmoidCrossEntropy");let o=null;if(null!=n&&(o=Hr(n,"weights","sigmoidCrossEntropy")),Q(a.shape,i.shape,"Error in sigmoidCrossEntropy: "),s>0){const e=Lo(s),t=Lo(1),n=Lo(.5);a=Io(Co(a,Uo(t,e)),Co(n,e))}const l=function(e,t){const n=Hr(e,"labels","sigmoidCrossEntropyWithLogits"),s=Hr(t,"logits","sigmoidCrossEntropyWithLogits");Q(n.shape,s.shape,"Error in sigmoidCrossEntropyWithLogits: ");const r=_c(s),a=Co(s,n),i=Du(du(Fu(Ho(s))));return Io(Uo(r,a),i)}(a,i);return Fp(l,o,r)}}),Wp=Kr({softmaxCrossEntropy_:function(e,t,n,s=0,r=Dp.SUM_BY_NONZERO_WEIGHTS){let a=Hr(e,"onehotLabels","softmaxCrossEntropy");const i=Hr(t,"logits","softmaxCrossEntropy");let o=null;if(null!=n&&(o=Hr(n,"weights","softmaxCrossEntropy")),Q(a.shape,i.shape,"Error in softmaxCrossEntropy: "),s>0){const e=Lo(s),t=Lo(1),n=Lo(a.shape[1]);a=Io(Co(a,Uo(t,e)),So(e,n))}const l=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`);const s=Oo(((e,t,s)=>{const r=qu(t,[n],!0),a=Uo(Ha(t,"float32"),r);s([e,a]);const i=Fu(Co(a,e));return{value:Lu(i,[n]),gradFunc:(e,t)=>{const[s,r]=t,a=Vu(e.shape,[n]);return[Co(Sl(e,a),Uo(Ha(s,"float32"),du(r))),Co(Sl(e,a),Uo(du(r),Ha(s,"float32")))]}}}));return s(e,t)}(a,i);return Fp(l,o,r)}}),Vp={fft:eh,ifft:th,rfft:rh,irfft:nh},Up={hammingWindow:ip,hannWindow:op,frame:lp,stft:up},Gp={flipLeftRight:hp,resizeNearestNeighbor:$p,resizeBilinear:Cp,rotateWithOffset:pp,cropAndResize:cp,nonMaxSuppression:fp,nonMaxSuppressionAsync:async function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY){const a=Hr(e,"boxes","nonMaxSuppressionAsync"),i=Hr(t,"scores","nonMaxSuppressionAsync"),o=dp(a,i,n,s,r);n=o.maxOutputSize,s=o.iouThreshold,r=o.scoreThreshold;const l=await Promise.all([a.data(),i.data()]),u=l[0],c=l[1],{selectedIndices:h}=yp(u,c,n,s,r);return a!==e&&a.dispose(),i!==t&&i.dispose(),hh(h,"int32")},nonMaxSuppressionWithScore:Np,nonMaxSuppressionWithScoreAsync:async function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=0){const i=Hr(e,"boxes","nonMaxSuppressionAsync"),o=Hr(t,"scores","nonMaxSuppressionAsync"),l=dp(i,o,n,s,r,a);n=l.maxOutputSize,s=l.iouThreshold,r=l.scoreThreshold,a=l.softNmsSigma;const u=await Promise.all([i.data(),o.data()]),c=u[0],h=u[1],{selectedIndices:p,selectedScores:d}=xp(c,h,n,s,r,a);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:hh(p,"int32"),selectedScores:hh(d)}},nonMaxSuppressionPadded:Sp,nonMaxSuppressionPaddedAsync:async function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=!1){const i=Hr(e,"boxes","nonMaxSuppressionAsync"),o=Hr(t,"scores","nonMaxSuppressionAsync"),l=dp(i,o,n,s,r,null),u=l.maxOutputSize,c=l.iouThreshold,h=l.scoreThreshold,[p,d]=await Promise.all([i.data(),o.data()]),{selectedIndices:f,validOutputs:m}=bp(p,d,u,c,h,a);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:hh(f,"int32"),validOutputs:Lo(m,"int32")}}},Hp={bandPart:Tp,gramSchmidt:Ep,qr:Rp},jp={absoluteDifference:_p,computeWeightedLoss:Fp,cosineDistance:Op,hingeLoss:Mp,huberLoss:Lp,logLoss:zp,meanSquaredError:Pp,sigmoidCrossEntropy:Bp,softmaxCrossEntropy:Wp};class qp{static sgd(e){return new Jo(e)}static momentum(e,t,n=!1){return new Zo(e,t,n)}static rmsprop(e,t=.9,n=0,s=null,r=!1){return new Qo(e,t,n,s,r)}static adam(e=.001,t=.9,n=.999,s=null){return new Go(e,t,n,s)}static adadelta(e=.001,t=.95,n=null){return new Po(e,t,n)}static adamax(e=.002,t=.9,n=.999,s=null,r=0){return new Yo(e,t,n,s,r)}static adagrad(e,t=.1){return new Wo(e,t)}}const Kp={sgd:qp.sgd,momentum:qp.momentum,adadelta:qp.adadelta,adagrad:qp.adagrad,rmsprop:qp.rmsprop,adamax:qp.adamax,adam:qp.adam},Xp="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:e=>e();function Yp(){return new Promise((e=>Xp((()=>e()))))}function Jp(e,t){const n=e[0].length;e.forEach(((e,t)=>{Z(e.length===n,(()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`))})),Z(t>=0&&t<n,(()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`));const s=e[0];e.forEach(((e,r)=>{for(let a=0;a<n;a++)Z(a===t||e[a]===s[a],(()=>`Error in concat${n}D: Shape of tensors[${r}] (${e}) does not match the shape of the rest (${s}) along the non-concatenated axis ${r}.`))}))}function Zp(e,t){const n=e[0].slice();for(let s=1;s<e.length;s++)n[t]+=e[s][t];return n}const Qp=30;function ed(e){return e<=Qp?e:$e(e,Math.floor(Math.sqrt(e)))}function td(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}function nd(e,t,n,s=!0){let r=[];if(s)r=r.concat(t.slice(0)),r.push(e[0]/n),r=r.concat(e.slice(1));else{r=r.concat(e[0]);const n=t.length;for(let s=0;s<n;++s)r=r.concat([e[s+1]/t[s],t[s]]);r=r.concat(e.slice(n+1))}return r}function sd(e,t,n=!0){const s=[];if(n){s.push(t);for(let n=t+1;n<e;++n)n<=2*t?(s.push(n),s.push(n-(t+1))):s.push(n)}else{const n=[],r=[];for(let s=1;s<e;++s)s>=2*t+1||s%2==1?r.push(s):n.push(s);s.push(...n),s.push(0),s.push(...r)}return s}function rd(e,t,n,s=!0){const r=[];s?r.push(e[0]/n):r.push(e[0]*n);for(let n=1;n<e.length;++n)n<=t.length?s?r.push(t[n-1]*e[n]):r.push(e[n]/t[n-1]):r.push(e[n]);return r}function ad(e,t){const n=[0];for(let s=0;s<t;++s)n.push(e[s][0]);return n}function id(e,t,n){const s=e.slice(0,1);for(let r=0;r<n;++r)s.push(e[r+1]-t[r][0]-t[r][1]);return s}const od=1.7580993408473768,ld=1.0507009873554805,ud=.3275911,cd=.254829592,hd=-.284496736,pd=1.421413741,dd=-1.453152027,fd=1.061405429;function md(...e){Be().getBool("IS_TEST")||console.warn(...e)}function gd(...e){Be().getBool("IS_TEST")||console.log(...e)}function yd(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let s=0;s<n.length;s+=2)n[s]=e[s/2],n[s+1]=t[s/2];return n}function bd(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let s=0;s<e.length;s+=2)t[s/2]=e[s],n[s/2]=e[s+1];return{real:t,imag:n}}function xd(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),s=new Float32Array(t);for(let t=0;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],s[Math.floor(t/4)]=e[t+1];return{real:n,imag:s}}function wd(e){const t=Math.floor(e.length/4),n=new Float32Array(t),s=new Float32Array(t);for(let t=2;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],s[Math.floor(t/4)]=e[t+1];return{real:n,imag:s}}function kd(e,t){return{real:e[2*t],imag:e[2*t+1]}}function vd(e,t,n,s){e[2*s]=t,e[2*s+1]=n}function Id(e,t){const n=new Float32Array(e/2),s=new Float32Array(e/2);for(let r=0;r<Math.ceil(e/2);r++){const a=(t?2:-2)*Math.PI*(r/e);n[r]=Math.cos(a),s[r]=Math.sin(a)}return{real:n,imag:s}}function Nd(e,t,n){const s=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(s),imag:Math.sin(s)}}function Sd(e,t,n=0){let s=[];if("number"==typeof t)Z(e.shape[n]%t==0,(()=>"Number of splits must evenly divide the axis.")),s=new Array(t).fill(e.shape[n]/t);else{const r=t.reduce(((e,t)=>(-1===t&&(e+=1),e)),0);Z(r<=1,(()=>"There should be only one negative value in split array."));const a=t.indexOf(-1);if(-1!==a){const s=t.reduce(((e,t)=>t>0?e+t:e));t[a]=e.shape[n]-s}Z(e.shape[n]===t.reduce(((e,t)=>e+t)),(()=>"The sum of sizes must match the size of the axis dimension.")),s=t}return s}function Cd(e,t){let n,s=!1;for(e<=Qp?(n=e,s=!0):n=$e(e,Math.floor(Math.sqrt(e)));!s;)n>t||n===e?s=!0:n=$e(e,n+1);return n}function $d(e,t,n){const s=[],r=e.length;for(let a=0;a<r;a++)a!==t?s.push(e[a]):s.push(n);return s}function Td(e,t,n,s){const r=t.shape.length,a=e.shape.length;if(0!==s&&(s<-r||s>r))throw new Error(`Expect batchDims in the range of [-${r}, ${r}], but got ${s}`);if(s<0&&(s+=r),s>a)throw new Error(`batchDims (${s}) must be less than rank(x) (\n    ${a}).`);if(n<s)throw new Error(`batchDims (${s}) must be less than or equal to axis (${n}).`);for(let n=0;n<s;++n)if(e.shape[n]!==t.shape[n])throw new Error(`x.shape[${n}]: ${e.shape[n]} should be equal to indices.shape[${n}]: ${t.shape[n]}.`);const i=e.shape[n],o=[];let l=1,u=1,c=1;for(let t=0;t<s;++t)o.push(e.shape[t]),l*=e.shape[t];for(let t=s;t<n;t++)o.push(e.shape[t]),u*=e.shape[t];for(let e=s;e<r;e++)o.push(t.shape[e]);for(let t=n+1;t<a;t++)o.push(e.shape[t]),c*=e.shape[t];return{batchSize:l,sliceSize:c,outerSize:u,dimSize:i,outputShape:o}}function Ed(e,t,n){if("complex64"===t){if("complex64"===e.dtype)return e.clone();const t=cc(e.shape),s=Ha(e,"float32"),r=n.complex(s,t);return t.dispose(),s.dispose(),r}if(!be(e.dtype,t))return Lr.makeTensorFromDataId(e.dataId,e.shape,t);if("complex64"===e.dtype){const s=n.real(e),r=Ha(s,t);return s.dispose(),r}if("int32"===t)return n.int(e);if("bool"===t){const t=Lo(0,e.dtype),s=n.notEqual(e,t);return t.dispose(),s}throw new Error(`Error in Cast: failed to cast ${e.dtype} to ${t}`)}function Ad(e,t){return Lr.makeTensorFromDataId(e.dataId,t,e.dtype)}function Rd(e){try{return e.map((e=>fr(e)))}catch(e){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`)}}function Dd(e){return e.map((e=>dr(e)))}const Fd={kernelName:He,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Co(e,lh(Ha(n,"float32"),-1))}}},_d={kernelName:je,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=To(Ha(n,"float32")),s=$o(Uo(Lo(1),t));return Fu(So(e,s))}}}},Od={kernelName:qe,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=$o(Uo(To(Ha(n,"float32")),1));return So(e,t)}}}},Md={kernelName:Ke,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Ko(n.shape,s.shape);return{a:()=>{let t=e;const s=qo(n.shape,r);return s.length>0&&(t=Lu(t,s)),Sl(t,n.shape)},b:()=>{let t=e;const n=qo(s.shape,r);return n.length>0&&(t=Lu(t,n)),Sl(t,s.shape)}}}},Ld={kernelName:Xe,saveAllInputs:!0,gradFunc:(e,t)=>{const n={};return t.forEach(((t,s)=>{n[s]=()=>e.clone()})),n}},zd={kernelName:Ze,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Eo(n)}}},Pd={kernelName:Qe,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Eo(n)}}},Bd={kernelName:et,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>So(e,$o(Uo(Lo(1),To(Ha(n,"float32")))))}}},Wd={kernelName:tt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=$o(Io(Lo(1),To(Ha(n,"float32"))));return So(e,t)}}}},Vd={kernelName:rt,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Ko(n.shape,s.shape);return{a:()=>{const t=Io(To(n),To(s));let a=Co(e,So(s,t));const i=qo(n.shape,r);return i.length>0&&(a=Lu(a,i)),Sl(a,n.shape)},b:()=>{const t=Io(To(n),To(s));let a=Fu(Co(e,So(n,t)));const i=qo(s.shape,r);return i.length>0&&(a=Lu(a,i)),Sl(a,s.shape)}}}},Ud={kernelName:nt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>So(e,Io(To(Ha(n,"float32")),1))}}},Gd={kernelName:st,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>So(e,Uo(Lo(1),To(Ha(n,"float32"))))}}},Hd=Kr({avgPool3dGrad_:function(e,t,n,s,r=[1,1,1],a,i){const o=Hr(e,"dy","avgPool3dGrad"),l=Hr(t,"input","avgPool3dGrad");let u=o,c=l,h=!1;4===l.rank&&(h=!0,u=Sl(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),c=Sl(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]])),Z(5===u.rank,(()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${u.rank}.`)),Z(5===c.rank,(()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${c.rank}.`)),Z(Il(s,r),(()=>`Error in avgPool3dGrad: Either strides or dilations must be 1. Got strides ${s} and dilations '${r}'`)),null!=i&&Z(ae(a),(()=>`Error in avgPool3dGrad: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`));const p={dy:u,input:c},d={filterSize:n,strides:s,dilations:r,pad:a,dimRoundingMode:i},f=Lr.runKernel(lt,p,d);return h?Sl(f,[f.shape[1],f.shape[2],f.shape[3],f.shape[4]]):f}}),jd={kernelName:ot,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{filterSize:r,strides:a,dilations:i,pad:o,dimRoundingMode:l}=n,u=null==i?[1,1,1]:i;return{x:()=>Hd(e,s,r,a,u,o,l)}}},qd=Kr({avgPoolGrad_:function(e,t,n,s,r){const a=Hr(e,"dy","avgPoolGrad"),i=Hr(t,"input","avgPoolGrad");Z(i.rank===a.rank,(()=>`Rank of input (${i.rank}) does not match rank of dy (${a.rank})`));let o=i,l=a,u=!1;3===i.rank&&(u=!0,o=Sl(i,[1,i.shape[0],i.shape[1],i.shape[2]]),l=Sl(a,[1,a.shape[0],a.shape[1],a.shape[2]])),Z(4===l.rank,(()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`)),Z(4===o.rank,(()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${o.rank}.`));const c={dy:l,input:o},h={filterSize:n,strides:s,pad:r},p=Lr.runKernel(it,c,h);return u?Sl(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),Kd={kernelName:at,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{filterSize:r,strides:a,pad:i}=n;return{x:()=>qd(e,s,r,a,i)}}},Xd={kernelName:ut,inputsToSave:["a","b"],gradFunc:(e,t,n)=>{const[s,r]=t,{transposeA:a,transposeB:i}=n;return a||i?!a&&i?{a:()=>hi(e,r,!1,!1),b:()=>hi(e,s,!0,!1)}:a&&!i?{a:()=>hi(r,e,!1,!0),b:()=>hi(s,e,!1,!1)}:{a:()=>hi(r,e,!0,!0),b:()=>hi(e,s,!0,!0)}:{a:()=>hi(e,r,!1,!0),b:()=>hi(s,e,!0,!1)}}},Yd={kernelName:ct,gradFunc:(e,t,n)=>{const{blockShape:s,crops:r}=n;return{x:()=>xc(e,s,r)}}},Jd={kernelName:pt,gradFunc:(e,t,n)=>{const s=n,r=s.inputShape,a=s.shape,i=Array.from(a);for(let e=r.length-1;e>=0;e--)if(r[e]===a[e])i[e]=1;else if(1!==r[e])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${a}].`);const o=[];for(let e=0;e<i.length;e++)i[e]>1&&o.push(e);return{x:()=>Lu(e,o,!0)}}},Zd={kernelName:dt,gradFunc:e=>({x:()=>e.clone()})},Qd={kernelName:ft,gradFunc:e=>({x:()=>Eo(e)})},ef={kernelName:mt,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{clipValueMin:r,clipValueMax:a}=n;return{x:()=>lu(Ku(ku(s,r),Tu(s,a)),e,Eo(e))}}},tf={kernelName:yt,inputsToSave:["x"],gradFunc:Fd.gradFunc},nf={kernelName:bt,saveAllInputs:!0,gradFunc:(e,t,n)=>{const s=t.map((e=>e.shape)),{axis:r}=n,a=pe(r,t[0].shape)[0],i=s.map((e=>e[a]));return sh(e,i,a).map((e=>()=>e))}},sf={kernelName:xt,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[s,r]=t,{dilations:a,strides:i,pad:o,dataFormat:l}=n;return Z(vl(a),(()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`)),{x:()=>Kl(s.shape,e,r,i,o,l),filter:()=>Yh(s,e,r.shape,i,o,l)}}},rf={kernelName:kt,inputsToSave:["dy","filter"],gradFunc:(e,t,n)=>{const[s,r]=t,{strides:a,pad:i,dataFormat:o,dimRoundingMode:l}=n;return{dy:()=>jl(e,r,a,i,o,1,l),filter:()=>Yh(e,s,r.shape,a,i,o,l)}}},af=Kr({conv3DBackpropFilter_:function(e,t,n,s,r){let a=e;4===e.rank&&(a=Sl(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]));let i=t;4===i.rank&&(i=Sl(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),Z(5===a.rank,(()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${a.shape}.`)),Z(5===i.rank,(()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${i.shape}.`)),Z(5===n.length,(()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${n}.`)),Z(a.shape[4]===n[3],(()=>`Error in conv3dDerFilter: depth of input ${a.shape[4]}) must match input depth in filter (${n[3]}.`)),Z(i.shape[4]===n[4],(()=>`Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${n[4]}).`));const o={x:a,dy:i},l={strides:s,pad:r,filterShape:n};return Lr.runKernel(It,o,l)}}),of={kernelName:vt,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:s,strides:r,pad:a}=n;Z(vl(s),(()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`));const[i,o]=t;return{x:()=>Jl(i.shape,e,o,r,a),filter:()=>af(i,e,o.shape,r,a)}}},lf={kernelName:St,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Co(Fu(qc(Ha(n,"float32"))),e)}}},uf={kernelName:Ct,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Co(Kc(Ha(n,"float32")),e)}}},cf={kernelName:$t,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:r,exclusive:a,reverse:i}=n;return{x:()=>{const t=Gu([r],s.rank);let n=tu(e,r,a,!i);return null!=t&&(n=di(n,t)),n}}}},hf={kernelName:Rt,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:s,strides:r,pad:a,dimRoundingMode:i}=n,o=null==s?[1,1]:s;Z(vl(o),(()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`));const[l,u]=t;return Z(4===l.rank,(()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`)),Z(4===u.rank,(()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${u.rank}.`)),Z(l.shape[3]===u.shape[2],(()=>`Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`)),Z(Il(r,o),(()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${r} and dilations '${o}'.`)),null!=i&&Z(ae(a),(()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`)),{x:()=>sp(l.shape,e,u,r,a,s,i),filter:()=>np(l,e,u.shape,r,a,s,i)}}},pf={kernelName:Ot,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[s,r]=t,a={x:s,filter:r,dy:e},i={x:s,filter:r,dy:e};return{x:()=>Lr.runKernel(Mt,a,n),filter:()=>Lr.runKernel(Lt,i,n)}}},df={kernelName:Pt,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t,s={dy:e,y:n};return{x:()=>Lr.runKernel(Bt,s)}}},ff={kernelName:Wt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,s=Co(du(Fu(To(n))),2/Math.sqrt(Math.PI));return{x:()=>Co(e,s)}}},mf={kernelName:Ut,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Co(e,n)}}},gf={kernelName:Gt,inputsToSave:["input"],gradFunc:(e,t)=>{const[n]=t;return{input:()=>Sl(e,n.shape)}}},yf={kernelName:Ht,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Co(e,du(n))}}},bf={kernelName:Xt,gradFunc:e=>({x:()=>Eo(e)})},xf={kernelName:Yt,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Ko(n.shape,s.shape);return{a:()=>{const t=So(e,Ha(s,"float32")),a=qo(n.shape,r);return a.length>0?Sl(Lu(t,a),n.shape):t},b:()=>{let t=Co(e,Ha(n,"float32"));const a=qo(s.shape,r);a.length>0&&(t=Sl(Lu(t,a),s.shape));const i=To(s);return Fu(So(t,Ha(i,"float32")))}}}},wf={kernelName:Jt,inputsToSave:["x","mean","variance","scale"],gradFunc:(e,t,n)=>{const{varianceEpsilon:s}=n,[r,a,i,o]=t,l=null==o?Lo(1):o,u=qo(a.shape,r.shape),c=[];if(1===a.rank){for(let e=0;e<r.shape.length-1;++e)c.push(r.shape[e]);c.push(1)}const h=Uo(r,a),p=Co(e,l),d=Vc(Io(i,Lo(s))),f=Co(Co(Co(d,d),d),Lo(-.5));return{x:()=>1===a.rank?Sl(Co(Co(e,gu(Sl(d,[1,1,1,a.shape[0]]),c)),l),r.shape):Sl(Co(Co(e,d),l),r.shape),mean:()=>{let e=Co(Co(d,Lo(-1)),p);return 1===a.rank&&(e=Lu(e,u)),Sl(e,a.shape)},variance:()=>{let e=Co(Co(f,h),p);return 1===a.rank&&(e=Lu(e,u)),Sl(e,a.shape)},scale:()=>{const t=Co(h,d);let n=Co(e,t);return 1===a.rank&&(n=Lu(n,u)),Sl(n,a.shape)},offset:()=>{let t=e;return 1===a.rank&&(t=Lu(t,u)),Sl(t,a.shape)}}}},kf={kernelName:Zt,inputsToSave:["x","indices"],gradFunc:(e,t,n)=>{const[s,r]=t,{axis:a}=n,i=pe(a,s.shape)[0];return{x:()=>{const t=s.shape,n=r.size,o=t.slice(0,i),l=o.length,u=t.slice(a,t.length).slice(1),c=u.length,h=vf(0,l),p=vf(l+1,l+1+c),d=If([o,[n],u]),f=Sl(e,d),m=Sl(r,[n]),g=If([[l],h,p]),y=di(f,g);let b=xh(y,m,s.shape[i]);const x=Hu(g);return b=di(b,x),b},indices:()=>r}}};function vf(e,t){const n=[];for(let s=e;s<t;++s)n.push(s);return n}function If(e){const t=[];for(let n=0;n<e.length;++n)for(let s=0;s<e[n].length;++s)t.push(e[n][s]);return t}const Nf={kernelName:tn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>Eo(n),b:()=>Eo(s)}}},Sf={kernelName:nn,gradFunc:e=>({x:()=>Ha(e,"float32")})},Cf={kernelName:an,gradFunc:e=>({x:()=>Eo(e)})},$f={kernelName:on,gradFunc:e=>({x:()=>Eo(e)})},Tf={kernelName:ln,gradFunc:e=>({x:()=>Eo(e)})},Ef={kernelName:un,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{alpha:r}=n,a=wu(s,0);return{x:()=>lu(a,e,Co(e,r))}}},Af={kernelName:fn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>So(e,Io(n,1))}}},Rf={kernelName:dn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>So(e,Ha(n,"float32"))}}},Df={kernelName:bn,inputsToSave:[],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s]=t,{axis:r}=n;return{logits:()=>{const t=du(s);return Uo(e,Co(Lu(e,r,!0),t))}}}},Ff=Kr({localResponseNormalizationBackprop_:function(e,t,n,s=5,r=1,a=1,i=.5){const o={x:e,y:t,dy:n},l={depthRadius:s,bias:r,alpha:a,beta:i};return Lr.runKernel(wn,o,l)}}),_f={kernelName:xn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{depthRadius:a,bias:i,alpha:o,beta:l}=n;return{x:()=>Ff(s,r,e,a,i,o,l)}}};function Of(e,t,n,s){return t.rank<n.rank&&(t=Sl(t,Vu(t.shape,s))),e.rank<n.rank&&(e=Sl(e,Vu(e.shape,s))),{x:()=>Co(e,Ha(ou(n,t),e.dtype))}}const Mf={kernelName:kn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const s=n,{reductionIndices:r}=s,a=t[0],i=Of(e,t[1],a,pe(r,a.shape));return{x:()=>i.x()}}},Lf={kernelName:vn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>Co(e,Ha(ku(n,s),"float32")),b:()=>Co(e,Ha($u(n,s),"float32"))}}},zf=Kr({maxPool3dGrad_:function(e,t,n,s,r,a=[1,1,1],i,o){const l=Hr(e,"dy","maxPool3dGrad"),u=Hr(t,"input","maxPool3dGrad"),c=Hr(n,"output","maxPool3dGrad");let h=l,p=u,d=c,f=!1;4===u.rank&&(f=!0,h=Sl(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),p=Sl(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]]),d=Sl(c,[1,c.shape[0],c.shape[1],c.shape[2],c.shape[3]])),Z(5===h.rank,(()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${h.rank}.`)),Z(5===p.rank,(()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${p.rank}.`)),Z(5===d.rank,(()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${d.rank}.`)),Z(Il(r,a),(()=>`Error in maxPool3dGrad: Either strides or dilations must be 1. Got strides ${r} and dilations '${a}'`)),null!=o&&Z(ae(i),(()=>`Error in maxPool3dGrad: pad must be an integer when using, dimRoundingMode ${o} but got pad ${i}.`));const m={dy:h,input:p,output:d},g={filterSize:s,strides:r,dilations:a,pad:i,dimRoundingMode:o},y=Lr.runKernel(Cn,m,g);return f?Sl(y,[y.shape[1],y.shape[2],y.shape[3],y.shape[4]]):y}}),Pf={kernelName:Sn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{filterSize:a,strides:i,dilations:o,pad:l,dimRoundingMode:u}=n,c=null==o?[1,1,1]:o;return{x:()=>zf(e,s,r,a,i,c,l,u)}}},Bf=Kr({maxPoolGrad_:function(e,t,n,s,r,a,i){const o=Hr(e,"dy","maxPoolGrad"),l=Hr(t,"input","maxPoolGrad"),u=Hr(n,"output","maxPoolGrad");Z(l.rank===o.rank,(()=>`Rank of input (${l.rank}) does not match rank of dy (${o.rank})`)),Z(4===o.rank,(()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${o.rank}.`)),Z(4===l.rank,(()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`)),null!=i&&Z(ae(a),(()=>`Error in maxPoolGrad: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`));const c={dy:o,input:l,output:u},h={filterSize:s,strides:r,pad:a,dimRoundingMode:i};return Lr.runKernel(Nn,c,h)}}),Wf={kernelName:In,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{filterSize:a,strides:i,pad:o}=n;return{x:()=>Bf(e,s,r,a,i,o)}}},Vf={kernelName:Rn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const s=t[0],{paddings:r}=n,a=r.map((e=>e[0]));return{x:()=>Al(e,a,s.shape)}}},Uf={kernelName:Un,inputsToSave:["x"],gradFunc:(e,t,n)=>{const s=t[0],{paddings:r}=n,a=r.map((e=>e[0]));return{x:()=>Al(e,a,s.shape)}}},Gf={kernelName:Hn,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(e,t)=>{const[n,s,r]=t,a=n,i=s,o=Ko(a.shape,i.shape);return{a:()=>{const t=Ha(i,"float32");let n=Co(e,Co(t,Vo(a,Uo(t,Lo(1)))));const s=qo(a.shape,o);return s.length>0&&(n=Lu(n,s)),Sl(n,a.shape)},b:()=>{const t=wu(a,0),n=lu(t,Ru(a),Eo(a));let s=Co(e,Co(r,n));const l=qo(i.shape,o);return l.length>0&&(s=Lu(s,l)),Sl(s,i.shape)}}}},Hf={kernelName:us,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=wu(n,Lo(0)),s=Lo(od),r=Lo(ld),a=Co(e,r),i=Co(Co(e,s),du(Ha(n,"float32")));return lu(t,a,i)}}}},jf={kernelName:bs,gradFunc:(e,t,n)=>{const{blockShape:s,paddings:r}=n;return{x:()=>Fl(e,s,r)}}},qf={kernelName:xs,gradFunc:(e,t,n)=>{const{axis:s}=n;return{x:()=>Tl(e,s)}}},Kf=[Fd,_d,Od,Md,Ld,zd,Pd,Bd,Wd,Vd,Ud,Gd,jd,Kd,Xd,Yd,Jd,Zd,Qd,ef,tf,nf,rf,sf,of,lf,uf,cf,hf,pf,{kernelName:zt,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Ko(n.shape,s.shape);return{a:()=>{const t=So(e,Ha(s,"float32")),a=qo(n.shape,r);return a.length>0?Sl(Lu(t,a),n.shape):t},b:()=>{let t=Co(e,Ha(n,"float32"));const a=qo(s.shape,r);a.length>0&&(t=Sl(Lu(t,a),s.shape));const i=To(s);return Fu(So(t,Ha(i,"float32")))}}}},df,ff,mf,gf,yf,xf,bf,wf,kf,Nf,Sf,Cf,$f,Tf,Ef,Af,Rf,Df,_f,Mf,Mf,Lf,Pf,Wf,{kernelName:Tn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:r}=n,a=pe(r,s.shape),i=ne(Wu(s.shape,a)[1]);return{x:()=>{const t=s.shape.slice();a.forEach((e=>{t[e]=1}));const n=Sl(e,t);return So(Co(n,hc(s.shape,"float32")),i)}}}},{kernelName:En,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const s=n,{axis:r}=s,[a,i]=t,o=Of(e,i,a,pe(r,a.shape));return{x:()=>o.x()}}},{kernelName:An,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>Co(e,Ha(Tu(n,s),"float32")),b:()=>Co(e,Ha(wu(n,s),"float32"))}}},Vf,{kernelName:Dn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Ko(n.shape,s.shape);return{a:()=>{const t=qo(n.shape,r);return t.length>0?Sl(Lu(e,t),n.shape):e},b:()=>{const t=Co(e,Fu(bu(So(n,s)))),a=qo(s.shape,r);return a.length>0?Sl(Lu(t,a),s.shape):t}}}},{kernelName:_n,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Ko(n.shape,s.shape);return{a:()=>{const t=Co(e,Ha(s,"float32")),a=qo(n.shape,r);return a.length>0?Sl(Lu(t,a),n.shape):t},b:()=>{const t=Co(e,Ha(n,"float32")),a=qo(s.shape,r);return a.length>0?Sl(Lu(t,a),s.shape):t}}}},{kernelName:On,gradFunc:e=>({x:()=>Fu(e)})},{kernelName:Wn,inputsToSave:["indices"],gradFunc:(e,t)=>{const n=t[0];return{indices:()=>cc(n.shape,"float32")}}},{kernelName:Bn,gradFunc:e=>({x:()=>Eo(e)})},{kernelName:Vn,saveAllInputs:!0,gradFunc:(e,t,n)=>{const{axis:s}=n;return wh(e,s).map((e=>()=>e))}},Uf,Uf,Gf,{kernelName:jn,inputsToSave:["x","alpha"],gradFunc:(e,t)=>{const[n,s]=t,r=wu(n,0);return{x:()=>lu(r,e,Co(e,s)),alpha:()=>{let t=lu(r,Eo(e),Co(e,n));const a=qo(s.shape,e.shape);return a.length>0&&(t=Lu(t,a)),Sl(t,s.shape)}}}},{kernelName:Yn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>So(e,Fu(To(n)))}}},{kernelName:ss,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,s=Co(Tu(n,6),lh(n));return{x:()=>Co(e,Ha(s,"float32"))}}},{kernelName:Jn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Co(e,Ha(lh(n),"float32"))}}},{kernelName:Zn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Sl(e,n.shape)}}},{kernelName:ts,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[s]=t,r={dy:e,images:s};return{images:()=>Lr.runKernel(ns,r,n)}}},{kernelName:Qn,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[s]=t,r={dy:e,images:s};return{images:()=>Lr.runKernel(es,r,n)}}},{kernelName:rs,gradFunc:(e,t,n)=>{const{dims:s}=n,r=pe(s,e.shape);return{x:()=>Mc(e,r)}}},{kernelName:as,gradFunc:e=>({x:()=>Eo(e)})},{kernelName:is,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Fu(So(e,Co(Vo(n,1.5),2)))}}},{kernelName:ls,inputsToSave:["condition"],gradFunc:(e,t)=>{const[n]=t;return{condition:()=>Ha(Eo(n),"float32"),t:()=>Co(e,Ha(n,e.dtype)),e:()=>Co(e,Ha(Xu(n),e.dtype))}}},Hf,{kernelName:fs,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Co(e,Co(n,Uo(Lo(1),n)))}}},{kernelName:ds,gradFunc:e=>({x:()=>Eo(e)})},{kernelName:hs,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Co(Ql(Ha(n,"float32")),e)}}},{kernelName:ps,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Co(eu(Ha(n,"float32")),e)}}},{kernelName:cs,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{begin:r,size:a}=n,i=s.shape,[o,l]=Li(s,r,a),u=[];for(let t=0;t<e.rank;t++)u.push([o[t],i[t]-o[t]-l[t]]);return{x:()=>fc(e,u)}}},{kernelName:ws,outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s]=t,{dim:r}=n,a=Co(e,s);return{logits:()=>Uo(a,Co(Lu(a,[r],!0),s))}}},{kernelName:ms,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Co(e,El(n))}}},jf,jf,qf,qf,{kernelName:gs,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>So(e,Co($o(Ha(n,"float32")),2))}}},{kernelName:ks,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Lo(2);return{a:()=>Co(e,Co(r,Uo(n,s))),b:()=>Co(e,Co(r,Uo(s,n)))}}},{kernelName:vs,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Co(e,Co(Ha(n,"float32"),2))}}},{kernelName:Os,gradFunc:e=>({x:()=>Eo(e)})},{kernelName:Is,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Ko(n.shape,s.shape);return{a:()=>{let t=e;const s=qo(n.shape,r);return s.length>0&&(t=Lu(t,s)),Sl(t,n.shape)},b:()=>{let t=e;const n=qo(s.shape,r);return n.length>0&&(t=Lu(t,n)),Sl(Fu(t),s.shape)}}}},{kernelName:ys,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,r=s.shape.slice(),{axis:a}=n;pe(a,s.shape).forEach((e=>{r[e]=1}));const i=Sl(e,r),o=Co(i,hc(s.shape,"float32"));return{x:()=>o}}},{kernelName:Cs,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>So(e,To(Ql(n)))}}},{kernelName:$s,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Co(Uo(Lo(1),To(n)),e)}}},{kernelName:Ts,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{reps:r}=n;return{x:()=>{let t=Eo(s);if(1===s.rank)for(let n=0;n<r[0];++n)t=Io(t,Al(e,[n*s.shape[0]],[s.shape[0]]));else if(2===s.rank)for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)t=Io(t,Al(e,[n*s.shape[0],a*s.shape[1]],[s.shape[0],s.shape[1]]));else if(3===s.rank)for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)for(let i=0;i<r[2];++i)t=Io(t,Al(e,[n*s.shape[0],a*s.shape[1],i*s.shape[2]],[s.shape[0],s.shape[1],s.shape[2]]));else{if(4!==s.rank)throw new Error(`Gradient for tile operation is not implemented for rank-${s.rank} tensors yet.`);for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)for(let i=0;i<r[2];++i)for(let o=0;o<r[3];++o)t=Io(t,Al(e,[n*s.shape[0],a*s.shape[1],i*s.shape[2],o*s.shape[3]],[s.shape[0],s.shape[1],s.shape[2],s.shape[3]]))}return t}}}},{kernelName:As,gradFunc:(e,t,n)=>{const s=n,{perm:r}=s,a=Hu(r);return{x:()=>di(e,a)}}},{kernelName:Ds,gradFunc:(e,t,n)=>{const s=n,{axis:r}=s;return{value:()=>oh(e,r)}}},{kernelName:Fs,inputsToSave:["segmentIds"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>function(e,t){const n=Xo(t,Eo(t)),s=xu(e,n);let r=ku(t,Lo(0,"int32"));const a=s.rank-r.rank;for(let e=0;e<a;++e)r=fu(r,e+1);r=Ku(r,hc(s.shape,"bool"));const i=Eo(s);return lu(r,s,i)}(e,n)}}},{kernelName:_s,gradFunc:e=>({x:()=>Eo(e)})}];for(const e of Kf)qs(e);let Xf;function Yf(){return null==Xf&&(Xf=ko().epsilon()),Xf}xr.prototype.abs=function(){return this.throwIfDisposed(),Ho(this)},xr.prototype.acos=function(){return this.throwIfDisposed(),el(this)},xr.prototype.acosh=function(){return this.throwIfDisposed(),tl(this)},xr.prototype.addStrict=function(e){return this.throwIfDisposed(),Rh(this,e)},xr.prototype.add=function(e){return this.throwIfDisposed(),Io(this,e)},xr.prototype.all=function(e,t){return this.throwIfDisposed(),sl(this,e,t)},xr.prototype.any=function(e,t){return this.throwIfDisposed(),rl(this,e,t)},xr.prototype.argMax=function(e){return this.throwIfDisposed(),al(this,e)},xr.prototype.argMin=function(e){return this.throwIfDisposed(),il(this,e)},xr.prototype.asScalar=function(){return this.throwIfDisposed(),Z(1===this.size,(()=>"The array must have only 1 element.")),Sl(this,[])},xr.prototype.asType=function(e){return this.throwIfDisposed(),Ha(this,e)},xr.prototype.as1D=function(){return this.throwIfDisposed(),Sl(this,[this.size])},xr.prototype.as2D=function(e,t){return this.throwIfDisposed(),Sl(this,[e,t])},xr.prototype.as3D=function(e,t,n){return this.throwIfDisposed(),Sl(this,[e,t,n])},xr.prototype.as4D=function(e,t,n,s){return this.throwIfDisposed(),Sl(this,[e,t,n,s])},xr.prototype.as5D=function(e,t,n,s,r){return this.throwIfDisposed(),Sl(this,[e,t,n,s,r])},xr.prototype.asin=function(){return this.throwIfDisposed(),ol(this)},xr.prototype.asinh=function(){return this.throwIfDisposed(),ll(this)},xr.prototype.atan=function(){return this.throwIfDisposed(),ul(this)},xr.prototype.atan2=function(e){return this.throwIfDisposed(),cl(this,e)},xr.prototype.atanh=function(){return this.throwIfDisposed(),hl(this)},xr.prototype.avgPool=function(e,t,n,s){return this.throwIfDisposed(),Cl(this,e,t,n,s)},xr.prototype.batchToSpaceND=function(e,t){return this.throwIfDisposed(),Fl(this,e,t)},xr.prototype.batchNorm=function(e,t,n,s,r){return this.throwIfDisposed(),_l(this,e,t,n,s,r)},xr.prototype.broadcastTo=function(e){return this.throwIfDisposed(),Pl(this,e)},xr.prototype.cast=function(e){return this.throwIfDisposed(),Ha(this,e)},xr.prototype.ceil=function(){return this.throwIfDisposed(),Bl(this)},xr.prototype.clipByValue=function(e,t){return this.throwIfDisposed(),Wl(this,e,t)},xr.prototype.concat=function(e,t){return this.throwIfDisposed(),e instanceof xr&&(e=[e]),Tl([this,...e],t)},xr.prototype.conv1d=function(e,t,n,s,r,a){return this.throwIfDisposed(),ql(this,e,t,n,s,r,a)},xr.prototype.conv2dTranspose=function(e,t,n,s,r){return this.throwIfDisposed(),Xl(this,e,t,n,s,r)},xr.prototype.conv2d=function(e,t,n,s,r,a){return this.throwIfDisposed(),jl(this,e,t,n,s,r,a)},xr.prototype.cos=function(){return this.throwIfDisposed(),Ql(this)},xr.prototype.cosh=function(){return this.throwIfDisposed(),eu(this)},xr.prototype.cumsum=function(e,t,n){return this.throwIfDisposed(),tu(this,e,t,n)},xr.prototype.depthToSpace=function(e,t){return this.throwIfDisposed(),su(this,e,t)},xr.prototype.depthwiseConv2D=function(e,t,n,s,r,a){return ro("depthwiseConv2D is deprecated, use depthwiseConv2d instead"),this.throwIfDisposed(),ru(this,e,t,n,s,r,a)},xr.prototype.depthwiseConv2d=function(e,t,n,s,r,a){return this.throwIfDisposed(),ru(this,e,t,n,s,r,a)},xr.prototype.dilation2d=function(e,t,n,s,r){return this.throwIfDisposed(),iu(this,e,t,n,s,r)},xr.prototype.divNoNan=function(e){return this.throwIfDisposed(),uu(this,e)},xr.prototype.divStrict=function(e){return this.throwIfDisposed(),Dh(this,e)},xr.prototype.div=function(e){return this.throwIfDisposed(),So(this,e)},xr.prototype.dot=function(e){return this.throwIfDisposed(),cu(this,e)},xr.prototype.elu=function(){return this.throwIfDisposed(),hu(this)},xr.prototype.equalStrict=function(e){return this.throwIfDisposed(),Sh(this,e)},xr.prototype.equal=function(e){return this.throwIfDisposed(),ou(this,e)},xr.prototype.erf=function(){return this.throwIfDisposed(),pu(this)},xr.prototype.exp=function(){return this.throwIfDisposed(),du(this)},xr.prototype.expandDims=function(e){return this.throwIfDisposed(),fu(this,e)},xr.prototype.expm1=function(){return this.throwIfDisposed(),mu(this)},xr.prototype.fft=function(){return this.throwIfDisposed(),eh(this)},xr.prototype.flatten=function(){return this.throwIfDisposed(),Sl(this,[this.size])},xr.prototype.floor=function(){return this.throwIfDisposed(),bu(this)},xr.prototype.floorDiv=function(e){return this.throwIfDisposed(),No(this,e)},xr.prototype.gather=function(e,t){return this.throwIfDisposed(),xu(this,e,t)},xr.prototype.greaterEqualStrict=function(e){return this.throwIfDisposed(),Ch(this,e)},xr.prototype.greaterEqual=function(e){return this.throwIfDisposed(),ku(this,e)},xr.prototype.greaterStrict=function(e){return this.throwIfDisposed(),$h(this,e)},xr.prototype.greater=function(e){return this.throwIfDisposed(),wu(this,e)},xr.prototype.ifft=function(){return this.throwIfDisposed(),th(this)},xr.prototype.irfft=function(){return this.throwIfDisposed(),nh(this)},xr.prototype.isFinite=function(){return this.throwIfDisposed(),Iu(this)},xr.prototype.isInf=function(){return this.throwIfDisposed(),Nu(this)},xr.prototype.isNaN=function(){return this.throwIfDisposed(),Su(this)},xr.prototype.leakyRelu=function(e){return this.throwIfDisposed(),Cu(this,e)},xr.prototype.lessEqualStrict=function(e){return this.throwIfDisposed(),Th(this,e)},xr.prototype.lessEqual=function(e){return this.throwIfDisposed(),Tu(this,e)},xr.prototype.lessStrict=function(e){return this.throwIfDisposed(),Eh(this,e)},xr.prototype.less=function(e){return this.throwIfDisposed(),$u(this,e)},xr.prototype.localResponseNormalization=function(e,t,n,s){return this.throwIfDisposed(),Au(this,e,t,n,s)},xr.prototype.logSigmoid=function(){return this.throwIfDisposed(),Ou(this)},xr.prototype.logSoftmax=function(e){return this.throwIfDisposed(),zu(this,e)},xr.prototype.logSumExp=function(e,t){return this.throwIfDisposed(),qu(this,e,t)},xr.prototype.log=function(){return this.throwIfDisposed(),Ru(this)},xr.prototype.log1p=function(){return this.throwIfDisposed(),Du(this)},xr.prototype.logicalAnd=function(e){return this.throwIfDisposed(),Ku(this,e)},xr.prototype.logicalNot=function(){return this.throwIfDisposed(),Xu(this)},xr.prototype.logicalOr=function(e){return this.throwIfDisposed(),Yu(this,e)},xr.prototype.logicalXor=function(e){return this.throwIfDisposed(),Ju(this,e)},xr.prototype.matMul=function(e,t,n){return this.throwIfDisposed(),hi(this,e,t,n)},xr.prototype.maxPool=function(e,t,n,s){return this.throwIfDisposed(),Zu(this,e,t,n,s)},xr.prototype.max=function(e,t){return this.throwIfDisposed(),Mu(this,e,t)},xr.prototype.maximumStrict=function(e){return this.throwIfDisposed(),Fh(this,e)},xr.prototype.maximum=function(e){return this.throwIfDisposed(),Xo(this,e)},xr.prototype.mean=function(e,t){return this.throwIfDisposed(),tc(this,e,t)},xr.prototype.min=function(e,t){return this.throwIfDisposed(),nc(this,e,t)},xr.prototype.minimumStrict=function(e){return this.throwIfDisposed(),_h(this,e)},xr.prototype.minimum=function(e){return this.throwIfDisposed(),sc(this,e)},xr.prototype.mirrorPad=function(e,t){return this.throwIfDisposed(),rc(this,e,t)},xr.prototype.modStrict=function(e){return this.throwIfDisposed(),Oh(this,e)},xr.prototype.mod=function(e){return this.throwIfDisposed(),ac(this,e)},xr.prototype.mulStrict=function(e){return this.throwIfDisposed(),Mh(this,e)},xr.prototype.mul=function(e){return this.throwIfDisposed(),Co(this,e)},xr.prototype.neg=function(){return this.throwIfDisposed(),Fu(this)},xr.prototype.norm=function(e,t,n){return this.throwIfDisposed(),Wh(this,e,t,n)},xr.prototype.notEqualStrict=function(e){return this.throwIfDisposed(),Ah(this,e)},xr.prototype.notEqual=function(e){return this.throwIfDisposed(),uc(this,e)},xr.prototype.oneHot=function(e,t=1,n=0){return this.throwIfDisposed(),pi(this,e,t,n)},xr.prototype.onesLike=function(){return this.throwIfDisposed(),pc(this)},xr.prototype.pad=function(e,t){return this.throwIfDisposed(),fc(this,e,t)},xr.prototype.pool=function(e,t,n,s,r){return this.throwIfDisposed(),wc(this,e,t,n,s,r)},xr.prototype.powStrict=function(e){return this.throwIfDisposed(),Lh(this,e)},xr.prototype.pow=function(e){return this.throwIfDisposed(),Vo(this,e)},xr.prototype.prelu=function(e){return this.throwIfDisposed(),kc(this,e)},xr.prototype.prod=function(e,t){return this.throwIfDisposed(),vc(this,e,t)},xr.prototype.reciprocal=function(){return this.throwIfDisposed(),Fc(this)},xr.prototype.relu=function(){return this.throwIfDisposed(),_c(this)},xr.prototype.relu6=function(){return this.throwIfDisposed(),Oc(this)},xr.prototype.reshapeAs=function(e){return this.throwIfDisposed(),Sl(this,e.shape)},xr.prototype.reshape=function(e){return this.throwIfDisposed(),Sl(this,e)},xr.prototype.resizeBilinear=function(e,t,n){return this.throwIfDisposed(),Cp(this,e,t,n)},xr.prototype.resizeNearestNeighbor=function(e,t,n){return this.throwIfDisposed(),$p(this,e,t,n)},xr.prototype.reverse=function(e){return this.throwIfDisposed(),Mc(this,e)},xr.prototype.rfft=function(){return this.throwIfDisposed(),rh(this)},xr.prototype.round=function(){return this.throwIfDisposed(),Wc(this)},xr.prototype.rsqrt=function(){return this.throwIfDisposed(),Vc(this)},xr.prototype.selu=function(){return this.throwIfDisposed(),Uc(this)},xr.prototype.separableConv2d=function(e,t,n,s,r,a){return this.throwIfDisposed(),Gc(this,e,t,n,s,r,a)},xr.prototype.sigmoid=function(){return this.throwIfDisposed(),El(this)},xr.prototype.sign=function(){return this.throwIfDisposed(),jc(this)},xr.prototype.sin=function(){return this.throwIfDisposed(),qc(this)},xr.prototype.sinh=function(){return this.throwIfDisposed(),Kc(this)},xr.prototype.slice=function(e,t){return this.throwIfDisposed(),Al(this,e,t)},xr.prototype.softmax=function(e){return this.throwIfDisposed(),Qc(this,e)},xr.prototype.softplus=function(){return this.throwIfDisposed(),_u(this)},xr.prototype.spaceToBatchND=function(e,t){return this.throwIfDisposed(),xc(this,e,t)},xr.prototype.split=function(e,t){return this.throwIfDisposed(),sh(this,e,t)},xr.prototype.sqrt=function(){return this.throwIfDisposed(),$o(this)},xr.prototype.square=function(){return this.throwIfDisposed(),To(this)},xr.prototype.squaredDifference=function(e){return this.throwIfDisposed(),ah(this,e)},xr.prototype.squaredDifferenceStrict=function(e){return this.throwIfDisposed(),zh(this,e)},xr.prototype.squeeze=function(e){return this.throwIfDisposed(),ih(this,e)},xr.prototype.stack=function(e,t){this.throwIfDisposed();const n=e instanceof xr?[this,e]:[this,...e];return oh(n,t)},xr.prototype.step=function(e){return this.throwIfDisposed(),lh(this,e)},xr.prototype.stridedSlice=function(e,t,n,s,r,a,i,o){return this.throwIfDisposed(),uh(this,e,t,n,s,r,a,i,o)},xr.prototype.subStrict=function(e){return this.throwIfDisposed(),Ph(this,e)},xr.prototype.sub=function(e){return this.throwIfDisposed(),Uo(this,e)},xr.prototype.sum=function(e,t){return this.throwIfDisposed(),Lu(this,e,t)},xr.prototype.tan=function(){return this.throwIfDisposed(),ch(this)},xr.prototype.tanh=function(){return this.throwIfDisposed(),Rl(this)},xr.prototype.tile=function(e){return this.throwIfDisposed(),gu(this,e)},xr.prototype.toBool=function(){return this.throwIfDisposed(),Ha(this,"bool")},xr.prototype.toFloat=function(){return this.throwIfDisposed(),Ha(this,"float32")},xr.prototype.toInt=function(){return this.throwIfDisposed(),Ha(this,"int32")},xr.prototype.topk=function(e,t){return this.throwIfDisposed(),gh(this,e,t)},xr.prototype.transpose=function(e){return this.throwIfDisposed(),di(this,e)},xr.prototype.unique=function(e){return this.throwIfDisposed(),bh(this,e)},xr.prototype.unsortedSegmentSum=function(e,t){return this.throwIfDisposed(),xh(this,e,t)},xr.prototype.unstack=function(e){return this.throwIfDisposed(),wh(this,e)},xr.prototype.where=function(e,t){return this.throwIfDisposed(),lu(e,this,t)},xr.prototype.zerosLike=function(){return this.throwIfDisposed(),Eo(this)};class Jf extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Jf.prototype)}}class Zf extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Zf.prototype)}}class Qf extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Qf.prototype)}}class em extends Error{constructor(e){super(e),Object.setPrototypeOf(this,em.prototype)}}class tm extends Error{constructor(e){super(e),Object.setPrototypeOf(this,tm.prototype)}}class nm extends Error{constructor(e){super(e),Object.setPrototypeOf(this,nm.prototype)}}function sm(e,t){if(Array.isArray(e)){let n=[];for(let s=0;s<t;s++)n=n.concat(e);return n}{const n=new Array(t);return n.fill(e),n}}function rm(e,t){if(!e)throw new tm(t)}function am(e,t){let n=0;for(const s of e)s===t&&n++;return n}function im(e){return 1===e.length?e[0]:e}function om(e){return Array.isArray(e)?e:[e]}function lm(e){const t=e.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==t[0]?t:"private"+t}function um(e){return e.length<=1||-1===e.indexOf("_")?e:e.replace(/[_]+(\w|$)/g,((e,t)=>t.toUpperCase()))}let cm={};function hm(e){if(null==e)return null;const t={};return t.className=e.getClassName(),t.config=e.getConfig(),t}function pm(e){if(null!=e&&"object"==typeof e)if(Array.isArray(e))e.forEach((e=>pm(e)));else{const t=Object.keys(e);for(const n of t){const t=e[n];null!=t&&"object"==typeof t&&(Array.isArray(t)||"ndarray"!==t.type||"number"!=typeof t.value?pm(t):e[n]=t.value)}}}function dm(e,t={},n={},s="object",r=!1){if("string"==typeof e){const r=e;let a;if(r in n)a=n[r];else if(r in cm)a=cm[r];else if(a=t[r],null==a)throw new Qf(`Unknown ${s}: ${e}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return a}{const a=e;if(null==a.className||null==a.config)throw new Qf(`${s}: Improper config format: ${JSON.stringify(a)}.\n'className' and 'config' must set.`);const i=a.className;let o,l;if(i in n?[o,l]=n[i]:i in cm?[o,l]=cm.className:i in t&&([o,l]=t[i]),null==o)throw new Qf(`Unknown ${s}: ${i}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=l){const e={};for(const t of Object.keys(cm))e[t]=cm[t];for(const t of Object.keys(n))e[t]=n[t];a.config.customObjects=e;const t=Object.assign({},cm);for(const e of Object.keys(n))cm[e]=n[e];pm(a.config);const s=l(o,a.config,n,r);return cm=Object.assign({},t),s}{const e=Object.assign({},cm);for(const e of Object.keys(n))cm[e]=n[e];const t=new o(a.config);return cm=Object.assign({},e),t}}}function fm(e,t){return-1*function(e,t){return e<t?-1:e>t?1:0}(e,t)}function mm(e){if(null==e)return e;const t=[];for(const n of e)-1===t.indexOf(n)&&t.push(n);return t}function gm(e){if(null==e)throw new Qf(`Invalid value in obj: ${JSON.stringify(e)}`);for(const t in e)if(e.hasOwnProperty(t))return!1;return!0}function ym(e,t,n){if(null!=n&&e.indexOf(n)<0)throw new Qf(`${n} is not a valid ${t}.  Valid values are ${e} or null/undefined.`)}function bm(e,t,n=0,s=1/0){return rm(n>=0),rm(s>=n),Array.isArray(e)&&e.length>=n&&e.length<=s&&e.every((e=>typeof e===t))}function xm(e,t){Array.isArray(e)?(Z(e.length>0,(()=>`${t} is unexpectedly an empty array.`)),e.forEach(((e,n)=>xm(e,`element ${n+1} of ${t}`)))):Z(Number.isInteger(e)&&e>0,(()=>`Expected ${t} to be a positive integer, but got ${wm(e)}.`))}function wm(e){return null===e?"null":Array.isArray(e)?"["+e.map((e=>wm(e))).join(",")+"]":"string"==typeof e?`"${e}"`:`${e}`}function km(e){return"relu"===e?"relu":"linear"===e?"linear":"elu"===e?"elu":null}function vm(e,t){return uo((()=>$o(Lu(Co(e,e),t,!0))))}class Im extends Pi{getConfig(){return{}}}class Nm extends Im{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return uo((()=>{const t=vm(e,this.axis),n=Wl(t,0,this.maxValue);return Co(e,So(n,Io(Yf(),t)))}))}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}Nm.className="MaxNorm",Wi(Nm);class Sm extends Im{constructor(e){super(),this.defaultAxis=0,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return uo((()=>So(e,Io(Yf(),vm(e,this.axis)))))}getConfig(){return{axis:this.axis}}}Sm.className="UnitNorm",Wi(Sm);class Cm extends Im{apply(e){return _c(e)}}Cm.className="NonNeg",Wi(Cm);class $m extends Im{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=e.minValue?e.minValue:this.defaultMinValue,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.rate=null!=e.rate?e.rate:this.defaultRate,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return uo((()=>{const t=vm(e,this.axis),n=Io(Co(this.rate,Wl(t,this.minValue,this.maxValue)),Co(1-this.rate,t));return Co(e,So(n,Io(Yf(),t)))}))}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}$m.className="MinMaxNorm",Wi($m);const Tm={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function Em(e){return hm(e)}function Am(e,t={}){return dm(e,Bi.getMap().classNameMap,t,"constraint")}function Rm(e){return null==e?null:"string"==typeof e?Am({className:e in Tm?Tm[e]:e,config:{}}):e instanceof Im?e:Am(e)}function Dm(e){return new Nm(e)}function Fm(e){return new Sm(e)}function _m(){return new Cm}function Om(e){return new $m(e)}const Mm=["channelsFirst","channelsLast"],Lm=["nearest","bilinear"],zm=["valid","same","causal"],Pm=["max","avg"],Bm=["sum","mul","concat","ave"],Wm=new Map;function Vm(e){ym(Mm,"DataFormat",e)}function Um(e){ym(zm,"PaddingMode",e)}function Gm(e){ym(Pm,"PoolMode",e)}const Hm=[],jm="/";function qm(e,t){Hm.push(e);try{const e=t();return Hm.pop(),e}catch(e){throw Hm.pop(),e}}function Km(e){if(!Jm(e))throw new Error("Not a valid tensor name: '"+e+"'");return(0===Hm.length?"":Hm.join(jm)+jm)+e}function Xm(e){if(!Jm(e))throw new Error("Not a valid tensor name: '"+e+"'");Wm.has(e)||Wm.set(e,0);const t=Wm.get(e);if(Wm.set(e,Wm.get(e)+1),t>0){const n=`${e}_${t}`;return Wm.set(n,1),n}return e}const Ym=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function Jm(e){return!!e.match(Ym)}function Zm(e,t,n){null==t&&(t=0),null==n&&(n=e.length);let s=1;for(let r=t;r<n;++r)s*=e[r];return s}function Qm(e){return hh(e=Array.isArray(e)?new Float32Array(e):e)}function eg(e){return nc(Qm(e)).dataSync()[0]}function tg(e){return Mu(Qm(e)).dataSync()[0]}function ng(e,t){if(t<e)throw new Qf(`end (${t}) < begin (${e}) is forbidden.`);const n=[];for(let s=e;s<t;++s)n.push(s);return n}function sg(e,t){return e.asType(t)}function rg(e,t=-1){const n=e.shape.slice();return t<0&&(t=n.length+t+1),n.splice(t,0,1),e.reshape(n)}function ag(e,t,n){return uo((()=>{switch(e.rank){case 1:return Xc(e,t,n);case 2:return Yc(e,[t,0],[n,e.shape[1]]);case 3:return Jc(e,[t,0,0],[n,e.shape[1],e.shape[2]]);case 4:return Zc(e,[t,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3]]);case 5:return Al(e,[t,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4]]);case 6:return Al(e,[t,0,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4],e.shape[5]]);default:throw new Qf(`sliceAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function ig(e,t,n){return uo((()=>{switch(e.rank){case 1:return Xc(e,t,n);case 2:return Yc(e,[0,t],[e.shape[0],n]);case 3:return Jc(e,[0,0,t],[e.shape[0],e.shape[1],n]);case 4:return Zc(e,[0,0,0,t],[e.shape[0],e.shape[1],e.shape[2],n]);default:throw new Qf(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function og(e,t,n,s){return uo((()=>{switch(e.rank){case 1:return Xc(e,t,n);case 2:switch(s){case 1:return ag(e,t,n);case 2:return ig(e,t,n);default:throw new Qf(`The axis is not within the rank of the tensor ${s}`)}case 3:switch(s){case 1:return ag(e,t,n);case 2:return Jc(e,[0,t,0],[e.shape[0],n,e.shape[2]]);case 3:return ig(e,t,n);default:throw new Qf(`The axis is not within the rank of the tensor ${s}`)}case 4:switch(s){case 1:return ag(e,t,n);case 2:return Zc(e,[0,t,0,0],[e.shape[0],n,e.shape[2],e.shape[3]]);case 3:return Zc(e,[0,0,t,0],[e.shape[0],e.shape[1],n,e.shape[3]]);case 4:return ig(e,t,n);default:throw new Qf(`The axis is not within the rank of the tensor ${s}`)}default:throw new Qf(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function lg(e,t=-1){let n;return t<0&&(n=e[0].rank,t=0!==n?n:0),t===e[0].rank&&(t=-1),Tl(e,t)}function ug(e,t){switch(e.rank){case 1:return Vl([e,t]);case 2:return Ul([e,t],0);case 3:return Gl([e,t],0);case 4:return Hl([e,t],0);default:throw new Qf(`concatAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}function cg(e,t){if(Array.isArray(t)||(t=[t]),e.rank!==t.length)throw new Qf(`The length of input n (${t.length}) does not match the number of dimensions in input x (${e.rank})`);return gu(e,t)}function hg(e,t=0,n=1,s,r){return Ec(e,t,n,s,r)}function pg(e,t,n,s){if(e.rank<2||t.rank<2)throw new em(`dot requires both inputs to be rank >= 2 but got x shape = ${e.shape} and y shape = ${t.shape}`);if(t.rank>=3&&e.shape.slice(-1)[0]!==t.shape.slice(-2)[0])throw new em(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${e.shape} and  y shape = ${t.shape}`);if(2===e.rank&&2===t.rank)return ap({a:e,b:t,transposeA:!1,transposeB:!1,bias:s?mg(e.rank,s,"channelsLast"):null,activation:n});{const r=e.shape.slice(),a=r.pop();e=e.reshape([-1,a]);const i=t.shape.slice(),o=i.pop(),l=i.pop(),u=[...i,o],c=Array.from({length:t.rank},((e,n)=>0===n?t.rank-2:n<=t.rank-2?n-1:n));t=t.transpose(c).reshape([l,-1]);const h=[...r,...u];return ap({a:e,b:t,transposeA:!1,transposeB:!1,bias:s?mg(e.rank,s,"channelsLast"):null,activation:n}).reshape(h)}}function dg(e,t,n){return uo((()=>(t=Array.isArray(t)?hh(t,"int32"):t.toInt(),xu(e,t,n))))}function fg(e){return Co(e,e)}function mg(e,t,n){const s=t.shape;if(1!==t.rank&&t.rank!==e)throw new Qf(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${e}`);if(5===e){if("channelsFirst"===n)return 1===s.length?t.reshape([1,s[0],1,1,1]):t.reshape([1,s[3],s[0],s[1],s[2]]);if("channelsLast"===n)return 1===s.length?t.reshape([1,1,1,1,s[0]]):t.reshape([1].concat(s))}else if(4===e){if("channelsFirst"===n)return 1===s.length?t.reshape([1,s[0],1,1]):t.reshape([1,s[2],s[0],s[1]]);if("channelsLast"===n)return 1===s.length?t.reshape([1,1,1,s[0]]):t.reshape([1].concat(s))}else if(3===e){if("channelsFirst"===n)return 1===s.length?t.reshape([1,s[0],1]):t.reshape([1,s[1],s[0]]);if("channelsLast"===n)return 1===s.length?t.reshape([1,1,s[0]]):t.reshape([1].concat(s))}else if(e<3)return t;throw new Qf(`Unsupported input rank by biasAdd: ${t.rank}`)}function gg(e,t,n){return uo((()=>(null==n&&(n="channelsLast"),Vm(n),e.add(mg(e.rank,t,n)))))}function yg(e,t,n,s){return uo((()=>jh(e,t,n,s)))}function bg(e,t,n=!1){return n?e():t()}const xg=["fanIn","fanOut","fanAvg"],wg=["normal","uniform","truncatedNormal"];class kg extends Pi{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class vg extends kg{apply(e,t){return cc(e,t)}}vg.className="Zeros",Wi(vg);class Ig extends kg{apply(e,t){return hc(e,t)}}Ig.className="Ones",Wi(Ig);class Ng extends kg{constructor(e){if(super(),"object"!=typeof e)throw new Qf(`Expected argument of type ConstantConfig but got ${e}`);if(void 0===e.value)throw new Qf(`config must have value set but got ${e}`);this.value=e.value}apply(e,t){return uo((()=>Co(Lo(this.value),hc(e,t))))}getConfig(){return{value:this.value}}}Ng.className="Constant",Wi(Ng);class Sg extends kg{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,t){return Ac(e,this.minval,this.maxval,t)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}Sg.className="RandomUniform",Wi(Sg);class Cg extends kg{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new em(`randomNormal does not support dType ${t}.`);return hg(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}Cg.className="RandomNormal",Wi(Cg);class $g extends kg{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new em(`truncatedNormal does not support dType ${t}.`);return yh(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}$g.className="TruncatedNormal",Wi($g);class Tg extends kg{constructor(e){super(),this.gain=null!=e.gain?e.gain:1}apply(e,t){return uo((()=>{if(2!==e.length||e[0]!==e[1])throw new Qf("Identity matrix initializer can only be used for 2D square matrices.");return Co(this.gain,yu(e[0]))}))}getConfig(){return{gain:this.gain}}}Tg.className="Identity",Wi(Tg);class Eg extends kg{constructor(e){if(super(),e.scale<0)throw new Qf(`scale must be a positive float. Got: ${e.scale}`);var t;this.scale=null==e.scale?1:e.scale,this.mode=null==e.mode?"fanIn":e.mode,t=this.mode,ym(xg,"FanMode",t),this.distribution=null==e.distribution?"normal":e.distribution,function(e){ym(wg,"Distribution",e)}(this.distribution),this.seed=e.seed}apply(e,t){const n=function(e,t="channelsLast"){let n,s;if(Vm(t),2===e.length)n=e[0],s=e[1];else if(-1!==[3,4,5].indexOf(e.length)){if("channelsFirst"===t){const t=Zm(e,2);n=e[1]*t,s=e[0]*t}else if("channelsLast"===t){const t=Zm(e,0,e.length-2);n=e[e.length-2]*t,s=e[e.length-1]*t}}else{const t=Zm(e);n=Math.sqrt(t),s=Math.sqrt(t)}return[n,s]}(e),s=n[0],r=n[1];let a=this.scale;if("fanIn"===this.mode?a/=Math.max(1,s):"fanOut"===this.mode?a/=Math.max(1,r):a/=Math.max(1,(s+r)/2),"normal"===this.distribution){const n=Math.sqrt(a);if("float32"!==(t=t||"float32")&&"int32"!==t)throw new em(`${this.getClassName()} does not support dType ${t}.`);return yh(e,0,n,t,this.seed)}{const n=Math.sqrt(3*a);return Ac(e,-n,n,t)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}Eg.className="VarianceScaling",Wi(Eg);class Ag extends Eg{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Eg.className}}Ag.className="GlorotUniform",Wi(Ag);class Rg extends Eg{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Eg.className}}Rg.className="GlorotNormal",Wi(Rg);class Dg extends Eg{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Eg.className}}Dg.className="HeNormal",Wi(Dg);class Fg extends Eg{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Eg.className}}Fg.className="HeUniform",Wi(Fg);class _g extends Eg{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Eg.className}}_g.className="LeCunNormal",Wi(_g);class Og extends Eg{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Eg.className}}Og.className="LeCunNormal",Wi(Og);class Mg extends kg{constructor(e){if(super(),this.DEFAULT_GAIN=1,this.gain=null==e.gain?this.DEFAULT_GAIN:e.gain,this.seed=e.seed,null!=this.seed)throw new em("Random seed is not implemented for Orthogonal Initializer yet.")}apply(e,t){return uo((()=>{if(e.length<2)throw new em("Shape must be at least 2D.");e[0]*e[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${e[0]*e[1]}) elements: Slowness may result.`);const t=hg(e[0]>e[1]?[e[1],e[0]]:e,0,1,"float32");let n=Hp.gramSchmidt(t);return e[0]>e[1]&&(n=n.transpose()),Co(this.gain,n)}))}getConfig(){return{gain:this.gain,seed:this.seed}}}Mg.className="Orthogonal",Wi(Mg);const Lg={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function zg(e,t={}){return dm(e,Bi.getMap().classNameMap,t,"initializer")}function Pg(e){return hm(e)}function Bg(e){if("string"==typeof e){const t=e in Lg?Lg[e]:e;if("GlorotNormal"===t)return new Rg;if("GlorotUniform"===t)return new Ag;if("HeNormal"===t)return new Dg;if("HeUniform"===t)return new Fg;if("LeCunNormal"===t)return new _g;if("LeCunUniform"===t)return new Og;{const e={};return e.className=t,e.config={},zg(e)}}return e instanceof kg?e:zg(e)}function Wg(){return new vg}function Vg(){return new Ig}function Ug(e){return new Ng(e)}function Gg(e){return new Sg(e)}function Hg(e){return new Cg(e)}function jg(e){return new $g(e)}function qg(e){return new Tg(e)}function Kg(e){return new Eg(e)}function Xg(e){return new Ag(e)}function Yg(e){return new Rg(e)}function Jg(e){return new Dg(e)}function Zg(e){return new Fg(e)}function Qg(e){return new _g(e)}function ey(e){return new Og(e)}function ty(e){return new Mg(e)}let ny=0;function sy(){return ny++}const ry={};function ay(e=""){return e in ry||(ry[e]=0),ry[e]+=1,e+ry[e].toString()}function iy(e){return Array.isArray(e)&&Array.isArray(e[0])}function oy(e){return 0===e.length?[]:Array.isArray(e[0])?e:[e]}function ly(e){let t;if(Array.isArray(e)){if(1!==e.length)throw new Qf(`Expected Tensor length to be 1; got ${e.length}`);t=e[0]}else t=e;return t}function uy(e){if(Array.isArray(e)&&Array.isArray(e[0])){if(1===e.length)return e[0];throw new Qf(`Expected exactly 1 Shape; got ${e.length}`)}return e}function cy(e){let t=0;for(const n of e)0===n.shape.length?t+=1:t+=n.shape.reduce(((e,t)=>e*t));return t}const hy="Variable";class py{constructor(e,t="float32",n=hy,s=!0,r=null){this.dtype=null==t?"float32":t,this.shape=e.shape,this.id=sy(),n=null==n?hy:n,this.originalName=Km(n),this.name=Xm(this.originalName),this.trainable_=s,this.constraint=r,this.val=kh(e,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(e){return this.assertNotDisposed(),function(e,t){if(e.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(e.shape)+" vs. "+JSON.stringify(t.shape))}(this.val,e),this.val.id!==e.id&&(this.val.assign(e),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(e){this.trainable_=e,this.val.trainable=e}}function dy(e){return e.map((e=>e.read()))}function fy(e){e.forEach((e=>{e[0].write(e[1])}))}class my{constructor(e){this.dtype=e.dtype,this.shape=e.shape,null!=e.shape?this.ndim=e.shape.length:this.ndim=e.ndim,this.maxNDim=e.maxNDim,this.minNDim=e.minNDim,this.axes=e.axes||{}}}class gy{constructor(e,t,n,s,r,a,i){this.dtype=e,this.shape=t,this.sourceLayer=n,this.inputs=s,this.callArgs=r,this.outputTensorIndex=i,this.id=sy(),null!=a&&(this.originalName=Km(a),this.name=Xm(this.originalName)),this.rank=t.length}}let yy=0;class by{constructor(e,t){this.callArgs=t,this.id=yy++,this.outboundLayer=e.outboundLayer,this.inboundLayers=e.inboundLayers,this.nodeIndices=e.nodeIndices,this.tensorIndices=e.tensorIndices,this.inputTensors=e.inputTensors,this.outputTensors=e.outputTensors,this.inputMasks=e.inputMasks,this.outputMasks=e.outputMasks,this.inputShapes=e.inputShapes,this.outputShapes=e.outputShapes;for(const t of e.inboundLayers)null!=t&&t.outboundNodes.push(this);e.outboundLayer.inboundNodes.push(this)}getConfig(){const e=[];for(const t of this.inboundLayers)null!=t?e.push(t.name):e.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:e,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let xy=0;class wy extends Pi{constructor(e={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=xy++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let t=e.name;if(!t){const e=this.getClassName();t=lm(e)+"_"+ay(e)}if(this.name=t,this.trainable_=null==e.trainable||e.trainable,null!=e.inputShape||null!=e.batchInputShape){let t;if(null!=e.batchInputShape)t=e.batchInputShape;else if(null!=e.inputShape){let n=null;null!=e.batchSize&&(n=e.batchSize),t=[n].concat(e.inputShape)}this.batchInputShape=t;let n=e.dtype;null==n&&(n=e.inputDType),null==n&&(n="float32"),this.dtype=n}null!=e.weights?this.initialWeights=e.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(e,t){return e.name+"_ib-"+t.toString()}getNodeAtIndex(e,t){if(0===this.inboundNodes.length)throw new Zf(`The layer has never been called and thus has no defined ${t}.`);if(this.inboundNodes.length<=e)throw new Qf(`Asked to get ${t} at node ${e}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[e]}getInputAt(e){return im(this.getNodeAtIndex(e,"input").inputTensors)}getOutputAt(e){return im(this.getNodeAtIndex(e,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new Jf(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(0===this.inboundNodes.length)throw new Jf(`Layer ${this.name} is not connected, no input to return.`);return im(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new Jf(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new Jf(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return im(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map((e=>e()))}get updates(){return this._updates}get built(){return this._built}set built(e){this._built=e}get trainable(){return this.trainable_}set trainable(e){this._trainableWeights.forEach((t=>t.trainable=e)),this.trainable_=e}get trainableWeights(){return this.trainable_?this._trainableWeights.filter((e=>e.trainable)):[]}set trainableWeights(e){this._trainableWeights=e}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter((e=>!e.trainable)).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(e){this._nonTrainableWeights=e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(e){if(e=om(e),null==this.inputSpec||0===this.inputSpec.length)return;const t=om(this.inputSpec);if(e.length!==t.length)throw new Qf(`Layer ${this.name} expects ${t.length} inputs, but it received ${e.length} input tensors. Input received: ${e}`);for(let n=0;n<e.length;n++){const s=e[n],r=t[n];if(null==r)continue;const a=s.rank;if(null!=r.ndim&&a!==r.ndim)throw new Qf(`Input ${n} is incompatible with layer ${this.name}: expected ndim=${r.ndim}, found ndim=${a}`);if(null!=r.maxNDim&&a>r.maxNDim)throw new Qf(`Input ${n} is incompatible with layer ${this.name}: expected max_ndim=${r.maxNDim}, found ndim=${a}`);if(null!=r.minNDim&&a<r.minNDim)throw new Qf(`Input ${n} is incompatible with layer ${this.name}: expected min_ndim=${r.minNDim}, found ndim=${a}.`);if(null!=r.dtype&&s.dtype!==r.dtype)throw new Qf(`Input ${n} is incompatible with layer ${this.name} : expected dtype=${r.dtype}, found dtype=${s.dtype}.`);if(r.axes){const e=s.shape;for(const t in r.axes){const s=Number(t),a=r.axes[t],i=s>=0?e[s]:e[e.length+s];if(null!=a&&-1===[a,null].indexOf(i))throw new Qf(`Input ${n} is incompatible with layer ${this.name}: expected axis ${s} of input shape to have value ${a} but got shape ${e}.`)}}if(null!=r.shape)for(let e=0;e<r.shape.length;++e){const t=r.shape[e],a=s.shape[e];if(null!=t&&null!=a&&t!==a)throw new Qf(`Input ${n} is incompatible with layer ${this.name}: expected shape=${r.shape}, found shape=${s.shape}.`)}}}call(e,t){return e}invokeCallHook(e,t){null!=this._callHook&&this._callHook(e,t)}setCallHook(e){this._callHook=e}clearCallHook(){this._callHook=null}apply(e,t){t=t||{},this.assertNotDisposed();const n=om(e);let s=!0;for(const e of n)if(!(e instanceof gy)){s=!1;break}let r=!0;for(const e of n)if(e instanceof gy){r=!1;break}if(s===r)throw new Qf("Arguments to apply() must be all SymbolicTensors or all Tensors");return qm(this.name,(()=>{if(!this.built){this.assertInputCompatibility(e);const t=[];for(const n of om(e))t.push(n.shape);this.build(im(t)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&r&&(this._refCount=1)}if(this.assertInputCompatibility(e),r){let s=this.call(e,t);const r=om(s),a=[];for(let e of r)-1!==n.indexOf(e)&&(e=e.clone()),a.push(e);if(s=im(a),null!=this.activityRegularizer)throw new em("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return s}{const n=function(e){e=om(e);const t=[];for(const n of e)t.push(n.shape);return im(t)}(e),s=this.computeOutputShape(n);let r;const a="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(e)?n[0]:n),r=null!=s&&s.length>0&&Array.isArray(s[0])?s.map(((n,s)=>new gy(a,n,this,om(e),t,this.name,s))):new gy(a,s,this,om(e),t,this.name),this.addInboundNode(e,r,null,null,n,s,t),this._refCount++,null!=this.activityRegularizer)throw new em("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return r}}))}warnOnIncompatibleInputShape(e){if(null!=this.batchInputShape)if(e.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(e)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let t=!1;this.batchInputShape.forEach(((n,s)=>{null!=n&&null!=e[s]&&e[s]!==n&&(t=!0)})),t&&console.warn(`The shape of the input tensor (${JSON.stringify(e)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new Jf(`The layer ${this.name} has never been called and thus has no defined output shape.`);const e=[];for(const t of this.inboundNodes){const n=JSON.stringify(t.outputShapes);-1===e.indexOf(n)&&e.push(n)}if(1===e.length){const e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&1===e.length?e[0]:e}throw new Jf(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new Zf(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return cy(this.weights)}build(e){this.built=!0}getWeights(e=!1){return dy(e?this.trainableWeights:this.weights)}setWeights(e){uo((()=>{const t=this.weights;if(t.length!==e.length)throw new Qf(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${e.length}, but the layer was expecting ${t.length} weights. Provided weights: ${e}...`);if(0===t.length)return;const n=[],s=dy(t);for(let r=0;r<s.length;++r){const a=s[r],i=t[r],o=e[r];if(!re(a.shape,o.shape))throw new Qf(`Layer weight shape ${a.shape} not compatible with provided weight shape ${o.shape}`);n.push([i,o])}fy(n)}))}addWeight(e,t,n,s,r,a,i){if(-1!==this._addedWeightNames.indexOf(e))throw new Qf(`Duplicate weight name ${e} for layer ${this.name}`);this._addedWeightNames.push(e),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(s=Bg("zeros"));const o=s.apply(t,n),l=new py(o,n,e,a,i);return o.dispose(),null!=r&&this.addLoss((()=>r.apply(l.read()))),null==a&&(a=!0),a?this._trainableWeights.push(l):this._nonTrainableWeights.push(l),l}setFastWeightInitDuringBuild(e){this.fastWeightInitDuringBuild=e}addLoss(e){null==e||Array.isArray(e)&&0===e.length||(e=om(e),void 0!==this._losses&&null!==this._losses&&this.losses.push(...e))}computeOutputShape(e){return e}computeMask(e,t){if(!this.supportsMasking){if(null!=t){if(!Array.isArray(t))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);t.forEach((e=>{if(null!=e)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)}))}return null}return t}addInboundNode(e,t,n,s,r,a,i=null){const o=om(e);t=om(t),n=om(n),s=om(s),r=oy(r),a=oy(a);const l=[],u=[],c=[];for(const e of o)l.push(e.sourceLayer),u.push(e.nodeIndex),c.push(e.tensorIndex);new by({outboundLayer:this,inboundLayers:l,nodeIndices:u,tensorIndices:c,inputTensors:o,outputTensors:t,inputMasks:n,outputMasks:s,inputShapes:r,outputShapes:a},i);for(let e=0;e<t.length;e++)t[e].sourceLayer=this,t[e].nodeIndex=this.inboundNodes.length-1,t[e].tensorIndex=e}getConfig(){const e={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(e.batchInputShape=this.batchInputShape),null!=this.dtype&&(e.dtype=this.dtype),e}disposeWeights(){return this.weights.forEach((e=>e.dispose())),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let e=0;return 0==--this._refCount&&(e=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:e}}}function ky(e,t,n){if((null==t||null!=n&&n>0)&&(t=e.sourceLayer,n=e.nodeIndex),0===t.inboundNodes.length)return[e];{const e=t.inboundNodes[n];if(0===e.inboundLayers.length)return e.inputTensors;{const t=[];for(let n=0;n<e.inboundLayers.length;n++){const s=ky(e.inputTensors[n],e.inboundLayers[n],e.nodeIndices[n]);for(const e of s)-1===t.indexOf(e)&&t.push(e)}return t}}}class vy extends wy{constructor(e){if(super({dtype:e.dtype,name:null!=e.name?e.name:ay("input").toString()}),null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new Qf("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let t=e.batchInputShape;if(null==t){if(null==e.inputShape)throw new Qf("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");t=[e.batchSize].concat(e.inputShape)}else if(null!=e.batchSize)throw new Qf("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const n=e.dtype||"float32";this.batchInputShape=t,this.dtype=n,this.inputSpec=[{shape:t}];const s=new gy(this.dtype,this.batchInputShape,this,[],{},this.name);s.nodeIndex=0,s.tensorIndex=0,new by({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[s],outputTensors:[s],inputMasks:[null],outputMasks:[null],inputShapes:[t],outputShapes:[t]})}apply(e,t){throw new Qf(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}function Iy(e){if(null==e.batchShape&&null==e.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=e.batchShape&&null!=e.shape)throw new Qf("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=e.batchShape;null!=e.shape&&null==t&&(t=[null].concat(e.shape));let n=e.dtype;return null==n&&(n="float32"),new vy({batchInputShape:t,name:e.name,dtype:n,sparse:e.sparse}).inboundNodes[0].outputTensors[0]}async function Ny(e){if(null==e)return;const t=[],n=[],s=[];for(const r in e){const a=e[r];if("number"!=typeof a){const e=a;t.push(e.data()),n.push(r),s.push(e)}}if(t.length>0){const r=await Promise.all(t);for(let t=0;t<r.length;++t)e[n[t]]=r[t][0];co(s)}}function Sy(e){if(null!=e)for(const t in e){const n=e[t];"number"!=typeof n&&n.dispose()}}var Cy;vy.className="InputLayer",Wi(vy),function(e){e[e.SILENT=0]="SILENT",e[e.VERBOSE=1]="VERBOSE"}(Cy||(Cy={}));class $y{constructor(){this.validationData=null}setParams(e){this.params=e}async onEpochBegin(e,t){}async onEpochEnd(e,t){}async onBatchBegin(e,t){}async onBatchEnd(e,t){}async onTrainBegin(e){}async onTrainEnd(e){}setModel(e){}}class Ty{constructor(e,t=10){null==e&&(e=[]),this.callbacks=e,this.queueLength=t}append(e){this.callbacks.push(e)}setParams(e){for(const t of this.callbacks)t.setParams(e)}setModel(e){for(const t of this.callbacks)t.setModel(e)}async onEpochBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochBegin(e,t)}async onEpochEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochEnd(e,t)}async onBatchBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchBegin(e,t)}async onBatchEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchEnd(e,t)}async onTrainBegin(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainBegin(e)}async onTrainEnd(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainEnd(e)}}class Ey extends $y{constructor(){super()}async onEpochBegin(e){this.seen=0,this.totals={}}async onBatchEnd(e,t){null==t&&(t={});const n=null==t.size?0:t.size;this.seen+=n;for(const e in t){const s=t[e];if("number"==typeof s)this.totals.hasOwnProperty(e)||(this.totals[e]=0),this.totals[e]=this.totals[e]+s*n;else{let t;e in this.totals?t=this.totals[e]:this.totals[e]=0;const r=uo((()=>Io(this.totals[e],Co(s,n))));this.totals[e]=r,null!=t&&t.dispose()}}}async onEpochEnd(e,t){if(null!=t)for(const e of this.params.metrics)null!=this.totals[e]&&("number"==typeof this.totals[e]?t[e]=this.totals[e]/this.seen:uo((()=>{const n=Co(So(1,this.seen),this.totals[e]);t[e]=n,this.totals[e].dispose(),ho(t[e])})))}}class Ay extends $y{async onTrainBegin(e){this.epoch=[],this.history={}}async onEpochEnd(e,t){null==t&&(t={}),this.epoch.push(e);for(const e in t)null==this.history[e]&&(this.history[e]=[]),this.history[e].push(t[e])}async syncData(){const e=[],t=[],n=[];for(const s in this.history){const r=this.history[s];for(let a=0;a<r.length;++a)if("number"!=typeof r[a]){const i=r[a];e.push(i.data()),t.push(s),n.push(a)}}const s=await Promise.all(e);for(let e=0;e<s.length;++e)this.history[t[e]][n[e]].dispose(),this.history[t[e]][n[e]]=s[e][0]}}class Ry extends $y{constructor(e,t){if(super(),this.currentEpoch=0,this.yieldEvery=t||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=e.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");Ne(this.yieldEvery)&&(this.maybeWait=function(e,t){let n,s=hr();return(...r)=>{const a=hr();return a-s<t||(s=a,n=e(...r)),n}}(this.maybeWait.bind(this),this.yieldEvery)),this.trainBegin=e.onTrainBegin,this.trainEnd=e.onTrainEnd,this.epochBegin=e.onEpochBegin,this.epochEnd=e.onEpochEnd,this.batchBegin=e.onBatchBegin,this.batchEnd=e.onBatchEnd,this.yield=e.onYield}async maybeWait(e,t,n){const s=[];null!=this.yield&&(await Ny(n),s.push(this.yield(e,t,n))),s.push(Yp()),await Promise.all(s)}async onEpochBegin(e,t){this.currentEpoch=e,null!=this.epochBegin&&(await Ny(t),await this.epochBegin(e,t))}async onEpochEnd(e,t){const n=[];null!=this.epochEnd&&(await Ny(t),n.push(this.epochEnd(e,t))),"epoch"===this.yieldEvery&&n.push(Yp()),await Promise.all(n)}async onBatchBegin(e,t){null!=this.batchBegin&&(await Ny(t),await this.batchBegin(e,t))}async onBatchEnd(e,t){const n=[];null!=this.batchEnd&&(await Ny(t),n.push(this.batchEnd(e,t))),"batch"===this.yieldEvery?n.push(Yp()):Ne(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,e,t)),await Promise.all(n)}async onTrainBegin(e){null!=this.trainBegin&&(await Ny(e),await this.trainBegin(e))}async onTrainEnd(e){null!=this.trainEnd&&(await Ny(e),await this.trainEnd(e))}}function Dy(e,t){return null==e&&(e={}),e instanceof $y?[e]:Array.isArray(e)&&e[0]instanceof $y?e:om(e).map((e=>new Ry(e,t)))}class Fy{constructor(){}static registerCallbackConstructor(e,t){Z(e>=0&&Number.isInteger(e),(()=>`Verbosity level is expected to be an integer >= 0, but got ${e}`)),Fy.checkForDuplicate(t),null==Fy.constructors[e]&&(Fy.constructors[e]=[]),Fy.constructors[e].push(t)}static checkForDuplicate(e){for(const t in Fy.constructors)Fy.constructors[+t].forEach((t=>{if(t===e)throw new Qf("Duplicate callback constructor.")}))}static clear(){Fy.constructors={}}static createCallbacks(e){const t=[];for(const n in Fy.constructors){const s=+n;e>=s&&t.push(...Fy.constructors[s])}return t.map((e=>new e))}}function _y(e,t,n,s,r,a,i,o,l){const u=new Ay,c=[new Ey,...Fy.createCallbacks(t)];null!=e&&c.push(...e),c.push(u);const h=new Ty(c);return h.setParams({epochs:n,initialEpoch:s,samples:r,steps:a,batchSize:i,verbose:t,doValidation:o,metrics:l}),{callbackList:h,history:u}}function Oy(e,t={},n=!1){return dm(e,Bi.getMap().classNameMap,t,"layer",n)}function My(e,t){return uo((()=>{"float32"!==e.dtype&&(e=e.asType("float32"));const n=Lu(fg(e),t,!0),s=Bo(n.shape,Yf()),r=$o(Xo(n,s));return So(e,r)}))}function Ly(e,t){return uo((()=>tc(fg(Uo(t,e)),-1)))}function zy(e,t){return uo((()=>tc(Ho(Uo(t,e)),-1)))}function Py(e,t){return uo((()=>{const n=Uo(e,t),s=Wl(Ho(e),Yf(),Number.MAX_VALUE),r=Ho(So(n,s));return Co(100,tc(r,-1))}))}function By(e,t,n=!1){return uo((()=>{if(n)t=Qc(t);else{const e=Lu(t,t.shape.length-1,!0);t=So(t,e)}return t=Wl(t,Yf(),1-Yf()),Fu(Lu(Co(e.toFloat(),Ru(t)),t.shape.length-1))}))}function Wy(e,t,n=!1){return uo((()=>{const s=bu(function(e){const t=[Zm(e.shape)];return e.reshape(t)}(e)).toInt(),r=(t=Wl(t,Yf(),1-Yf())).shape;return By(pi(s,r[r.length-1]).reshape(r),t,n)}))}function Vy(e,t){return uo((()=>{let n;return n=Wl(t,Yf(),1-Yf()),n=Ru(So(n,Uo(1,n))),tc(function(e,t){if(!re(e.shape,t.shape))throw new Qf(`logits and labels must have the same shape, but got shapes ${JSON.stringify(e.shape)} and ${JSON.stringify(t.shape)}`);return uo((()=>{const n=t.relu(),s=t.abs().neg();return n.sub(t.mul(e)).add(s.exp().log1p())}))}(e,n),-1)}))}function Uy(e,t){return uo((()=>{const n=My(e,-1),s=My(t,-1),r=Co(n,s);return Fu(Lu(r,-1))}))}Fy.constructors={};const Gy={meanSquaredError:Ly,meanAbsoluteError:zy,meanAbsolutePercentageError:Py,meanSquaredLogarithmicError:function(e,t){return uo((()=>{const n=Wl(t,Yf(),Number.MAX_VALUE),s=Ru(Io(1,n)),r=Wl(e,Yf(),Number.MAX_VALUE),a=Ru(Io(1,r));return tc(fg(Uo(s,a)),-1)}))},squaredHinge:function(e,t){return uo((()=>{const n=Xo(0,Uo(1,Co(e,t)));return tc(fg(n),-1)}))},hinge:function(e,t){return uo((()=>{const n=Xo(0,Uo(1,Co(e,t)));return tc(n,-1)}))},categoricalHinge:function(e,t){return uo((()=>{const n=Lu(Co(e,t),-1),s=Mu(Co(Uo(1,e),t),-1);return Xo(0,Io(1,Uo(s,n)))}))},logcosh:function(e,t){return uo((()=>{const n=Math.log(2),s=Uo(t,e),r=Uo(Io(s,_u(Co(-2,s))),n);return tc(r,-1)}))},categoricalCrossentropy:By,sparseCategoricalCrossentropy:Wy,binaryCrossentropy:Vy,kullbackLeiblerDivergence:function(e,t){return uo((()=>{const n=Wl(e,Yf(),1),s=Wl(t,Yf(),1);return Lu(Co(e,Ru(So(n,s))),-1)}))},poisson:function(e,t){return uo((()=>{const n=Ru(Io(Yf(),t));return tc(Uo(t,Co(e,n)),-1)}))},cosineProximity:Uy};function Hy(e){if("string"==typeof e){if(e in Gy)return Gy[e];let t=`Unknown loss ${e}`;throw e.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${e}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new Qf(t)}return e}function jy(e,t){return uo((()=>{const n=Co(.5,pc(t)),s=sg(wu(t,n),e.dtype);return tc(ou(e,s),-1)}))}function qy(e,t){return uo((()=>sg(ou(al(e,-1),al(t,-1)),"float32")))}function Ky(e,t){return uo((()=>Ku(e.equal(1),t.equal(1)).sum().cast("float32")))}function Xy(e,t){return uo((()=>{const n=Ky(e,t),s=function(e,t){return uo((()=>Ku(e.equal(0),t.equal(1)).sum().cast("float32")))}(e,t),r=n.add(s);return lu(wu(r,0),n.div(r),0).cast("float32")}))}function Yy(e,t){return Vy(e,t)}function Jy(e,t){return e.rank===t.rank&&(e=e.squeeze([e.rank-1])),(t=t.argMax(-1)).dtype!==e.dtype&&(t=t.asType(e.dtype)),ou(e,t).asType("float32")}const Zy=By,Qy=Wy,eb={binaryAccuracy:jy,categoricalAccuracy:qy,precision:Xy,categoricalCrossentropy:Zy,sparseCategoricalCrossentropy:Qy,mse:Ly,MSE:Ly,mae:zy,MAE:zy,mape:Py,MAPE:Py,cosine:Uy};function tb(e){if("string"==typeof e&&e in eb)return eb[e];if("string"!=typeof e&&null!=e)return e;throw new Qf(`Unknown metric ${e}`)}function nb(e){if(rm(null!==e,`Unknown LossOrMetricFn ${e}`),"string"==typeof e)return e;{let t;for(const n of Object.keys(Gy))if(Gy[n]===e){t=n;break}if(void 0!==t)return t;for(const n of Object.keys(eb))if(eb[n]===e){t=n;break}return void 0!==t?t:e.name}}const sb=1048576;function rb(e,t,n=!1){if(null==e||"object"!=typeof e||Object.getPrototypeOf(e)!==Object.prototype||!ab(e))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){const n=JSON.stringify(e);n.length>sb&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= ${sb}.`)}}function ab(e){if(null===e)return!0;if("object"==typeof e){if(Object.getPrototypeOf(e)===Object.prototype){const t=Object.keys(e);for(const n of t){if("string"!=typeof n)return!1;if(!ab(e[n]))return!1}return!0}if(Array.isArray(e)){for(const t of e)if(!ab(t))return!1;return!0}return!1}{const t=typeof e;return"string"===t||"number"===t||"boolean"===t}}function ib(e,t,n=console.log){let s="";for(let n=0;n<e.length;++n)n>0&&(s=s.slice(0,s.length-1)+" "),s+=e[n],s=s.slice(0,t[n]),s+=" ".repeat(t[n]-s.length);n(s)}function ob(e,t,n){let s;try{s=JSON.stringify(e.outputShape)}catch(e){s="multiple"}ib([`${e.name} (${e.getClassName()})`,s,e.countParams().toString()],t,n)}function lb(e,t,n,s){let r;try{r=JSON.stringify(e.outputShape)}catch(e){r="multiple"}const a=[];for(const t of e.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(t)))for(let e=0;e<t.inboundLayers.length;++e){const n=t.inboundLayers[e].name,s=t.nodeIndices[e],r=t.tensorIndices[e];a.push(`${n}[${s}][${r}]`)}const i=e.name,o=e.getClassName(),l=0===a.length?"":a[0];ib([`${i} (${o})`,r,e.countParams().toString(),l],t,s);for(let e=1;e<a.length;++e)ib(["","","",a[e]],t,s)}function ub(e,t,n){return("inboundNodes"===e||"outputLayers"===e||"inputLayers"===e)&&0===t&&"string"==typeof n}function cb(e,t){if(null===e)return null;if("string"==typeof e)return um(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],s=e.length;for(let r=0;r<s;++r){const s=e[r];ub(t,r,s)?n.push(s):n.push(cb(s,t))}return n}{const t={};for(const n of Object.keys(e)){const s=e[n];if("name"===n&&"string"==typeof s)t[n]=s;else{const e=um(n);t[e]=cb(s,e)}}return t}}function hb(e,t){if(null==e)return null;if("string"==typeof e)return lm(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],s=e.length;for(let r=0;r<s;++r){const s=e[r];ub(t,r,s)?n.push(s):n.push(hb(s,t))}return n}{const t={};for(const n of Object.keys(e)){const s=e[n];t[lm(n)]="name"!==n&&"className"!==n||"string"!=typeof s?hb(s,n):s}return t}}const pb="2.8.6";class db{constructor(e){if(this.id2Value={},this.id2Mask={},this.name2Id={},e instanceof db)for(const t in e.id2Value)this.id2Value[t]=e.id2Value[t],t in e.id2Mask&&(this.id2Mask[t]=e.id2Mask[t]);else{if(null==e)return;for(const t of e)this.add(t.key,t.value)}}add(e,t,n){if(null!=this.id2Value[e.id])throw new Qf(`Duplicate key: name=${e.name}, id=${e.id}`);return this.id2Value[e.id]=function(e,t){if(null==e.dtype||e.dtype===t.dtype)return t;try{return Ha(t,e.dtype)}catch(n){throw new Qf(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${e.name}' (${e.dtype}).`)}}(e,t),this.name2Id[e.name]=e.id,null!=n&&(this.id2Mask[e.id]=n),this}addFeed(e){this.add(e.key,e.value)}hasKey(e){return null!=this.id2Value[e.id]}names(){return Object.keys(this.name2Id)}getValue(e){if(e instanceof gy){if(null==this.id2Value[e.id])throw new Qf(`Nonexistent key: ${e.name}`);return this.id2Value[e.id]}{const t=this.name2Id[e];if(null==t)throw new Qf(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Value[t]}}getMask(e){if(e instanceof gy){if(null==this.id2Value[e.id])throw new Qf(`Nonexistent key: ${e.name}`);return this.id2Mask[e.id]}{const t=this.name2Id[e];if(null==t)throw new Qf(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Mask[t]}}disposeMasks(){null!=this.id2Mask&&co(this.id2Mask)}}const fb={},mb={};function gb(e,t,n,s){const r=null!=n&&n.training,a=Array.isArray(e),i=a?e:[e],o=i.map((e=>e.name)),l=[],u=t.names();for(const e of o)-1!==u.indexOf(e)?l.push(t.getValue(e)):l.push(null);null!=s&&(s.maxNumTensors=-1/0,s.minNumTensors=1/0);const c=o.join(",")+"|"+t.names().join(",");let h,p;if(null==fb[c]){const e=function(e,t){Z(null!=e&&e.length>0,(()=>"Expected at least one fetch, got none"));let n=[],s={};if(1===e.length){const r=bb(e[0],t);n=r.sorted,s=r.recipientMap}else{const r=new Set;for(const a of e){const{sorted:e,recipientMap:i}=bb(a,t);for(const t of e)r.has(t.name)||(n.push(t),r.add(t.name));for(const e in i)null==s[e]&&(s[e]=new Set),i[e].forEach((t=>s[e].add(t)))}}return{sorted:n,recipientCounts:yb(s)}}(i,t);h=e.sorted,p=e.recipientCounts,fb[c]=h,mb[c]=p}h=fb[c],p={},r||Object.assign(p,mb[c]);const d=new db(t);for(let e=0;e<h.length;++e){if(null!=s){const e=oo().numTensors;e>s.maxNumTensors&&(s.maxNumTensors=e),e<s.minNumTensors&&(s.minNumTensors=e)}const a=h[e],i=a.sourceLayer;if(i instanceof vy)continue;const u=[],c=[],f=[];let m=!1;for(const e of a.inputs){const n=d.getValue(e),s=d.getMask(e);u.push(n),c.push(s),null!=s&&(m=!0),r||(p[e.name]--,0!==p[e.name]||t.hasKey(e)||-1!==o.indexOf(e.name)||n.isDisposed||!0===e.sourceLayer.stateful||f.push(n))}m&&((n=n||{}).mask=c[0]);const g=om(i.apply(u,n));let y=null;i.supportsMasking&&(y=i.computeMask(u,c));const b=xb(a),x=Array.isArray(b)?b:[b];for(let e=0;e<x.length;++e){d.hasKey(x[e])||d.add(x[e],g[e],Array.isArray(y)?y[0]:y);const t=o.indexOf(x[e].name);-1!==t&&(l[t]=g[e])}r||co(f)}return d.disposeMasks(),a?l:l[0]}function yb(e){const t={};for(const n in e)t[n]=e[n].size;return t}function bb(e,t){const n=new Set,s=[],r={};for(const e of t.names())n.add(e);const a=[],i=[];for(a.push(e);a.length>0;){const e=a[a.length-1];if(n.has(e.name)){a.pop();continue}const t=i[i.length-1]===a.length-1;if(0===e.inputs.length||t)a.pop(),s.push(e),n.add(e.name),t&&i.pop();else{i.push(a.length-1);for(const t of e.inputs)null==r[t.name]&&(r[t.name]=new Set),r[t.name].add(e.name),n.has(t.name)||a.push(t)}}return{sorted:s,recipientMap:r}}function xb(e){let t;if(1===e.sourceLayer.inboundNodes.length)t=e.sourceLayer.output;else{let n=null;for(let t=0;t<e.sourceLayer.inboundNodes.length;++t)for(const s of e.sourceLayer.inboundNodes[t].outputTensors)if(s.id===e.id){n=t;break}t=e.sourceLayer.getOutputAt(n)}return t}class wb extends wy{constructor(e){if(super({}),this.containerNodes=new Set,this.name=e.name,null==this.name){const e=this.getClassName().toLowerCase();this.name=ay(e)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(e.inputs)?this.inputs=e.inputs.slice():this.inputs=[e.inputs],Array.isArray(e.outputs)?this.outputs=e.outputs.slice():this.outputs=[e.outputs],mm(this.inputs).length!==this.inputs.length)throw new Qf(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map((e=>e.name))}`);mm(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map((e=>e.name))}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const e of this.outputs){const t=e.sourceLayer,n=e.nodeIndex,s=e.tensorIndex;this.outputLayers.push(t),this.outputLayersNodeIndices.push(n),this.outputLayersTensorIndices.push(s)}for(const e of this.inputs){const t=e.sourceLayer,n=e.nodeIndex,s=e.tensorIndex;rm(0===n,"input layer has >1 nodes"),rm(0===s,"input layer has >1 tensors"),this.inputLayers.push(t),this.inputLayersNodeIndices.push(n),this.inputLayersTensorIndices.push(s)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let t=0;t<this.inputLayers.length;t++){const n=this.inputLayers[t];if(!(n instanceof vy))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${e.inputs}. Input ${t} (0-based) originates from layer type ${n.getClassName()}.`);this.inputNames.push(n.name),this.feedInputShapes.push(n.batchInputShape),this.feedInputNames.push(n.name)}for(const e of this.outputLayers)this.outputNames.push(e.name);this.internalInputShapes=this.inputs.map((e=>e.shape)),this.internalOutputShapes=this.outputs.map((e=>e.shape));const t={},n={},s={},r={},a={},i=[],o=(e,t,n,s,r,l)=>{null!=s&&null!=r&&null!=l||(s=e.sourceLayer,r=e.nodeIndex,l=e.tensorIndex);const u=s.inboundNodes[r];if(-1!==n.indexOf(u))throw new Zf(`The tensor ${e.name} at layer "${s.name}" is part of a cycle.`);if(-1!==t.indexOf(u))return;this.containerNodes.add(wb.nodeKey(s,r)),s.id in a||(a[s.id]=Object.keys(a).length),-1===n.indexOf(u)&&n.push(u);const c=u.inboundLayers.length;for(let e=0;e<c;e++){const s=u.inputTensors[e],r=u.inboundLayers[e],a=u.nodeIndices[e],i=u.tensorIndices[e];o(s,t,n,r,a,i)}for(t.push(u);n.indexOf(u)>=0;)n.splice(n.indexOf(u),1);i.push(u)},l=[],u=[];for(const e of this.outputs)o(e,l,u);const c=i.slice().reverse();for(const e of c){n[e.id]=e,e.id in t||(t[e.id]=0);let a=t[e.id];const i=null==s[e.outboundLayer.id]?0:s[e.outboundLayer.id];a=Math.max(a,i),s[e.outboundLayer.id]=a,r[e.outboundLayer.id]=e.outboundLayer,t[e.id]=a;for(let s=0;s<e.inboundLayers.length;s++){const r=e.inboundLayers[s],i=e.nodeIndices[s],o=r.inboundNodes[i],l=null==t[o.id]?0:t[o.id];t[o.id]=Math.max(a+1,l),n[o.id]=o}}const h={};for(const e in t){const s=t[e];s in h||(h[s]=[]),h[s].push(n[e])}const p={};for(const e in s){const t=s[e];t in p||(p[t]=[]),p[t].push(r[e])}let d=Object.keys(p).map((e=>parseInt(e,10))).sort(fm);this.layers=[];for(const e of d){const t=p[e];t.sort(((e,t)=>{const n=a[e.id],s=a[t.id];return n<s?-1:n>s?1:0}));for(const e of t)e instanceof wb&&this.internalContainerRefs.push(e),this.layers.push(e)}this.layersByDepth=p,d=Object.keys(h).map((e=>parseInt(e,10))).sort(fm);const f=this.inputs.slice(),m=[];for(const e of d)for(const t of h[e]){const e=t.outboundLayer;if(null!=e){for(const n of t.inputTensors)if(-1===f.indexOf(n))throw new Zf(`Graph disconnected: cannot obtain value for tensor ${n} at layer "${e.name}". The following previous layers were accessed without issue: ${m}`);for(const e of t.outputTensors)f.push(e);m.push(e.name)}}this.nodesByDepth=h;const g=this.layers.map((e=>e.name));for(const e of g){const t=g.filter((t=>t===e)).length;if(1!==t)throw new Zf(`The name "${e}" is used ${t} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(g))}this.outboundNodes=[],this.inboundNodes=[],new by({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map((e=>null)),outputMasks:this.outputs.map((e=>null)),inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs.map((e=>e.shape))}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const e={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const t of this.layers)e.numDisposedVariables+=t.dispose().numDisposedVariables;for(const t of this.internalContainerRefs)e.numDisposedVariables+=t.dispose().numDisposedVariables}return e.refCountAfterDispose=this._refCount,e}get trainable(){return this.trainable_}set trainable(e){this.layers.forEach((t=>{t._trainableWeights.forEach((t=>t.trainable=e))})),this.trainable_=e}get trainableWeights(){if(this._trainableWeights.length>0)throw new Qf("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let e=[];for(const t of this.layers)e=e.concat(t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.layers)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.layers)t.push(...e.trainableWeights);return t.concat(e)}return e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(e,t=!0){const n={};let s=0;for(const e of this.layers)for(const t of e.weights){if(null!=n[t.originalName])throw new Qf(`Duplicate weight name: ${t.originalName}`);n[t.originalName]=t,s++}const r=[];for(const s in e){let a=s;if(null==n[s]){const e=s.split("/");a=e.slice(0,-2).concat([e[e.length-1]]).join("/")}if(null!=n[a])r.push([n[a],e[s]]);else if(t)throw new Qf(`Provided weight data has no target variable: ${s}`);delete n[a]}if(t){const e=[];for(const t in n)e.push(t);if(e.length>0)throw new Qf(`${e.length} of ${s} weights are not set: ${e}`)}fy(r)}updatedConfig(){const e=this.getConfig(),t={};return t.className=this.getClassName(),t.config=e,t.kerasVersion=`tfjs-layers ${pb}`,t.backend="TensorFlow.js",t}toJSON(e,t=!0){const n=hb(this.updatedConfig());return t?JSON.stringify(n):n}call(e,t){return uo((()=>{e=om(e);const n=new db;for(let t=0;t<this.inputs.length;++t)n.add(this.inputs[t],e[t]);return gb(this.outputs,n,t)}))}computeMask(e,t){return uo((()=>{let n;return e=om(e),n=null==t?sm(null,e.length):om(t),this.runInternalGraph(e,n)[1]}))}computeOutputShape(e){const t=oy(e);if(t.length!==this.inputLayers.length)throw new Qf(`Invalid inputShape argument ${e}: model has ${this.inputLayers.length} tensor inputs.`);const n={};for(let e=0;e<t.length;e++){const s=this.inputLayers[e],r=t[e];n[s.name+"_0_0"]=r}const s=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(fm);if(s.length>1)for(const e of s){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer;if(-1!==this.inputLayers.map((e=>e.id)).indexOf(t.id))continue;const s=[];for(let t=0;t<e.inboundLayers.length;t++){const r=e.inboundLayers[t],a=e.nodeIndices[t],i=e.tensorIndices[t],o=n[`${r.name}_${a}_${i}`];s.push(o)}const r=oy(t.computeOutputShape(im(s))),a=t.inboundNodes.indexOf(e);for(let e=0;e<r.length;e++)n[`${t.name}_${a}_${e}`]=r[e]}}const r=[],a=[];for(let e=0;e<this.outputLayers.length;e++){const t=this.outputLayers[e],n=this.outputLayersNodeIndices[e],s=this.outputLayersTensorIndices[e],r=`${t.name}_${n}_${s}`;a.push(r)}for(let e=0;e<a.length;e++){const t=a[e];rm(t in n),r.push(n[t])}return im(r)}runInternalGraph(e,t){null==t&&(t=sm(null,e.length));const n={};for(let s=0;s<this.inputs.length;++s){const r=this.inputs[s],a=e[s],i=t[s];n[r.id]=[a,i]}const s=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(fm);for(const e of s){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer,s=e.inputTensors,r=e.outputTensors,a=new Array;for(const e of s)e.id in n&&a.push(n[e.id]);if(a.length===s.length){let s,i,o,l,u={};if(null!=e.callArgs&&(u=e.callArgs),1===a.length){const[e,n]=a[0];null==u.mask&&(u.mask=n),o=om(t.call(e,u)),l=om(t.computeMask(e,n)),s=[e],i=[n]}else s=a.map((e=>e[0])),i=a.map((e=>e[1])),null==u.mask&&(u.mask=i),o=om(t.call(s,u)),l=om(t.computeMask(s,i));if(t.activityRegularizer)throw new em("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let e=0;e<r.length;++e){const t=r[e],s=o[e],a=l[e];n[t.id]=[s,a]}}}}const r=[],a=[],i=[];for(const e of this.outputs){rm(e.id in n,`Could not compute output ${e.name} : ${e.id}`);const[t,s]=n[e.id];i.push(t.shape),r.push(t),a.push(s)}return[r,a,i]}buildNodeConversionMap(e){const t={};let n;for(const e of this.layers){n=e instanceof wb?1:0;for(let s=0;s<e.inboundNodes.length;s++){const r=wb.nodeKey(e,s);this.containerNodes.has(r)&&(t[r]=n,n+=1)}}return t}getLayer(e,t){if(null!=t){if(this.layers.length<=t)throw new Qf(`Was asked to retrieve layer at index ${t}, but model only has ${this.layers.length} layer(s).`);return this.layers[t]}if(null==e)throw new Qf("Provide either a layer name or layer index");for(const t of this.layers)if(t.name===e)return t;throw new Qf(`No such layer: ${e}`)}calculateLosses(){return uo((()=>{const e=[];for(const t of this.layers)for(let n=0;n<t.inboundNodes.length;++n){const s=wb.nodeKey(t,n);this.containerNodes.has(s)&&e.push(...t.calculateLosses())}return e}))}getConfig(){const e={name:this.name},t=this.buildNodeConversionMap(this.layers),n=[];for(const e of this.layers){const s=e.getClassName(),r=e.getConfig(),a=[];for(let n=0;n<e.inboundNodes.length;n++){const s=e.inboundNodes[n],r=wb.nodeKey(e,n);let i={};if(this.containerNodes.has(r)){if(s.callArgs)try{JSON.stringify(s.callArgs),i=s.callArgs}catch(t){console.warn(`Layer ${e.name} was passed non-serializable keyword arguments: ${s.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),i={}}if(s.inboundLayers.length>0){const e=[];for(let n=0;n<s.inboundLayers.length;n++){const r=s.inboundLayers[n],a=s.nodeIndices[n],o=s.tensorIndices[n];let l=t[wb.nodeKey(r,a)];null==l&&(l=0),e.push([r.name,l,o,i])}a.push(e)}}}const i={};i.name=e.name,i.className=s,i.config=r,i.inboundNodes=a,n.push(i)}e.layers=n;const s=[];for(let e=0;e<this.inputLayers.length;e++){const n=this.inputLayers[e],r=this.inputLayersNodeIndices[e],a=wb.nodeKey(n,r);if(!this.containerNodes.has(a))continue;let i=t[a];null==i&&(i=0);const o=this.inputLayersTensorIndices[e];s.push([n.name,i,o])}e.inputLayers=s;const r=[];for(let e=0;e<this.outputLayers.length;e++){const n=this.outputLayers[e],s=this.outputLayersNodeIndices[e],a=wb.nodeKey(n,s);if(!this.containerNodes.has(a))continue;let i=t[a];null==i&&(i=0);const o=this.outputLayersTensorIndices[e];r.push([n.name,i,o])}return e.outputLayers=r,e}static fromConfig(e,t,n={},s=!1){const r={},a={};function i(e,t){e.name in a?a[e.name].push(t):a[e.name]=[t]}function o(e,t){const n=[];let s;for(const a of t){const o=a[0],l=a[1],u=a[2];if(s=null==a[3]?{}:a[3],!(o in r))return void i(e,t);const c=r[o];if(c.inboundNodes.length<=l)return void i(e,t);const h=c.inboundNodes[l];n.push(h.outputTensors[u])}n.length>0&&e.apply(im(n),s)}function l(e){const n=e.name,a=Oy(e,null!=t.customObjects?t.customObjects:{});a.setFastWeightInitDuringBuild(s),r[n]=a,e.inboundNodes.forEach((e=>{if(!(e instanceof Array))throw new Qf(`Corrupted configuration, expected array for nodeData: ${e}`);i(a,e)}))}const u=t.name,c=t.layers;for(const e of c)l(e);for(;!gm(a);)for(const e of c){const t=r[e.name];if(t.name in a){const e=a[t.name];delete a[t.name];for(const n of e)o(t,n)}}const h=[],p=[],d=t.inputLayers;for(const e of d){const t=e[0],n=e[1],s=e[2];rm(t in r);const a=r[t].inboundNodes[n].outputTensors;h.push(a[s])}const f=t.outputLayers;for(const e of f){const t=e[0],n=e[1],s=e[2];rm(t in r);const a=r[t].inboundNodes[n].outputTensors;p.push(a[s])}return new e({inputs:h,outputs:p,name:u})}get stateful(){if(this._stateful)throw new Qf("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const e of this.layers)if(e.stateful)return!0;return!1}resetStates(){uo((()=>{this.layers.forEach((e=>{e.stateful&&e.resetStates()}))}))}}function kb(e,t){return function(e,t,n){const s=t.length;if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>null));if(1===s)return Array.isArray(e)&&1===e.length?e:"object"==typeof e&&t[0]in e?[e[t[0]]]:[e];if(Array.isArray(e)){if(e.length!==s)throw new Error(`Provided ${n} is an array of ${e.length} element(s), but the model has ${s} outputs. Make sure a set of weights is provided for each model output.`);return e}if("object"==typeof e&&Object.keys(e).length>0&&"object"==typeof e[Object.keys(e)[0]]){const n=[];return t.forEach((t=>{t in e?n.push(e[t]):n.push(null)})),n}throw new Error(`The model has multiple (${s}) outputs, so ${n} must be either an array with ${s} elements or an object with ${t} keys. Provided ${n} not understood: ${JSON.stringify(e)}`)}(e,t,"classWeight")}async function vb(e,t,n,s){if(null!=t||null!=s)throw new Error("Support sampleWeight is not implemented yet");if(null!=n){const t=uo((()=>{if(1===e.shape.length)return e.clone();if(2===e.shape.length){if(e.shape[1]>1){const t=1;return e.argMax(t)}if(1===e.shape[1])return e.reshape([e.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${e.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${e.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)})),s=Array.from(await t.data());co(t);const r=[];return s.forEach((e=>{if(null==n[e])throw new Error(`classWeight must contain all classes in the training data. The class ${e} exists in the data but not in classWeight`);r.push(n[e])})),hh(r,"float32")}return null}function Ib(e,t){return Co(e,t)}const Nb=32;function Sb(e,t){let n,s;const r=t;n=r.xs,s=r.ys,Z(null!=n&&null!=s,(()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`));const a=Cb("input",e.inputNames,n),i=Cb("output",e.outputNames,s),o=a[0].shape[0];Z(a.length===e.inputs.length,(()=>`LayersModel has ${e.inputs.length} inputs, but the dataset provides ${a.length} inputs.  (Expected input keys: ${JSON.stringify(e.inputNames)})`)),Z(i.length===e.outputs.length,(()=>`LayersModel has ${e.outputs.length} outputs, but the dataset provides ${i.length} outputs.  (Expected output keys: ${JSON.stringify(e.outputNames)})`));for(let t=0;t<a.length;t++)Z(a[t].shape[0]===o,(()=>`Batch size mismatch: input ${e.inputNames[t]} has ${a[t].shape[0]}; expected  ${o} based on input ${e.inputNames[0]}.`));for(let t=0;t<i.length;t++)Z(i[t].shape[0]===o,(()=>`Batch size mismatch: output ${e.outputNames[t]} has ${i[t].shape[0]}; expected  ${o} based on input ${e.inputNames[0]}.`));return{xs:a,ys:i}}function Cb(e,t,n){if(n instanceof xr)return[n];if(Array.isArray(n))return Z(n.length===t.length,(()=>`Received an array of ${n.length} Tensors, but expected ${t.length} to match the ${e} keys ${t}.`)),n;{const s=[];for(const r of t){if(null==n[r])throw new Qf(`The feature data generated by the dataset lacks the required ${e} key '${r}'.`);s.push(n[r])}return s}}function $b(e){return"function"==typeof e.iterator}function Tb(e){Z(e>0&&Number.isInteger(e),(()=>`batchSize is required to be a positive integer, but got ${e}`))}function Eb(e,t,n){return null==e?[null]:Array.isArray(e)?e.map((e=>ag(e,t,n-t))):ag(e,t,n-t)}function Ab(e,t){return uo((()=>null==e?null:Array.isArray(e)?e.map((e=>Ab(e,t))):dg(e,"int32"===t.dtype?t:t.toInt())))}function Rb(e,t){const n=[];let s=0,r=null;for(;s<e;)r=s+t,r>=e&&(r=e),n.push([s,r]),s=r;return n}function Db(e){const t=[];e instanceof xr&&(e=[e]);for(let n=0;n<e.length;++n){const s=e[n];if(1===s.rank)t.push(rg(s,1));else{if(0===s.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");t.push(s)}}return t}function Fb(e,t){if(null==e)return;const n=[];if(t instanceof xr)n.push(t.id);else if(Array.isArray(t))t.forEach((e=>n.push(e.id)));else if(null!=t)for(const e in t){const s=t[e];n.push(s.id)}const s=[];if(e instanceof xr)-1===n.indexOf(e.id)&&s.push(e);else if(Array.isArray(e))e.forEach((e=>{-1===n.indexOf(e.id)&&s.push(e)}));else if(null!=e)for(const t in e){const r=e[t];-1===n.indexOf(r.id)&&s.push(r)}s.forEach((e=>{e.isDisposed||e.dispose()}))}function _b(e){return Array.isArray(e)}function Ob(e){return!function(e){return e instanceof xr}(e)&&!_b(e)}function Mb(e,t,n,s=!0,r=""){if(null==t||0===t.length){if(null!=e){let t=!1;if(_b(e)&&e.length>0)t=!0;else if(Ob(e)){for(const n in e)if(e.hasOwnProperty(n)){t=!0;break}}else t=!0;if(t)throw new Qf(`Error when checking model ${r} expected no data, but got ${e}`)}return[]}if(null==e)return t.map((e=>null));let a;if(Ob(e)){a=[];for(const n of t){if(null==e[n])throw new Qf(`No data provided for "${n}". Need data for each key in: ${t}`);a.push(e[n])}}else if(_b(e)){if(e.length!==t.length)throw new Qf(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${e}`);a=e}else{if(t.length>1)throw new Qf(`The model ${r} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${e.shape}`);a=[e]}if(a=Db(a),null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const i=a[e];if(i.shape.length!==n[e].length)throw new Qf(`Error when checking ${r}: expected ${t[e]} to have ${n[e].length} dimension(s). but got array with shape ${i.shape}`);for(let a=0;a<n[e].length;++a){if(0===a&&!s)continue;const o=i.shape[a],l=n[e][a];if(null!=l&&l>=0&&o!==l)throw new Qf(`Error when checking ${r}: expected ${t[e]} to have shape [${n[e]}], but got array with shape [${i.shape}].`)}}return a}function Lb(e,t,n,s=!0,r=""){let a;if(Array.isArray(e)){if(e.length!==t.length)throw new Qf(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${e.length} Tensors(s).`);a=e}else{if(t.length>1)throw new Qf(`The model expects ${t.length} ${r} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(e.shape)}.`);a=[e]}if(null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const i=a[e];if(i.shape.length!==n[e].length)throw new Qf(`Error when checking ${r}: expected ${t[e]} to have ${n[e].length} dimension(s), but got array with shape ${JSON.stringify(i.shape)}`);for(let a=0;a<n[e].length;++a){if(0===a&&!s)continue;const o=i.shape[a],l=n[e][a];if(null!=l&&l!==o)throw new Qf(`Error when checking ${r}: expected ${t[e]} to have shape ${JSON.stringify(n[e])} but got array with shape ${JSON.stringify(i.shape)}.`)}}}class zb extends wb{constructor(e){super(e),this.isTraining=!1}summary(e,t,n=console.log){if(!this.built)throw new Qf("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");!function(e,t,n,s=console.log){const r=function(e){let t=!0;const n=[],s=[];for(const t in e.nodesByDepth)n.push(e.nodesByDepth[t]);for(const e of n){if(e.length>1||1===e.length&&e[0].inboundLayers.length>1){t=!1;break}s.push(...e)}if(t)for(const n of e.layers){let e=!1;for(const r of n.inboundNodes)if(-1!==s.indexOf(r)){if(e){t=!1;break}e=!0}if(!t)break}return t}(e),a=["Layer (type)","Output shape","Param #"];let i;if(r?(t=t||65,n=n||[.45,.85,1]):(t=t||98,n=n||[.33,.55,.67,1]),n[n.length-1]<=1&&(n=n.map((e=>Math.floor(t*e)))),!r){a.push("Receives inputs"),i=[];for(const t in e.nodesByDepth)i.push(...e.nodesByDepth[t])}s("_".repeat(t)),ib(a,n,s),s("=".repeat(t));const o=e.layers;for(let e=0;e<o.length;++e)r?ob(o[e],n,s):lb(o[e],n,i,s),s((e===o.length-1?"=":"_").repeat(t));e.checkTrainableWeightsConsistency();const l=function(e){let t;return t=null!=e.collectedTrainableWeights?cy(e.collectedTrainableWeights):cy(e.trainableWeights),t}(e),u=cy(e.nonTrainableWeights);s(`Total params: ${l+u}`),s(`Trainable params: ${l}`),s(`Non-trainable params: ${u}`),s("_".repeat(t))}(this,e,t,n)}compile(e){if(null==e.loss&&(e.loss=[]),this.loss=e.loss,"string"==typeof e.optimizer)this.optimizer_=function(e){const t={Adagrad:()=>Kp.adagrad(.01),Adadelta:()=>Kp.adadelta(1,.95,Yf()),Adam:()=>Kp.adam(.001,.9,.999,Yf()),Adamax:()=>Kp.adamax(.002,.9,.999,Yf(),0),RMSProp:()=>Kp.rmsprop(.001,.9,0,Yf()),SGD:()=>Kp.sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,e in t)return t[e]();throw new Qf(`Unknown Optimizer ${e}`)}(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof zo))throw new Qf("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}let t=[];if(Array.isArray(e.loss)||"string"==typeof e.loss||"function"==typeof e.loss)if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new Qf(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);const n=e.loss;t=n.map((e=>Hy(e)))}else{const n=Hy(e.loss);this.outputs.forEach((e=>{t.push(n)}))}else{e.loss=e.loss;for(const t in e.loss)if(-1===this.outputNames.indexOf(t))throw new Qf(`Unknown entry in loss dictionary: "${t}". Only expected the following keys: ${this.outputNames}`);for(const n of this.outputNames)null==e.loss[n]&&console.warn(`Output "${n}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${n} during training`),t.push(Hy(e.loss[n]))}this.lossFunctions=t,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let e=0;e<this.outputs.length;++e){const t=this.internalOutputShapes[e],n=this.outputNames[e];this.feedOutputNames.push(n),this.feedOutputShapes.push(t),this.feedLossFns.push(this.lossFunctions[e])}const n=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],qm("loss",(()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;const t=this.lossFunctions[e];this.outputs.length>1&&(this.metricsTensors.push([t,e]),this.metricsNames.push(this.outputNames[e]+"_loss"))}}));const s=function(e,t){if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>[]));let n;if("string"==typeof e||"function"==typeof e)n=[e];else{if(!Array.isArray(e)&&"object"!=typeof e)throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${e}`);n=e}if(Array.isArray(n))return t.map((e=>n));{const e=[];for(const s of t){let t=n.hasOwnProperty(s)?n[s]:[];Array.isArray(t)||(t=[t]),e.push(t)}return e}}(e.metrics,this.outputNames),r=(e,t,n)=>{this.outputNames.length>1&&(t=this.outputNames[e]+"_"+t),this.metricsNames.push(t),this.metricsTensors.push([n,e])};qm("metric",(()=>{for(let e=0;e<this.outputs.length;++e)-1===n.indexOf(e)&&(t=>{let n,s,a;for(const i of t){if("string"==typeof i&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(i)){const t=this.internalOutputShapes[e];let r;1===t[t.length-1]||this.lossFunctions[e]===Vy?-1!==["accuracy","acc"].indexOf(i)?s=jy:-1!==["crossentropy","ce"].indexOf(i)&&(s=Yy):this.lossFunctions[e]===Wy?-1!==["accuracy","acc"].indexOf(i)?s=Jy:-1!==["crossentropy","ce"].indexOf(i)&&(s=Qy):-1!==["accuracy","acc"].indexOf(i)?s=qy:-1!==["crossentropy","ce"].indexOf(i)&&(s=Zy),-1!==["accuracy","acc"].indexOf(i)?r="acc":-1!==["crossentropy","ce"].indexOf(i)&&(r="ce"),a=s,n=""+r}else{const e=tb(i);a=e,n=""+nb(i)}let t;qm(n,(()=>{t=a})),r(e,n,t)}})(s[e])})),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(e,t,n={}){const s=null==n.batchSize?32:n.batchSize;Tb(s);const r=this.standardizeUserDataXY(e,t,!0,s);try{const e=r[0].concat(r[1]);this.makeTestFunction();const t=this.testFunction;return im(this.testLoop(t,e,s,n.verbose,n.steps))}finally{Fb(r[0],e),Fb(r[1],t)}}async evaluateDataset(e,t){return this.makeTestFunction(),async function(e,t,n){const s=null!=(n=n||{}).batches,r=e.testFunction;let a=[];if(n.verbose>0)throw new em("Verbose mode is not implemented yet.");Z(!s||n.batches>0&&Number.isInteger(n.batches),(()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(n.batches)}`));const i="function"==typeof t.next?t:await t.iterator();let o=0,l=0;for(;!s||l<n.batches;){const t=await i.next();if(a=uo((()=>{if(t.value){const{xs:n,ys:s}=Sb(e,t.value),i=n.concat(s),u=uo((()=>r(i)));if(co(i),0===l)for(let e=0;e<u.length;++e)a.push(Lo(0));const c=i[0].shape[0];for(let e=0;e<u.length;++e){const t=u[e],n=a[e];a[e]=uo((()=>Io(a[e],Co(c,t)))),l>0&&co(n)}co(u),o+=c,++l}return a})),t.done){s&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let e=0;e<a.length;++e){const t=a[e];a[e]=So(a[e],o),co(t)}return im(a)}(this,e,t)}checkNumSamples(e,t,n,s="steps"){let r;if(null!=n){if(r=null,null!=t)throw new Qf(`If ${s} is set, batchSize must be null or undefined.Got batchSize = ${t}`)}else{if(null==e)throw new Qf(`Either the input data should have a defined shape, or ${s} shoud be specified.`);r=Array.isArray(e)?e[0].shape[0]:e.shape[0]}return r}execute(e,t){if(Array.isArray(t)&&0===t.length)throw new Qf("`outputs` is an empty Array, which is not allowed.");const n=Array.isArray(t),s=n?t:[t],r=this.retrieveSymbolicTensors(s),a=new db;if(e instanceof xr&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new Qf(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let t=0;t<this.inputs.length;++t)a.add(this.inputs[t],e[t])}else for(const t of this.inputs){const n=e[t.name];if(null==n)throw new Qf(`No value is provided for the model's input ${t.name}`);a.add(t,n)}const i=gb(r,a);return n?i:i[0]}retrieveSymbolicTensors(e){const t=sm(null,e.length);let n=e.length;for(const s of this.layers){const r=Array.isArray(s.output)?s.output:[s.output],a=r.map((e=>e.name));for(let s=0;s<e.length;++s){const i=a.indexOf(e[s]);if(-1!==i&&(t[s]=r[i],n--),0===n)break}if(0===n)break}if(n>0){const n=[];throw t.forEach(((t,s)=>{null==t&&n.push(e[s])})),new Qf(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(n)}`)}return t}predictLoop(e,t=32,n=!1){return uo((()=>{const s=this.checkNumSamples(e);if(n)throw new em("Verbose predictLoop() is not implemented yet.");const r=Rb(s,t),a=this.outputs.map((e=>[]));for(let t=0;t<r.length;++t)uo((()=>{const n=r[t][0],s=r[t][1],a=Eb(e,n,s),i=[];if(Array.isArray(a))for(let e=0;e<a.length;++e)i.push({key:this.inputs[e],value:a[e]});else i.push({key:this.inputs[0],value:a});const o=new db(i);return gb(this.outputs,o)})).forEach(((e,t)=>a[t].push(e)));return im(a.map((e=>Tl(e,0))))}))}predict(e,t={}){const n=Db(e);Lb(n,this.inputNames,this.feedInputShapes,!1);try{const e=null==t.batchSize?32:t.batchSize;return Tb(e),this.predictLoop(n,e)}finally{Fb(n,e)}}predictOnBatch(e){Lb(e,this.inputNames,this.feedInputShapes,!0);const t=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,t)}standardizeUserDataXY(e,t,n=!0,s){if(null==this.optimizer_)throw new Zf("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const r=[];for(let e=0;e<this.feedOutputShapes.length;++e){const t=this.feedOutputShapes[e];this.feedLossFns[e]===Wy?r.push(t.slice(0,t.length-1).concat([1])):r.push(t)}if(function(e,t,n){const s=mm(e.map((e=>e.shape[0])));s.sort();const r=mm(t.map((e=>e.shape[0])));if(r.sort(),s.length>1)throw new Qf(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(e.map((e=>e.shape)))}`);if(r.length>1)throw new Qf(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map((e=>e.shape)))}`);if(s.length>0&&r.length>0&&!re(s,r))throw new Qf(`Input Tensors should have the same number of samples as target Tensors. Found ${s[0]} input sample(s) and ${r[0]} target sample(s).`)}(e=Mb(e,this.feedInputNames,this.feedInputShapes,!1,"input"),t=Mb(t,this.feedOutputNames,r,!1,"target")),function(e,t,n){const s=[Ly,Vy,By];for(let r=0;r<e.length;++r){const a=e[r],i=t[r],o=n[r];if(null!=i){if(i===By&&1===a.shape[a.shape.length-1])throw new Qf(`You are passing a target array of shape ${a.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==s.indexOf(i)){const e=a.shape.slice(1),t=o.slice(1);for(let n=0;n<e.length;++n){const s=e[n],r=t[n];if(null!=r&&s!==r)throw new Qf(`A target Tensor with shape ${a.shape} was passed for an output of shape ${o}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(t,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=s&&s>0&&e[0].shape[0]%s!=0)throw new Qf(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${s}. Found: ${e[0].shape[0]} sample(s).`);return[e,t]}async standardizeUserData(e,t,n,s,r=!0,a){const[i,o]=this.standardizeUserDataXY(e,t,r,a);if(null!=n)throw new Error("sample weight is not supported yet.");let l=null;if(null!=s){const e=kb(s,this.outputNames);l=[];for(let t=0;t<e.length;++t)l.push(await vb(o[t],null,e[t]))}return[i,o,l]}testLoop(e,t,n,s=0,r){return uo((()=>{const a=this.checkNumSamples(t,n,r,"steps"),i=[];if(s>0)throw new em("Verbose mode is not implemented yet.");if(null!=r)throw new em("steps mode in testLoop() is not implemented yet");{const s=Rb(a,n),r=hh(ng(0,a));for(let n=0;n<s.length;++n){const a=s[n][0],o=s[n][1],l=ag(r,a,o-a),u=Ab(t,l),c=e(u);if(0===n)for(let e=0;e<c.length;++e)i.push(Lo(0));for(let e=0;e<c.length;++e){const t=c[e];i[e]=Io(i[e],Co(o-a,t))}}for(let e=0;e<i.length;++e)i[e]=So(i[e],a)}return i}))}getDedupedMetricsNames(){const e=this.metricsNames,t=[];for(let n=0;n<e.length;++n){const s=e[n];let r=s;am(e,s)>1&&(r+=`_${am(e.slice(0,n),s)}`),t.push(r)}return t}makeTrainFunction(){return e=>{const t=[],n=e.slice(0,this.inputs.length),s=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),r=e.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),a=[],i=this.collectedTrainableWeights.map((e=>e.read()));return[this.optimizer_.minimize((()=>{const e=[];for(let t=0;t<this.inputs.length;++t)e.push({key:this.inputs[t],value:n[t]});const i=new db(e),o=gb(this.outputs,i,{training:!0});let l;for(let e=0;e<this.lossFunctions.length;++e){let n=(0,this.lossFunctions[e])(s[e],o[e]);null!=r[e]&&(n=Ib(n,r[e]));const a=tc(n);t.push(a),l=0===e?n:Io(l,n)}for(let e=0;e<this.metricsTensors.length;++e){let n;if(this.outputs.length>1&&e<this.outputs.length)n=t[e];else{const t=this.metricsTensors[e][0],r=this.metricsTensors[e][1];n=tc(t(s[r],o[r]))}ho(n),a.push(n)}return l=tc(l),this.calculateLosses().forEach((e=>{l=Io(l,e)})),l}),!0,i)].concat(a)}}makeTestFunction(){this.testFunction=e=>uo((()=>{const t=[];let n;const s=e.slice(0,this.inputs.length),r=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=[];for(let e=0;e<this.inputs.length;++e)a.push({key:this.inputs[e],value:s[e]});const i=new db(a),o=gb(this.outputs,i);for(let e=0;e<this.lossFunctions.length;++e){const s=this.lossFunctions[e],a=tc(s(r[e],o[e]));n=0===e?a:Io(n,a),t.push(n)}for(let e=0;e<this.metricsTensors.length;++e){const n=this.metricsTensors[e][0],s=this.metricsTensors[e][1],a=tc(n(r[s],o[s]));t.push(a)}return t}))}async fit(e,t,n={}){return async function(e,t,n,s={}){if(e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let r,a,i,o,l,u,c;e.isTraining=!0;try{const h=null==s.batchSize?32:s.batchSize;Tb(h);const p=!1,d=await e.standardizeUserData(t,n,s.sampleWeight,s.classWeight,p,h);r=d[0],a=d[1],c=d[2];let f,m=!1;if(null!=s.validationData&&s.validationData.length>0){if(m=!0,2!==s.validationData.length)throw 3===s.validationData.length?new em("validationData including sample weights is not supported yet."):new Qf(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${s.validationData} is invalid.`);i=s.validationData[0],o=s.validationData[1];const t=!0,n=await e.standardizeUserData(i,o,null,null,t,h);l=n[0],u=n[1],f=l.concat(u)}else if(null!=s.validationSplit&&s.validationSplit>0&&s.validationSplit<1){m=!0;const e=Math.floor(r[0].shape[0]*(1-s.validationSplit)),t=r[0].shape[0];l=Eb(r,e,t),r=Eb(r,0,e),u=Eb(a,e,t),a=Eb(a,0,e),f=l.concat(u)}else null!=s.validationSteps&&(m=!0);const g=r.concat(a).concat(c);e.checkTrainableWeightsConsistency();const y=e.makeTrainFunction(),b=e.getDedupedMetricsNames();let x,w;m?(e.makeTestFunction(),x=e.testFunction,w=b.slice().concat(b.map((e=>"val_"+e)))):(x=null,f=[],w=b.slice());const k=Dy(s.callbacks,s.yieldEvery),v=await async function(e,t,n,s,r,a,i,o,l,u,c,h,p,d,f){null==r&&(r=32),null==a&&(a=1),null==c&&(c=!0),null==p&&(p=0);let m=!1;null!=l&&null!=u&&(m=!0);const g=e.checkNumSamples(n,r,d,"steps_per_epoch");let y;null!=g&&(y=ng(0,g)),null==i&&(i=1);const{callbackList:b,history:x}=_y(o,i,a,p,g,d,r,m,h);b.setModel(e),e.history=x,await b.onTrainBegin(),e.stopTraining_=!1;for(let i=p;i<a;++i){await b.onEpochBegin(i);const a={};{if("batch"===c)throw new em("batch shuffling is not implemneted yet");c&&j(y);const i=hh(y),o=Rb(g,r);for(let c=0;c<o.length;++c){const h={};if(await b.onBatchBegin(c,h),uo((()=>{const p=o[c][0],d=o[c][1],f=ag(i,p,d-p);h.batch=c,h.size=d-p;const g=Ab(n,f),y=t(g);for(let e=0;e<s.length;++e){const t=s[e],n=y[e];h[t]=n,ho(n)}if(c===o.length-1&&m){const t=e.testLoop(l,u,r);for(let e=0;e<s.length;++e){const n=s[e],r=t[e];ho(r),a["val_"+n]=r}}})),await b.onBatchEnd(c,h),Sy(h),e.stopTraining_)break}i.dispose()}if(await b.onEpochEnd(i,a),e.stopTraining_)break}return await b.onTrainEnd(),await e.history.syncData(),e.history}(e,y,g,b,h,s.epochs,s.verbose,k,x,f,s.shuffle,w,s.initialEpoch,null);return v}finally{e.isTraining=!1,Fb(r,t),Fb(a,n),Fb(l,i),Fb(u,o),null!=c&&co(c)}}(this,e,t,n)}async fitDataset(e,t){return async function(e,t,n){const s=null!=n.batchesPerEpoch;if(Z(null!=e.optimizer,(()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig).")),Z(null!=n,(()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call.")),Z(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),(()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${n.epochs}`)),Z(!s||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),(()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${n.batchesPerEpoch}`)),Z(null==n.validationSplit,(()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead.")),e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");e.isTraining=!0;try{const r=null!=n.validationData;let a,i;if(r)if($b(n.validationData))Z(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),(()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${n.validationBatches}`));else{const e=function(e){if(3===e.length)throw new em("Validation with sample weights is not implemented yet.");return{xs:e[0],ys:e[1]}}(n.validationData);a=e.xs,i=e.ys}const o=e.makeTrainFunction(),l=e.getDedupedMetricsNames();let u;u=r?l.slice().concat(l.map((e=>"val_"+e))):l.slice();const c=Dy(n.callbacks,n.yieldEvery),h=null==n.verbose?1:n.verbose,{callbackList:p,history:d}=_y(c,h,n.epochs,null,null,function(e,t){let n=null;return null!=t.batchesPerEpoch?n=t.batchesPerEpoch:Number.isFinite(e.size)&&(n=e.size),n}(t,n),null,r,u);p.setModel(e),e.history=d,await p.onTrainBegin(),e.stopTraining_=!1;let f=null==n.initialEpoch?0:n.initialEpoch,m=await t.iterator();for(;f<n.epochs;){const u={};await p.onEpochBegin(f);let c=0,h=0;for(s||(m=await t.iterator());!s||c<n.batchesPerEpoch;){const t=await m.next();if(s&&t.done){console.warn(`You provided \`batchesPerEpoch\` as ${n.batchesPerEpoch}, but your dataset iterator ran out of data after ${c} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, `+n.batchesPerEpoch*n.epochs+" batches). You may need to use the repeat() function when building your dataset.");break}if(null!=t.value){const{xs:s,ys:r}=Sb(e,t.value),a={};a.batch=h,a.size=s[0].shape[0],await p.onBatchBegin(h,a);const i=[];if(null!=n.classWeight){const t=kb(n.classWeight,e.outputNames);for(let e=0;e<t.length;++e)i.push(await vb(r[e],null,t[e]))}const u=s.concat(r).concat(i),d=o(u);co(u);for(let e=0;e<l.length;++e){const t=l[e],n=d[e];a[t]=n,ho(n)}await p.onBatchEnd(h,a),Sy(a),h++,c++}if(s?c>=n.batchesPerEpoch:t.done){if(r){let t;t=$b(n.validationData)?om(await e.evaluateDataset(n.validationData,{batches:n.validationBatches})):om(e.evaluate(a,i,{batchSize:null==n.validationBatchSize?Nb:n.validationBatchSize,verbose:0}));for(let n=0;n<e.metricsNames.length;++n)u[`val_${e.metricsNames[n]}`]=t[n]}break}if(e.stopTraining_)break}if(await p.onEpochEnd(f,u),f++,e.stopTraining_)break}return await p.onTrainEnd(),await e.history.syncData(),e.history}finally{e.isTraining=!1}}(this,e,t)}async trainOnBatch(e,t){const n=await this.standardizeUserData(e,t),s=n[0],r=n[1],a=this.makeTrainFunction()(s.concat(r)),i=[];for(const e of a){const t=await e.data();i.push(t[0])}return co(a),im(i)}getNamedWeights(e){const t=[],n=null!=e&&e.trainableOnly,s=n?this.trainableWeights:this.weights,r=this.getWeights(n);for(let e=0;e<s.length;++e)n&&!s[e].trainable||t.push({name:s[e].originalName,tensor:r[e]});return t}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){const e=super.dispose();if(0===e.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const t=oo().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=t-oo().numTensors}return e}getLossIdentifiers(){let e;if("string"==typeof this.loss)e=lm(this.loss);else if(Array.isArray(this.loss)){for(const e of this.loss)if("string"!=typeof e)throw new Error("Serialization of non-string loss is not supported.");e=this.loss.map((e=>lm(e)))}else{const t=Object.keys(this.loss);e={};const n=this.loss;for(const s of t){if("string"!=typeof n[s])throw new Error("Serialization of non-string loss is not supported.");e[s]=lm(n[s])}}return e}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[lm(nb(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map((e=>lm(nb(e))));{const e={};for(const t in this.metrics)e[t]=lm(nb(this.metrics[t]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){if(null!=e.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=e.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=e.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const t=Oy(cb(e.optimizer_config));let n,s;if("string"==typeof e.loss)n=um(e.loss);else if(Array.isArray(e.loss))n=e.loss.map((e=>um(e)));else if(null!=e.loss){n={};for(const t in e.loss)n[t]=um(e.loss[t])}if(Array.isArray(e.metrics))s=e.metrics.map((e=>um(e)));else if(null!=e.metrics){s={};for(const t in e.metrics)s[t]=um(e.metrics[t])}this.compile({loss:n,metrics:s,optimizer:t})}async save(e,t){if("string"==typeof e){const t=pa(e);if(0===t.length)throw new Qf(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Qf(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Qf("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const n=await ea(this.getNamedWeights(t)),s={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:`TensorFlow.js tfjs-layers v${pb}`,convertedBy:null};if(null!=t&&t.includeOptimizer&&null!=this.optimizer){s.trainingConfig=this.getTrainingConfig();const e="optimizer",{data:t,specs:r}=await ea(await this.optimizer.getWeights(),e);n.specs.push(...r),n.data=aa([n.data,t])}if(null!=this.userDefinedMetadata){const e=!0;rb(this.userDefinedMetadata,this.name,e),s.userDefinedMetadata=this.userDefinedMetadata}return s.weightData=n.data,s.weightSpecs=n.specs,e.save(s)}setUserDefinedMetadata(e){rb(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}}zb.className="Model",Wi(zb);class Pb extends zb{}async function Bb(e,t){"modelTopology"in e||(e={modelTopology:e});let n=e.modelTopology;null!=n.model_config&&(n=n.model_config);const s=Oy(cb(n),t);if(null!=e.weightsManifest){const t=await ei(e.weightsManifest,e.pathPrefix,s.weights.map((e=>e.originalName))),n={};for(const e of s.weights)n[e.originalName]=t[e.originalName];s.loadWeights(n),co(t)}return s}Pb.className="Functional",Wi(Pb);class Wb extends zb{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=null!=e.name?e.name:ay("sequential_"),null!=e.layers)for(const t of e.layers)this.add(t)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some((e=>e<0)))throw new Qf(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`)}add(e){const t=e instanceof Wb||e instanceof zb;let n;if(t){if(n=e,1!==n.outputs.length)throw new Qf("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new Qf("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===e.inboundNodes.length){if(null==e.batchInputShape)throw new Qf("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const t=Iy({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(t)}if(t)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==e.inboundNodes.length)throw new Qf(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(1!==e.inboundNodes[0].outputTensors.length)throw new Qf("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=ky(this.outputs[0])}this.inboundNodes=[],new by({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:sm(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs[0].shape})}else{const t=e.apply(this.outputs[0]);if(Array.isArray(t))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[t],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,t){return null==this.model&&this.build(),this.model.call(e,t)}build(e){if(uy(e),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new zb({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,t,n=console.log){this.built||this.build(),super.summary(e,t,n)}setWeights(e){null==this.model&&this.build(),this.model.setWeights(e)}evaluate(e,t,n={}){if(!this.built)throw new Zf("The model needs to be compiled before being used.");return this.model.evaluate(e,t,n)}async evaluateDataset(e,t){if(!this.built)throw new Zf("The model needs to be compiled before being used.");return this.model.evaluateDataset(e,t)}predict(e,t={}){return null==this.model&&this.build(),this.model.predict(e,t)}predictOnBatch(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}async fit(e,t,n={}){if(!this.built)throw new Zf("The model needs to be compiled before being used.");return this.model.fit(e,t,n)}async fitDataset(e,t){if(!this.built)throw new Zf("The model needs to be compiled before being used.");return this.model.fitDataset(e,t)}async trainOnBatch(e,t){return this.model.trainOnBatch(e,t)}static fromConfig(e,t,n={},s=!1){let r,a={};if(t instanceof Array){if(null==t[0].className||"Merge"===t[0].className)throw new Qf("Legacy serialization format not supported yet.");r=t}else Z(null!=t.layers,(()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field.")),r=t.layers,delete t.layers,a=t;const i=new e(a);if(!(i instanceof Wb))throw new em(`Sequential.fromConfig called on non-Sequential input: ${i}`);for(const e of r){const t=Oy(e,void 0,s);s&&t.setFastWeightInitDuringBuild(!0),i.add(t)}return i}set stopTraining(e){if(null==this.model)throw new Qf("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(null==this.model)throw new Qf("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const e=[];for(const t of this.layers){const n={};n.className=t.getClassName(),n.config=t.getConfig(),e.push(n)}return{name:this.name,layers:e}}}function Vb(e){return new zb(e)}function Ub(e){return new Wb(e)}function Gb(e,t){return null==t&&(t={}),async function(e,t){if(null==t&&(t={}),"string"==typeof e){const n=da(e,t);if(0===n.length)n.push(ii(e,t));else if(n.length>1)throw new Qf(`Found more than one (${n.length}) load handlers for URL '${e}'`);e=n[0]}return async function(e,t,n){if(null==n&&(n={}),null==e.load)throw new Qf("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const s=await e.load();let r=s.modelTopology;null!=r.model_config&&(r=r.model_config);const a=null==n.strict||n.strict,i=null!=s.weightData&&null!=s.weightSpecs&&a,o=Oy(cb(r),void 0,i),l=s.trainingConfig;if(null!=l&&o.loadTrainingConfig(l),null!=s.userDefinedMetadata&&o.setUserDefinedMetadata(s.userDefinedMetadata),null!=s.weightData){if(null==s.weightSpecs)throw new Qf("LayersModel artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed.");const{modelWeights:e,optimizerWeights:t}=function(e,t){const n=ta(e,t),s={},r=[];return t.forEach((e=>{"optimizer"===e.group?r.push({name:e.name,tensor:n[e.name]}):s[e.name]=n[e.name]})),{modelWeights:s,optimizerWeights:r}}(s.weightData,s.weightSpecs);o.loadWeights(e,a),null!=o.optimizer&&t.length>0&&await o.optimizer.setWeights(t),co(e),co(t.map((e=>e.tensor)))}return o}(e,0,t)}(e,t)}function Hb(e){return Iy(e)}function jb(e,t){Fy.registerCallbackConstructor(e,t)}Wb.className="Sequential",Wi(Wb);class qb extends Pi{getConfig(){return{}}}class Kb extends qb{apply(e,t=1){return function(e,t=1){if(1!==t)throw new em(`Support for alpha values other than 1 (${t}) is not implemented yet.`);return hu(e)}(e,t)}}Kb.className="elu",Wi(Kb);class Xb extends qb{apply(e){return Uc(e)}}Xb.className="selu",Wi(Xb);class Yb extends qb{apply(e){return _c(e)}}Yb.className="relu",Wi(Yb);class Jb extends qb{apply(e){return uo((()=>sc(6,_c(e))))}}Jb.className="relu6",Wi(Jb);class Zb extends qb{apply(e){return e}}Zb.className="linear",Wi(Zb);class Qb extends qb{apply(e){return El(e)}}Qb.className="sigmoid",Wi(Qb);class ex extends qb{apply(e){return function(e){return uo((()=>{const t=Io(.5,Co(.2,e));return Wl(t,0,1)}))}(e)}}ex.className="hardSigmoid",Wi(ex);class tx extends qb{apply(e){return _u(e)}}tx.className="softplus",Wi(tx);class nx extends qb{apply(e){return function(e){return uo((()=>So(e,Ho(e).add(1))))}(e)}}nx.className="softsign",Wi(nx);class sx extends qb{apply(e){return Rl(e)}}sx.className="tanh",Wi(sx);class rx extends qb{apply(e,t=-1){return Qc(e,t)}}rx.className="softmax",Wi(rx);class ax extends qb{apply(e,t=-1){return zu(e,t)}}ax.className="logSoftmax",Wi(ax);class ix extends qb{apply(e,t=1){return uo((()=>El(e.mul(t)).mul(e)))}}function ox(e){return e.getClassName()}function lx(e,t={}){return dm(e,Bi.getMap().classNameMap,t,"activation")}function ux(e){if(null==e){return lx({className:"linear",config:{}})}if("string"==typeof e){const t={};return t.className=e,t.config={},lx(t)}return e instanceof qb?e:lx(e)}function cx(e){if(null!=e&&"object"!=typeof e)throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${e}`)}ix.className="swish",Wi(ix);class hx extends Pi{}class px extends hx{constructor(e){super(),cx(e),this.l1=null==e||null==e.l1?.01:e.l1,this.l2=null==e||null==e.l2?.01:e.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(e){return uo((()=>{let t=cc([1]);return this.hasL1&&(t=Io(t,Lu(Co(this.l1,Ho(e))))),this.hasL2&&(t=Io(t,Lu(Co(this.l2,fg(e))))),t.asScalar()}))}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,t){return new e({l1:t.l1,l2:t.l2})}}px.className="L1L2",Wi(px);const dx={l1l2:"L1L2"};function fx(e){return hm(e)}function mx(e,t={}){return dm(e,Bi.getMap().classNameMap,t,"regularizer")}function gx(e){return null==e?null:"string"==typeof e?mx({className:e in dx?dx[e]:e,config:{}}):e instanceof hx?e:mx(e)}class yx extends wy{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,null!=e&&(this.maxValue=e.maxValue)}call(e,t){e=ly(e);let n=_c(e);return null!=this.maxValue&&(n=Wl(n,0,this.maxValue)),n}computeOutputShape(e){return e}getConfig(){const e={maxValue:this.maxValue},t=super.getConfig();return Object.assign(e,t),e}}yx.className="ReLU",Wi(yx);class bx extends wy{constructor(e){super(null==e?{}:e),this.DEFAULT_ALPHA=.3,null==e&&(e={}),this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=ly(e);return Cu(n,this.alpha)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}bx.className="LeakyReLU",Wi(bx);class xx extends wy{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),this.supportsMasking=!0,this.alphaInitializer=Bg(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=gx(e.alphaRegularizer),this.alphaConstraint=Rm(e.alphaConstraint),null==e.sharedAxes)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else{if("number"!=typeof e.sharedAxes)throw new Qf(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`);this.sharedAxes=[e.sharedAxes]}}build(e){const t=(e=uy(e)).slice(1);if(null!=this.sharedAxes)for(const e of this.sharedAxes)t[e-1]=1;this.alpha=this.addWeight("alpha",t,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let t=1;t<e.length;++t)n[t]=e[t];this.inputSpec=[new my({ndim:e.length,axes:n})],this.built=!0}call(e,t){return e=ly(e),kc(e,this.alpha.read())}getConfig(){const e={alphaInitializer:Pg(this.alphaInitializer),alphaRegularizer:fx(this.alphaRegularizer),alphaConstraint:Em(this.alphaConstraint),sharedAxes:this.sharedAxes},t=super.getConfig();return Object.assign(e,t),e}}xx.className="PReLU",Wi(xx);class wx extends wy{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==this.DEFAULT_ALPHA)throw new em(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=ly(e);return hu(n)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}wx.className="ELU",Wi(wx);class kx extends wy{constructor(e){super(null==e?{}:e),this.DEFAULT_THETA=1,null==e&&(e={}),this.theta=null==e.theta?this.DEFAULT_THETA:e.theta}call(e,t){const n=ly(e);return n.mul(sg(n.greater(this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){const e={theta:this.theta},t=super.getConfig();return Object.assign(e,t),e}}kx.className="ThresholdedReLU",Wi(kx);class vx extends wy{constructor(e){super(null==e?{}:e),this.DEFAULT_AXIS=1,null==e&&(e={}),this.softmax=(new rx).apply,this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis}call(e,t){const n=ly(e);return this.softmax(n,this.axis)}computeOutputShape(e){return e}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function Ix(e,t,n){if("number"==typeof e)return sm(e,t);if(e.length!==t)throw new Qf(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${e.length} elements.`);for(let r=0;r<t;++r){const a=e[r];if((s=a)!==parseInt(s.toString(),10))throw new Qf(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(e)} including a non-integer number ${a}`)}return e;var s}function Nx(e,t,n,s,r=1){if(null==e)return e;let a;return a="same"===n?e:e-(t+(t-1)*(r-1))+1,Math.floor((a+s-1)/s)}function Sx(e,t,n,s){if(null==e)return null;if("valid"===s)e=e*t+tg([n-t,0]);else{if("same"!==s)throw new Qf(`Unsupport padding mode: ${s}.`);e*=t}return e}function Cx(e,t){return uo((()=>(Vm(t),"channelsFirst"===t?di(e,[0,2,3,1]):e)))}function $x(e,t){return uo((()=>(Vm(t),"channelsFirst"===t?di(e,[0,2,3,4,1]):e)))}function Tx(e,t,n,s=[1,1],r="valid",a,i,o=null){return uo((()=>{if(null==a&&(a="channelsLast"),Vm(a),3!==e.rank&&4!==e.rank)throw new Qf(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${e.rank}.`);if(3!==t.rank&&4!==t.rank)throw new Qf(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${e.rank}.`);let l=Cx(e,a);if("causal"===r)throw new em("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return l=tp({x:l,filter:t,strides:s,pad:"same"===r?"same":"valid",dilations:i,dataFormat:"NHWC",bias:n,activation:o}),"channelsFirst"===a&&(l=di(l,[0,3,1,2])),l}))}vx.className="Softmax",Wi(vx);class Ex extends wy{constructor(e,t){if(super(t),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",Ex.verifyArgs(t),this.rank=e,xm(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new em(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=Ix(t.kernelSize,e,"kernelSize"),this.strides=Ix(null==t.strides?1:t.strides,e,"strides"),this.padding=null==t.padding?"valid":t.padding,Um(this.padding),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Vm(this.dataFormat),this.activation=ux(t.activation),this.useBias=null==t.useBias||t.useBias,this.biasInitializer=Bg(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=Rm(t.biasConstraint),this.biasRegularizer=gx(t.biasRegularizer),this.activityRegularizer=gx(t.activityRegularizer),this.dilationRate=Ix(null==t.dilationRate?1:t.dilationRate,e,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new Qf(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new Qf(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new Qf(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}static verifyArgs(e){if(rm("kernelSize"in e,"required key 'kernelSize' not in config"),"number"!=typeof e.kernelSize&&!bm(e.kernelSize,"number",1,3))throw new Qf(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(e.kernelSize)}.`)}getConfig(){const e={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:ox(this.activation),useBias:this.useBias,biasInitializer:Pg(this.biasInitializer),biasRegularizer:fx(this.biasRegularizer),activityRegularizer:fx(this.activityRegularizer),biasConstraint:Em(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}class Ax extends Ex{constructor(e,t){super(e,t),this.kernel=null,Ax.verifyArgs(t),this.filters=t.filters,xm(this.filters,"filters"),this.kernelInitializer=Bg(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=Rm(t.kernelConstraint),this.kernelRegularizer=gx(t.kernelRegularizer)}build(e){e=uy(e);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new Qf(`The channel dimension of the input should be defined. Found ${e[t]}`);const n=e[t],s=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",s,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[t]:n}}],this.built=!0}call(e,t){return uo((()=>{let t;e=ly(e);const n=null==this.bias?null:this.bias.read(),s=km(this.activation.getClassName());if(null!=s&&2===this.rank)t=Tx(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,s);else{if(1===this.rank)t=function(e,t,n,s=1,r="valid",a,i=1){return uo((()=>{if(null==a&&(a="channelsLast"),Vm(a),3!==e.shape.length)throw new Qf(`The input of a conv1dWithBias operation should be 3, but is ${e.shape.length} instead.`);if(3!==t.shape.length)throw new Qf(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);if(null!=n&&1!==n.shape.length)throw new Qf(`The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`);if("channelsFirst"===a&&(e=di(e,[0,2,1])),"causal"===r)throw new em("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let o=ql(e,t,s,"same"===r?"same":"valid","NWC",i);return null!=n&&(o=gg(o,n)),o}))}(e,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)t=Tx(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new em("convolutions greater than 3D are not implemented yet.");t=function(e,t,n,s=[1,1,1],r="valid",a,i){return uo((()=>{if(null==a&&(a="channelsLast"),Vm(a),4!==e.rank&&5!==e.rank)throw new Qf(`conv3dWithBias expects input to be of rank 4 or 5, but received ${e.rank}.`);if(4!==t.rank&&5!==t.rank)throw new Qf(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${e.rank}.`);let o=$x(e,a);if("causal"===r)throw new em("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return o=Yl(o,t,s,"same"===r?"same":"valid","NDHWC",i),null!=n&&(o=gg(o,n)),"channelsFirst"===a&&(o=di(o,[0,4,1,2,3])),o}))}(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(t=this.activation.apply(t))}return t}))}computeOutputShape(e){e=uy(e);const t=[],n="channelsLast"===this.dataFormat?e.slice(1,e.length-1):e.slice(2);for(let e=0;e<n.length;++e){const s=Nx(n[e],this.kernelSize[e],this.padding,this.strides[e],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[e]);t.push(s)}let s=[e[0]];return"channelsLast"===this.dataFormat?(s=s.concat(t),s.push(this.filters)):(s.push(this.filters),s=s.concat(t)),s}getConfig(){const e={filters:this.filters,kernelInitializer:Pg(this.kernelInitializer),kernelRegularizer:fx(this.kernelRegularizer),kernelConstraint:Em(this.kernelConstraint)},t=super.getConfig();return Object.assign(e,t),e}static verifyArgs(e){if(!("filters"in e)||"number"!=typeof e.filters||e.filters<1)throw new Qf(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(e.filters)}`)}}class Rx extends Ax{constructor(e){super(2,e),Rx.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!bm(e.kernelSize,"number",1,2))throw new Qf(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}}Rx.className="Conv2D",Wi(Rx);class Dx extends Ax{constructor(e){super(3,e),Dx.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&(!Array.isArray(e.kernelSize)||1!==e.kernelSize.length&&3!==e.kernelSize.length))throw new Qf(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}}Dx.className="Conv3D",Wi(Dx);class Fx extends Rx{constructor(e){if(super(e),this.inputSpec=[new my({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new Qf(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(4!==(e=uy(e)).length)throw new Qf("Input should have rank 4; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new Qf("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],s=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",s,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new my({ndim:4,axes:{[t]:n}})],this.built=!0}call(e,t){return uo((()=>{let t=ly(e);if(4!==t.shape.length)throw new Qf(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,s=n[0];let r,a;"channelsFirst"===this.dataFormat?(r=2,a=3):(r=1,a=2);const i=n[r],o=n[a],l=this.kernelSize[0],u=this.kernelSize[1],c=this.strides[0],h=this.strides[1],p=[s,Sx(i,c,l,this.padding),Sx(o,h,u,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=di(t,[0,2,3,1]));let d=Xl(t,this.kernel.read(),p,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(d=di(d,[0,3,1,2])),null!=this.bias&&(d=gg(d,this.bias.read(),this.dataFormat)),null!=this.activation&&(d=this.activation.apply(d)),d}))}computeOutputShape(e){const t=(e=uy(e)).slice();let n,s,r;"channelsFirst"===this.dataFormat?(n=1,s=2,r=3):(n=3,s=1,r=2);const a=this.kernelSize[0],i=this.kernelSize[1],o=this.strides[0],l=this.strides[1];return t[n]=this.filters,t[s]=Sx(t[s],o,a,this.padding),t[r]=Sx(t[r],l,i,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}Fx.className="Conv2DTranspose",Wi(Fx);class _x extends Ax{constructor(e,t){if(super(e,t),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==t.filters)throw new Qf("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=t.kernelInitializer||null!=t.kernelRegularizer||null!=t.kernelConstraint)throw new Qf("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=t.padding&&"same"!==t.padding&&"valid"!==t.padding)throw new Qf(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(t.padding)}`);this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=Bg(t.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=gx(t.depthwiseRegularizer),this.depthwiseConstraint=Rm(t.depthwiseConstraint),this.pointwiseInitializer=Bg(t.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=gx(t.pointwiseRegularizer),this.pointwiseConstraint=Rm(t.pointwiseConstraint)}build(e){if((e=uy(e)).length<this.rank+2)throw new Qf(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(e)}`);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t]||e[t]<0)throw new Qf(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[t])}`);const n=e[t],s=this.kernelSize.concat([n,this.depthMultiplier]),r=[];for(let e=0;e<this.rank;++e)r.push(1);r.push(n*this.depthMultiplier,this.filters);const a=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",s,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,a,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",r,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,a,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,a,this.biasConstraint):this.bias=null,this.inputSpec=[new my({ndim:this.rank+2,axes:{[t]:n}})],this.built=!0}call(e,t){return uo((()=>{let t;if(e=ly(e),1===this.rank)throw new em("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(e=di(e,[0,2,3,1])),t=Gc(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(t=gg(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),"channelsFirst"===this.dataFormat&&(t=di(t,[0,3,1,2])),t}))}getConfig(){const e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=Pg(this.depthwiseInitializer),e.pointwiseInitializer=Pg(this.pointwiseInitializer),e.depthwiseRegularizer=fx(this.depthwiseRegularizer),e.pointwiseRegularizer=fx(this.pointwiseRegularizer),e.depthwiseConstraint=Em(this.depthwiseConstraint),e.pointwiseConstraint=Em(this.pointwiseConstraint),e}}_x.className="SeparableConv";class Ox extends _x{constructor(e){super(2,e)}}Ox.className="SeparableConv2D",Wi(Ox);class Mx extends Ax{constructor(e){super(1,e),Mx.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){const e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!bm(e.kernelSize,"number",1,1))throw new Qf(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}Mx.className="Conv1D",Wi(Mx);class Lx extends wy{constructor(e){super(e),"number"==typeof e.cropping?this.cropping=[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?this.cropping=[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:this.cropping=e.cropping,this.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,t){return uo((()=>{if(e=ly(e),"channelsLast"===this.dataFormat){const t=og(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return og(t,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const t=og(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return og(t,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}}))}getConfig(){const e={cropping:this.cropping,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}Lx.className="Cropping2D",Wi(Lx);class zx extends wy{constructor(e){var t;super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==e.size?this.DEFAULT_SIZE:e.size,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Vm(this.dataFormat),this.interpolation=null==e.interpolation?"nearest":e.interpolation,t=this.interpolation,ym(Lm,"InterpolationFormat",t)}computeOutputShape(e){if("channelsFirst"===this.dataFormat){const t=null==e[2]?null:this.size[0]*e[2],n=null==e[3]?null:this.size[1]*e[3];return[e[0],e[1],t,n]}{const t=null==e[1]?null:this.size[0]*e[1],n=null==e[2]?null:this.size[1]*e[2];return[e[0],t,n,e[3]]}}call(e,t){return uo((()=>{let t=ly(e);const n=t.shape;if("channelsFirst"===this.dataFormat){t=di(t,[0,2,3,1]);const e=this.size[0]*n[2],s=this.size[1]*n[3],r="nearest"===this.interpolation?t.resizeNearestNeighbor([e,s]):t.resizeBilinear([e,s]);return di(r,[0,3,1,2])}{const e=this.size[0]*n[1],s=this.size[1]*n[2];return"nearest"===this.interpolation?t.resizeNearestNeighbor([e,s]):t.resizeBilinear([e,s])}}))}getConfig(){const e={size:this.size,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}zx.className="UpSampling2D",Wi(zx);class Px extends Ex{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=Bg(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=Rm(e.depthwiseConstraint),this.depthwiseRegularizer=gx(e.depthwiseRegularizer)}build(e){if((e=uy(e)).length<4)throw new Qf(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);const t="channelsFirst"===this.dataFormat?1:3;if(null==e[t]||e[t]<0)throw new Qf(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[t]}).`);const n=e[t],s=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",s,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return uo((()=>{let t=function(e,t,n=[1,1],s="valid",r,a){return uo((()=>{null==r&&(r="channelsLast"),Vm(r);let i=Cx(e,r);if(4!==e.rank)throw new Qf(`Input for depthwiseConv2d is required to be 4-D, but is instead ${e.rank}-D`);if(4!==t.rank)throw new Qf(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);return i=ru(i,t,n,"same"===s?"same":"valid","NHWC",a),"channelsFirst"===r&&(i=di(i,[0,3,1,2])),i}))}(e=ly(e),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(t=gg(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),t}))}computeOutputShape(e){e=uy(e);const t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],s="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,r=Nx(t,this.kernelSize[0],this.padding,this.strides[0]),a=Nx(n,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],s,r,a]:[e[0],r,a,s]}getConfig(){const e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=Pg(this.depthwiseInitializer),e.depthwiseRegularizer=fx(this.depthwiseRegularizer),e.depthwiseConstraint=Em(this.depthwiseRegularizer),e}}function Bx(e,t,n,s){if(Array.isArray(e)){if(null!=t||null!=n)throw new Qf("When inputs is an array, neither initialState or constants should be provided");null!=s&&(n=e.slice(e.length-s,e.length),e=e.slice(0,e.length-s)),e.length>1&&(t=e.slice(1,e.length)),e=e[0]}function r(e){return null==e||Array.isArray(e)?e:[e]}return{inputs:e,initialState:t=r(t),constants:n=r(n)}}function Wx(e,t,n,s=!1,r,a,i=!1,o=!1){return uo((()=>{const l=t.shape.length;if(l<3)throw new Qf(`Input should be at least 3D, but is ${l}D.`);const u=[1,0].concat(ng(2,l));if(t=di(t,u),null!=a)throw new em("The rnn() functoin of the deeplearn.js backend does not support constants yet.");i&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=r&&((r=r.asType("bool").asType("float32")).rank===l-1&&(r=fu(r,-1)),r=di(r,u)),s&&(t=Mc(t,0),null!=r&&(r=Mc(r,0)));const c=[];let h,p=n;const d=t.shape[0],f=wh(t);let m,g;null!=r&&(m=wh(r));for(let t=0;t<d;++t){const n=f[t],s=uo((()=>e(n,p)));if(null==r)h=s[0],p=s[1];else{const e=uo((()=>{const e=m[t],n=pc(e).sub(e);return{output:s[0].mul(e).add(p[0].mul(n)),newStates:p.map(((t,r)=>s[1][r].mul(e).add(t.mul(n))))}}));h=e.output,p=e.newStates}o&&c.push(h)}return o&&(g=oh(c,1)),[h,g,p]}))}Px.className="DepthwiseConv2D",Wi(Px);class Vx extends wy{constructor(e){let t;if(super(e),null==e.cell)throw new Qf("cell property is missing for the constructor of RNN.");if(t=Array.isArray(e.cell)?new Yx({cells:e.cell}):e.cell,null==t.stateSize)throw new Qf("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=t,this.returnSequences=null!=e.returnSequences&&e.returnSequences,this.returnState=null!=e.returnState&&e.returnState,this.goBackwards=null!=e.goBackwards&&e.goBackwards,this._stateful=null!=e.stateful&&e.stateful,this.unroll=null!=e.unroll&&e.unroll,this.supportsMasking=!0,this.inputSpec=[new my({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){return null==this.states_?ng(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map((e=>null)):this.states_}setStates(e){this.states_=e}computeOutputShape(e){iy(e)&&(e=e[0]);let t=this.cell.stateSize;Array.isArray(t)||(t=[t]);const n=t[0];let s;if(s=this.returnSequences?[e[0],e[1],n]:[e[0],n],this.returnState){const n=[];for(const s of t)n.push([e[0],s]);return[s].concat(n)}return s}computeMask(e,t){return uo((()=>{Array.isArray(t)&&(t=t[0]);const e=this.returnSequences?t:null;if(this.returnState){const t=this.states.map((e=>null));return[e].concat(t)}return e}))}get states(){if(null==this.states_){const e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,t=[];for(let n=0;n<e;++n)t.push(null);return t}return this.states_}set states(e){this.states_=e}build(e){if(null!=this.numConstants)throw new em("Constants support is not implemented in RNN yet.");iy(e)&&(e=e[0]);const t=this.stateful?e[0]:null,n=e.slice(2);this.inputSpec[0]=new my({shape:[t,null,...n]});const s=[e[0]].concat(e.slice(2));let r;if(this.cell.build(s),r=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!re(this.stateSpec.map((e=>e.shape[e.shape.length-1])),r))throw new Qf(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=r.map((e=>new my({shape:[null,e]})));this.stateful&&this.resetStates()}resetStates(e,t=!1){uo((()=>{if(!this.stateful)throw new Jf("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape[0];if(null==n)throw new Qf("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>cc([n,e]))):this.states_=[cc([n,this.cell.stateSize])];else if(null==e)co(this.states_),null!=this.keptStates&&(co(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>cc([n,e]))):this.states_[0]=cc([n,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new Qf(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);!0===t?this.keptStates.push(this.states_.slice()):co(this.states_);for(let t=0;t<this.states_.length;++t){const s=e[t],r=Array.isArray(this.cell.stateSize)?this.cell.stateSize[t]:this.cell.stateSize,a=[n,r];if(!re(s.shape,a))throw new Qf(`State ${t} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${s.shape}`);this.states_[t]=s}}this.states_=this.states_.map((e=>ho(e.clone())))}))}apply(e,t){let n=null==t?null:t.initialState,s=null==t?null:t.constants;null==t&&(t={});const r=Bx(e,n,s,this.numConstants);e=r.inputs,n=r.initialState,s=r.constants;let a=[],i=[];if(null!=n){t.initialState=n,a=a.concat(n),this.stateSpec=[];for(const e of n)this.stateSpec.push(new my({shape:e.shape}));i=i.concat(this.stateSpec)}if(null!=s&&(t.constants=s,a=a.concat(s),this.numConstants=s.length),a[0]instanceof gy){const n=[e].concat(a),s=this.inputSpec.concat(i),r=this.inputSpec;this.inputSpec=s;const o=super.apply(n,t);return this.inputSpec=r,o}return super.apply(e,t)}call(e,t){return uo((()=>{const n=null==t?null:t.mask,s=null==t?null:t.training;let r=null==t?null:t.initialState;e=ly(e),null==r&&(r=this.stateful?this.states_:this.getInitialState(e));const a=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(r.length!==a)throw new Qf(`RNN Layer has ${a} state(s) but was passed ${r.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const i={training:s},o=Wx(((e,t)=>{const n=this.cell.call([e].concat(t),i);return[n[0],n.slice(1)]}),e,r,this.goBackwards,n,null,this.unroll,this.returnSequences),l=o[0],u=o[1],c=o[2];this.stateful&&this.resetStates(c,s);const h=this.returnSequences?u:l;return this.returnState?[h].concat(c):h}))}getInitialState(e){return uo((()=>{let t=cc(e.shape);return t=Lu(t,[1,2]),t=rg(t),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map((e=>e>1?cg(t,[1,e]):t)):this.cell.stateSize>1?[cg(t,[1,this.cell.stateSize])]:[t]}))}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){const e=super.getConfig(),t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(t.numConstants=this.numConstants);const n=this.cell.getConfig();return this.getClassName()===Vx.className&&(t.cell={className:this.cell.getClassName(),config:n}),Object.assign({},n,e,t)}static fromConfig(e,t,n={}){const s=Oy(t.cell,n);return new e(Object.assign(t,{cell:s}))}}Vx.className="RNN",Wi(Vx);class Ux extends wy{}class Gx extends Ux{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,xm(this.units,"units"),this.activation=ux(null==e.activation?this.DEFAULT_ACTIVATION:e.activation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=Bg(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Bg(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Bg(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=gx(e.kernelRegularizer),this.recurrentRegularizer=gx(e.recurrentRegularizer),this.biasRegularizer=gx(e.biasRegularizer),this.kernelConstraint=Rm(e.kernelConstraint),this.recurrentConstraint=Rm(e.recurrentConstraint),this.biasConstraint=Rm(e.biasConstraint),this.dropout=eg([1,tg([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=eg([1,tg([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=uy(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return uo((()=>{if(2!==e.length)throw new Qf(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let n=e[1];e=e[0];const s=null!=t.training&&t.training;let r;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Jx({ones:()=>pc(e),rate:this.dropout,training:s})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Jx({ones:()=>pc(n),rate:this.recurrentDropout,training:s}));const a=this.dropoutMask,i=this.recurrentDropoutMask;r=pg(null!=a?Co(e,a):e,this.kernel.read()),null!=this.bias&&(r=gg(r,this.bias.read())),null!=i&&(n=Co(n,i));let o=Io(r,pg(n,this.recurrentKernel.read()));return null!=this.activation&&(o=this.activation.apply(o)),[o,o]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:ox(this.activation),useBias:this.useBias,kernelInitializer:Pg(this.kernelInitializer),recurrentInitializer:Pg(this.recurrentInitializer),biasInitializer:Pg(this.biasInitializer),kernelRegularizer:fx(this.kernelRegularizer),recurrentRegularizer:fx(this.recurrentRegularizer),biasRegularizer:fx(this.biasRegularizer),activityRegularizer:fx(this.activityRegularizer),kernelConstraint:Em(this.kernelConstraint),recurrentConstraint:Em(this.recurrentConstraint),biasConstraint:Em(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign({},e,t)}}Gx.className="SimpleRNNCell",Wi(Gx);class Hx extends Vx{constructor(e){e.cell=new Gx(e),super(e)}call(e,t){return uo((()=>{null!=this.cell.dropoutMask&&(co(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(co(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})}))}static fromConfig(e,t){return new e(t)}}Hx.className="SimpleRNN",Wi(Hx);class jx extends Ux{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new Qf("GRUCell does not support reset_after parameter set to true.");this.units=e.units,xm(this.units,"units"),this.activation=ux(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=ux(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=Bg(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Bg(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Bg(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=gx(e.kernelRegularizer),this.recurrentRegularizer=gx(e.recurrentRegularizer),this.biasRegularizer=gx(e.biasRegularizer),this.kernelConstraint=Rm(e.kernelConstraint),this.recurrentConstraint=Rm(e.recurrentConstraint),this.biasConstraint=Rm(e.biasConstraint),this.dropout=eg([1,tg([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=eg([1,tg([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){const t=(e=uy(e))[e.length-1];this.kernel=this.addWeight("kernel",[t,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return uo((()=>{if(2!==e.length)throw new Qf(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);const n=null!=t.training&&t.training;let s=e[1];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Jx({ones:()=>pc(e),rate:this.dropout,training:n,count:3})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Jx({ones:()=>pc(s),rate:this.recurrentDropout,training:n,count:3}));const r=this.dropoutMask,a=this.recurrentDropoutMask;let i,o,l;0<this.dropout&&this.dropout<1&&(e=Co(e,r[0]));let u=pg(e,this.kernel.read());this.useBias&&(u=gg(u,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(s=Co(s,a[0]));const c=this.recurrentKernel.read(),[h,p]=sh(c,[2*this.units,this.units],c.rank-1),d=pg(s,h),[f,m,g]=sh(u,3,u.rank-1),[y,b]=sh(d,2,d.rank-1);i=this.recurrentActivation.apply(Io(f,y)),o=this.recurrentActivation.apply(Io(m,b));const x=pg(Co(o,s),p);l=this.activation.apply(Io(g,x));const w=Io(Co(i,s),Co(Io(1,Fu(i)),l));return[w,w]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:ox(this.activation),recurrentActivation:ox(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Pg(this.kernelInitializer),recurrentInitializer:Pg(this.recurrentInitializer),biasInitializer:Pg(this.biasInitializer),kernelRegularizer:fx(this.kernelRegularizer),recurrentRegularizer:fx(this.recurrentRegularizer),biasRegularizer:fx(this.biasRegularizer),activityRegularizer:fx(this.activityRegularizer),kernelConstraint:Em(this.kernelConstraint),recurrentConstraint:Em(this.recurrentConstraint),biasConstraint:Em(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign({},e,t)}}jx.className="GRUCell",Wi(jx);class qx extends Vx{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new jx(e),super(e)}call(e,t){return uo((()=>{null!=this.cell.dropoutMask&&(co(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(co(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}qx.className="GRU",Wi(qx);class Kx extends Ux{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,xm(this.units,"units"),this.activation=ux(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=ux(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=Bg(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Bg(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Bg(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=gx(e.kernelRegularizer),this.recurrentRegularizer=gx(e.recurrentRegularizer),this.biasRegularizer=gx(e.biasRegularizer),this.kernelConstraint=Rm(e.kernelConstraint),this.recurrentConstraint=Rm(e.recurrentConstraint),this.biasConstraint=Rm(e.biasConstraint),this.dropout=eg([1,tg([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=eg([1,tg([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var t;const n=(e=uy(e))[e.length-1];let s;if(this.kernel=this.addWeight("kernel",[n,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const e=this.biasInitializer,n=this.units;s=new((t=class extends kg{apply(t,s){const r=e.apply([n]),a=(new Ig).apply([n]),i=e.apply([2*n]);return ug(ug(r,a),i)}}).className="CustomInit",t)}else s=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,s,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(e,t){return uo((()=>{const n=null!=t.training&&t.training;if(3!==e.length)throw new Qf(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let s=e[1];const r=e[2];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Jx({ones:()=>pc(e),rate:this.dropout,training:n,count:4})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Jx({ones:()=>pc(s),rate:this.recurrentDropout,training:n,count:4}));const a=this.dropoutMask,i=this.recurrentDropoutMask;let o,l,u,c;0<this.dropout&&this.dropout<1&&(e=Co(e,a[0]));let h=pg(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(s=Co(s,i[0])),h=Io(h,pg(s,this.recurrentKernel.read())),this.useBias&&(h=gg(h,this.bias.read()));const[p,d,f,m]=sh(h,4,h.rank-1);o=this.recurrentActivation.apply(p),l=this.recurrentActivation.apply(d),u=Io(Co(l,r),Co(o,this.activation.apply(f))),c=this.recurrentActivation.apply(m);const g=Co(c,this.activation.apply(u));return[g,g,u]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:ox(this.activation),recurrentActivation:ox(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Pg(this.kernelInitializer),recurrentInitializer:Pg(this.recurrentInitializer),biasInitializer:Pg(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:fx(this.kernelRegularizer),recurrentRegularizer:fx(this.recurrentRegularizer),biasRegularizer:fx(this.biasRegularizer),activityRegularizer:fx(this.activityRegularizer),kernelConstraint:Em(this.kernelConstraint),recurrentConstraint:Em(this.recurrentConstraint),biasConstraint:Em(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign({},e,t)}}Kx.className="LSTMCell",Wi(Kx);class Xx extends Vx{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new Kx(e),super(e)}call(e,t){return uo((()=>{null!=this.cell.dropoutMask&&(co(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(co(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}Xx.className="LSTM",Wi(Xx);class Yx extends Ux{constructor(e){super(e),this.cells=e.cells}get stateSize(){const e=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?e.push(...t.stateSize):e.push(t.stateSize);return e}call(e,t){return uo((()=>{let n=e.slice(1);const s=[];for(const e of this.cells.slice().reverse())Array.isArray(e.stateSize)?s.push(n.splice(0,e.stateSize.length)):s.push(n.splice(0,1));s.reverse();const r=[];let a;for(let i=0;i<this.cells.length;++i){const o=this.cells[i];n=s[i],a=0===i?[e[0]].concat(n):[a[0]].concat(n),a=o.call(a,t),r.push(a.slice(1))}n=[];for(const e of r.slice().reverse())n.push(...e);return[a[0]].concat(n)}))}build(e){let t;iy(e)&&(e=e[0]),this.cells.forEach(((n,s)=>{qm(`RNNCell_${s}`,(()=>{n.build(e),t=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,e=[e[0],t]}))})),this.built=!0}getConfig(){const e=super.getConfig(),t={cells:this.cells.map((e=>({className:e.getClassName(),config:e.getConfig()})))};return Object.assign({},e,t)}static fromConfig(e,t,n={}){const s=[];for(const e of t.cells)s.push(Oy(e,n));return new e({cells:s})}get trainableWeights(){if(!this.trainable)return[];const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.cells)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t.concat(e)}return e}getWeights(){const e=[];for(const t of this.cells)e.push(...t.weights);return dy(e)}setWeights(e){const t=[];for(const n of this.cells){const s=n.weights.length,r=e.splice(s);for(let e=0;e<n.weights.length;++e)t.push([n.weights[e],r[e]])}fy(t)}}function Jx(e){const{ones:t,rate:n,training:s=!1,count:r=1}=e,a=()=>yg(t(),n),i=()=>bg(a,t,s);return!r||r<=1?ho(i().clone()):Array(r).fill(void 0).map(i).map((e=>ho(e.clone())))}Yx.className="StackedRNNCells",Wi(Yx);class Zx extends Vx{constructor(e){if(e.unroll)throw new em("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new em("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new my({ndim:5})]}call(e,t){return uo((()=>{if(null!=this.cell.dropoutMask&&(co(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(co(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),t&&t.constants)throw new Qf("ConvRNN2D cell does not support constants");const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})}))}computeOutputShape(e){let t=this.computeSingleOutputShape(e);return this.returnSequences||(t=[t[0],...t.slice(2)]),this.returnState&&(t=[t,...Array(2).fill([e[0],...t.slice(-3)])]),t}getInitialState(e){return uo((()=>{const{stateSize:t}=this.cell,n=e.shape,s=this.computeSingleOutputShape(n),r=cc([s[0],...s.slice(2)]);return Array.isArray(t)?Array(t.length).fill(r):[r]}))}resetStates(e,t=!1){uo((()=>{if(!this.stateful)throw new Jf("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape,s=this.computeSingleOutputShape(n),r=[s[0],...s.slice(2)];if(null==n[0])throw new Qf("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>cc(r))):this.states_=[cc(r)];else if(null==e)co(this.states_),null!=this.keptStates&&(co(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>cc(r))):this.states_[0]=cc(r);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new Qf(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);t?this.keptStates.push(this.states_.slice()):co(this.states_);for(let t=0;t<this.states_.length;++t){const n=e[t],s=r;if(!re(n.shape,s))throw new Qf(`State ${t} is incompatible with layer ${this.name}: expected shape=${s}, received shape=${n.shape}`);this.states_[t]=n}}this.states_=this.states_.map((e=>ho(e.clone())))}))}computeSingleOutputShape(e){const{dataFormat:t,filters:n,kernelSize:s,padding:r,strides:a,dilationRate:i}=this.cell,o="channelsFirst"===t,l=e[o?3:2],u=e[o?4:3],c=Nx(l,s[0],r,a[0],i[0]),h=Nx(u,s[1],r,a[1],i[1]);return[...e.slice(0,2),...o?[n,c,h]:[c,h,n]]}}Zx.className="ConvRNN2D";class Qx extends Kx{constructor(e){const{filters:t,kernelSize:n,strides:s,padding:r,dataFormat:a,dilationRate:i}=e;super(Object.assign({},e,{units:t})),this.filters=t,xm(this.filters,"filters"),this.kernelSize=Ix(n,2,"kernelSize"),this.kernelSize.forEach((e=>xm(e,"kernelSize"))),this.strides=Ix(s||1,2,"strides"),this.strides.forEach((e=>xm(e,"strides"))),this.padding=r||"valid",Um(this.padding),this.dataFormat=a||"channelsLast",Vm(this.dataFormat),this.dilationRate=Ix(i||1,2,"dilationRate"),this.dilationRate.forEach((e=>xm(e,"dilationRate")))}build(e){var t;e=uy(e);const n="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[n])throw new Qf(`The channel dimension of the input should be defined. Found ${e[n]}`);const s=e[n],r=this.kernelSize.concat([s,4*this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const a=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",a,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let e;if(this.unitForgetBias){const n=this.biasInitializer,s=this.filters;e=new((t=class extends kg{apply(e,t){return lg([n.apply([s]),hc([s]),n.apply([2*s])])}}).className="CustomInit",t)}else e=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,e,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,t){return uo((()=>{if(3!==e.length)throw new Qf(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);const n=t.training||!1,s=e[0],r=e[1],a=e[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Jx({ones:()=>pc(s),rate:this.dropout,training:n,count:4}));const i=this.dropoutMask,o=(e,t,n)=>t&&t[n]?Co(t[n],e):e;let l=o(s,i,0),u=o(s,i,1),c=o(s,i,2),h=o(s,i,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Jx({ones:()=>pc(r),rate:this.recurrentDropout,training:n,count:4}));const p=this.recurrentDropoutMask;let d=o(r,p,0),f=o(r,p,1),m=o(r,p,2),g=o(r,p,3);const[y,b,x,w]=sh(this.kernel.read(),4,3),[k,v,I,N]=this.useBias?sh(this.bias.read(),4):[null,null,null,null];l=this.inputConv(l,y,k,this.padding),u=this.inputConv(u,b,v,this.padding),c=this.inputConv(c,x,I,this.padding),h=this.inputConv(h,w,N,this.padding);const[S,C,$,T]=sh(this.recurrentKernel.read(),4,3);d=this.recurrentConv(d,S),f=this.recurrentConv(f,C),m=this.recurrentConv(m,$),g=this.recurrentConv(g,T);const E=this.recurrentActivation.apply(Io(l,d)),A=this.recurrentActivation.apply(Io(u,f)),R=Io(Co(A,a),Co(E,this.activation.apply(Io(c,m)))),D=Co(this.recurrentActivation.apply(Io(h,g)),this.activation.apply(R));return[D,D,R]}))}getConfig(){const e=super.getConfig(),{units:t}=e,n=function(e,t){var n={};for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&t.indexOf(s)<0&&(n[s]=e[s]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(s=Object.getOwnPropertySymbols(e);r<s.length;r++)t.indexOf(s[r])<0&&Object.prototype.propertyIsEnumerable.call(e,s[r])&&(n[s[r]]=e[s[r]])}return n}(e,["units"]),s={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign({},n,s)}inputConv(e,t,n,s){const r=jl(e,t,this.strides,s||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return n?gg(r,n,this.dataFormat):r}recurrentConv(e,t){return jl(e,t,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}Qx.className="ConvLSTM2DCell",Wi(Qx);class ew extends Zx{constructor(e){const t=new Qx(e);super(Object.assign({},e,{cell:t}))}static fromConfig(e,t){return new e(t)}}ew.className="ConvLSTM2D",Wi(ew);class tw extends wy{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(null==this.noiseShape)return this.noiseShape;const t=e.shape,n=[];for(let e=0;e<this.noiseShape.length;++e)n.push(null==this.noiseShape[e]?t[e]:this.noiseShape[e]);return n}call(e,t){return uo((()=>{this.invokeCallHook(e,t);const n=ly(e);if(0<this.rate&&this.rate<1){const e=null!=t.training&&t.training,s=this.getNoiseShape(n);return bg((()=>yg(n,this.rate,s,this.seed)),(()=>n),e)}return e}))}getConfig(){const e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},t=super.getConfig();return Object.assign(e,t),e}dispose(){return super.dispose()}}tw.className="Dropout",Wi(tw);class nw extends tw{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){const t=e.shape;return[t[0],1,t[2]]}}nw.className="SpatialDropout1D",Wi(nw);class sw extends wy{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){let t=null;null!=e.batchSize&&(t=e.batchSize),this.batchInputShape=[t,e.inputDim]}this.units=e.units,xm(this.units,"units"),this.activation=ux(e.activation),null!=e.useBias&&(this.useBias=e.useBias),this.kernelInitializer=Bg(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=Bg(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=Rm(e.kernelConstraint),this.biasConstraint=Rm(e.biasConstraint),this.kernelRegularizer=gx(e.kernelRegularizer),this.biasRegularizer=gx(e.biasRegularizer),this.activityRegularizer=gx(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){const t=(e=uy(e))[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[t,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:t}}],this.built=!0}computeOutputShape(e){const t=(e=uy(e)).slice();return t[t.length-1]=this.units,t}call(e,t){return uo((()=>{this.invokeCallHook(e,t);const n=ly(e),s=km(this.activation.getClassName());let r;return null!=s?r=pg(n,this.kernel.read(),s,this.bias?this.bias.read():null):(r=pg(n,this.kernel.read()),null!=this.bias&&(r=gg(r,this.bias.read())),null!=this.activation&&(r=this.activation.apply(r))),r}))}getConfig(){const e={units:this.units,activation:ox(this.activation),useBias:this.useBias,kernelInitializer:Pg(this.kernelInitializer),biasInitializer:Pg(this.biasInitializer),kernelRegularizer:fx(this.kernelRegularizer),biasRegularizer:fx(this.biasRegularizer),activityRegularizer:fx(this.activityRegularizer),kernelConstraint:Em(this.kernelConstraint),biasConstraint:Em(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}sw.className="Dense",Wi(sw);class rw extends wy{constructor(e){super(e=e||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){e=uy(e);for(const t of e.slice(1))if(null==t)throw new Qf(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],Zm(e,1)]}call(e,t){return uo((()=>{this.invokeCallHook(e,t);let n=ly(e);if("channelsFirst"===this.dataFormat&&n.rank>1){const e=[0];for(let t=2;t<n.rank;++t)e.push(t);e.push(1),n=n.transpose(e)}return function(e){if(e.rank<=1)throw new Qf(`batchFlatten requires a minimum rank of 2. Got rank: ${e.rank}.`);const t=[e.shape[0],Zm(e.shape,1)];return e.reshape(t)}(n)}))}getConfig(){const e={};null!=this.dataFormat&&(e.dataFormat=this.dataFormat);const t=super.getConfig();return Object.assign(e,t),e}}rw.className="Flatten",Wi(rw);class aw extends wy{constructor(e){super(e),this.supportsMasking=!0,this.activation=ux(e.activation)}call(e,t){return uo((()=>{this.invokeCallHook(e,t);const n=ly(e);return this.activation.apply(n)}))}getConfig(){const e={activation:ox(this.activation)},t=super.getConfig();return Object.assign(e,t),e}}aw.className="Activation",Wi(aw);class iw extends wy{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,t){return uo((()=>{return e=ly(e),t=e,n=this.n,uo((()=>{if(2!==t.shape.length)throw new Qf(`repeat() expects a rank-2 tensor, but received a rank-${t.shape.length} tensor.`);return cg(rg(t,1),[1,n,1])}));var t,n}))}getConfig(){const e={n:this.n},t=super.getConfig();return Object.assign(e,t),e}}iw.className="RepeatVector",Wi(iw);class ow extends wy{constructor(e){super(e),this.targetShape=e.targetShape;for(let e=0;e<this.targetShape.length;++e)this.isUnknown(this.targetShape[e])&&(this.targetShape[e]=null)}isUnknown(e){return e<0||null==e}fixUnknownDimension(e,t){const n="Total size of new array must be unchanged.",s=t.slice();let r=1,a=null;for(let e=0;e<s.length;++e){const t=s[e];if(this.isUnknown(t)){if(null!==a)throw new Qf("Can only specifiy one unknown dimension.");a=e}else r*=t}const i=Zm(e);if(null!==a){if(0===r||i%r!=0)throw new Qf(n);s[a]=i/r}else if(i!==r)throw new Qf(n);return s}computeOutputShape(e){let t=!1;for(let n=0;n<e.length;++n)if(this.isUnknown(e[n])){t=!0;break}return t?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,t){return uo((()=>{this.invokeCallHook(e,t);const n=ly(e),s=n.shape,r=s.slice(0,1).concat(this.fixUnknownDimension(s.slice(1),this.targetShape));return n.reshape(r)}))}getConfig(){const e={targetShape:this.targetShape},t=super.getConfig();return Object.assign(e,t),e}}ow.className="Reshape",Wi(ow);class lw extends wy{constructor(e){if(super(e),null==e.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);const t=ng(1,e.dims.length+1);if(!re(e.dims.slice().sort(),t))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new my({ndim:this.dims.length+1})]}computeOutputShape(e){const t=(e=uy(e)).slice();return this.dims.forEach(((n,s)=>{t[s+1]=e[n]})),t}call(e,t){return di(ly(e),this.dimsIncludingBatch)}getConfig(){const e={dims:this.dims},t=super.getConfig();return Object.assign(e,t),e}}lw.className="Permute",Wi(lw);class uw extends wy{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,this.maskValue=null!=e?null==e.maskValue?0:e.maskValue:0}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={maskValue:this.maskValue};return Object.assign(t,e),t}computeMask(e,t){const n=ly(e);return rl(uc(n,this.maskValue),-1)}call(e,t){return uo((()=>{this.invokeCallHook(e,t);const n=ly(e),s=rl(uc(n,this.maskValue),-1,!0);return n.mul(s.asType(n.dtype))}))}}uw.className="Masking",Wi(uw);class cw extends wy{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){let t=null;null!=e.batchSize&&(t=e.batchSize),null==e.inputLength?this.batchInputShape=[t,null]:this.batchInputShape=[t].concat(om(e.inputLength))}this.inputDim=e.inputDim,xm(this.inputDim,"inputDim"),this.outputDim=e.outputDim,xm(this.outputDim,"outputDim"),this.embeddingsInitializer=Bg(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=gx(e.embeddingsRegularizer),this.activityRegularizer=gx(e.activityRegularizer),this.embeddingsConstraint=Rm(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,t){return uo((()=>this.maskZero?(e=ly(e),uc(e,Eo(e))):null))}computeOutputShape(e){if(e=uy(e),null==this.inputLength)return[...e,this.outputDim];const t=om(this.inputLength);if(t.length!==e.length-1)throw new Qf(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);{let n=0;for(let s=0;s<t.length;++s){const r=t[s],a=e[s+1];if(null!=r&&null!=a&&r!==a)throw new Qf(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);null==r&&(t[n]=a),n++}}return[e[0],...t,this.outputDim]}call(e,t){return uo((()=>{this.invokeCallHook(e,t);let n=ly(e);return"int32"!==n.dtype&&(n=sg(n,"int32")),dg(this.embeddings.read(),n.as1D()).reshape(uy(this.computeOutputShape(n.shape)))}))}getConfig(){const e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:Pg(this.embeddingsInitializer),embeddingsRegularizer:fx(this.embeddingsRegularizer),activityRegularizer:fx(this.activityRegularizer),embeddingsConstraint:Em(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},t=super.getConfig();return Object.assign(e,t),e}}cw.className="Embedding",Wi(cw);class hw extends wy{constructor(e){super(e||{}),this.supportsMasking=!0}mergeFunction(e){throw new em}computeElementwiseOpOutputShape(e,t){if(null==e||null==t)return null;if(e.length<t.length)return this.computeElementwiseOpOutputShape(t,e);if(0===t.length)return e;const n=e.slice(0,e.length-t.length);for(let s=0;s<t.length;++s){const r=e[e.length-t.length+s],a=t[s];if(null==r||null==a||r<0||a<0)n.push(null);else if(1===r)n.push(a);else if(1===a)n.push(r);else{if(r!==a)throw new Qf("Operands could not be broadcast together with shapes "+JSON.stringify(e)+" "+JSON.stringify(t));n.push(r)}}return n}build(e){if(Array.isArray(e)&&!Array.isArray(e[0])&&(e=[uy(e)]),e.length<2)throw new Qf(`A merge layer should be called on an Array of at least 2 inputs. Got ${e.length} input(s).`);let t=[];for(const n of e)null!=n&&null!==n[0]&&t.push(n[0]);if(t=mm(t),t.length>1)throw new Qf(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e)}.`);let n=null==e[0]?null:e[0].slice(1);for(let t=1;t<e.length;++t){const s=null==e[t]?null:e[t].slice(1);n=this.computeElementwiseOpOutputShape(n,s)}const s=e.map((e=>e.length));-1===e.indexOf(null)&&1===mm(s).length?this.reshapeRequired=!1:this.reshapeRequired=!0}call(e,t){return uo((()=>{if(this.reshapeRequired){const t=[],n=e.map((e=>e.rank));if(-1===n.indexOf(null)){const s=tg(n);for(let n of e){const e=n.rank;for(let t=0;t<s-e;++t)n=rg(n,1);t.push(n)}return this.mergeFunction(t)}{let n=!1;for(const s of e){const e=s.rank;if(null==e){const e=s.shape,r=e[0],a=e.slice(1).concat([r]);let i=s.reshape([r].concat(Zm(e.slice(1))));i=di(i,[1,0]),i=i.reshape(a),t.push(i),n=!0}else if(e>1){const r=ng(1,e).concat([0]);t.push(di(s,r)),n=!0}else t.push(s)}let s=this.mergeFunction(t);const r=s.rank;if(n)if(null==r){const e=s.shape,t=e[e.length-1],n=[t].concat(e.slice(0,e.length-1));s=di(s.reshape([-1,t]),[1,0]).reshape(n)}else if(r>1){const e=[r-1].concat(ng(0,r-1));s=di(s,e)}return s}}return this.mergeFunction(e)}))}computeOutputShape(e){let t;t=null==e[0]?null:e[0].slice(1);for(let n=1;n<e.length;++n){const s=null==e[n]?null:e[n].slice(1);t=this.computeElementwiseOpOutputShape(t,s)}let n=[];for(const t of e)null!=t&&null!==t[0]&&n.push(t[0]);return n=mm(n),t=1===n.length?n.concat(t):[null].concat(t),t}computeMask(e,t){return uo((()=>{if(null==t)return null;if(!Array.isArray(t))throw new Qf("`mask` should be an Array");if(!Array.isArray(e))throw new Qf("`inputs` should be an Array");if(t.length!==e.length)throw new Qf(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${e.length} vs ${t.length})`);if(t.every((e=>null==e)))return null;let n=(t=t.map((e=>null==e?e:fu(e,0))))[0];for(let e=1;e<t.length-1;++e)n=Ku(n,t[e]);return n}))}}class pw extends hw{constructor(e){super(e)}mergeFunction(e){return uo((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=Io(t,e[n]);return t}))}}pw.className="Add",Wi(pw);class dw extends hw{constructor(e){super(e)}mergeFunction(e){return uo((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=Co(t,e[n]);return t}))}}dw.className="Multiply",Wi(dw);class fw extends hw{constructor(e){super(e)}mergeFunction(e){return uo((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=Io(t,e[n]);return Co(1/e.length,t)}))}}fw.className="Average",Wi(fw);class mw extends hw{constructor(e){super(e)}mergeFunction(e){return uo((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=Xo(t,e[n]);return t}))}}mw.className="Maximum",Wi(mw);class gw extends hw{constructor(e){super(e)}mergeFunction(e){return uo((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=sc(t,e[n]);return t}))}}gw.className="Minimum",Wi(gw);class yw extends hw{constructor(e){super(e),this.DEFAULT_AXIS=-1,null==e&&(e={}),this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!Array.isArray(e)||!Array.isArray(e[0])||1===e.length)throw new Qf("A `Concatenate` layer should be called on a list of at least 2 inputs");let t=!0;for(const n of e)if(null!=n){t=!1;break}if(t)return;const n=[];for(let t=0;t<e.length;++t){const s=e[t].slice();s.splice(this.axis,1);let r=!1;for(const e of n)if(re(e,s)){r=!0;break}r||n.push(s)}if(n.length>1)throw new Qf("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return uo((()=>lg(e,this.axis)))}computeOutputShape(e){if(!Array.isArray(e)||!Array.isArray(e[0]))throw new Qf("A `Concatenate` layer should be called on a list of inputs.");const t=e,n=t[0].slice(),s=this.axis<0?n.length+this.axis:this.axis;for(const e of t.slice(1)){if(null==n[s]||null==e[s]){n[s]=null;break}n[s]+=e[s]}return n}computeMask(e,t){if(null==t)return null;if(!Array.isArray(t))throw new Qf("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new Qf("`inputs` should be an array for Concatenate");if(t.length!==e.length)throw new Qf(`Mismatch in the length of mask (${t.length}) and the legnth of inputs (${e.length})`);return uo((()=>{let n=!0;if(t.forEach((e=>{null==e||(n=!1)})),n)return null;const s=[];for(let n=0;n<e.length;++n)null==t[n]?s.push(pc(e[n]).asType("bool")):t[n].rank<e[n].rank?s.push(fu(t[n],-1)):s.push(t[n]);const r=Tl(s,this.axis);return sl(r,-1,!1)}))}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function bw(e,t){for(;e<0;)e+=t;return e}yw.className="Concatenate",Wi(yw);class xw extends hw{constructor(e){super(e),this.axes=e.axes,this.normalize=null!=e.normalize&&e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){Z(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0],n=e[1];if(t.length>3||n.length>3)throw new em("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(t,n);if(t[s[0]]!==n[s[1]])throw new Qf(`Dimension incompatibility: ${t[s[0]]} !== ${n[s[1]]}`)}mergeFunction(e){if(2!==e.length)throw new Qf(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let t,n=e[0],s=e[1];return t=Array.isArray(this.axes)?this.axes.map(((t,n)=>bw(t,e[n].shape.length))):[bw(this.axes,n.shape.length),bw(this.axes,s.shape.length)],this.normalize&&(n=My(n,t[0]),s=My(s,t[1])),function(e,t,n){if(e.shape.length>3||t.shape.length>3)throw new em("batchDot is not implemented for tensors of 4D or higher rank yet");if(Z(e.shape.length>=2,(()=>`batchDot requires the rank of x to be >= 2, but got ${e.shape.length}`)),Z(e.shape.length>=2,(()=>`batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`)),"number"==typeof n&&(n=[n,n]),"complex64"===e.dtype||"complex64"===t.dtype)throw new em("batchDot is not implemented for complex64-type Tensors yet.");const s=e.shape.length,r=t.shape.length;null==n&&(n=[s-1,r-2]);const a=n;return uo((()=>{let n,i;if(s>r){n=s-r;const e=[];for(let t=0;t<n;++t)e.push(1);t=t.reshape(t.shape.concat(e))}else if(r>s){n=r-s;const t=[];for(let e=0;e<n;++e)t.push(1);e=e.reshape(e.shape.concat(t))}else n=0;if(2===e.shape.length&&2===t.shape.length)i=a[0]===a[1]?e.mul(t).sum(a[0]):e.transpose([1,0]).mul(t).sum(a[1]);else{const n=a[0]!==e.shape.length-1,s=a[1]===t.shape.length-1;i=e.matMul(t,n,s)}if(n>0){let e;e=s>r?s+r-3:s-1;const t=[];for(let s=e;s<e+n;++s)t.push(s);i=i.squeeze(t)}return 1===i.shape.length&&(i=i.expandDims(1)),i}))}(n,s,t)}interpretAxes(e,t){let n;return n=Array.isArray(this.axes)?this.axes:[bw(this.axes,e.length),bw(this.axes,t.length)],n}computeOutputShape(e){Z(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0].slice(),n=e[1].slice();if(t.length>3||n.length>3)throw new em("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(t,n);t.splice(s[0],1),n.splice(s[1],1),n.splice(0,1);const r=t.concat(n);return 1===r.length&&r.push(1),r}computeMask(e,t){return null}getConfig(){const e={axes:this.axes,normalize:this.normalize},t=super.getConfig();return Object.assign(e,t),e}}xw.className="Dot",Wi(xw);class ww extends wy{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={stddev:this.stddev};return Object.assign(t,e),t}call(e,t){return uo((()=>{this.invokeCallHook(e,t);const n=ly(e);return bg((()=>hg(n.shape,0,this.stddev).add(n)),(()=>n),t.training||!1)}))}}ww.className="GaussianNoise",Wi(ww);class kw extends wy{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return uo((()=>{this.invokeCallHook(e,t);const n=ly(e);return this.rate>0&&this.rate<1?bg((()=>{const e=Math.sqrt(this.rate/(1-this.rate));return n.mul(hg(n.shape,1,e))}),(()=>n),t.training||!1):n}))}}kw.className="GaussianDropout",Wi(kw);class vw extends wy{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||ly(e).shape}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return uo((()=>{if(this.rate<1&&this.rate>0){const n=this._getNoiseShape(e),s=()=>{const t=ly(e),s=-1.7580993408473766;let r=ku(Ac(n),this.rate);r=sg(r,"float32");const a=((1-this.rate)*(1+this.rate*s**2))**-.5,i=-a*s*this.rate;return t.mul(r).add(r.add(-1).mul(s)).mul(a).add(i)};return bg(s,(()=>ly(e)),t.training||!1)}return e}))}}function Iw(e,t,n,s,r,a=.001){let i;if(2===e.rank)i=Ol(e,t,n,s,r,a);else if(3===e.rank)i=Ml(e,t,n,s,r,a);else{if(4!==e.rank)throw new em(`batchNormalization is not implemented for array of rank ${e.rank} yet`);i=Ll(e,t,n,s,r,a)}return i}vw.className="AlphaDropout",Wi(vw);class Nw extends wy{constructor(e){null==e&&(e={}),super(e),this.supportsMasking=!0,this.axis=null==e.axis?-1:e.axis,this.momentum=null==e.momentum?.99:e.momentum,this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=Bg(e.betaInitializer||"zeros"),this.gammaInitializer=Bg(e.gammaInitializer||"ones"),this.movingMeanInitializer=Bg(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=Bg(e.movingVarianceInitializer||"ones"),this.betaConstraint=Rm(e.betaConstraint),this.gammaConstraint=Rm(e.gammaConstraint),this.betaRegularizer=gx(e.betaRegularizer),this.gammaRegularizer=gx(e.gammaRegularizer)}build(e){e=uy(e);const t=this.axis>=0?this.axis:this.axis+e.length,n=e[t];if(null==n)throw new Qf(`Axis ${t} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);this.inputSpec=[new my({ndim:e.length,axes:{[t]:n}})];const s=[n];this.scale&&(this.gamma=this.addWeight("gamma",s,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",s,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",s,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",s,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,t){return uo((()=>{const n=null!=t.training&&t.training,s=ly(e),r=s.shape,a=r.length,i=ng(0,a),o=this.axis>=0?this.axis:this.axis+a;i.splice(o,1);const l=sm(1,a);l[o]=r[o];const u=i.slice();u.sort();const c=!re(u,ng(0,a).slice(0,a-1));if(!n)return(()=>{if(c){const e=this.movingMean.read().reshape(l),t=this.movingVariance.read().reshape(l),n=this.center?this.beta.read().reshape(l):null,r=this.scale?this.gamma.read().reshape(l):null;return Iw(s,e,t,n,r,this.epsilon)}return Iw(s,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[h,p,d]=function(e,t,n,s,r=.001){return re(s.slice().sort(),ng(0,e.rank-1))?function(e,t,n,s,r=.001){return uo((()=>{const a=ic(e,s),i=a.mean,o=a.variance;return[Iw(e,i,o,n,t,r),i,o]}))}(e,t,n,s,r):function(e,t,n,s,r=.001){return uo((()=>{const a=ic(e,s),i=a.mean,o=a.variance,l=[];for(const t of ng(0,e.rank))-1!==s.indexOf(t)?l.push(1):l.push(e.shape[t]);const u=i.reshape(l),c=o.reshape(l),h=null==t?null:t.reshape(l),p=null==n?null:n.reshape(l);return[Iw(e,u,c,p,h,r),i,o]}))}(e,t,n,s,r)}(s,this.gamma.read(),this.beta.read(),i,this.epsilon),f=(e,t,n)=>{uo((()=>{const s=1-n,r=e.read(),a=r.sub(t).mul(s);e.write(r.sub(a))}))};return(()=>{f(this.movingMean,p,this.momentum),f(this.movingVariance,d,this.momentum)})(),h}))}getConfig(){const e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Pg(this.betaInitializer),gammaInitializer:Pg(this.gammaInitializer),movingMeanInitializer:Pg(this.movingMeanInitializer),movingVarianceInitializer:Pg(this.movingVarianceInitializer),betaRegularizer:fx(this.betaRegularizer),gammaRegularizer:fx(this.gammaRegularizer),betaConstraint:Em(this.betaConstraint),gammaConstraint:Em(this.gammaConstraint)},t=super.getConfig();return Object.assign(e,t),e}}Nw.className="BatchNormalization",Wi(Nw);class Sw extends wy{constructor(e){if(null==e&&(e={}),super(e),this.axis=null==e.axis?-1:e.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else{if(!Array.isArray(this.axis))throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);for(const e of this.axis)if(!Number.isInteger(e))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=Bg(e.betaInitializer||"zeros"),this.gammaInitializer=Bg(e.gammaInitializer||"ones"),this.betaRegularizer=gx(e.betaRegularizer),this.gammaRegularizer=gx(e.gammaRegularizer),this.supportsMasking=!0}build(e){const t=(e=uy(e)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let e=0;e<this.axis.length;++e)this.axis[e]<0&&(this.axis[e]+=t);for(const e of this.axis)if(e<0||e>=t)throw new Error(`Invalid axis: ${e}`);if(this.axis.length!==mm(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const n=this.axis.map((t=>e[t]));this.scale?this.gamma=this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,!0):this.gamma=null,this.center?this.beta=this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,!0):this.beta=null,this.built=!0}call(e,t){const n=ly(e),s=n.shape,r=s.length;return uo((()=>{let{mean:e,variance:t}=ic(n,this.axis,!0);const a=sm(1,r);for(const e of this.axis)a[e]=s[e];const i=e=>null!=e&&e.shape.length!==r&&this.axis!==[r-1]?e.reshape(a):e;let o=i(this.gamma.read()),l=i(this.beta.read());const u=[],c=[];for(let e=0;e<r;++e)-1!==this.axis.indexOf(e)?(u.push(s[e]),c.push(1)):(u.push(1),c.push(s[e]));return e=e.tile(u),t=t.tile(u),o=o.tile(c),l=l.tile(c),Iw(n,e,t,l,o,this.epsilon)}))}getConfig(){const e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Pg(this.betaInitializer),gammaInitializer:Pg(this.gammaInitializer),betaRegularizer:fx(this.betaRegularizer),gammaRegularizer:fx(this.gammaRegularizer)},t=super.getConfig();return Object.assign(e,t),e}}Sw.className="LayerNormalization",Wi(Sw);class Cw extends wy{constructor(e){if(null==e&&(e={}),super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,null==e.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,2!==e.padding.length)throw new Qf(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);let t,n;if("number"==typeof e.padding[0])t=[e.padding[0],e.padding[0]],n=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new Qf(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(t=e.padding[0],2!==e.padding[1].length)throw new Qf(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);n=e.padding[1]}this.padding=[t,n]}this.inputSpec=[new my({ndim:4})]}computeOutputShape(e){let t,n;return e=uy(e),"channelsFirst"===this.dataFormat?(t=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],t,n]):(t=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],t,n,e[3]])}call(e,t){return uo((()=>{return t=ly(e),n=this.padding,s=this.dataFormat,uo((()=>{if(4!==t.rank)throw new Qf(`temporalPadding expects input tensor to be 4-D, but received a ${t.rank}-D tensor.`);if(null==n&&(n=[[1,1],[1,1]]),2!==n.length||2!==n[0].length||2!==n[1].length)throw new Qf("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==s&&(s="channelsLast"),"channelsLast"!==s&&"channelsFirst"!==s)throw new Qf(`Unknown data format: ${s}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let e;return e="channelsFirst"===s?[[0,0],[0,0],n[0],n[1]]:[[0,0],n[0],n[1],[0,0]],fc(t,e)}));var t,n,s}))}getConfig(){const e={padding:this.padding,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}function $w(e,t,n,s,r,a){return uo((()=>{let i;Vm(r),Gm(a),Um(s),null==n&&(n=[1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==a&&(a="max"),e=Cx(e,r);const o="same"===s?"same":"valid";return i="max"===a?Zu(e,t,n,o):Cl(e,t,n,o),"channelsFirst"===r&&(i=di(i,[0,3,1,2])),i}))}function Tw(e,t,n,s,r,a){return uo((()=>{let i;Vm(r),Gm(a),Um(s),null==n&&(n=[1,1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==a&&(a="max"),e=$x(e,r);const o="same"===s?"same":"valid";return i="max"===a?Qu(e,t,n,o):$l(e,t,n,o),"channelsFirst"===r&&(i=di(i,[0,4,1,2,3])),i}))}Cw.className="ZeroPadding2D",Wi(Cw);class Ew extends wy{constructor(e){if(null==e.poolSize&&(e.poolSize=2),super(e),"number"==typeof e.poolSize)this.poolSize=[e.poolSize];else{if(!Array.isArray(e.poolSize)||1!==e.poolSize.length||"number"!=typeof e.poolSize[0])throw new Qf(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.poolSize)}`);this.poolSize=e.poolSize}if(xm(this.poolSize,"poolSize"),null==e.strides)this.strides=this.poolSize;else if("number"==typeof e.strides)this.strides=[e.strides];else{if(!Array.isArray(e.strides)||1!==e.strides.length||"number"!=typeof e.strides[0])throw new Qf(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.strides)}`);this.strides=e.strides}xm(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,Um(this.padding),this.inputSpec=[new my({ndim:3})]}computeOutputShape(e){const t=Nx((e=uy(e))[1],this.poolSize[0],this.padding,this.strides[0]);return[e[0],t,e[2]]}call(e,t){return uo((()=>{this.invokeCallHook(e,t),e=rg(ly(e),2);const n=this.poolingFunction(ly(e),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return ih(n,[2])}))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides},t=super.getConfig();return Object.assign(e,t),e}}class Aw extends Ew{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return Vm(r),Um(s),$w(e,t,n,s,r,"max")}}Aw.className="MaxPooling1D",Wi(Aw);class Rw extends Ew{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return Vm(r),Um(s),$w(e,t,n,s,r,"avg")}}Rw.className="AveragePooling1D",Wi(Rw);class Dw extends wy{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(2!==e.strides.length)throw new Qf(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides];xm(this.poolSize,"poolSize"),xm(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Vm(this.dataFormat),Um(this.padding),this.inputSpec=[new my({ndim:4})]}computeOutputShape(e){e=uy(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2];return t=Nx(t,this.poolSize[0],this.padding,this.strides[0]),n=Nx(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n]:[e[0],t,n,e[3]]}call(e,t){return uo((()=>(this.invokeCallHook(e,t),this.poolingFunction(ly(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class Fw extends Dw{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return Vm(r),Um(s),$w(e,t,n,s,r,"max")}}Fw.className="MaxPooling2D",Wi(Fw);class _w extends Dw{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return Vm(r),Um(s),$w(e,t,n,s,r,"avg")}}_w.className="AveragePooling2D",Wi(_w);class Ow extends wy{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(3!==e.strides.length)throw new Qf(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides,e.strides];xm(this.poolSize,"poolSize"),xm(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Vm(this.dataFormat),Um(this.padding),this.inputSpec=[new my({ndim:5})]}computeOutputShape(e){e=uy(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],s="channelsFirst"===this.dataFormat?e[4]:e[3];return t=Nx(t,this.poolSize[0],this.padding,this.strides[0]),n=Nx(n,this.poolSize[1],this.padding,this.strides[1]),s=Nx(s,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n,s]:[e[0],t,n,s,e[4]]}call(e,t){return uo((()=>(this.invokeCallHook(e,t),this.poolingFunction(ly(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class Mw extends Ow{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return Vm(r),Um(s),Tw(e,t,n,s,r,"max")}}Mw.className="MaxPooling3D",Wi(Mw);class Lw extends Ow{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return Vm(r),Um(s),Tw(e,t,n,s,r,"avg")}}Lw.className="AveragePooling3D",Wi(Lw);class zw extends wy{constructor(e){super(e),this.inputSpec=[new my({ndim:3})]}computeOutputShape(e){return[e[0],e[2]]}call(e,t){throw new em}}class Pw extends zw{constructor(e){super(e||{})}call(e,t){return uo((()=>{const t=ly(e);return tc(t,1)}))}}Pw.className="GlobalAveragePooling1D",Wi(Pw);class Bw extends zw{constructor(e){super(e||{})}call(e,t){return uo((()=>{const t=ly(e);return Mu(t,1)}))}}Bw.className="GlobalMaxPooling1D",Wi(Bw);class Ww extends wy{constructor(e){super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Vm(this.dataFormat),this.inputSpec=[new my({ndim:4})]}computeOutputShape(e){return"channelsLast"===this.dataFormat?[e[0],e[3]]:[e[0],e[1]]}call(e,t){throw new em}getConfig(){const e={dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class Vw extends Ww{call(e,t){return uo((()=>{const t=ly(e);return"channelsLast"===this.dataFormat?tc(t,[1,2]):tc(t,[2,3])}))}}Vw.className="GlobalAveragePooling2D",Wi(Vw);class Uw extends Ww{call(e,t){return uo((()=>{const t=ly(e);return"channelsLast"===this.dataFormat?Mu(t,[1,2]):Mu(t,[2,3])}))}}Uw.className="GlobalMaxPooling2D",Wi(Uw);class Gw extends wy{constructor(e){super(e),this.layer=e.layer}build(e){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(e){null!=this.layer&&(this.layer.trainable=e)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(e){this.layer.setWeights(e)}getConfig(){const e={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},t=super.getConfig();return Object.assign(e,t),e}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(e)}static fromConfig(e,t,n={}){const s=Oy(t.layer,n);delete t.layer;const r={layer:s};return Object.assign(r,t),new e(r)}}class Hw extends Gw{constructor(e){super(e),this.supportsMasking=!0}build(e){if((e=uy(e)).length<3)throw new Qf(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);this.inputSpec=[{shape:e}];const t=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(t),this.layer.built=!0),super.build(e)}computeOutputShape(e){const t=[(e=uy(e))[0]].concat(e.slice(2)),n=this.layer.computeOutputShape(t),s=e[1];return[n[0],s].concat(n.slice(1))}call(e,t){return uo((()=>Wx(((e,n)=>[ly(this.layer.call(e,t)),[]]),e=ly(e),[],!1,null,null,!1,!0)[1]))}}Hw.className="TimeDistributed",Wi(Hw);class jw extends Gw{constructor(e){super(e);const t=e.layer.getConfig(),n={};n.className=e.layer.getClassName(),n.config=t,this.forwardLayer=Oy(n),t.goBackwards=!0!==t.goBackwards;const s={};var r;if(s.className=e.layer.getClassName(),s.config=t,this.backwardLayer=Oy(s),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===e.mergeMode?"concat":e.mergeMode,r=this.mergeMode,ym(Bm,"BidirectionalMergeMode",r),e.weights)throw new em("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){const t=e.length,n=Math.floor(t/2);this.forwardLayer.setWeights(e.slice(0,n)),this.backwardLayer.setWeights(e.slice(n))}computeOutputShape(e){let t,n,s,r=this.forwardLayer.computeOutputShape(e);return Array.isArray(r)&&Array.isArray(r[0])||(r=[r]),this.returnState?(s=r.slice(1),t=r[0]):t=r[0],"concat"===this.mergeMode?(t[t.length-1]*=2,n=[t]):n=null==this.mergeMode?[t,t.slice()]:[t],this.returnState?null==this.mergeMode?n.concat(s).concat(s.slice()):[t].concat(s).concat(s.slice()):im(n)}apply(e,t){let n=null==t?null:t.initialState,s=null==t?null:t.constants;null==t&&(t={});const r=Bx(e,n,s,this.numConstants);if(e=r.inputs,n=r.initialState,s=r.constants,Array.isArray(e)&&(n=e.slice(1),e=e[0]),(null==n||0===n.length)&&null==s)return super.apply(e,t);const a=[],i=[];if(null!=n){const e=n.length;if(e%2>0)throw new Qf("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");t.initialState=n,a.push(...n);const s=n.map((e=>new my({shape:e.shape})));this.forwardLayer.stateSpec=s.slice(0,e/2),this.backwardLayer.stateSpec=s.slice(e/2),i.push(...s)}if(null!=s)throw new em("Support for constants in Bidirectional layers is not implemented yet.");const o=a[0]instanceof gy;for(const e of a)if(e instanceof gy!==o)throw new Qf("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(o){const n=[e].concat(a),s=this.inputSpec.concat(i),r=this.inputSpec;this.inputSpec=s;const o=super.apply(n,t);return this.inputSpec=r,o}return super.apply(e,t)}call(e,t){return uo((()=>{const n=t.initialState;let s,r,a,i;if(null==n)s=this.forwardLayer.call(e,t),r=this.backwardLayer.call(e,t);else{const a=n.slice(0,n.length/2),i=n.slice(n.length/2);s=this.forwardLayer.call(e,Object.assign(t,{initialState:a})),r=this.backwardLayer.call(e,Object.assign(t,{initialState:i}))}return this.returnState&&(Array.isArray(s)&&(a=s.slice(1).concat(r.slice(1))),s=s[0],r=r[0]),this.returnSequences&&(r=Mc(r,1)),"concat"===this.mergeMode?i=lg([s,r]):"sum"===this.mergeMode?i=Io(s,r):"ave"===this.mergeMode?i=Co(.5,Io(s,r)):"mul"===this.mergeMode?i=Co(s,r):null==this.mergeMode&&(i=[s,r]),this.returnState?null==this.mergeMode?i.concat(a):[i].concat(a):i}))}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){qm(this.forwardLayer.name,(()=>{this.forwardLayer.build(e)})),qm(this.backwardLayer.name,(()=>{this.backwardLayer.build(e)})),this.built=!0}computeMask(e,t){let n;if(Array.isArray(t)&&(t=t[0]),n=this.returnSequences?null==this.mergeMode?[t,t]:t:null==this.mergeMode?[null,null]:null,this.returnState){const e=this.forwardLayer.states.map((e=>null));return Array.isArray(n)?n.concat(e).concat(e):[n].concat(e).concat(e)}return n}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){const e={mergeMode:this.mergeMode},t=super.getConfig();return Object.assign(e,t),e}static fromConfig(e,t){const n=Oy(t.layer);if(delete t.layer,null!=t.numConstants)throw new em("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const s=t;return s.layer=n,new e(s)}}function qw(e){return new vy(e)}function Kw(e){return new wx(e)}function Xw(e){return new yx(e)}function Yw(e){return new bx(e)}function Jw(e){return new xx(e)}function Zw(e){return new vx(e)}function Qw(e){return new kx(e)}function ek(e){return new Mx(e)}function tk(e){return new Rx(e)}function nk(e){return new Fx(e)}function sk(e){return new Dx(e)}function rk(e){return new Ox(e)}function ak(e){return new Lx(e)}function ik(e){return new zx(e)}function ok(e){return new Px(e)}function lk(e){return new aw(e)}function uk(e){return new sw(e)}function ck(e){return new tw(e)}function hk(e){return new nw(e)}function pk(e){return new rw(e)}function dk(e){return new iw(e)}function fk(e){return new ow(e)}function mk(e){return new lw(e)}function gk(e){return new cw(e)}function yk(e){return new pw(e)}function bk(e){return new fw(e)}function xk(e){return new yw(e)}function wk(e){return new mw(e)}function kk(e){return new gw(e)}function vk(e){return new dw(e)}function Ik(e){return new xw(e)}function Nk(e){return new Nw(e)}function Sk(e){return new Sw(e)}function Ck(e){return new Cw(e)}function $k(e){return new Rw(e)}function Tk(e){return $k(e)}function Ek(e){return $k(e)}function Ak(e){return new _w(e)}function Rk(e){return Ak(e)}function Dk(e){return Ak(e)}function Fk(e){return new Lw(e)}function _k(e){return Fk(e)}function Ok(e){return Fk(e)}function Mk(e){return new Pw(e)}function Lk(e){return new Vw(e)}function zk(e){return new Bw(e)}function Pk(e){return new Uw(e)}function Bk(e){return new Aw(e)}function Wk(e){return new Fw(e)}function Vk(e){return new Mw(e)}function Uk(e){return new qx(e)}function Gk(e){return new jx(e)}function Hk(e){return new Xx(e)}function jk(e){return new Kx(e)}function qk(e){return new Hx(e)}function Kk(e){return new Gx(e)}function Xk(e){return new ew(e)}function Yk(e){return new Qx(e)}function Jk(e){return new Vx(e)}function Zk(e){return new Yx(e)}function Qk(e){return new jw(e)}function ev(e){return new Hw(e)}jw.className="Bidirectional",Wi(jw);const tv=zk,nv=Pk,sv=Bk,rv=Wk;function av(e){return new ww(e)}function iv(e){return new kw(e)}function ov(e){return new vw(e)}function lv(e){return new uw(e)}function uv(e,t){return jy(e,t)}function cv(e,t){return Yy(e,t)}function hv(e,t){return Jy(e,t)}function pv(e,t){return qy(e,t)}function dv(e,t){return Zy(e,t)}function fv(e,t){return Xy(e,t)}function mv(e,t){return function(e,t){return uo((()=>{const n=Ky(e,t),s=function(e,t){return uo((()=>Ku(e.equal(1),t.equal(0)).sum().cast("float32")))}(e,t),r=n.add(s);return lu(wu(r,0),n.div(r),0).cast("float32")}))}(e,t)}function gv(e,t){return Uy(e,t)}function yv(e,t){return zy(e,t)}function bv(e,t){return Py(e,t)}function xv(e,t){return Py(e,t)}function wv(e,t){return Py(e,t)}function kv(e,t){return Ly(e,t)}function vv(e,t){return Ly(e,t)}function Iv(e,t){return Ly(e,t)}function Nv(e){return new px(e)}function Sv(e){return cx(t=e),new px({l1:null!=t?t.l1:null,l2:0});var t}function Cv(e){return cx(t=e),new px({l2:null!=t?t.l2:null,l1:0});var t}class $v extends $y{constructor(){super(...arguments),this.model=null}setModel(e){if(!(e instanceof zb))throw new Error("model must be a LayersModel, not some other Container");this.model=e}}function Tv(e,t){return e<t}function Ev(e,t){return e>t}class Av extends $v{constructor(e){if(super(),null==e&&(e={}),e.restoreBestWeights)throw new em("restoreBestWeights = True is not implemented in EarlyStopping yet.");this.monitor=e.monitor||"val_loss",this.minDelta=Math.abs(e.minDelta||0),this.patience=e.patience||0,this.verbose=e.verbose||0,this.mode=e.mode||"auto",this.baseline=e.baseline,-1===["auto","min","max"].indexOf(this.mode)&&(console.warn(`EarlyStopping mode '${this.mode}' is invalid. Falling back to mode 'auto'.`),this.mode="auto"),"min"===this.mode?this.monitorFunc=Tv:"max"===this.mode||-1!==this.monitor.indexOf("acc")?this.monitorFunc=Ev:this.monitorFunc=Tv,this.monitorFunc===Tv&&(this.minDelta*=-1)}async onTrainBegin(e){this.wait=0,this.stoppedEpoch=0,null!=this.baseline?this.best=this.baseline:this.best=this.monitorFunc===Tv?1/0:-1/0}async onEpochEnd(e,t){await Ny(t);const n=this.getMonitorValue(t);null!=n&&(this.monitorFunc(n-this.minDelta,this.best)?(this.best=n,this.wait=0):(this.wait++,this.wait>=this.patience&&(this.stoppedEpoch=e,this.model.stopTraining=!0)))}async onTrainEnd(e){this.stoppedEpoch>0&&this.verbose&&console.log(`Epoch ${this.stoppedEpoch}: early stopping.`)}getMonitorValue(e){null==e&&(e={});const t=e[this.monitor];return null==t&&console.warn(`Metric for EarlyStopping ${this.monitor} is not available. Available metrics are: ${Object.keys(e)}`),t}}const Rv={earlyStopping:function(e){return new Av(e)}};var Dv,Fv;!function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF"}(Dv||(Dv={})),function(e){let t;!function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(Fv||(Fv={}));const _v={};function Ov(e,t){const n={tfOpName:e,category:"custom",inputs:[],attrs:[],customExecutor:t};_v[e]=n}function Mv(e){return _v[e]}function Lv(e){delete _v[e]}function zv(e,t,n,s,r){const a=t.inputParams[e];if(a&&void 0!==a.inputIndexStart){const e=a.inputIndexStart,i=0===a.inputIndexEnd?void 0:void 0===a.inputIndexEnd?e+1:a.inputIndexEnd;if("tensor"===a.type)return Pv(t.inputNames[a.inputIndexStart],n,s,r);if("tensors"===a.type)return t.inputNames.slice(e,i).map((e=>Pv(e,n,s,r)));const o=Pv(t.inputNames.slice(e)[0],n,s,r),l=o.dataSync();return"number"===a.type?l[0]:Ae(o.shape,l)}const i=t.attrParams[e];return i&&i.value}function Pv(e,t,n,s){const[r,a]=Vv(e);if(null!=s){const e=s.getHashTableHandleByName(r);if(null!=e)return e}const i=n.currentContextIds.find((e=>!!t[Wv(r,e)]));return void 0!==i?t[Wv(r,i)][a]:void 0}function Bv(e,t){const[n,s]=Vv(e);return[Wv(n,t&&t.currentContextId),s]}function Wv(e,t){return t?`${e}-${t}`:e}function Vv(e){const t=e.split(":");return 1===t.length?[e,0]:[t[0],Number(t[t.length-1])]}function Uv(e,t,n){let s=zv("pad",e,t,n);if("explicit"===s){s=zv("explicitPaddings",e,t,n);const r=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<4;e++)r[e][0]=s[2*e],r[e][1]=s[2*e+1];return r}return s}function Gv(e){return e.kept?e:ja(e)}const Hv=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],jv=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],qv=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]}],Kv=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number"}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}],Xv=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}],Yv=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],Jv=[{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}],Zv=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}],Qv=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]}],eI=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]}],tI=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],nI=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],sI=[{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}],rI=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}],aI=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}],iI=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}],oI=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]}];class lI{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[N,S,C,$,T,E,A,_,F,R,O,M,L,z,P,B,D].map((e=>e.json)));this.opMappers=e.reduce(((e,t)=>(e[t.tfOpName]=t,e)),{})}transformGraph(e,t={}){const n=e.node,s=[],r=[],a=[],i=n.reduce(((e,t)=>(e[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")?s.push(e[t.name]):"Const"===t.op?r.push(e[t.name]):null!=t.input&&0!==t.input.length||a.push(e[t.name]),e)),{});let o=[];const l=[];let u={},c={};null!=t&&(u=this.mapSignatureEntries(t.inputs),c=this.mapSignatureEntries(t.outputs));const h=Object.keys(i);h.forEach((e=>{const t=i[e];t.inputNames.forEach((e=>{const[n]=Bv(e);t.inputs.push(i[n]),i[n].children.push(t)}))})),0===Object.keys(c).length?h.forEach((e=>{const t=i[e];0===t.children.length&&l.push(t)})):Object.keys(c).forEach((e=>{const[t]=Bv(e),n=i[t];null!=n&&(n.signatureKey=c[e],l.push(n))})),Object.keys(u).length>0?Object.keys(u).forEach((e=>{const[t]=Bv(e),n=i[t];n&&(n.signatureKey=u[e],o.push(n))})):o=s;let p={};null!=e.library&&null!=e.library.function&&(p=e.library.function.reduce(((e,t)=>(e[t.signature.name]=this.mapFunction(t),e)),{}));const d={nodes:i,inputs:o,outputs:l,weights:r,placeholders:s,signature:t,functions:p};return a.length>0&&(d.initNodes=a),d}mapSignatureEntries(e){return Object.keys(e||{}).reduce(((t,n)=>(t[e[n].name]=n,t)),{})}mapNode(e){const t=Mv(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});const n={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map((e=>e.startsWith("^")?e.substr(1):e)),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr};return null!=t.inputs&&(n.inputParams=t.inputs.reduce(((e,t)=>(e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e)),{})),null!=t.attrs&&(n.attrParams=t.attrs.reduce(((t,n)=>{const s=n.type;let r;switch(n.type){case"string":r=cI(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=cI(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":r=wI(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=wI(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":r=pI(e.attr,n.tfName,n.defaultValue||0),void 0===r&&n.tfDeprecatedName&&(r=pI(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":r=xI(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=xI(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":r=hI(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=hI(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":r=vI(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=vI(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":r=bI(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=bI(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":r=kI(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=kI(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":r=mI(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=mI(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":r=gI(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=gI(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":r=fI(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=fI(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${e.op}`)}return t[n.name]={value:r,type:s},t}),{})),n}mapFunction(e){const t=e.nodeDef,n=[];let s={};null!=t&&(s=t.reduce(((e,t)=>(e[t.name]=this.mapNode(t),"Const"===t.op&&n.push(e[t.name]),e)),{}));const r=[],a=[];e.signature.inputArg.forEach((e=>{const[t]=Bv(e.name),n={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:dI(e.type),type:"dtype"}},children:[]};n.signatureKey=e.name,r.push(n),s[t]=n})),Object.keys(s).forEach((e=>{const t=s[e];t.inputNames.forEach((e=>{const[n]=Bv(e);t.inputs.push(s[n]),s[n].children.push(t)}))}));const i=e.ret;e.signature.outputArg.forEach((e=>{const[t,n]=Bv(i[e.name]),r=s[t];null!=r&&(r.defaultOutput=n,a.push(r))}));const o=this.mapArgsToSignature(e);return{nodes:s,inputs:r,outputs:a,weights:n,placeholders:[],signature:o}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce(((e,t)=>(e[t.name]=this.mapArgToTensorInfo(t),e)),{}),outputs:e.signature.outputArg.reduce(((t,n)=>(t[n.name]=this.mapArgToTensorInfo(n,e.ret),t)),{})}}mapArgToTensorInfo(e,t){let n=e.name;return null!=t&&(n=t[n]),{name:n,dtype:e.type}}}function uI(e,t){const n=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){const t=Be().global;if(void 0!==t.atob)return t.atob(e);if("undefined"!=typeof Buffer)return new Buffer(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return t?n:n.toLowerCase()}function cI(e,t,n,s=!1){const r=e[t];return null!=r?uI(r.s,s):n}function hI(e,t,n){const s=e[t];return s?s.b:n}function pI(e,t,n){const s=e[t]||{},r=null!=s.i?s.i:null!=s.f?s.f:n;return"number"==typeof r?r:parseInt(r,10)}function dI(e){switch("string"==typeof e&&(e=Dv[e]),e){case Dv.DT_FLOAT:return"float32";case Dv.DT_INT32:case Dv.DT_INT64:case Dv.DT_INT8:case Dv.DT_UINT8:return"int32";case Dv.DT_BOOL:return"bool";case Dv.DT_DOUBLE:return"float32";case Dv.DT_STRING:return"string";default:return null}}function fI(e,t,n){const s=e[t];return s&&s.func?s.func.name:n}function mI(e,t,n){const s=e[t];return s&&s.type?dI(s.type):n}function gI(e,t,n){const s=e[t];return s&&s.list&&s.list.type?s.list.type.map((e=>dI(e))):n}function yI(e){if(!e.unknownRank)return null!=e.dim?e.dim.map((e=>"number"==typeof e.size?e.size:parseInt(e.size,10))):[]}function bI(e,t,n){const s=e[t];return s&&s.shape?yI(s.shape):n}function xI(e,t,n){const s=e[t];return s?((s.list.f&&s.list.f.length?s.list.f:s.list.i)||[]).map((e=>"number"==typeof e?e:parseInt(e,10))):n}function wI(e,t,n,s=!1){const r=e[t];return r&&r.list&&r.list.s?r.list.s.map((e=>uI(e,s))):n}function kI(e,t,n){const s=e[t];return s&&s.list&&s.list.shape?s.list.shape.map((e=>yI(e))):n}function vI(e,t,n){const s=e[t];return s&&s.list&&s.list.b?s.list.b:n}class II{constructor(e,t,n){this.node=e,this.tensorMap=t,this.context=n,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map((e=>this.getInput(e))),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce(((e,t)=>(e[t]=this.getAttr(t),e)),{}))}getInput(e){return Pv(e,this.tensorMap,this.context)}getAttr(e,t){const n=this.node.rawAttrs[e];if(null!=n.tensor)return Pv(e,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return pI(this.node.rawAttrs,e,t);if(null!=n.s)return cI(this.node.rawAttrs,e,t);if(null!=n.b)return hI(this.node.rawAttrs,e,t);if(null!=n.shape)return bI(this.node.rawAttrs,e,t);if(null!=n.type)return mI(this.node.rawAttrs,e,t);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return xI(this.node.rawAttrs,e,t);if(null!=n.list.s)return wI(this.node.rawAttrs,e,t);if(null!=n.list.shape)return kI(this.node.rawAttrs,e,t);if(null!=n.list.b)return vI(this.node.rawAttrs,e,t);if(null!=n.list.type)return gI(this.node.rawAttrs,e,t)}return t}}const NI=(e,t,n)=>{switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[Io(zv("a",e,t,n),zv("b",e,t,n))];case"AddN":return[nl(zv("tensors",e,t,n))];case"FloorMod":case"Mod":return[ac(zv("a",e,t,n),zv("b",e,t,n))];case"Mul":return[Co(zv("a",e,t,n),zv("b",e,t,n))];case"RealDiv":case"Div":return[So(zv("a",e,t,n),zv("b",e,t,n))];case"DivNoNan":return[uu(zv("a",e,t,n),zv("b",e,t,n))];case"FloorDiv":return[No(zv("a",e,t,n),zv("b",e,t,n))];case"Sub":return[Uo(zv("a",e,t,n),zv("b",e,t,n))];case"Minimum":return[sc(zv("a",e,t,n),zv("b",e,t,n))];case"Maximum":return[Xo(zv("a",e,t,n),zv("b",e,t,n))];case"Pow":return[Vo(zv("a",e,t,n),zv("b",e,t,n))];case"SquaredDifference":return[ah(zv("a",e,t,n),zv("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}},SI=(e,t,n)=>{switch(e.op){case"Abs":case"ComplexAbs":return[Ho(zv("x",e,t,n))];case"Acos":return[el(zv("x",e,t,n))];case"Acosh":return[tl(zv("x",e,t,n))];case"Asin":return[ol(zv("x",e,t,n))];case"Asinh":return[ll(zv("x",e,t,n))];case"Atan":return[ul(zv("x",e,t,n))];case"Atan2":return[cl(zv("x",e,t,n),zv("y",e,t,n))];case"Atanh":return[hl(zv("x",e,t,n))];case"Ceil":return[Bl(zv("x",e,t,n))];case"Complex":return[Xr(zv("real",e,t,n),zv("imag",e,t,n))];case"Cos":return[Ql(zv("x",e,t,n))];case"Cosh":return[eu(zv("x",e,t,n))];case"Elu":return[hu(zv("x",e,t,n))];case"Erf":return[pu(zv("x",e,t,n))];case"Exp":return[du(zv("x",e,t,n))];case"Expm1":return[mu(zv("x",e,t,n))];case"Floor":return[bu(zv("x",e,t,n))];case"Log":return[Ru(zv("x",e,t,n))];case"Log1p":return[Du(zv("x",e,t,n))];case"Imag":return[vu(zv("x",e,t,n))];case"Neg":return[Fu(zv("x",e,t,n))];case"Reciprocal":return[Fc(zv("x",e,t,n))];case"Real":return[Dc(zv("x",e,t,n))];case"Relu":return[_c(zv("x",e,t,n))];case"Round":return[Wc(zv("x",e,t,n))];case"Selu":return[Uc(zv("x",e,t,n))];case"Sigmoid":return[El(zv("x",e,t,n))];case"Sin":return[qc(zv("x",e,t,n))];case"Sign":return[jc(zv("x",e,t,n))];case"Sinh":return[Kc(zv("x",e,t,n))];case"Softplus":return[_u(zv("x",e,t,n))];case"Sqrt":return[$o(zv("x",e,t,n))];case"Square":return[To(zv("x",e,t,n))];case"Tanh":return[Rl(zv("x",e,t,n))];case"Tan":return[ch(zv("x",e,t,n))];case"ClipByValue":return[Wl(zv("x",e,t,n),zv("clipValueMin",e,t,n),zv("clipValueMax",e,t,n))];case"Relu6":return[Oc(zv("x",e,t,n))];case"Rsqrt":return[Vc(Pv(e.inputNames[0],t,n))];case"Prod":return[vc(zv("x",e,t,n),zv("axes",e,t,n))];case"LeakyRelu":return[Cu(zv("x",e,t,n),zv("alpha",e,t,n))];case"Prelu":return[kc(zv("x",e,t,n),zv("alpha",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}};function CI(e,t,n=""){Z(function(e,t){if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(-1!==e[n]&&-1!==t[n]&&e[n]!==t[n])return!1;return!0}(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}class $I{constructor(e,t,n,s,r,a,i){this.name=e,this.dtype=t,this.maxSize=n,this.elementShape=s,this.identicalElementShapes=r,this.dynamicSize=a,this.clearAfterRead=i,this.tensors=[],this.closed_=!1,this.idTensor=Lo(0),ho(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.tensor.id)||t.tensor.dispose()})),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);const t=this.tensors[e];if(t.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map((e=>this.read(e)))}write(e,t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},\n          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),CI(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);n.tensor=t,ho(t),n.written=!0,this.tensors[e]=n}writeMany(e,t){if(e.length!==t.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach(((e,n)=>this.write(e,t[n])))}gather(e,t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let t=0;t<this.size();t++)e.push(t)}if(0===e.length)return Jr([],[0].concat(this.elementShape));const n=this.readMany(e);return CI(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),oh(n,0)}concat(e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return Jr([],[0].concat(this.elementShape));const t=[];for(let e=0;e<this.size();e++)t.push(e);const n=this.readMany(t);return CI(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),Tl(n,0)}scatter(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const n=Math.max(...e);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(e,wh(t,0))}split(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let n=0;const s=e.map((e=>(n+=e,n)));if(n!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);const r=0===n?0:t.size/n,a=[];uo((()=>{t=Sl(t,[1,n,r]);for(let n=0;n<e.length;++n){const i=[0,0===n?0:s[n-1],0],o=[1,e[n],r];a[n]=Sl(Al(t,i,o),this.elementShape)}return a}));const i=[];for(let t=0;t<e.length;t++)i[t]=t;this.writeMany(i,a)}}class TI{constructor(e,t,n,s=-1){this.tensors=e,this.elementShape=t,this.elementDtype=n,null!=e&&e.forEach((e=>{if(n!==e.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${e.dtype}`);CI(t,e.shape,"TensorList shape mismatch: "),ho(e)})),this.idTensor=Lo(0),this.maxNumElements=s,ho(this.idTensor)}get id(){return this.idTensor.id}copy(){return new TI([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.id)||t.dispose()})),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t,n=-1){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);return CI(e,this.elementShape,"TensorList shape mismatch: "),uo((()=>{const t=this.tensors.map((t=>Sl(t,e)));return oh(t,0)}))}popBack(e,t){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=this.tensors.pop();return CI(n.shape,e,"TensorList shape mismatch: "),Sl(n,e)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(CI(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");ho(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);this.tensors.length=e}getItem(e,t,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw new Error(`element at index ${e} is null.`);return CI(this.tensors[e].shape,t,"TensorList shape mismatch: "),this.tensors[e]}setItem(e,t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);CI(this.elementShape,t.shape,"TensorList shape mismatch: "),ho(t),this.tensors[e]=t}gather(e,t,n){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);return CI(this.elementShape,n,"TensorList shape mismatch: "),0===(e=e.slice(0,this.size())).length?Jr([],[0].concat(this.elementShape)):uo((()=>{const t=e.map((e=>Sl(this.tensors[e],n)));return oh(t,0)}))}concat(e,t){if(e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);return CI(this.elementShape,t,"TensorList shape mismatch: "),0===this.size()?Jr([],[0].concat(this.elementShape)):uo((()=>{const e=this.tensors.map((e=>Sl(e,t)));return Tl(e,0)}))}}const EI=async(e,t,n)=>{switch(e.op){case"If":case"StatelessIf":{const s=zv("thenBranch",e,t,n),r=zv("elseBranch",e,t,n),a=zv("cond",e,t,n),i=zv("args",e,t,n);return(await a.data())[0]?n.functionMap[s].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap):n.functionMap[r].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const s=zv("body",e,t,n),r=zv("cond",e,t,n),a=zv("args",e,t,n),i=await n.functionMap[r].executeFunctionAsync(a,n.tensorArrayMap,n.tensorListMap),o=a.map((e=>e.id));let l=await i[0].data();i.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||e.dispose()}));let u=a;for(;l[0];){const e=u;u=await n.functionMap[s].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);const t=u.map((e=>e.id));e.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}));const a=await n.functionMap[r].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);l=await a[0].data(),a.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}))}return u}case"LoopCond":return[Gv(zv("pred",e,t,n))];case"Switch":{const s=zv("pred",e,t,n);let r=zv("data",e,t,n);return r.kept||(r=Gv(r)),(await s.data())[0]?[void 0,r]:[r,void 0]}case"Merge":{const s=e.inputNames.find((e=>void 0!==Pv(e,t,n)));return s?[Gv(Pv(s,t,n))]:void 0}case"Enter":{const s=zv("frameName",e,t,n),r=zv("tensor",e,t,n);return n.enterFrame(s),[Gv(r)]}case"Exit":{const s=zv("tensor",e,t,n);return n.exitFrame(),[Gv(s)]}case"NextIteration":{const s=zv("tensor",e,t,n);return n.nextIteration(),[Gv(s)]}case"TensorArrayV3":{const s=zv("size",e,t,n),r=zv("dtype",e,t,n),a=zv("elementShape",e,t,n),i=zv("dynamicSize",e,t,n),o=zv("clearAfterRead",e,t,n),l=zv("identicalElementShapes",e,t,n),u=zv("name",e,t,n),c=new $I(u,r,s,a,l,i,o);return n.addTensorArray(c),[c.idTensor,Lo(1)]}case"TensorArrayWriteV3":{const s=zv("tensorArrayId",e,t,n),r=zv("index",e,t,n),a=zv("tensor",e,t,n),i=n.getTensorArray(s.id);return i.write(r,a),[i.idTensor]}case"TensorArrayReadV3":{const s=zv("tensorArrayId",e,t,n),r=zv("index",e,t,n);return[n.getTensorArray(s.id).read(r)]}case"TensorArrayGatherV3":{const s=zv("tensorArrayId",e,t,n),r=zv("indices",e,t,n),a=zv("dtype",e,t,n);return[n.getTensorArray(s.id).gather(r,a)]}case"TensorArrayScatterV3":{const s=zv("tensorArrayId",e,t,n),r=zv("indices",e,t,n),a=zv("tensor",e,t,n),i=n.getTensorArray(s.id);return i.scatter(r,a),[i.idTensor]}case"TensorArrayConcatV3":{const s=zv("tensorArrayId",e,t,n),r=n.getTensorArray(s.id),a=zv("dtype",e,t,n);return[r.concat(a)]}case"TensorArraySplitV3":{const s=zv("tensorArrayId",e,t,n),r=zv("tensor",e,t,n),a=zv("lengths",e,t,n),i=n.getTensorArray(s.id);return i.split(a,r),[i.idTensor]}case"TensorArraySizeV3":{const s=zv("tensorArrayId",e,t,n);return[Lo(n.getTensorArray(s.id).size(),"int32")]}case"TensorArrayCloseV3":{const s=zv("tensorArrayId",e,t,n),r=n.getTensorArray(s.id);return r.clearAndClose(),[r.idTensor]}case"TensorListSetItem":{const s=zv("tensorListId",e,t,n),r=zv("index",e,t,n),a=zv("tensor",e,t,n),i=n.getTensorList(s.id);return i.setItem(r,a),[i.idTensor]}case"TensorListGetItem":{const s=zv("tensorListId",e,t,n),r=zv("index",e,t,n),a=zv("elementShape",e,t,n),i=zv("elementDType",e,t,n);return[n.getTensorList(s.id).getItem(r,a,i)]}case"TensorListScatterV2":case"TensorListScatter":{const s=zv("indices",e,t,n),r=function(e,t,n,s){if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const r=Math.max(...t);if(null!=s&&-1!==s&&r>=s)throw new Error(`Max index must be < array size (${r}  vs. ${s})`);const a=new TI([],n,e.dtype,s),i=wh(e,0);return t.forEach(((e,t)=>{a.setItem(e,i[t])})),a}(zv("tensor",e,t,n),s,zv("elementShape",e,t,n),zv("numElements",e,t,n));return n.addTensorList(r),[r.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const s=zv("elementShape",e,t,n),r=zv("elementDType",e,t,n);let a;a="TensorListReserve"===e.op?"numElements":"maxNumElements";const i=function(e,t,n){return new TI([],e,t,n)}(s,r,zv(a,e,t,n));return n.addTensorList(i),[i.idTensor]}case"TensorListGather":{const s=zv("tensorListId",e,t,n),r=zv("indices",e,t,n),a=zv("elementShape",e,t,n),i=zv("elementDType",e,t,n);return[n.getTensorList(s.id).gather(r,i,a)]}case"TensorListStack":{const s=zv("tensorListId",e,t,n),r=zv("elementShape",e,t,n),a=zv("elementDType",e,t,n),i=zv("numElements",e,t,n);return[n.getTensorList(s.id).stack(r,a,i)]}case"TensorListFromTensor":{const s=function(e,t,n){const s=e.dtype;if(e.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${e.shape}`);if(e.dtype!==n)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${n}`);CI(e.shape.slice(1),t,"TensorList shape mismatch: ");const r=wh(e);return new TI(r,t,s)}(zv("tensor",e,t,n),zv("elementShape",e,t,n),zv("elementDType",e,t,n));return n.addTensorList(s),[s.idTensor]}case"TensorListConcat":{const s=zv("tensorListId",e,t,n),r=n.getTensorList(s.id),a=zv("dtype",e,t,n),i=zv("elementShape",e,t,n);return[r.concat(a,i)]}case"TensorListPushBack":{const s=zv("tensorListId",e,t,n),r=zv("tensor",e,t,n),a=n.getTensorList(s.id);return a.pushBack(r),[a.idTensor]}case"TensorListPopBack":{const s=zv("tensorListId",e,t,n),r=zv("elementShape",e,t,n),a=zv("elementDType",e,t,n);return[n.getTensorList(s.id).popBack(r,a)]}case"TensorListSplit":{const s=zv("tensor",e,t,n),r=zv("elementShape",e,t,n),a=function(e,t,n){let s=0;const r=t.map((e=>(s+=e,s)));if(s!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${s}, and tensor's shape is: ${e.shape}`);const a=0===s?0:e.size/s,i=uo((()=>{const i=[];e=Sl(e,[1,s,a]);for(let s=0;s<t.length;++s){const o=[0,0===s?0:r[s-1],0],l=[1,t[s],a];i[s]=Sl(Al(e,o,l),n)}return e.dispose(),i})),o=new TI([],n,e.dtype,t.length);for(let e=0;e<i.length;e++)o.setItem(e,i[e]);return o}(s,zv("lengths",e,t,n),r);return n.addTensorList(a),[a.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}};function AI(e,t,n){const[s,r]=zv("fusedOps",e,t,n),a="biasadd"===s,i="prelu"===r,o="fusedbatchnorm"===s,l=zv("numArgs",e,t,n);if(a){if(i&&2!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(o)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported.");const u=zv("strides",e,t,n),c=Uv(e,t,n),h=zv("dataFormat",e,t,n).toUpperCase(),p=zv("dilations",e,t,n),[d,f]=zv("args",e,t,n);return{stride:u,pad:c,dataFormat:h,dilations:p,biasArg:d,preluArg:f,activationFunc:r,leakyreluAlpha:zv("leakyreluAlpha",e,t,n)}}const RI=(e,t,n)=>{switch(e.op){case"Conv1D":{const s=zv("stride",e,t,n),r=zv("pad",e,t,n),a=zv("dataFormat",e,t,n).toUpperCase(),i=zv("dilation",e,t,n);return[ql(zv("x",e,t,n),zv("filter",e,t,n),s,r,a,i)]}case"Conv2D":{const s=zv("strides",e,t,n),r=Uv(e,t,n),a=zv("dataFormat",e,t,n).toUpperCase(),i=zv("dilations",e,t,n);return[jl(zv("x",e,t,n),zv("filter",e,t,n),[s[1],s[2]],r,a,[i[1],i[2]])]}case"_FusedConv2D":{const{stride:s,pad:r,dataFormat:a,dilations:i,biasArg:o,preluArg:l,activationFunc:u,leakyreluAlpha:c}=AI(e,t,n);return[tp({x:zv("x",e,t,n),filter:zv("filter",e,t,n),strides:[s[1],s[2]],pad:r,dataFormat:a,dilations:[i[1],i[2]],bias:o,activation:u,preluActivationWeights:l,leakyreluAlpha:c})]}case"FusedDepthwiseConv2dNative":{const{stride:s,pad:r,dataFormat:a,dilations:i,biasArg:o,preluArg:l,activationFunc:u,leakyreluAlpha:c}=AI(e,t,n);return[rp({x:zv("x",e,t,n),filter:zv("filter",e,t,n),strides:[s[1],s[2]],pad:r,dataFormat:a,dilations:[i[1],i[2]],bias:o,activation:u,preluActivationWeights:l,leakyreluAlpha:c})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const s=zv("outputShape",e,t,n),r=zv("strides",e,t,n),a=Uv(e,t,n);return[Xl(zv("x",e,t,n),zv("filter",e,t,n),s,[r[1],r[2]],a)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const s=zv("strides",e,t,n),r=Uv(e,t,n),a=zv("dilations",e,t,n),i=zv("dataFormat",e,t,n).toUpperCase();return[ru(zv("input",e,t,n),zv("filter",e,t,n),[s[1],s[2]],r,i,[a[1],a[2]])]}case"Conv3D":{const s=zv("strides",e,t,n),r=zv("pad",e,t,n),a=zv("dataFormat",e,t,n).toUpperCase(),i=zv("dilations",e,t,n);return[Yl(zv("x",e,t,n),zv("filter",e,t,n),[s[1],s[2],s[3]],r,a,[i[1],i[2],i[3]])]}case"AvgPool":{const s=zv("strides",e,t,n),r=zv("pad",e,t,n),a=zv("kernelSize",e,t,n);return[Cl(zv("x",e,t,n),[a[1],a[2]],[s[1],s[2]],r)]}case"MaxPool":{const s=zv("strides",e,t,n),r=zv("pad",e,t,n),a=zv("kernelSize",e,t,n);return[Zu(zv("x",e,t,n),[a[1],a[2]],[s[1],s[2]],r)]}case"MaxPoolWithArgmax":{const s=zv("strides",e,t,n),r=zv("pad",e,t,n),a=zv("kernelSize",e,t,n),i=zv("includeBatchInIndex",e,t,n),{result:o,indexes:l}=ec(zv("x",e,t,n),[a[1],a[2]],[s[1],s[2]],r,i);return[o,l]}case"AvgPool3D":{const s=zv("strides",e,t,n),r=zv("pad",e,t,n),a=zv("kernelSize",e,t,n);return[$l(zv("x",e,t,n),[a[1],a[2],a[3]],[s[1],s[2],s[3]],r)]}case"MaxPool3D":{const s=zv("strides",e,t,n),r=zv("pad",e,t,n),a=zv("kernelSize",e,t,n);return[Qu(zv("x",e,t,n),[a[1],a[2],a[3]],[s[1],s[2],s[3]],r)]}case"Dilation2D":{const s=zv("strides",e,t,n),r=zv("pad",e,t,n),a=zv("dilations",e,t,n),i=s[1],o=s[2],l=a[1],u=a[2];return[iu(zv("x",e,t,n),zv("filter",e,t,n),[i,o],r,[l,u],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}},DI=(e,t,n)=>{switch(e.op){case"Fill":{const s=zv("shape",e,t,n),r=zv("dtype",e,t,n);return[Bo(s,zv("value",e,t,n),r)]}case"LinSpace":return[Eu(zv("start",e,t,n),zv("stop",e,t,n),zv("num",e,t,n))];case"Multinomial":{const s=zv("logits",e,t,n),r=zv("numSamples",e,t,n),a=zv("seed",e,t,n);return[lc(s,r,a)]}case"OneHot":{const s=zv("indices",e,t,n),r=zv("depth",e,t,n),a=zv("onValue",e,t,n),i=zv("offValue",e,t,n);return[pi(s,r,a,i)]}case"Ones":return[hc(zv("shape",e,t,n),zv("dtype",e,t,n))];case"OnesLike":return[pc(zv("x",e,t,n))];case"RandomUniform":return[Ac(zv("shape",e,t,n),zv("minval",e,t,n),zv("maxval",e,t,n),zv("dtype",e,t,n))];case"Range":return[Rc(zv("start",e,t,n),zv("stop",e,t,n),zv("step",e,t,n),zv("dtype",e,t,n))];case"TruncatedNormal":{const s=zv("shape",e,t,n),r=zv("mean",e,t,n),a=zv("stdDev",e,t,n),i=zv("seed",e,t,n);return[yh(s,r,a,zv("dtype",e,t,n),i)]}case"Zeros":return[cc(zv("shape",e,t,n),zv("dtype",e,t,n))];case"ZerosLike":return[Eo(zv("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}};function FI(e,t,n){return{boxes:zv("boxes",e,t,n),scores:zv("scores",e,t,n),maxOutputSize:zv("maxOutputSize",e,t,n),iouThreshold:zv("iouThreshold",e,t,n),scoreThreshold:zv("scoreThreshold",e,t,n),softNmsSigma:zv("softNmsSigma",e,t,n)}}const _I=async(e,t,n)=>{switch(e.op){case"NonMaxSuppressionV5":{const{boxes:s,scores:r,maxOutputSize:a,iouThreshold:i,scoreThreshold:o,softNmsSigma:l}=FI(e,t,n),u=await Gp.nonMaxSuppressionWithScoreAsync(s,r,a,i,o,l);return[u.selectedIndices,u.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:s,scores:r,maxOutputSize:a,iouThreshold:i,scoreThreshold:o}=FI(e,t,n),l=zv("padToMaxOutputSize",e,t,n),u=await Gp.nonMaxSuppressionPaddedAsync(s,r,a,i,o,l);return[u.selectedIndices,u.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:s,scores:r,maxOutputSize:a,iouThreshold:i,scoreThreshold:o}=FI(e,t,n);return[await Gp.nonMaxSuppressionAsync(s,r,a,i,o)]}case"Where":{const s=Ha(zv("condition",e,t,n),"bool"),r=[await Ih(s)];return s.dispose(),r}case"ListDiff":return Hc(zv("x",e,t,n),zv("y",e,t,n));default:throw TypeError(`Node type ${e.op} is not implemented`)}},OI=(e,t,n)=>{switch(e.op){case"TopKV2":{const s=zv("x",e,t,n),r=zv("k",e,t,n),a=zv("sorted",e,t,n),i=gh(s,r,a);return[i.values,i.indices]}case"Unique":{const s=zv("x",e,t,n),r=bh(s);return[r.values,r.indices]}case"UniqueV2":{const s=zv("x",e,t,n),r=zv("axis",e,t,n),a=bh(s,r);return[a.values,a.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}},MI=(e,t,n)=>{switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":const s=zv("default",e,t,n);return[Pv(e.name,t,n)||s];case"Placeholder":return[Pv(e.name,t,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":case"Snapshot":return[Gv(zv("x",e,t,n))];case"IdentityN":return zv("x",e,t,n).map((e=>Gv(e)));case"Shape":return[hh(zv("x",e,t,n).shape,"int32")];case"ShapeN":return zv("x",e,t,n).map((e=>hh(e.shape)));case"Size":return[Lo(zv("x",e,t,n).size,"int32")];case"Rank":return[Lo(zv("x",e,t,n).rank,"int32")];case"NoOp":return[Lo(1)];case"Print":const r=zv("x",e,t,n),a=zv("data",e,t,n),i=zv("message",e,t,n),o=zv("summarize",e,t,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(i);for(let e=0;e<a.length;e++)console.log(Array.prototype.slice.call(a[e].dataSync()).slice(0,o));return[r];default:throw TypeError(`Node type ${e.op} is not implemented`)}};class LI{constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=Lo(0),this.tensorMap=new Map,ho(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}async import(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),uo((()=>{const e=wh(t),s=n.length,r=e.length;Z(s===r,(()=>`The number of elements doesn't match, keys has ${s} elements, the values has ${r} elements.`));for(let t=0;t<s;t++){const s=n[t],r=e[t];ho(r),this.tensorMap.set(s,r)}return this.handle}))}async find(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return uo((()=>{const e=[];for(let s=0;s<n.length;s++){const r=n[s],a=this.findWithDefault(r,t);e.push(a)}return oh(e)}))}findWithDefault(e,t){const n=this.tensorMap.get(e);return null!=n?n:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);if(t.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`)}}const zI=async(e,t,n,s)=>{switch(e.op){case"HashTable":case"HashTableV2":{const r=zv("keyDType",e,t,n),a=zv("valueDType",e,t,n),i=new LI(r,a);return s.addHashTable(e.name,i),[i.handle]}case"LookupTableImport":case"LookupTableImportV2":{const r=zv("tableHandle",e,t,n,s),a=zv("keys",e,t,n),i=zv("values",e,t,n),o=s.getHashTableById(r.id);return[await o.import(a,i)]}case"LookupTableFind":case"LookupTableFindV2":{const r=zv("tableHandle",e,t,n,s),a=zv("keys",e,t,n),i=zv("defaultValue",e,t,n),o=s.getHashTableById(r.id);return[await o.find(a,i)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}},PI=(e,t,n)=>{switch(e.op){case"ResizeBilinear":{const s=zv("images",e,t,n),r=zv("size",e,t,n),a=zv("alignCorners",e,t,n),i=zv("halfPixelCenters",e,t,n);return[Gp.resizeBilinear(s,[r[0],r[1]],a,i)]}case"ResizeNearestNeighbor":{const s=zv("images",e,t,n),r=zv("size",e,t,n),a=zv("alignCorners",e,t,n),i=zv("halfPixelCenters",e,t,n);return[Gp.resizeNearestNeighbor(s,[r[0],r[1]],a,i)]}case"CropAndResize":{const s=zv("image",e,t,n),r=zv("boxes",e,t,n),a=zv("boxInd",e,t,n),i=zv("cropSize",e,t,n),o=zv("method",e,t,n),l=zv("extrapolationValue",e,t,n);return[Gp.cropAndResize(s,r,a,i,o,l)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}},BI=(e,t,n)=>{switch(e.op){case"Equal":return[ou(zv("a",e,t,n),zv("b",e,t,n))];case"NotEqual":return[uc(zv("a",e,t,n),zv("b",e,t,n))];case"Greater":return[wu(zv("a",e,t,n),zv("b",e,t,n))];case"GreaterEqual":return[ku(zv("a",e,t,n),zv("b",e,t,n))];case"Less":return[$u(zv("a",e,t,n),zv("b",e,t,n))];case"LessEqual":return[Tu(zv("a",e,t,n),zv("b",e,t,n))];case"LogicalAnd":return[Ku(zv("a",e,t,n),zv("b",e,t,n))];case"LogicalNot":return[Xu(zv("a",e,t,n))];case"LogicalOr":return[Yu(zv("a",e,t,n),zv("b",e,t,n))];case"Select":case"SelectV2":return[lu(zv("condition",e,t,n),zv("a",e,t,n),zv("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}},WI=(e,t,n)=>{switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[hi(zv("a",e,t,n),zv("b",e,t,n),zv("transposeA",e,t,n),zv("transposeB",e,t,n))];case"Transpose":return[di(zv("x",e,t,n),zv("perm",e,t,n))];case"_FusedMatMul":const[s,r]=zv("fusedOps",e,t,n),a="biasadd"===s,i="prelu"===r,o=zv("numArgs",e,t,n),l=zv("leakyreluAlpha",e,t,n);if(a){if(i&&2!==o)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==o)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[u,c]=zv("args",e,t,n);return[ap({a:zv("a",e,t,n),b:zv("b",e,t,n),transposeA:zv("transposeA",e,t,n),transposeB:zv("transposeB",e,t,n),bias:u,activation:r,preluActivationWeights:c,leakyreluAlpha:l})];default:throw TypeError(`Node type ${e.op} is not implemented`)}},VI=(e,t,n)=>{switch(e.op){case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[_l(zv("x",e,t,n),zv("mean",e,t,n),zv("variance",e,t,n),zv("offset",e,t,n),zv("scale",e,t,n),zv("epsilon",e,t,n))];case"LRN":return[Au(zv("x",e,t,n),zv("radius",e,t,n),zv("bias",e,t,n),zv("alpha",e,t,n),zv("beta",e,t,n))];case"Softmax":return[Qc(zv("x",e,t,n))];case"LogSoftmax":return[zu(zv("x",e,t,n))];case"SparseToDense":return[Gh(zv("sparseIndices",e,t,n),zv("outputShape",e,t,n),zv("sparseValues",e,t,n),zv("defaultValue",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}},UI=(e,t,n)=>{switch(e.op){case"Max":{const s=zv("axis",e,t,n),r=zv("keepDims",e,t,n);return[Mu(zv("x",e,t,n),s,r)]}case"Mean":{const s=zv("axis",e,t,n),r=zv("keepDims",e,t,n);return[tc(zv("x",e,t,n),s,r)]}case"Min":{const s=zv("axis",e,t,n),r=zv("keepDims",e,t,n);return[nc(zv("x",e,t,n),s,r)]}case"Sum":{const s=zv("axis",e,t,n),r=zv("keepDims",e,t,n);return[Lu(zv("x",e,t,n),s,r)]}case"All":{const s=zv("axis",e,t,n),r=zv("keepDims",e,t,n);return[sl(zv("x",e,t,n),s,r)]}case"Any":{const s=zv("axis",e,t,n),r=zv("keepDims",e,t,n);return[rl(zv("x",e,t,n),s,r)]}case"ArgMax":{const s=zv("axis",e,t,n);return[al(zv("x",e,t,n),s)]}case"ArgMin":{const s=zv("axis",e,t,n);return[il(zv("x",e,t,n),s)]}case"Prod":{const s=zv("axis",e,t,n),r=zv("keepDims",e,t,n);return[vc(zv("x",e,t,n),s,r)]}case"Cumsum":{const s=zv("axis",e,t,n),r=zv("exclusive",e,t,n),a=zv("reverse",e,t,n);return[tu(zv("x",e,t,n),s,r,a)]}case"Bincount":const s=zv("x",e,t,n),r=zv("weights",e,t,n),a=zv("size",e,t,n);return[zl(s,r,a)];case"DenseBincount":{const s=zv("x",e,t,n),r=zv("weights",e,t,n),a=zv("size",e,t,n),i=zv("binaryOutput",e,t,n);return[nu(s,r,a,i)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}},GI=(e,t,n)=>{switch(e.op){case"ConcatV2":case"Concat":{const s=zv("n",e,t,n),r=zv("axis",e,t,n);let a=zv("tensors",e,t,n);return a=a.slice(0,s),[Tl(a,r)]}case"Gather":{const s=zv("x",e,t,n),r=zv("indices",e,t,n);return[xu(s,Ha(r,"int32"),0)]}case"GatherV2":{const s=zv("axis",e,t,n),r=zv("batchDims",e,t,n),a=zv("x",e,t,n),i=zv("indices",e,t,n);return[xu(a,Ha(i,"int32"),s,r)]}case"Reverse":{const s=zv("dims",e,t,n),r=[];for(let e=0;e<s.length;e++)s[e]&&r.push(e);const a=zv("x",e,t,n);return[Mc(a,r)]}case"ReverseV2":{const s=zv("axis",e,t,n),r=zv("x",e,t,n);return[Mc(r,s)]}case"Slice":{const s=zv("begin",e,t,n),r=zv("size",e,t,n);return[Al(zv("x",e,t,n),s,r)]}case"StridedSlice":{const s=zv("begin",e,t,n),r=zv("end",e,t,n),a=zv("strides",e,t,n),i=zv("beginMask",e,t,n),o=zv("endMask",e,t,n),l=zv("ellipsisMask",e,t,n),u=zv("newAxisMask",e,t,n),c=zv("shrinkAxisMask",e,t,n),h=zv("x",e,t,n);return[uh(h,s,r,a,i,o,l,u,c)]}case"Pack":return uo((()=>{const s=zv("axis",e,t,n),r=zv("tensors",e,t,n),a=r[0].shape,i=ih(r[0]).shape,o=r.map((e=>{const t=re(e.shape,a);if(!t&&!re(ih(e).shape,i))throw new Error("the input tensors shape does not match");return t?e:Sl(e,a)}));return[oh(o,s)]}));case"Unpack":{const s=zv("axis",e,t,n),r=zv("tensor",e,t,n);return wh(r,s)}case"Tile":{const s=zv("reps",e,t,n);return[gu(zv("x",e,t,n),s)]}case"Split":case"SplitV":{const s=zv("axis",e,t,n),r=zv("numOrSizeSplits",e,t,n),a=zv("x",e,t,n);return sh(a,r,s)}case"ScatterNd":{const s=zv("indices",e,t,n),r=zv("values",e,t,n),a=zv("shape",e,t,n);return[Uh(s,r,a)]}case"GatherNd":{const s=zv("x",e,t,n),r=zv("indices",e,t,n);return[Hh(s,r)]}case"SparseToDense":{const s=zv("sparseIndices",e,t,n),r=zv("outputShape",e,t,n),a=zv("sparseValues",e,t,n),i=zv("defaultValue",e,t,n);return[Gh(s,a,r,a.dtype===i.dtype?i:Ha(i,a.dtype))]}default:throw TypeError(`Node type ${e.op} is not implemented`)}},HI=(e,t,n)=>{switch(e.op){case"FFT":return[eh(zv("x",e,t,n))];case"IFFT":return[th(zv("x",e,t,n))];case"RFFT":return[rh(zv("x",e,t,n))];case"IRFFT":return[nh(zv("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}},jI=(e,t,n)=>{switch(e.op){case"Cast":return[Ha(zv("x",e,t,n),zv("dtype",e,t,n))];case"ExpandDims":{const s=zv("axis",e,t,n);return[fu(zv("x",e,t,n),s)]}case"Squeeze":{const s=zv("axis",e,t,n);return[ih(zv("x",e,t,n),s)]}case"Reshape":return[Sl(zv("x",e,t,n),zv("shape",e,t,n))];case"MirrorPad":return[rc(zv("x",e,t,n),zv("padding",e,t,n),zv("mode",e,t,n))];case"PadV2":case"Pad":return[fc(zv("x",e,t,n),zv("padding",e,t,n),zv("constantValue",e,t,n))];case"SpaceToBatchND":{const s=zv("blockShape",e,t,n),r=zv("paddings",e,t,n);return[xc(zv("x",e,t,n),s,r)]}case"BatchToSpaceND":{const s=zv("blockShape",e,t,n),r=zv("crops",e,t,n);return[Fl(zv("x",e,t,n),s,r)]}case"DepthToSpace":{const s=zv("blockSize",e,t,n),r=zv("dataFormat",e,t,n).toUpperCase();return[su(zv("x",e,t,n),s,r)]}case"BroadcastTo":return[Pl(zv("x",e,t,n),zv("shape",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}};function qI(e,t,n,s){const r=((e,t,n)=>{switch(e.category){case"arithmetic":return uo((()=>NI(e,t,n)));case"basic_math":return uo((()=>SI(e,t,n)));case"control":return EI(e,t,n);case"convolution":return uo((()=>RI(e,t,n)));case"creation":return uo((()=>DI(e,t,n)));case"dynamic":return _I(e,t,n);case"evaluation":return uo((()=>OI(e,t,n)));case"image":return uo((()=>PI(e,t,n)));case"graph":return uo((()=>MI(e,t,n)));case"logical":return uo((()=>BI(e,t,n)));case"matrices":return uo((()=>WI(e,t,n)));case"normalization":return uo((()=>VI(e,t,n)));case"reduction":return uo((()=>UI(e,t,n)));case"slice_join":return uo((()=>GI(e,t,n)));case"spectral":return uo((()=>HI(e,t,n)));case"transformation":return uo((()=>jI(e,t,n)));case"hash_table":return zI(e,t,n,s);case"custom":const r=Mv(e.op);if(r&&r.customExecutor)return r.customExecutor(new II(e,t,n));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,t,n);return Le(r)?r.then((e=>[].concat(e))):[].concat(r)}class KI{constructor(e={},t={},n={},s={}){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=n,this.functionMap=s,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const e=[];for(let t=0;t<this.contexts.length-1;t++){const n=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(n))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map((e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`)).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(const t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(const t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}function XI(e,t,n,s){const r=new Set,a=[];let i=null,o=null;const l=new Set,u=Object.keys(e).map((e=>Vv(e)[0]));let c=[];null!=s&&(c=s.map((e=>Vv(e.name)[0])));const h=[...t];for(;h.length>0;){const e=h.pop();(QI(e)||eN(e)||tN(e))&&null==i&&(i=e,o=i.children.map((e=>e.name)).filter((e=>r.has(e)))),r.add(e.name),null==n[e.name]&&-1===u.indexOf(e.name)&&-1===c.indexOf(e.name)&&(0!==e.inputs.length?e.inputs.forEach((e=>{l.has(e.name)||(l.add(e.name),h.push(e))})):a.push(e.name))}return{inputs:e,outputs:t,usedNodes:r,missingInputs:a,dynamicNode:i,syncInputs:o}}const YI=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],JI=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],ZI=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2"];function QI(e){return YI.indexOf(e.op)>=0}function eN(e){return JI.indexOf(e.op)>=0}function tN(e){return ZI.indexOf(e.op)>=0}class nN{constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach((t=>{this._functionExecutorMap[t]=new nN(e.functions[t],this)}))}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){const t=Object.keys(e).map((t=>e[t].map((e=>e.id))));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get outputs(){return this._outputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get inputNodes(){return this._inputs.map((e=>e.signatureKey||e.name))}get outputNodes(){return this._outputs.map((e=>{const t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t}))}get functions(){return Object.keys(this._functions).reduce(((e,t)=>(e[t]=this._functions[t].signature,e)),{})}getCompilationKey(e,t){const n=e.map((e=>e.name)).sort(),s=t.map((e=>e.name)).sort();return n.join(this.SEPERATOR)+"--"+s.join(this.SEPERATOR)}compile(e,t){const n=XI(e,t,this.weightMap,this._initNodes),{missingInputs:s,dynamicNode:r,syncInputs:a}=n;if(null!=r)throw new Error(`This execution contains the node '${r.name}', which has the dynamic op '${r.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${a}]`);if(s.length>0){const n=t.map((e=>e.name)),r=Object.keys(e);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${r}]. Missing the following inputs: [${s}]`)}return function(e,t,n){const{usedNodes:s,inputs:r}=n,a=[],i=Object.keys(r).map((e=>Vv(e)[0])).map((t=>e.nodes[t])),o=e.initNodes;i.forEach((e=>{s.has(e.name)&&a.push(e)})),e.weights.forEach((e=>{s.has(e.name)&&a.push(e)})),null!=o&&o.forEach((e=>{s.has(e.name)&&a.push(e)}));const l=new Set,u=[];for(;a.length>0;){const e=a.pop();l.add(e.name),t[e.name]||u.push(e),e.children.forEach((e=>{!l.has(e.name)&&s.has(e.name)&&e.inputs.every((e=>l.has(e.name)))&&a.push(e)}))}return u}(this.graph,this.weightMap,n)}execute(e,t){e=this.mapInputs(e);const n=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);const s=n.map((e=>this.graph.nodes[Vv(e)[0]])),r=t.map((e=>Vv(e)[0]));let a=r.map((e=>this.graph.nodes[e]));0===a.length&&(a=this._outputs);const i=this.getCompilationKey(s,a);let o=this.compiledMap.get(i);null==o&&(o=this.compile(e,a),this.compiledMap.set(i,o));const l={},u={};return uo((()=>{const n=new KI(this.weightMap,l,u,this.functionExecutorMap),s=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,r]=Vv(t),a=[];a[r]=e[t],s[n]=a}));const a=this.getFrozenTensorIds(s),i={};for(let e=0;e<o.length;e++){const t=o[e];if(!s[t.name]){const e=qI(t,s,n,this._resourceManager);if(Le(e))throw new Error(`The execution of the op '${t.op}' returned a promise. Please use model.executeAsync() instead.`);s[t.name]=e,this.checkTensorForDisposal(t.name,t,s,n,a,r,i)}}return null==this.parent&&n.dispose(a),t.map((e=>Pv(e,s,n)))}))}getFrozenTensorIds(e){const t=[].concat.apply([],Object.keys(e).map((t=>e[t])).map((e=>e.map((e=>e.id)))));return new Set(t)}checkTensorForDisposal(e,t,n,s,r,a,i){"control"!==t.category&&-1===a.indexOf(e)&&(n[e].forEach((e=>{null!=e&&(i[e.id]=(i[e.id]||0)+t.children.length)})),t.inputs.forEach((e=>{if("control"!==e.category){const t=function(e,t,n){return t[Wv(e,n.currentContextId)]}(e.name,n,s);null!=t&&t.forEach((e=>{if(e&&!r.has(e.id)){const t=i[e.id];1===t?(e.dispose(),delete i[e.id]):null!=t&&i[e.id]--}}))}})))}async executeAsync(e,t){return this._executeAsync(e,t)}async _executeAsync(e,t,n=!1,s={},r={}){n||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));const a=new KI(this.weightMap,s,r,this.functionExecutorMap),i=await this.executeWithControlFlow(e,a,t,n),o=t.map((e=>Pv(e,i,a))),l=o.map((e=>e.id)),u=Object.keys(e).map((t=>e[t].id)),c=new Set([...l,...u,...this.weightIds]);return Object.keys(i).forEach((e=>{i[e].forEach((e=>{!e||e.isDisposed||c.has(e.id)||e.dispose()}))})),null==this.parent&&a.dispose(c),o}async executeFunctionAsync(e,t,n){const s=e.reduce(((e,t,n)=>(e[this.inputs[n].name]=t,e)),{});return this._executeAsync(s,this.outputNodes,!0,t,n)}async executeWithControlFlow(e,t,n,s){const r=Object.keys(e),a=r.map((e=>this.graph.nodes[Vv(e)[0]])),i=n.map((e=>Vv(e)[0]));let o=i.map((e=>this.graph.nodes[e]));0===o.length&&(o=this._outputs);const{usedNodes:l,missingInputs:u,dynamicNode:c,syncInputs:h}=XI(e,o,this.weightMap,this._initNodes),p=[...a,...this.graph.weights,...this._initNodes||[]].map((e=>({node:e,contexts:t.currentContext}))),d=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,s]=Vv(t),r=[];r[s]=e[t],d[n]=r}));const f={},m=this.getFrozenTensorIds(d),g={};for(;p.length>0;){const e=this.processStack(a,p,t,d,g,m,i,f,l);await Promise.all(e)}null!=c||s||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const y=o.filter((e=>!QI(e)&&!Pv(e.name,d,t))).map((e=>e.name));if(y.length>0){let e="";throw null!=c&&(e=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${h}]`),new Error(`Cannot compute the outputs [${y}] from the provided inputs [${r}]. Consider providing the following inputs: [${u}]. ${e}`)}return d}processStack(e,t,n,s,r,a,i,o,l){const u=[];for(;t.length>0;){const e=t.pop();n.currentContext=e.contexts;let c="";if("Enter"===e.node.op&&zv("isConstant",e.node,s,n)&&([c]=Bv(e.node.name,n)),null==s[e.node.name]){const h=qI(e.node,s,n,this._resourceManager);c||([c]=Bv(e.node.name,n));const p=n.currentContext;Le(h)?u.push(h.then((u=>(s[c]=u,n.currentContext=p,this.checkTensorForDisposal(c,e.node,s,n,a,i,o),this.processChildNodes(e.node,t,n,s,r,l),u)))):(s[c]=h,this.checkTensorForDisposal(c,e.node,s,n,a,i,o),this.processChildNodes(e.node,t,n,s,r,l))}else this.processChildNodes(e.node,t,n,s,r,l)}return u}processChildNodes(e,t,n,s,r,a){e.children.forEach((e=>{const[i]=Bv(e.name,n);!r[i]&&a.has(e.name)&&("Merge"===e.op?e.inputNames.some((e=>!!Pv(e,s,n)))&&(r[i]=!0,t.push({contexts:n.currentContext,node:e})):e.inputNames.every((e=>!!Pv(e,s,n)))&&(r[i]=!0,t.push({contexts:n.currentContext,node:e})))}))}dispose(){Object.keys(this.weightMap).forEach((e=>this.weightMap[e].forEach((e=>e.dispose()))))}checkInputShapeAndType(e){Object.keys(e).forEach((t=>{const n=e[t],[s]=Vv(t),r=this.graph.nodes[s];if(r.attrParams.shape&&r.attrParams.shape.value){const e=r.attrParams.shape.value;Z(e.length===n.shape.length&&n.shape.every(((t,n)=>-1===e[n]||e[n]===t)),(()=>`The shape of dict['${r.name}'] provided in model.execute(dict) must be [${e}], but was [${n.shape}]`))}r.attrParams.dtype&&r.attrParams.dtype.value&&Z(n.dtype===r.attrParams.dtype.value,(()=>`The dtype of dict['${r.name}'] provided in model.execute(dict) must be ${r.attrParams.dtype.value}, but was ${n.dtype}`))}))}mapInputs(e){const t={};for(const n in e)null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n]?t[this._signature.inputs[n].name]=e[n]:t[n]=e[n];return t}checkInputs(e){const t=Object.keys(e).filter((e=>{const[t]=Vv(e);return null==this.graph.nodes[t]}));if(t.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map((e=>null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[e]?this._signature.outputs[e].name:e),{})}checkOutputs(e){e.forEach((e=>{const[t]=Vv(e);if(!this.graph.nodes[t])throw new Error(`The output '${e}' is not found in the graph`)}))}}class sN{constructor(e={},t={}){this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(const e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(const e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}const rN="?tfjs-format=file",aN="model.json";class iN{constructor(e,t={}){this.modelUrl=e,this.loadOptions=t,this.version="n/a",null==t&&(this.loadOptions={}),this.resourceManager=new sN}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}findIOHandler(){const e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=ii(e,this.loadOptions);else{const t=da(e,this.loadOptions);if(0===t.length)t.push(ii(e,this.loadOptions));else if(t.length>1)throw new Error(`Found more than one (${t.length}) load handlers for URL '${[e]}'`);this.handler=t[0]}}async load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const e=await this.handler.load();return this.loadSync(e)}loadSync(e){this.artifacts=e;const t=this.artifacts.modelTopology;let n;n=null!=this.artifacts.userDefinedMetadata&&null!=this.artifacts.userDefinedMetadata.signature?this.artifacts.userDefinedMetadata.signature:this.artifacts.signature,this.signature=n,this.version=`${t.versions.producer}.${t.versions.minConsumer}`;const s=ta(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new nN(lI.Instance.transformGraph(t,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(s),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer&&null!=e.modelInitializer.node){const t=lI.Instance.transformGraph(e.modelInitializer);this.initializer=new nN(t),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}async save(e,t){if("string"==typeof e){const t=pa(e);if(0===t.length)throw new Error(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Error(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}predict(e,t){return this.execute(e,this.outputNodes)}normalizeInputs(e){if(!(e instanceof xr||Array.isArray(e)))return e;if((e=Array.isArray(e)?e:[e]).length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${e.length} input tensors.`);return this.inputNodes.reduce(((t,n,s)=>(t[n]=e[s],t)),{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}execute(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=this.executor.execute(e,t);return n.length>1?n:n[0]}async executeAsync(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=await this.executor.executeAsync(e,t);return n.length>1?n:n[0]}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce(((t,n)=>(t[n]=[e[n]],t)),{})}dispose(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}}async function oN(e,t={}){if(null==e)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&null==e.load&&(e.endsWith("/")||(e+="/"),e=`${e}${aN}${rN}`);const n=new iN(e,t);return await n.load(),n}const lN="2.8.6";function uN(e,t,n=new Map,s=new Set){if(null==e)return null;if(s.has(e))throw new Error("Circular references are not supported.");if(n.has(e))return n.get(e);const r=t(e);if(r.recurse&&null!==r.value)throw new Error("A deep map function may not return both a value and recurse=true.");if(r.recurse){if(fN(e)){const r=Array.isArray(e)?[]:{};s.add(e);for(const a in e){const i=uN(e[a],t,n,s);r[a]=i}return s.delete(e),r}throw new Error(`Can't recurse into non-iterable type: ${e}`)}return n.set(e,r.value),r.value}function cN(e,t=pN){return hN(e,t)}function hN(e,t,n=new Set){const s=e[0];if(n.has(s))throw new Error("Circular references are not supported.");const r=t(e);if(r.recurse&&null!==r.value)throw new Error("A deep zip function may not return both a value and recurse=true.");if(r.recurse){if(fN(s)){const r=Array.isArray(s)?[]:{};n.add(s);for(const a in s){const s=hN(e.map((e=>e[a])),t,n);r[a]=s}return n.delete(s),r}throw new Error(`Can't recurse into non-iterable type: ${s}`)}return r.value}function pN(e){return null===e?null:fN(e[0])?{value:null,recurse:!0}:{value:e,recurse:!1}}async function dN(e,t){const n=new Map;uN(e,t,n);for(const e of Array.from(n.keys())){const t=n.get(e);if(Le(t)){const s=await t;n.set(e,s)}}return uN(e,t,n)}function fN(e){return null!=e&&!ArrayBuffer.isView(e)&&(Array.isArray(e)||"object"==typeof e&&!(e instanceof xr))}function mN(e){return e instanceof xr?{value:e.clone(),recurse:!1}:fN(e)?{value:null,recurse:!0}:{value:e,recurse:!1}}class gN{constructor(e){if(this.capacity=e,this.begin=0,this.end=0,null==e)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(e<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(e),this.doubledCapacity=2*e}wrap(e){for(;e<0;)e+=this.doubledCapacity;return e%this.doubledCapacity}get(e){if(e<0)throw new RangeError("Can't get item at a negative index.");return this.data[e%this.capacity]}set(e,t){if(e<0)throw new RangeError("Can't set item at a negative index.");this.data[e%this.capacity]=t}length(){let e=this.end-this.begin;return e<0&&(e=this.doubledCapacity+e),e}isFull(){return this.length()===this.capacity}isEmpty(){return 0===this.length()}push(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,e),this.end=this.wrap(this.end+1)}pushAll(e){for(const t of e)this.push(t)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);const e=this.get(this.end);return this.set(this.end,void 0),e}unshift(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,e)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const e=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),e}shuffleExcise(e){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const t=this.wrap(this.begin+e),n=this.get(t);return this.set(t,this.pop()),n}}class yN extends gN{constructor(){super(yN.INITIAL_CAPACITY)}isFull(){return!1}push(e){super.isFull()&&this.expand(),super.push(e)}unshift(e){super.isFull()&&this.expand(),super.unshift(e)}expand(){const e=2*this.capacity,t=new Array(e),n=this.length();for(let e=0;e<n;e++)t[e]=this.get(this.wrap(this.begin+e));this.data=t,this.capacity=e,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=n}}function bN(e){return new kN(e)}function xN(e){return new vN(e)}yN.INITIAL_CAPACITY=32;class wN{async toArray(){const e=[];let t=await this.next();for(;!t.done;)e.push(t.value),t=await this.next();return e}async toArrayForTest(){const e=this.prefetch(100),t=[];let n=await e.next();for(;!n.done;)t.push(n.value),n=await e.next();return t}async resolveFully(){let e=await this.next();for(;!e.done;)e=await this.next()}async resolveWhile(e){let t=await this.next(),n=e(t.value);for(;!t.done&&n;)t=await this.next(),n=e(t.value)}handleErrors(e){return new EN(this,e)}filter(e){return new $N(this,e)}map(e){return new TN(this,e)}mapAsync(e){return new AN(this,e)}serialMapAsync(e){return new AN(this,e).serial()}flatmap(e){return new DN(this,e)}async forEachAsync(e){return this.map(e).resolveFully()}async serialForEach(e){return this.serialMapAsync(e).resolveWhile((e=>!0===e))}rowMajorBatch(e,t=!0){return new CN(this,e,t)}columnMajorBatch(e,t=!0,n=pN){return this.rowMajorBatch(e,t).map((e=>cN(e,n)))}concatenate(e,t){return new FN(bN([this,e]),t)}take(e){return e<0||null==e?this:new SN(this,e)}skip(e){return e<0||null==e?this:new NN(this,e)}prefetch(e){return new MN(this,e)}shuffle(e,t){return new LN(this,e,t)}serial(){return new IN(this)}}class kN extends wN{constructor(e){super(),this.items=e,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};const e=this.items[this.trav];return this.trav++,{value:(t=e,function(e,t){return uN(e,t)}(t,mN)),done:!1};var t}}class vN extends wN{constructor(e){super(),this.nextFn=e}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(e){throw e.message=`Error thrown while iterating through a dataset: ${e.message}`,e}}}class IN extends wN{constructor(e){super(),this.upstream=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Serial`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){return this.upstream.next()}}class NN extends wN{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Skip`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){const e=await this.upstream.next();if(e.done)return e;co(e.value)}return this.upstream.next()}}class SN extends wN{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0}summary(){return`${this.upstream.summary()} -> Take`}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}}class CN extends wN{constructor(e,t,n=!0){super(),this.upstream=e,this.batchSize=t,this.enableSmallLastBatch=n,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> RowMajorBatch`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){const e=[];for(;e.length<this.batchSize;){const t=await this.upstream.next();if(t.done)return this.enableSmallLastBatch&&e.length>0?{value:e,done:!1}:{value:null,done:!0};e.push(t.value)}return{value:e,done:!1}}}class $N extends wN{constructor(e,t){super(),this.upstream=e,this.predicate=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Filter`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;){const e=await this.upstream.next();if(e.done||this.predicate(e.value))return e;co(e.value)}}}class TN extends wN{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Map`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=Dr(e.value),n=this.transform(e.value),s=Dr(n);for(const e of t)Rr(e,s)||e.dispose();return{value:n,done:!1}}}class EN extends wN{constructor(e,t){super(),this.upstream=e,this.handler=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> handleErrors`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(e){if(!this.handler(e))return{value:null,done:!0}}}}class AN extends wN{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> AsyncMap`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=Dr(e.value),n=await this.transform(e.value),s=Dr(n);for(const e of t)Rr(e,s)||e.dispose();return{value:n,done:!1}}}class RN extends wN{constructor(){super(),this.outputQueue=new yN,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;0===this.outputQueue.length();)if(!await this.pump())return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}}class DN extends RN{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Flatmap`}async pump(){const e=await this.upstream.next();if(e.done)return!1;const t=Dr(e.value),n=this.transform(e.value),s=Dr(n);this.outputQueue.pushAll(n);for(const e of t)Rr(e,s)||e.dispose();return!0}}class FN extends wN{constructor(e,t){super(),this.baseErrorHandler=t,this.lastRead=null,this.iterator=null,this.moreIterators=e}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(e){if(await e,null==this.iterator){const e=await this.moreIterators.next();if(e.done)return{value:null,done:!0};this.iterator=e.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}const t=await this.iterator.next();return t.done?(this.iterator=null,this.readFromChain(e)):t}}var _N;!function(e){e[e.FAIL=0]="FAIL",e[e.SHORTEST=1]="SHORTEST",e[e.LONGEST=2]="LONGEST"}(_N||(_N={}));class ON extends wN{constructor(e,t=_N.FAIL){super(),this.iterators=e,this.mismatchMode=t,this.count=0,this.currentPromise=null}summary(){return"{TODO: fill in upstream of zip summaries} -> Zip"}async nextState(e){await e;let t=0,n=0;const s=await dN(this.iterators,(function(e){return e instanceof wN?{value:e.next().then((e=>(t++,e.done&&n++,e.value))),recurse:!1}:{value:null,recurse:!0}}));if(t===n)return{value:null,done:!0};if(n>0)switch(this.mismatchMode){case _N.FAIL:throw new Error(`Zipped streams should have the same length. Mismatched at element ${this.count}.`);case _N.SHORTEST:return{value:null,done:!0};case _N.LONGEST:}return this.count++,{value:s,done:!1}}async next(){return this.currentPromise=this.nextState(this.currentPromise),this.currentPromise}}class MN extends wN{constructor(e,t){super(),this.upstream=e,this.bufferSize=t,this.buffer=new gN(t)}summary(){return`${this.upstream.summary()} -> Prefetch`}refill(){for(;!this.buffer.isFull();){const e=this.upstream.next();this.buffer.push(e)}}next(){return this.refill(),this.buffer.shift()}}class LN extends MN{constructor(e,t,n){super(e,t),this.upstream=e,this.windowSize=t,this.upstreamExhausted=!1,this.random=Nc.alea(n||hr().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}randomInt(e){return Math.floor(this.random()*e)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){const e=this.chooseIndex(),t=await this.buffer.shuffleExcise(e);if(!t.done)return this.refill(),t;this.upstreamExhausted=!0}return{value:null,done:!0}}}class zN{constructor(){this.size=null}batch(e,t=!0){const n=this;let s;return Z(e>0,(()=>`batchSize needs to be positive, but it is\n      ${e}`)),s=this.size===1/0||null==this.size?this.size:t?Math.ceil(this.size/e):Math.floor(this.size/e),PN((async()=>(await n.iterator()).columnMajorBatch(e,t,VN)),s)}concatenate(e){const t=this;let n;return n=this.size===1/0||e.size===1/0?1/0:null!=this.size&&null!=e.size?this.size+e.size:null,PN((async()=>(await t.iterator()).concatenate(await e.iterator())),n)}filter(e){const t=this;let n;return n=this.size===1/0?1/0:null,PN((async()=>(await t.iterator()).filter((t=>uo((()=>e(t)))))),n)}async forEachAsync(e){return(await this.iterator()).forEachAsync(e)}map(e){const t=this;return PN((async()=>(await t.iterator()).map((t=>uo((()=>e(t)))))),this.size)}mapAsync(e){const t=this;return PN((async()=>(await t.iterator()).mapAsync(e)),this.size)}prefetch(e){if(null==e)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");const t=this;return PN((async()=>(await t.iterator()).prefetch(e)),this.size)}repeat(e){const t=this;let n;return n=null!=this.size&&e>0?this.size*e:0===e?0:null!=this.size&&(void 0===e||e<0)?1/0:null,PN((async()=>{return n=xN((async()=>({value:await t.iterator(),done:!1}))).take(e),new FN(n,s);var n,s}),n)}skip(e){const t=this;let n;return n=null!=this.size&&e>=0&&this.size>=e?this.size-e:null!=this.size&&(this.size<e||void 0===e||e<0)?0:null,PN((async()=>(await t.iterator()).skip(e)),n)}shuffle(e,t,n=!0){if(null==e||e<0)throw null==this.size?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);const s=this,r=Nc.alea(t||hr().toString());return PN((async()=>{let t=r.int32();return n&&(t+=r.int32()),(await s.iterator()).shuffle(e,t.toString())}),this.size)}take(e){const t=this;let n;return n=null!=this.size&&this.size>e?e:null!=this.size&&this.size<=e?this.size:null,PN((async()=>(await t.iterator()).take(e)),n)}async toArray(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}}function PN(e,t=null){return new class extends zN{constructor(){super(...arguments),this.size=t}async iterator(){return e()}}}function BN(e){return PN((async()=>bN(e)),e.length)}function WN(e){if(!fN(e))throw new Error("The argument to zip() must be an object or array.");let t;if(Array.isArray(e))for(let n=0;n<e.length;n++)t=null==t?e[n].size:Math.min(t,e[n].size);else if(e instanceof Object)for(const n in e)t=null==t?e[n].size:Math.min(t,e[n].size);return PN((async()=>function(e,t=_N.FAIL){return new ON(e,t)}(await dN(e,(e=>{if(e instanceof zN)return{value:e.iterator(),recurse:!1};if(fN(e))return{value:null,recurse:!0};throw new Error("Leaves of the structure passed to zip() must be Datasets, not primitives.")})),_N.SHORTEST)),t)}function VN(e){if(null===e)return null;return null==(t=e[0])||null===(n=t)||"object"!=typeof n&&"function"!=typeof n||Array.isArray(t)||"object"==typeof t&&t instanceof xr||xe(t)?{value:function(e){if(0===e.length)throw new Error("Can't make a batch of zero elements.");return e[0]instanceof xr?oh(e):Jr(e)}(e),recurse:!1}:{value:null,recurse:!0};var t,n}zN.MAX_BUFFER_SIZE=1e4;class UN extends zN{constructor(e){super(),this.input=e}async iterator(){return(await this.input.iterator()).decodeUTF8().split("\n").map((e=>(e.endsWith("\r")&&(e=e.slice(0,-1)),e)))}}const GN='"',HN=Symbol("out"),jN=Symbol("field"),qN=Symbol("quote"),KN=Symbol("quoteafterquote"),XN=Symbol("quoteinquote");class YN extends zN{constructor(e,t){super(),this.input=e,this.hasHeader=!0,this.fullColumnNames=null,this.columnNamesValidated=!1,this.columnConfigs=null,this.configuredColumnsOnly=!1,this.delimiter=",",this.delimWhitespace=!1,this.base=new UN(e),t||(t={}),this.hasHeader=!1!==t.hasHeader,this.fullColumnNames=t.columnNames,this.columnConfigs=t.columnConfigs,this.configuredColumnsOnly=t.configuredColumnsOnly,t.delimWhitespace?(Z(null==t.delimiter,(()=>"Delimiter should not be provided when delimWhitespace is true.")),this.delimWhitespace=!0,this.delimiter=" "):this.delimiter=t.delimiter?t.delimiter:","}async columnNames(){return this.columnNamesValidated||await this.setColumnNames(),this.configuredColumnsOnly?Object.keys(this.columnConfigs):this.fullColumnNames}async setColumnNames(){const e=await this.maybeReadHeaderLine();if(!this.fullColumnNames&&!e)throw new Error("Column names must be provided if there is no header line.");this.fullColumnNames&&e&&Z(e.length===this.fullColumnNames.length,(()=>"The length of provided columnNames ("+this.fullColumnNames.length.toString()+") does not match the length of the header line read from file ("+e.length.toString()+").")),this.fullColumnNames||(this.fullColumnNames=e);const t=this.fullColumnNames.reduce(((e,t)=>(e[t]=e[t]+1||1,e)),{}),n=Object.keys(t).filter((e=>t[e]>1));if(Z(0===n.length,(()=>"Duplicate column names found: "+n.toString())),this.columnConfigs)for(const e of Object.keys(this.columnConfigs))if(-1===this.fullColumnNames.indexOf(e))throw new Error('The key "'+e+'" provided in columnConfigs does not match any of the column names ('+this.fullColumnNames.toString()+").");this.columnNamesValidated=!0}async maybeReadHeaderLine(){if(this.hasHeader){const e=await this.base.iterator(),t=await e.next();if(t.done)throw new Error("No data was found for CSV parsing.");const n=t.value;return this.parseRow(n,!1)}return null}async iterator(){this.columnNamesValidated||await this.setColumnNames();let e=await this.base.iterator();return this.hasHeader&&(e=e.skip(1)),e.map((e=>this.makeDataElement(e)))}makeDataElement(e){const t=this.parseRow(e),n={},s={};for(let r=0;r<this.fullColumnNames.length;r++){const a=this.fullColumnNames[r],i=this.columnConfigs?this.columnConfigs[a]:null;if(!this.configuredColumnsOnly||i){const o=t[r];let l=null;if(""===o)if(i&&void 0!==i.default)l=i.default;else{if(i&&(i.required||i.isLabel))throw new Error(`Required column ${a} is empty in this line: ${e}`);l=void 0}else{const e=Number(o);if(isNaN(e))l=i&&"bool"===i.dtype?this.getBoolean(o):o;else if(i&&i.dtype)switch(i.dtype){case"float32":default:l=e;break;case"int32":l=Math.floor(e);break;case"bool":l=this.getBoolean(o)}else l=e}i&&i.isLabel?s[a]=l:n[a]=l}}return 0===Object.keys(s).length?n:{xs:n,ys:s}}getBoolean(e){return"1"===e||"true"===e.toLowerCase()?1:0}parseRow(e,t=!0){const n=[];let s=0;const r=e.length;let a=HN;for(let t=0;t<r;t++)switch(a){case HN:switch(e.charAt(t)){case GN:s=t+1,a=qN;break;case this.delimiter:if(s=t+1," "===this.delimiter&&this.delimWhitespace)break;n.push(""),a=HN;break;default:a=jN,s=t}break;case jN:e.charAt(t)===this.delimiter&&(n.push(e.substring(s,t)),a=HN,s=t+1);break;case qN:e.charAt(t)===GN&&(a=KN);break;case KN:switch(e.charAt(t)){case this.delimiter:n.push(e.substring(s,t-1)),a=HN,s=t+1;break;case GN:a=qN;break;default:a=XN}break;case XN:e.charAt(t)===GN&&(a=qN)}if(a===KN?n.push(e.substring(s,r-1)):n.push(e.substring(s)),t&&n.length!==this.fullColumnNames.length)throw new Error(`Invalid row in csv file. Should have ${this.fullColumnNames.length} elements in a row, but got ${n}`);return n}}class JN extends wN{constructor(e){super(),this.microphoneConfig=e,this.isClosed=!1,this.fftSize=e.fftSize||1024;const t=Math.log2(this.fftSize);if(this.fftSize<0||t<4||t>14||!Number.isInteger(t))throw new Error(`Invalid fftSize: it must be a power of 2 between 2 to 4 and 2 to 14, but got ${this.fftSize}`);if(this.numFrames=e.numFramesPerSpectrogram||43,this.sampleRateHz=e.sampleRateHz,this.columnTruncateLength=e.columnTruncateLength||this.fftSize,this.audioTrackConstraints=e.audioTrackConstraints,this.smoothingTimeConstant=e.smoothingTimeConstant||0,this.includeSpectrogram=!1!==e.includeSpectrogram,this.includeWaveform=!0===e.includeWaveform,!this.includeSpectrogram&&!this.includeWaveform)throw new Error("Both includeSpectrogram and includeWaveform are false. At least one type of data should be returned.")}summary(){return"microphone"}static async create(e={}){if(Be().get("IS_NODE"))throw new Error("microphone API is only supported in browser environment.");const t=new JN(e);return await t.start(),t}async start(){try{this.stream=await navigator.mediaDevices.getUserMedia({audio:null==this.audioTrackConstraints||this.audioTrackConstraints,video:!1})}catch(e){throw new Error(`Error thrown while initializing video stream: ${e.message}`)}if(!this.stream)throw new Error("Could not obtain audio from microphone.");const e=window.AudioContext||window.webkitAudioContext;if(this.audioContext=new e,this.sampleRateHz){if(this.audioContext.sampleRate!==this.sampleRateHz)throw new Error(`Mismatch in sampling rate: Expected: ${this.sampleRateHz}; Actual: ${this.audioContext.sampleRate}`)}else this.sampleRateHz=this.audioContext.sampleRate;const t=this.audioContext.createMediaStreamSource(this.stream);this.analyser=this.audioContext.createAnalyser(),this.analyser.fftSize=2*this.fftSize,this.analyser.smoothingTimeConstant=this.smoothingTimeConstant,t.connect(this.analyser),this.freqData=new Float32Array(this.fftSize),this.timeData=new Float32Array(this.fftSize)}async next(){if(this.isClosed)return{value:null,done:!0};let e,t;const n=await this.getAudioData();if(this.includeSpectrogram){const t=this.flattenQueue(n.freqDataQueue);e=this.getTensorFromAudioDataArray(t,[this.numFrames,this.columnTruncateLength,1])}if(this.includeWaveform){const e=this.flattenQueue(n.timeDataQueue);t=this.getTensorFromAudioDataArray(e,[this.numFrames*this.fftSize,1])}return{value:{spectrogram:e,waveform:t},done:!1}}async capture(){return(await this.next()).value}async getAudioData(){const e=[],t=[];let n=0;return new Promise((s=>{const r=setInterval((()=>{this.includeSpectrogram&&(this.analyser.getFloatFrequencyData(this.freqData),this.freqData[0]===-1/0&&s({freqDataQueue:e,timeDataQueue:t}),e.push(this.freqData.slice(0,this.columnTruncateLength))),this.includeWaveform&&(this.analyser.getFloatTimeDomainData(this.timeData),t.push(this.timeData.slice())),++n===this.numFrames&&(clearInterval(r),s({freqDataQueue:e,timeDataQueue:t}))}),this.fftSize/this.sampleRateHz*1e3)}))}stop(){this.isClosed||(this.isClosed=!0,this.analyser.disconnect(),this.audioContext.close(),null!=this.stream&&this.stream.getTracks().length>0&&this.stream.getTracks()[0].stop())}toArray(){throw new Error("Can not convert infinite audio stream to array.")}getSampleRate(){return this.sampleRateHz}flattenQueue(e){const t=e[0].length,n=new Float32Array(e.length*t);return e.forEach(((e,s)=>n.set(e,s*t))),n}getTensorFromAudioDataArray(e,t){const n=new Float32Array(ne(t));return n.set(e,n.length-e.length),Jr(n,t)}}class ZN extends wN{constructor(e,t){if(super(),this.webcamVideoElement=e,this.webcamConfig=t,this.isClosed=!0,this.resize=!1,this.needToResize())if(this.resize=!0,this.cropSize=[this.webcamConfig.resizeHeight,this.webcamConfig.resizeWidth],this.cropBoxInd=hh([0],"int32"),this.webcamConfig.centerCrop){const e=1*this.webcamConfig.resizeWidth/this.webcamVideoElement.width,t=1*this.webcamConfig.resizeHeight/this.webcamVideoElement.height,n=(1-e)/2,s=(1-t)/2,r=n+e,a=t+s;this.cropBox=ph([s,n,a,r],[1,4])}else this.cropBox=ph([0,0,1,1],[1,4])}summary(){return"webcam"}static async create(e,t={}){if(Be().get("IS_NODE"))throw new Error("tf.data.webcam is only supported in browser environment.");if(!e){if(e=document.createElement("video"),!t.resizeWidth||!t.resizeHeight)throw new Error("Please provide webcam video element, or resizeWidth and resizeHeight to create a hidden video element.");e.width=t.resizeWidth,e.height=t.resizeHeight}const n=new ZN(e,t);return await n.start(),n}async start(){this.webcamConfig.facingMode&&Z("user"===this.webcamConfig.facingMode||"environment"===this.webcamConfig.facingMode,(()=>`Invalid webcam facing mode: ${this.webcamConfig.facingMode}. Please provide 'user' or 'environment'`));try{this.stream=await navigator.mediaDevices.getUserMedia({video:{deviceId:this.webcamConfig.deviceId,facingMode:this.webcamConfig.facingMode?this.webcamConfig.facingMode:"user",width:this.webcamVideoElement.width,height:this.webcamVideoElement.height}})}catch(e){throw e.message=`Error thrown while initializing video stream: ${e.message}`,e}if(!this.stream)throw new Error("Could not obtain video from webcam.");try{this.webcamVideoElement.srcObject=this.stream}catch(e){console.log(e),this.webcamVideoElement.src=window.URL.createObjectURL(this.stream)}return this.webcamVideoElement.play(),this.isClosed=!1,new Promise((e=>{this.webcamVideoElement.onloadedmetadata=()=>{e()}}))}async next(){if(this.isClosed)return{value:null,done:!0};let e;try{e=bi(this.webcamVideoElement)}catch(e){throw new Error(`Error thrown converting video to pixels: ${JSON.stringify(e)}`)}if(!this.resize)return{value:e,done:!1};try{return{value:this.cropAndResizeFrame(e),done:!1}}catch(e){throw new Error(`Error thrown cropping the video: ${e.message}`)}finally{e.dispose()}}needToResize(){return!(!this.webcamConfig.resizeWidth||!this.webcamConfig.resizeHeight||this.webcamVideoElement.width===this.webcamConfig.resizeWidth&&this.webcamVideoElement.height===this.webcamConfig.resizeHeight)}cropAndResizeFrame(e){return uo((()=>{const t=e.toFloat().expandDims(0);let n;n=Gp.cropAndResize(t,this.cropBox,this.cropBoxInd,this.cropSize,"bilinear");const s=n.shape;return n.reshape(s.slice(1))}))}async capture(){return(await this.next()).value}stop(){this.stream.getTracks().forEach((e=>e.stop()));try{this.webcamVideoElement.srcObject=null}catch(e){console.log(e),this.webcamVideoElement.src=null}this.isClosed=!0}toArray(){throw new Error("Can not convert infinite video stream to array.")}}class QN{}class eS extends wN{split(e){return new tS(this,e)}}class tS extends eS{constructor(e,t){super(),this.upstream=e,this.impl=new nS(e,t)}summary(){return this.impl.summary()}async next(){return this.impl.next()}}class nS extends RN{constructor(e,t){super(),this.upstream=e,this.separator=t,this.carryover=""}summary(){return`${this.upstream.summary()} -> Split('${this.separator}')`}async pump(){const e=await this.upstream.next();if(e.done)return""!==this.carryover&&(this.outputQueue.push(this.carryover),this.carryover="",!0);const t=e.value.split(this.separator);t[0]=this.carryover+t[0];for(const e of t.slice(0,-1))this.outputQueue.push(e);return this.carryover=t[t.length-1],!0}}class sS extends wN{decodeUTF8(){return new rS(this)}}class rS extends eS{constructor(e){super(),this.upstream=e,this.impl=new aS(e)}summary(){return this.impl.summary()}async next(){return this.impl.next()}}class aS extends RN{constructor(e){if(super(),this.upstream=e,Be().get("IS_BROWSER"))this.decoder=new TextDecoder("utf-8");else{const{StringDecoder:e}=n(312);this.decoder=new e("utf8")}}summary(){return`${this.upstream.summary()} -> Utf8`}async pump(){const e=await this.upstream.next();let t,n;return!e.done&&(t=e.value,n=Be().get("IS_BROWSER")?this.decoder.decode(t,{stream:!0}):this.decoder.write(Buffer.from(t.buffer)),this.outputQueue.push(n),!0)}}class iS extends sS{constructor(e,t={}){super(),this.file=e,this.options=t,Z(e instanceof Uint8Array||!!Be().get("IS_BROWSER")&&(e instanceof File||e instanceof Blob),(()=>"FileChunkIterator only supports File, Blob and Uint8Array right now.")),this.offset=t.offset||0,this.chunkSize=t.chunkSize||1048576}summary(){return`FileChunks ${this.file}`}async next(){if(this.offset>=(this.file instanceof Uint8Array?this.file.byteLength:this.file.size))return{value:null,done:!0};const e=new Promise(((e,t)=>{const n=this.offset+this.chunkSize;if(this.file instanceof Uint8Array)e(new Uint8Array(this.file.slice(this.offset,n)));else{const s=new FileReader;s.onload=n=>{let r=s.result;if(r instanceof ArrayBuffer&&(r=new Uint8Array(r)),!(r instanceof Uint8Array))return t(new TypeError("FileReader returned unknown type."));e(r)},s.onabort=e=>t(new Error("Aborted")),s.onerror=e=>t(new Error(e.type));const r=this.file.slice(this.offset,n);s.readAsArrayBuffer(r)}this.offset=n}));return{value:await e,done:!1}}}function oS(e){return"string"==typeof e&&"file://"===e.substr(0,7)}class lS extends QN{constructor(e,t={}){super(),this.input=e,this.options=t}async iterator(){if(oS(this.input)&&Be().get("IS_NODE")){const e=n(993);this.input=e.readFileSync(this.input.substr(7))}return new iS(this.input,this.options)}}class uS extends QN{constructor(e,t={}){super(),this.url=e,this.fileOptions=t}async iterator(){return oS(this.url)?new lS(this.url,this.fileOptions).iterator():async function(e,t={}){let n,s;var r;"string"==typeof e?n=e:(n=e.url,s={method:(r=e).method,headers:r.headers,body:r.body,mode:r.mode,credentials:r.credentials,cache:r.cache,redirect:r.redirect,referrer:r.referrer,integrity:r.integrity});const a=await pr(n,s);if(a.ok){const e=new Uint8Array(await a.arrayBuffer());return new iS(e,t)}throw new Error(a.statusText)}(this.url,this.fileOptions)}}function cS(e,t={}){return new YN(new uS(e),t)}function hS(e){const t=xN(e);return PN((async()=>t))}function pS(e){return PN((async()=>{const t=await e();return xN((()=>t.next()))}))}async function dS(e,t){return ZN.create(e,t)}async function fS(e){return JN.create(e)}const mS="2.8.6";function gS(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&Z("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the CPU backend.`))}))}const yS=vh;class bS extends G{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new U(this,io())}write(e,t,n){this.firstUse&&(this.firstUse=!1,Be().get("IS_NODE")&&md("\n============================\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================"));const s={};return this.data.set(s,{values:e,dtype:n,refCount:1}),s}makeTensorInfo(e,t,n){let s;if("string"===t&&null!=n&&n.length>0&&ve(n[0])){const r=n.map((e=>dr(e)));s=this.write(r,e,t)}else s=this.write(n,e,t);return{dataId:s,shape:e,dtype:t}}incRef(e){this.data.get(e).refCount++}decRef(e){this.data.has(e)&&this.data.get(e).refCount--}move(e,t,n,s){this.data.set(e,{values:t,dtype:s,refCount:1})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){const{dtype:t,complexTensorInfos:n}=this.data.get(e);return"complex64"===t?yd(this.readSync(n.real.dataId),this.readSync(n.imag.dataId)):this.data.get(e).values}bufferSync(e){const t=this.readSync(e.dataId);let n=t;if("string"===e.dtype)try{n=t.map((e=>fr(e)))}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return Ga(e.shape,e.dtype,n)}makeOutput(e,t,n){const s=this.write(e,t,n);return io().makeTensorFromDataId(s,t,n,this)}disposeData(e){if(this.data.has(e)){const{complexTensorInfos:t}=this.data.get(e);null!=t&&(this.disposeData(t.real.dataId),this.disposeData(t.imag.dataId)),this.data.delete(e)}}disposeIntermediateTensorInfo(e){const t=e.dataId;if(this.data.has(t)){const e=this.data.get(t);e.refCount--,e.refCount<1&&this.disposeData(t)}}async time(e){const t=hr();return e(),{kernelMs:hr()-t}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){gS([e],"where");const t=this.readSync(e.dataId);return yS(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}function xS(e,t,n){return({inputs:s,attrs:r,backend:a})=>{const{x:i}=s;if(gS(i,e),"string"===i.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const o=a,l=o.data.get(i.dataId).values,u=ne(i.shape),c=n||i.dtype,h=me(c,u);for(let e=0;e<u;++e)h[e]=t(l[e],r);return o.makeTensorInfo(i.shape,c,h)}}function wS(e,t,n){return({inputs:s,attrs:r,backend:a})=>{const{x:i}=s;if(gS(i,e),"string"===i.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const o=a,l=o.data.get(i.dataId).values,u=n||i.dtype,c=t(l,u,r);return o.makeTensorInfo(i.shape,u,c)}}wo("cpu",(()=>new bS),1);const kS=xS(Pt,(e=>e>=0?e:Math.exp(e)-1)),vS={kernelName:Pt,backendName:"cpu",kernelFunc:kS};function IS(e){const{inputs:t,backend:n}=e,{x:s}=t;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const NS={kernelName:nn,backendName:"cpu",kernelFunc:IS};function SS(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{alpha:a}=s;gS([r],"leakyRelu");const i=ne(r.shape),o=n.data.get(r.dataId).values,l=fe("float32",i);for(let e=0;e<o.length;e++)l[e]=o[e]<0?a*o[e]:o[e];return n.makeTensorInfo(r.shape,"float32",l)}const CS={kernelName:un,backendName:"cpu",kernelFunc:SS};function $S(e){return(t,n,s,r,a)=>{const i=Ko(t,n),o=i.length,l=Te(i),u=fe(a,ne(i)),c=t.length,h=n.length,p=Te(t),d=Te(n),f=jo(t,i),m=jo(n,i);if(f.length+m.length===0)for(let t=0;t<u.length;++t)u[t]=e(s[t%s.length],r[t%r.length]);else for(let t=0;t<u.length;++t){const n=Me(t,o,l),a=n.slice(-c);f.forEach((e=>a[e]=0));const i=Oe(a,c,p),g=n.slice(-h);m.forEach((e=>g[e]=0));const y=Oe(g,h,d);u[t]=e(s[i],r[y])}return[u,i]}}const TS=$S(((e,t)=>e<0?t*e:e));function ES(e){const{inputs:t,backend:n}=e,{x:s,alpha:r}=t;gS([s,r],"prelu");const a=n.data.get(s.dataId).values,i=n.data.get(r.dataId).values,[o,l]=TS(s.shape,r.shape,a,i,s.dtype);return n.makeTensorInfo(l,s.dtype,o)}const AS={kernelName:jn,backendName:"cpu",kernelFunc:ES},RS=xS(Jn,(e=>Math.max(0,e))),DS={kernelName:Jn,backendName:"cpu",kernelFunc:RS},FS=xS(ss,(e=>Math.min(Math.max(0,e),6))),_S={kernelName:ss,backendName:"cpu",kernelFunc:FS};function OS(e,t,n,s,r){if("linear"===n)return IS({inputs:{x:t},backend:e});if("relu"===n)return RS({inputs:{x:t},backend:e});if("elu"===n)return kS({inputs:{x:t},backend:e});if("relu6"===n)return FS({inputs:{x:t},backend:e});if("prelu"===n)return ES({inputs:{x:t,alpha:s},backend:e});if("leakyrelu"===n)return SS({inputs:{x:t},backend:e,attrs:{alpha:r}});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}function MS(e){const{inputs:t,backend:n}=e,{real:s,imag:r}=t,a=n.data.get(s.dataId).values,i=n.data.get(r.dataId).values,o=n.makeTensorInfo(s.shape,"complex64");return n.data.get(o.dataId).complexTensorInfos={real:n.makeTensorInfo(s.shape,"float32",a),imag:n.makeTensorInfo(r.shape,"float32",i)},o}const LS={kernelName:gt,backendName:"cpu",kernelFunc:MS};function zS(e,t,n="float32"){if("complex64"===n)return MS({inputs:{real:zS(e,t,"float32"),imag:zS(e,t,"float32")},backend:e});const s=De(ne(t),n);return e.makeTensorInfo(t,n,s)}function PS(e){const{inputs:t,backend:n}=e,{input:s}=t,r=n.data.get(s.dataId).complexTensorInfos.real,a=n.data.get(r.dataId).values;return n.makeTensorInfo(r.shape,r.dtype,a)}const BS={kernelName:Xn,backendName:"cpu",kernelFunc:PS};function WS(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{dtype:a}=s;if("complex64"===a){if("complex64"===r.dtype)return IS({inputs:{x:r},backend:n});const e=zS(n,r.shape,r.dtype),t=WS({inputs:{x:r},backend:n,attrs:{dtype:"float32"}}),s=MS({inputs:{real:t,imag:e},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),s}if("complex64"===r.dtype){const e=PS({inputs:{input:r},backend:n}),t=WS({inputs:{x:e},backend:n,attrs:{dtype:a}});return n.disposeIntermediateTensorInfo(e),t}if(!be(r.dtype,a)){const e=IS({inputs:{x:r},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:a}}if("int32"===a){const e=n.data.get(r.dataId).values,t=Int32Array.from(e);return n.makeTensorInfo(r.shape,"int32",t)}if("bool"===a){const e=n.data.get(r.dataId).values,t=cr([0],r.dtype),[s,a]=$S(((e,t)=>e!==t?1:0))(r.shape,[],e,t,"bool");return n.makeTensorInfo(a,"bool",s)}throw new Error(`Error in Cast: failed to cast ${r.dtype} to ${a}`)}const VS={kernelName:dt,backendName:"cpu",kernelFunc:WS};function US(e,t,n,s){return null==n?({inputs:n,backend:r})=>{const{a,b:i}=n,o=r;gS([a,i],e);const l=o.data.get(a.dataId).values,u=o.data.get(i.dataId).values,c=s||a.dtype,[h,p]=t(a.shape,i.shape,l,u,c);return o.makeTensorInfo(p,c,h)}:({inputs:e,backend:r})=>{const{a,b:i}=e,o=r;if("complex64"===a.dtype||"complex64"===i.dtype){const e=WS({inputs:{x:a},backend:o,attrs:{dtype:"complex64"}}),t=o.data.get(e.dataId),s=t.complexTensorInfos.real,r=t.complexTensorInfos.imag,l=o.data.get(s.dataId).values,u=o.data.get(r.dataId).values,c=WS({inputs:{x:i},backend:o,attrs:{dtype:"complex64"}}),h=o.data.get(c.dataId),p=h.complexTensorInfos.real,d=h.complexTensorInfos.imag,f=o.data.get(p.dataId).values,m=o.data.get(d.dataId).values,[g,y,b]=n(a.shape,i.shape,l,u,f,m),x=o.makeTensorInfo(b,"float32",g),w=o.makeTensorInfo(b,"float32",y),k=MS({inputs:{real:x,imag:w},backend:o});return o.disposeIntermediateTensorInfo(e),o.disposeIntermediateTensorInfo(c),o.disposeIntermediateTensorInfo(x),o.disposeIntermediateTensorInfo(w),k}{const e=o.data.get(a.dataId).values,n=o.data.get(i.dataId).values,r=s||a.dtype,[l,u]=t(a.shape,i.shape,e,n,r);return o.makeTensorInfo(u,r,l)}}}function GS(e){return(t,n,s,r,a,i)=>{const o=Ko(t,n),l=ne(o),u=o.length,c=Te(o),h=fe("float32",l),p=fe("float32",l),d=jo(t,o),f=jo(n,o),m=yd(s,r),g=yd(a,i),y=t.length,b=Te(t),x=n.length,w=Te(n);if(d.length+f.length===0)for(let t=0;t<h.length;t++){const n=t%m.length,s=t%g.length,r=e(m[2*n],m[2*n+1],g[2*s],g[2*s+1]);h[t]=r.real,p[t]=r.imag}else for(let t=0;t<h.length;t++){const n=Me(t,u,c),s=n.slice(-y);d.forEach((e=>s[e]=0));const r=Oe(s,y,b),a=n.slice(-x);f.forEach((e=>a[e]=0));const i=Oe(a,x,w),o=e(m[2*r],m[2*r+1],g[2*i],g[2*i+1]);h[t]=o.real,p[t]=o.imag}return[h,p,o]}}const HS=$S(((e,t)=>e+t)),jS=GS(((e,t,n,s)=>({real:e+n,imag:t+s}))),qS=US(Ke,HS,jS),KS={kernelName:Ke,backendName:"cpu",kernelFunc:qS};function XS(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{shape:a}=s,i=ne(r.shape),o=he(a,i),l=ne(o);Z(i===l,(()=>`The new shape (${o}) has ${l} elements and the old shape (${r.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`)),n.incRef(r.dataId);const u=n.data.get(r.dataId);if(null!=u.complexTensorInfos){const e=u.complexTensorInfos.real,t=u.complexTensorInfos.imag;e.shape=o,t.shape=o}return{dataId:r.dataId,shape:o,dtype:r.dtype}}const YS={kernelName:Zn,backendName:"cpu",kernelFunc:XS};function JS(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a}=t,{transposeA:i,transposeB:o}=s;gS([r,a],"matMul");const l=r.shape.length,u=a.shape.length,c=i?r.shape[l-2]:r.shape[l-1],h=o?a.shape[u-1]:a.shape[u-2],p=i?r.shape[l-1]:r.shape[l-2],d=o?a.shape[u-2]:a.shape[u-1],f=r.shape.slice(0,-2),m=a.shape.slice(0,-2),g=ne(f),y=ne(m);Z(l>=2&&u>=2&&(g===y||1===g||1===y),(()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${f}) and (${m}).`));const b=(g>y?r.shape.slice(0,-2):a.shape.slice(0,-2)).concat([p,d]);Z(c===h,(()=>`Error in matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${r.shape} and ${a.shape} and transposeA=${i} and transposeB=${o} must match.`));const x=o?[y,d,h]:[y,h,d],w=XS({inputs:{x:r},backend:n,attrs:{shape:i?[g,c,p]:[g,p,c]}}),k=XS({inputs:{x:a},backend:n,attrs:{shape:x}}),v=i?w.shape[1]:w.shape[2],I=i?w.shape[2]:w.shape[1],N=o?k.shape[1]:k.shape[2],S=Math.max(g,y),C=n.data.get(w.dataId).values,$=n.data.get(k.dataId).values,T=Te(w.shape),E=Te(k.shape),[A,R,D]=i?[T[0],1,T[1]]:[T[0],T[1],1],[F,_,O]=o?[1,E[1],E[0]]:[E[1],1,E[0]],M=I*N,L=Ga([S,I,N],w.dtype),z=L.values,P=n.blockSize;for(let e=0;e<S;e++)for(let t=0;t<I;t+=P)for(let n=0;n<N;n+=P)for(let s=0;s<v;s+=P){const r=Math.min(t+P,I),a=Math.min(n+P,N),i=Math.min(s+P,v);for(let o=t;o<r;o++)for(let t=n;t<a;t++){let n=0;for(let r=s;r<i;r++){const s=Math.min(e,g-1)*A,a=Math.min(e,y-1)*O;n+=C[s+o*R+r*D]*$[r*F+t*_+a]}z[e*M+(o*N+t)]+=n}}return n.disposeIntermediateTensorInfo(w),n.disposeIntermediateTensorInfo(k),n.makeTensorInfo(b,L.dtype,L.values)}const ZS={kernelName:ut,backendName:"cpu",kernelFunc:JS},QS={kernelName:zs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a,bias:i,preluActivationWeights:o}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;let p,d,f;const m=[];p=JS({inputs:{a:r,b:a},attrs:{transposeA:l,transposeB:u},backend:n}),i&&(d=qS({inputs:{a:p,b:i},backend:n}),m.push(p),p=d),c&&(f=OS(n,p,c,o,h),m.push(p),p=f);for(const e of m)n.disposeIntermediateTensorInfo(e);return p}};function eC(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}const tC={kernelName:He,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend;gS(t,"abs");let s=new Float32Array(ne(t.shape));return s=eC(n.data.get(t.dataId).values),n.makeOutput(s,t.shape,"float32")}},nC=xS(je,(e=>Math.acos(e))),sC={kernelName:je,backendName:"cpu",kernelFunc:nC},rC=xS(qe,(e=>Math.acosh(e))),aC={kernelName:qe,backendName:"cpu",kernelFunc:rC},iC={kernelName:Xe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,s=t;gS(t,"addN");const r=s.map((e=>n.data.get(e.dataId).values)),a=Ga(s[0].shape,s[0].dtype),i=a.values;for(let e=0;e<s.length;e++){const t=r[e];for(let e=0;e<i.length;e++)i[e]+=t[e]}return n.makeTensorInfo(a.shape,a.dtype,a.values)}};function oC(e,t,n,s,r){const a=t.length,i=ne(t),o=Te(t),l=Te(r),u=fe(n,ne(r));for(let t=0;t<i;++t){const n=Me(t,a,o),r=new Array(n.length);for(let e=0;e<r.length;e++)r[e]=n[s[e]];u[Oe(r,a,l)]=e[t]}return u}function lC(e){const{inputs:t,attrs:n,backend:s}=e,{x:r}=t,{perm:a}=n;gS(r,"transpose");const i=r.shape.length,o=new Array(i);for(let e=0;e<o.length;e++)o[e]=r.shape[a[e]];const l=oC(s.data.get(r.dataId).values,r.shape,r.dtype,a,o);return{dataId:s.write(l,o,r.dtype),shape:o,dtype:r.dtype}}const uC={kernelName:As,backendName:"cpu",kernelFunc:lC},cC={kernelName:Ye,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;gS(r,"all");const o=pe(a,r.shape);let l=o;const u=Gu(l,r.shape.length);let c=r;null!=u&&(c=lC({inputs:{x:r},backend:n,attrs:{perm:u}}),l=ju(l.length,r.shape.length)),Uu("all",l,c.shape.length);const[h,p]=Wu(c.shape,l),d=ne(p),f=De(ne(h),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*d;let n=m[t];for(let e=0;e<d;++e){const s=m[t+e];n=n&&s}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(h,c.dtype,f);if(i){const e=XS({inputs:{x:g},backend:n,attrs:{shape:Vu(h,o)}});return n.disposeIntermediateTensorInfo(g),e}return g}},hC={kernelName:Je,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;gS(r,"any");const o=pe(a,r.shape);let l=o;const u=Gu(l,r.shape.length);let c=r;null!=u&&(c=lC({inputs:{x:r},backend:n,attrs:{perm:u}}),l=ju(l.length,r.shape.length)),Uu("any",l,c.shape.length);const[h,p]=Wu(c.shape,l),d=ne(p),f=De(ne(h),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*d;let n=m[t];for(let e=0;e<d;++e){const s=m[t+e];n=n||s}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(h,c.dtype,f);if(i){const e=XS({inputs:{x:g},backend:n,attrs:{shape:Vu(h,o)}});return n.disposeIntermediateTensorInfo(g),e}return g}},pC={kernelName:Ze,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;gS(r,"argMax");let i=pe(a,r.shape);const o=Gu(i,r.shape.length);let l=r;const u=[];null!=o&&(l=lC({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=ju(i.length,l.shape.length)),i=[i[0]],Uu("argMax",i,l.shape.length);const[c,h]=Wu(l.shape,i),p=De(ne(c),"int32"),d=ne(h),f=n.data.get(l.dataId).values;for(let e=0;e<p.length;++e){const t=e*d;let n=f[t],s=0;for(let e=0;e<d;++e){const r=f[t+e];r>n&&(n=r,s=e)}p[e]=s}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",p)}},dC={kernelName:Qe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;gS(r,"argMin");let i=pe(a,r.shape);const o=Gu(i,r.shape.length);let l=r;const u=[];null!=o&&(l=lC({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=ju(i.length,l.shape.length)),i=[i[0]],Uu("argMin",i,l.shape.length);const[c,h]=Wu(l.shape,i),p=De(ne(c),"int32"),d=ne(h),f=n.data.get(l.dataId).values;for(let e=0;e<p.length;++e){const t=e*d;let n=f[t],s=0;for(let e=0;e<d;++e){const r=f[t+e];r<n&&(n=r,s=e)}p[e]=s}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",p)}},fC=xS(et,(e=>Math.asin(e))),mC={kernelName:et,backendName:"cpu",kernelFunc:fC},gC=xS(tt,(e=>Math.asinh(e))),yC={kernelName:tt,backendName:"cpu",kernelFunc:gC},bC=xS(nt,(e=>Math.atan(e))),xC={kernelName:nt,backendName:"cpu",kernelFunc:bC},wC=$S(((e,t)=>Math.atan2(e,t))),kC=US(rt,wC),vC={kernelName:rt,backendName:"cpu",kernelFunc:kC},IC=xS(st,(e=>Math.atanh(e))),NC={kernelName:st,backendName:"cpu",kernelFunc:IC};function SC(e,t,n,s,r,a){const i=r.strideHeight,o=r.strideWidth,l=r.dilationHeight,u=r.dilationWidth,c=r.effectiveFilterHeight,h=r.effectiveFilterWidth,p=r.padInfo.top,d=r.padInfo.left,f="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=Ga(r.outShape,n),g=m.values,y=r.outShape[1]*r.outShape[2]*r.outShape[3],b=r.outShape[2]*r.outShape[3],x=r.outShape[3];for(let t=0;t<r.batchSize;++t){const n=t*y,m=t*s[0];for(let t=0;t<r.inChannels;++t)for(let y=0;y<r.outHeight;++y){const w=y*i-p,k=Math.max(0,w),v=Math.min(r.inHeight,c+w),I=n+y*b;for(let n=0;n<r.outWidth;++n){const i=n*o-d,c=Math.max(0,i),p=Math.min(r.inWidth,h+i);let y=f,b=0,w=0;for(let n=k;n<v;n+=l){const r=m+n*s[1];for(let n=c;n<p;n+=u){const i=e[r+n*s[2]+t];"max"===a&&i>y?y=i:"avg"===a&&(b+=i,w++)}if(isNaN(y))break}g[I+n*x+t]="avg"===a?b/w:y}}}return m}function CC(e,t,n,s,r=!1,a=!1){const i=Ga(s.outShape,"int32"),o=s.strideHeight,l=s.strideWidth,u=s.dilationHeight,c=s.dilationWidth,h=s.effectiveFilterHeight,p=s.effectiveFilterWidth,d=s.padInfo.top,f=s.padInfo.left,m=Ga(t,n,e);for(let e=0;e<s.batchSize;++e)for(let t=0;t<s.inChannels;++t)for(let n=0;n<s.outHeight;++n){const g=n*o-d;let y=g;for(;y<0;)y+=u;const b=Math.min(s.inHeight,h+g);for(let o=0;o<s.outWidth;++o){const h=o*l-f;let d=h;for(;d<0;)d+=c;const x=Math.min(s.inWidth,p+h);let w=Number.NEGATIVE_INFINITY,k=-1;for(let n=y;n<b;n+=u){const i=n-g;for(let o=d;o<x;o+=c){const l=o-h,u=m.get(e,n,o,t);u>w&&(w=u,k=r?a?((e*s.inHeight+n)*s.inWidth+o)*s.inChannels+t:(n*s.inWidth+o)*s.inChannels+t:i*p+l)}}i.set(k,e,n,o,t)}}return i}function $C(e,t,n,s,r,a){const i=r.strideDepth,o=r.strideHeight,l=r.strideWidth,u=r.dilationDepth,c=r.dilationHeight,h=r.dilationWidth,p=r.effectiveFilterDepth,d=r.effectiveFilterHeight,f=r.effectiveFilterWidth,m=r.padInfo.front,g=r.padInfo.top,y=r.padInfo.left,b="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,x=Ga(r.outShape,n),w=x.values,k=r.outShape[1]*r.outShape[2]*r.outShape[3]*r.outShape[4],v=r.outShape[2]*r.outShape[3]*r.outShape[4],I=r.outShape[3]*r.outShape[4],N=r.outShape[4];for(let t=0;t<r.batchSize;++t){const n=t*k,x=t*s[0];for(let t=0;t<r.inChannels;++t)for(let k=0;k<r.outDepth;++k){const S=k*i-m;let C=S;for(;C<0;)C+=u;const $=Math.min(r.inDepth,p+S),T=n+k*v;for(let n=0;n<r.outHeight;++n){const i=n*o-g;let p=i;for(;p<0;)p+=c;const m=Math.min(r.inHeight,d+i),k=T+n*I;for(let n=0;n<r.outWidth;++n){const i=n*l-y;let o=i;for(;o<0;)o+=h;const d=Math.min(r.inWidth,f+i),g=k+n*N;let v=b,I=0,S=0;for(let n=C;n<$;n+=u){const r=x+n*s[1];for(let n=p;n<m;n+=c){const i=r+n*s[2];for(let n=o;n<d;n+=h){const r=e[i+n*s[3]+t];if("max"===a&&r>v?v=r:"avg"===a&&(I+=r,S++),isNaN(v))break}if(isNaN(v))break}if(isNaN(v))break}w[g+t]="avg"===a?I/S:v}}}}return x}const TC={kernelName:at,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;gS(r,"avgPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=s;Z(Il(i,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const u=dl(r.shape,a,i,1,o,l);let c;if(1===u.filterWidth&&1===u.filterHeight&&re(u.inShape,u.outShape))c=IS({inputs:{x:r},backend:n});else{const e=n.data.get(r.dataId).values,t=Te(r.shape),s=SC(e,r.shape,r.dtype,t,u,"avg");c=n.makeTensorInfo(u.outShape,r.dtype,s.values)}return c}},EC={kernelName:ot,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l,dataFormat:u,dilations:c}=s;gS(r,"avgPool3d");let h=c;null==h&&(h=[1,1,1]);const p=fl(r.shape,a,i,h,o,l,u),d=$C(n.data.get(r.dataId).values,r.shape,r.dtype,Te(r.shape),p,"avg");return n.makeTensorInfo(d.shape,"float32",d.values)}},AC={kernelName:lt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,{filterSize:i,strides:o,pad:l,dilations:u,dimRoundingMode:c}=s;gS([r,a],"avgPool3DGrad");const h=fl(a.shape,i,o,u,l,c),p=h.strideDepth,d=h.strideHeight,f=h.strideWidth,m=h.filterDepth,g=h.filterHeight,y=h.filterWidth,b=h.dilationDepth,x=h.dilationHeight,w=h.dilationWidth,k=h.effectiveFilterDepth,v=h.effectiveFilterHeight,I=h.effectiveFilterWidth,N=k-1-h.padInfo.front,S=I-1-h.padInfo.left,C=v-1-h.padInfo.top,$=Ga(a.shape,"float32"),T=1/(m*g*y),E=n.bufferSync(r);for(let e=0;e<h.batchSize;++e)for(let t=0;t<h.inChannels;++t)for(let n=0;n<h.inDepth;++n)for(let s=0;s<h.inHeight;++s)for(let r=0;r<h.inWidth;++r){const a=n-N,i=s-C,o=r-S;let l=0;for(let n=0;n<k;n+=b){const s=(a+n)/p;if(!(s<0||s>=h.outDepth||Math.floor(s)!==s))for(let n=0;n<v;n+=x){const r=(i+n)/d;if(!(r<0||r>=h.outHeight||Math.floor(r)!==r))for(let n=0;n<I;n+=w){const a=(o+n)/f;a<0||a>=h.outWidth||Math.floor(a)!==a||(l+=E.get(e,s,r,a,t))}}}$.set(l*T,e,n,s,r,t)}return n.makeTensorInfo($.shape,$.dtype,$.values)}},RC={kernelName:it,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a;gS([r,a],"avgPoolGrad");const{filterSize:o,strides:l,pad:u}=s,c=dl(i.shape,o,l,1,u),h=c.strideHeight,p=c.strideWidth,d=c.filterHeight,f=c.filterWidth,m=c.dilationHeight,g=c.dilationWidth,y=c.effectiveFilterHeight,b=c.effectiveFilterWidth,x=b-1-c.padInfo.left,w=y-1-c.padInfo.top,k=Ga(i.shape,"float32"),v=1/(d*f),I=n.data.get(r.dataId).values,N=Ga(r.shape,"float32",I);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inHeight;++n)for(let s=0;s<c.inWidth;++s){const r=n-w,a=s-x;let i=0;for(let n=0;n<y;n+=m){const s=(r+n)/h;if(!(s<0||s>=c.outHeight||Math.floor(s)!==s))for(let n=0;n<b;n+=g){const r=(a+n)/p;r<0||r>=c.outWidth||Math.floor(r)!==r||(i+=N.get(e,s,r,t))}}k.set(i*v,e,n,s,t)}return n.makeTensorInfo(k.shape,k.dtype,k.values)}},DC={kernelName:Jt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,scale:a,offset:i,mean:o,variance:l}=t;Z(o.shape.length===l.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),Z(null==i||o.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),Z(null==a||o.shape.length===a.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks.")),gS([r,o,l,a,i],"batchNorm");let{varianceEpsilon:u}=s;null==u&&(u=.001);const c=n.data.get(r.dataId).values,h=n.data.get(o.dataId).values,p=n.data.get(l.dataId).values,d=a?n.data.get(a.dataId).values:new Float32Array([1]),f=i?n.data.get(i.dataId).values:new Float32Array([0]),m=new Float32Array(c.length),g=f.length,y=d.length,b=p.length,x=h.length;let w=0,k=0,v=0,I=0;for(let e=0;e<c.length;++e)m[e]=f[w++]+(c[e]-h[k++])*d[v++]/Math.sqrt(p[I++]+u),w>=g&&(w=0),k>=x&&(k=0),v>=y&&(v=0),I>=b&&(I=0);return n.makeTensorInfo(r.shape,r.dtype,m)}};function FC(e,t,n,s,r){const a=Oi(s,t,n),i=ne(n),o=Te(s);if(a){const n=Mi(t,o);return"string"===r?e.slice(n,n+i):e.subarray(n,n+i)}const l=Ga(s,r,"string"===r?Rd(e):e),u=Ga(n,r);for(let e=0;e<u.size;++e){const n=u.indexToLoc(e),s=n.map(((e,n)=>e+t[n]));u.set(l.get(...s),...n)}return"string"===r?Dd(u.values):u.values}function _C(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,size:i}=s;gS(r,"slice");const[o,l]=Li(r,a,i);Ii(r,o,l);const u=FC(n.data.get(r.dataId).values,o,l,r.shape,r.dtype);return n.makeTensorInfo(l,r.dtype,u)}const OC={kernelName:cs,backendName:"cpu",kernelFunc:_C},MC={kernelName:ct,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,crops:i}=s;gS([r],"batchToSpaceND");const o=a.reduce(((e,t)=>e*t)),l=nd(r.shape,a,o),u=sd(l.length,a.length),c=rd(r.shape,a,o),h=ad(i,a.length),p=id(c,i,a.length),d=XS({inputs:{x:r},backend:n,attrs:{shape:l}}),f=lC({inputs:{x:d},backend:n,attrs:{perm:u}}),m=XS({inputs:{x:f},backend:n,attrs:{shape:c}}),g=_C({inputs:{x:m},backend:n,attrs:{begin:h,size:p}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}};function LC(e,t,n,s,r){const a=ne(s),i=De(r,n);for(let n=0;n<e.length;n++){const s=e[n];if(s<0)throw new Error("Input x must be non-negative!");s>=r||(i[s]+=a>0?t[n]:1)}return i}function zC(e,t,n,s=!1){const r=e.shape[0],a=e.shape[1],i=Ga([r,n],t.dtype);for(let o=0;o<r;o++)for(let r=0;r<a;r++){const a=e.get(o,r);if(a<0)throw new Error("Input x must be non-negative!");a>=n||(s?i.set(1,o,a):t.size>0?i.set(i.get(o,a)+t.get(o,r),o,a):i.set(i.get(o,a)+1,o,a))}return i}const PC={kernelName:ht,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i}=s,o=LC(n.data.get(r.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,o)}};function BC(e){return(t,n,s)=>{const r=fe(n,t.length);for(let n=0;n<t.length;++n)r[n]=e(t[n],s);return r}}const WC=BC((e=>Math.ceil(e))),VC=wS(ft,WC),UC={kernelName:ft,backendName:"cpu",kernelFunc:VC},GC=xS(mt,((e,t)=>{const n=t;return e>n.clipValueMax?n.clipValueMax:e<n.clipValueMin?n.clipValueMin:e})),HC={kernelName:mt,backendName:"cpu",kernelFunc:GC},jC={kernelName:yt,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend,s=new Float32Array(ne(t.shape)),r=n.data.get(t.dataId),a=r.complexTensorInfos.real,i=r.complexTensorInfos.imag,o=n.data.get(a.dataId).values,l=n.data.get(i.dataId).values;for(let e=0;e<o.length;e++){const t=o[e],n=l[e];s[e]=Math.hypot(t,n)}return n.makeOutput(s,t.shape,"float32")}};function qC(e,t,n,s){const r=me(n,ne(t));if(s&&"string"!==n){let t=0;e.forEach((e=>{const n=ne(e.shape);r.set(e.vals,t),t+=n}))}else{let s=0;e.forEach((e=>{const a="string"===n?Rd(e.vals):e.vals;let i=0;for(let n=0;n<e.shape[0];++n){const o=n*t[1]+s;for(let t=0;t<e.shape[1];++t)r[o+t]=a[i++]}s+=e.shape[1]}))}return r}function KC(e){const{inputs:t,backend:n}=e,{input:s}=t,r=n.data.get(s.dataId).complexTensorInfos.imag,a=n.data.get(r.dataId).values;return n.makeTensorInfo(r.shape,r.dtype,a)}const XC={kernelName:rn,backendName:"cpu",kernelFunc:KC};function YC(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s,a=pe(r,t[0].shape)[0];let i=Zp(t.map((e=>e.shape)),a);if(0===ne(i))return n.makeTensorInfo(i,t[0].dtype,[]);const o=t.filter((e=>ne(e.shape)>0));if(1===o.length)return IS({inputs:{x:o[0]},backend:n});if(Jp(o.map((e=>e.shape)),a),"complex64"===o[0].dtype){const e=o.map((e=>PS({inputs:{input:e},backend:n}))),t=o.map((e=>KC({inputs:{input:e},backend:n}))),s=YC({inputs:e,backend:n,attrs:{axis:a}}),r=YC({inputs:t,backend:n,attrs:{axis:a}}),i=MS({inputs:{real:s,imag:r},backend:n});return e.forEach((e=>n.disposeIntermediateTensorInfo(e))),t.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(r),i}const l=o.map((e=>{const t=ne(e.shape.slice(a));return XS({inputs:{x:e},backend:n,attrs:{shape:[-1,t]}})})),u=l.map((e=>({vals:n.data.get(e.dataId).values,shape:e.shape})));i=Zp(l.map((e=>e.shape)),1);const c=1===l[0].shape[0],h=qC(u,i,t[0].dtype,c),p=Zp(o.map((e=>e.shape)),a),d=n.makeTensorInfo(p,t[0].dtype,h);return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),d}const JC={kernelName:bt,backendName:"cpu",kernelFunc:YC};function ZC(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dataFormat:l,dilations:u,dimRoundingMode:c}=s;gS([r,a],"conv2d");const h=Nl(l),p=ml(r.shape,a.shape,i,u,o,c,!1,h),d=p.filterHeight,f=p.filterWidth,m=p.dilationHeight,g=p.dilationWidth,y=p.padInfo.left,b=p.padInfo.top,x="channelsLast"===p.dataFormat,w=new mr(p.outShape,r.dtype),k=Te(r.shape),v=Te(a.shape),I=k[0],N=x?k[1]:k[2],S=x?k[2]:1,C=x?1:k[1],$=w.strides[0],T=x?w.strides[1]:w.strides[2],E=x?w.strides[2]:1,A=x?1:w.strides[1],R=n.data.get(r.dataId).values,D=n.data.get(a.dataId).values,F=w.values;for(let e=0;e<p.batchSize;++e){const t=e*I,n=e*$;for(let e=0;e<p.outHeight;++e){const s=n+e*T,r=e*p.strideHeight-b;for(let e=0;e<d;++e){const n=r+e*m;if(n<0||n>=p.inHeight)continue;const a=e*v[0],i=t+n*N;for(let e=0;e<p.outWidth;++e){const t=s+e*E,n=e*p.strideWidth-y;for(let e=0;e<f;++e){const s=n+e*g;if(s<0||s>=p.inWidth)continue;const r=i+s*S;let o=a+e*v[1];for(let e=0;e<p.inChannels;++e){const n=R[r+e*C];for(let e=0;e<p.outChannels;++e)F[t+e*A]+=n*D[o+e];o+=p.outChannels}}}}}}return n.makeTensorInfo(w.shape,w.dtype,F)}const QC={kernelName:xt,backendName:"cpu",kernelFunc:ZC},e$={kernelName:wt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,dataFormat:l,dimRoundingMode:u,filterShape:c}=s;gS([r,a],"conv2dBackpropFilter");const h=Nl(l),p=ml(r.shape,c,i,1,o,u,!1,h),{strideHeight:d,strideWidth:f,filterHeight:m,filterWidth:g}=p,y="channelsLast"===p.dataFormat,b=new mr(p.filterShape,"float32"),x=p.padInfo.left,w=p.padInfo.top,k=n.data.get(r.dataId).values,v=n.data.get(a.dataId).values,I=new mr(r.shape,r.dtype,k),N=new mr(a.shape,a.dtype,v);for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((w-e)/d)),n=Math.min(p.outHeight,(p.inHeight+w-e)/d);for(let s=0;s<g;++s){const r=Math.max(0,Math.ceil((x-s)/f)),a=Math.min(p.outWidth,(p.inWidth+x-s)/f);for(let i=0;i<p.inChannels;++i)for(let o=0;o<p.outChannels;++o){let l=0;for(let u=0;u<p.batchSize;++u)for(let c=t;c<n;++c){const t=e+c*d-w;for(let e=r;e<a;++e){const n=s+e*f-x;l+=y?I.get(u,t,n,i)*N.get(u,c,e,o):I.get(u,i,t,n)*N.get(u,o,c,e)}}b.set(l,e,s,i,o)}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}},t$={kernelName:kt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{inputShape:i,strides:o,pad:l,dataFormat:u,dimRoundingMode:c}=s;gS([r,a],"conv2dBackpropInput");const h=Te(a.shape),p=Te(r.shape);let d=Nl(u);const f=ml(i,a.shape,o,1,l,c,!1,d),m=new mr(f.inShape,"float32"),g=m.values,y=n.data.get(r.dataId).values,b=n.data.get(a.dataId).values,[x,w,k]=h,{batchSize:v,filterHeight:I,filterWidth:N,inChannels:S,inHeight:C,inWidth:$,outChannels:T,outHeight:E,outWidth:A,strideHeight:R,strideWidth:D}=f;d=f.dataFormat;const F=I-1-f.padInfo.top,_=N-1-f.padInfo.left,O="channelsLast"===d,M=m.strides[0],L=O?m.strides[1]:m.strides[2],z=O?m.strides[2]:1,P=O?1:m.strides[1],B=p[0],W=O?p[1]:p[2],V=O?p[2]:1,U=O?1:p[1];for(let e=0;e<v;++e)for(let t=0;t<S;++t)for(let n=0;n<C;++n){const s=n-F,r=Math.max(0,Math.ceil(s/R)),a=Math.min(E,(I+s)/R);for(let i=0;i<$;++i){const o=i-_,l=Math.max(0,Math.ceil(o/D)),u=Math.min(A,(N+o)/D);let c=0;for(let n=r;n<a;++n){const r=n*R-s;for(let s=l;s<u;++s){const a=B*e+W*n+V*s,i=x*(I-1-r)+w*(N-1-(s*D-o))+k*t;for(let e=0;e<T;++e)c+=y[a+U*e]*b[i+e]}}g[M*e+L*n+z*i+P*t]=c}}return n.makeTensorInfo(m.shape,m.dtype,m.values)}},n$={kernelName:vt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l}=s;gS([r,a],"conv3d");const u=gl(r.shape,a.shape,i,l,o),{filterDepth:c,filterHeight:h,filterWidth:p,dilationDepth:d,dilationHeight:f,dilationWidth:m,padInfo:g}=u,y=g.front,b=g.left,x=g.top,w=new mr(u.outShape,r.dtype),k=n.data.get(r.dataId).values,v=n.data.get(a.dataId).values,I=w.values,N=Te(r.shape),S=Te(a.shape);for(let e=0;e<u.batchSize;++e){const t=e*N[0],n=e*w.strides[0];for(let e=0;e<u.outDepth;++e){const s=n+e*w.strides[1],r=e*u.strideDepth-y;for(let e=0;e<c;++e){const n=r+e*d;if(n<0||n>=u.inDepth)continue;const a=e*S[0],i=t+n*N[1];for(let e=0;e<u.outHeight;++e){const t=s+e*w.strides[2],n=e*u.strideHeight-x;for(let e=0;e<h;++e){const s=n+e*f;if(s<0||s>=u.inHeight)continue;const r=a+e*S[1],o=i+s*N[2];for(let e=0;e<u.outWidth;++e){const n=t+e*u.outChannels,s=e*u.strideWidth-b;for(let e=0;e<p;++e){const t=s+e*m;if(t<0||t>=u.inWidth)continue;const a=r+e*S[2],i=o+t*u.inChannels;let l=a;for(let e=0;e<u.inChannels;++e){const t=k[i+e];for(let e=0;e<u.outChannels;++e)I[n+e]+=t*v[l+e];l+=u.outChannels}}}}}}}}return n.makeTensorInfo(w.shape,w.dtype,w.values)}},s$={kernelName:It,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,filterShape:l}=s;gS([r,a],"conv3dBackpropFilterV2");const u=Te(r.shape),c=Te(a.shape),h=gl(r.shape,l,i,1,o),p=h.strideDepth,d=h.strideHeight,f=h.strideWidth,m=h.filterDepth,g=h.filterHeight,y=h.filterWidth,b=new mr(h.filterShape,"float32"),x=b.values,[w,k,v,I]=b.strides,N=n.data.get(a.dataId).values,[S,C,$,T]=c,E=n.data.get(r.dataId).values,[A,R,D,F]=u,_=h.padInfo.front,O=h.padInfo.left,M=h.padInfo.top;for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((_-e)/p)),n=Math.min(h.outDepth,(h.inDepth+_-e)/p),s=e*w;for(let r=0;r<g;++r){const a=Math.max(0,Math.ceil((M-r)/d)),i=Math.min(h.outHeight,(h.inHeight+M-r)/d),o=r*k+s;for(let s=0;s<y;++s){const l=Math.max(0,Math.ceil((O-s)/f)),u=Math.min(h.outWidth,(h.inWidth+O-s)/f),c=s*v+o;for(let o=0;o<h.inChannels;++o){const m=o*I+c;for(let c=0;c<h.outChannels;++c){let g=0;for(let m=0;m<h.batchSize;++m){const h=m*A,y=m*S;for(let m=t;m<n;++m){const t=(e+m*p-_)*R+h,n=m*C+y;for(let e=a;e<i;++e){const a=(r+e*d-M)*D+t,i=e*$+n;for(let e=l;e<u;++e){const t=e*T+i;g+=E[(s+e*f-O)*F+a+o]*N[t+c]}}}}x[m+c]=g}}}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}},r$={kernelName:Nt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{pad:i,strides:o,inputShape:l}=s;gS([r],"conv3dBackpropInputV2");const u=Te(r.shape),c=Te(a.shape),h=gl(l,a.shape,o,1,i),p=new mr(h.inShape,"float32"),d=p.values,[f,m,g,y]=p.strides,b=n.data.get(r.dataId).values,[x,w,k,v]=u,I=n.data.get(a.dataId).values,[N,S,C,$]=c,{batchSize:T,filterDepth:E,filterHeight:A,filterWidth:R,inChannels:D,inDepth:F,inHeight:_,inWidth:O,outChannels:M,outDepth:L,outHeight:z,outWidth:P,strideDepth:B,strideHeight:W,strideWidth:V}=h,U=E-1-h.padInfo.front,G=A-1-h.padInfo.top,H=R-1-h.padInfo.left;for(let e=0;e<T;++e)for(let t=0;t<D;++t)for(let n=0;n<F;++n){const s=n-U,r=Math.max(0,Math.ceil(s/B)),a=Math.min(L,(E+s)/B);for(let i=0;i<_;++i){const o=i-G,l=Math.max(0,Math.ceil(o/W)),u=Math.min(z,(A+o)/W);for(let c=0;c<O;++c){const h=c-H,p=Math.max(0,Math.ceil(h/V)),T=Math.min(P,(R+h)/V);let D=0;for(let n=r;n<a;++n){const r=n*B-s;for(let s=l;s<u;++s){const a=s*W-o;for(let i=p;i<T;++i){const o=x*e+w*n+k*s+v*i,l=N*(E-1-r)+S*(A-1-a)+C*(R-1-(i*V-h))+$*t;for(let e=0;e<M;++e)D+=b[o+e]*I[l+e]}}}d[f*e+m*n+g*i+y*c+t]=D}}}return n.makeTensorInfo(p.shape,p.dtype,p.values)}},a$=xS(St,(e=>Math.cos(e))),i$={kernelName:St,backendName:"cpu",kernelFunc:a$},o$=xS(Ct,(e=>Math.cosh(e))),l$={kernelName:Ct,backendName:"cpu",kernelFunc:o$},u$={kernelName:Tt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{image:r,boxes:a,boxInd:i}=t,{cropSize:o,method:l,extrapolationValue:u}=s,[c,h,p,d]=r.shape,f=a.shape[0],[m,g]=o,y=Ga([f,m,g,d],"float32"),b=n.data.get(a.dataId).values,x=n.data.get(i.dataId).values,w=n.data.get(r.dataId).values,k=Te(r.shape),v=Te(y.shape);for(let e=0;e<f;e++){const t=4*e,n=b[t],s=b[t+1],r=b[t+2],a=b[t+3],i=x[e];if(i>=c)continue;const o=m>1?(r-n)*(h-1)/(m-1):0,f=g>1?(a-s)*(p-1)/(g-1):0;for(let t=0;t<m;t++){const c=m>1?n*(h-1)+t*o:.5*(n+r)*(h-1);if(c<0||c>h-1)for(let n=0;n<g;n++)for(let s=0;s<d;s++){const r=s+n*v[2]+t*v[1]+e*v[0];y.values[r]=u}else if("bilinear"===l){const n=Math.floor(c),r=Math.ceil(c),o=c-n;for(let l=0;l<g;l++){const c=g>1?s*(p-1)+l*f:.5*(s+a)*(p-1);if(c<0||c>p-1){for(let n=0;n<d;n++){const s=n+l*v[2]+t*v[1]+e*v[0];y.values[s]=u}continue}const h=Math.floor(c),m=Math.ceil(c),b=c-h;for(let s=0;s<d;s++){let a=s+h*k[2]+n*k[1]+i*k[0];const u=w[a];a=s+m*k[2]+n*k[1]+i*k[0];const c=w[a];a=s+h*k[2]+r*k[1]+i*k[0];const p=w[a];a=s+m*k[2]+r*k[1]+i*k[0];const d=u+(c-u)*b,f=p+(w[a]-p)*b;a=s+l*v[2]+t*v[1]+e*v[0],y.values[a]=d+(f-d)*o}}}else for(let n=0;n<g;++n){const r=g>1?s*(p-1)+n*f:.5*(s+a)*(p-1);if(r<0||r>p-1){for(let s=0;s<d;s++){const r=s+n*v[2]+t*v[1]+e*v[0];y.values[r]=u}continue}const o=Math.round(r),l=Math.round(c);for(let s=0;s<d;s++){const r=s+o*k[2]+l*k[1]+i*k[0],a=s+n*v[2]+t*v[1]+e*v[0];y.values[a]=w[r]}}}}return n.makeTensorInfo(y.shape,y.dtype,y.values)}},c$={kernelName:$t,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,exclusive:i,reverse:o}=s;gS(r,"cumsum");const l=Gu([a],r.shape.length);let u=r;null!=l&&(u=lC({inputs:{x:r},backend:n,attrs:{perm:l}}));const c=ju(1,r.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);const h=$r(u.dtype,"int32"),p=De(ne(u.shape),h),d=n.data.get(u.dataId).values,f=u.shape[u.shape.length-1],m=o?(e,t)=>e+f-t-1:(e,t)=>e+t;for(let e=0;e<d.length;e+=f)for(let t=0;t<f;t++){const n=m(e,t);if(0===t)p[n]=i?0:d[n];else{const s=m(e,t-1);p[n]=i?d[s]+p[s]:d[n]+p[s]}}const g=n.makeTensorInfo(u.shape,h,p);if(null!=l){const e=lC({inputs:{x:g},backend:n,attrs:{perm:Hu(l)}});return n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(u),e}return g}},h$={kernelName:Et,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i,binaryOutput:o}=s;if(1===r.shape.length){const e=LC(n.data.get(r.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,e)}if(2===r.shape.length){const e=zC(n.bufferSync(r),n.bufferSync(a),i,o);return n.makeTensorInfo(e.shape,a.dtype,e.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}},p$={kernelName:At,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockSize:a,dataFormat:i}=s;Z("NHWC"===i,(()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${i}`)),Z(a>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${a}`));const o=r.shape[0],l=r.shape[1],u=r.shape[2],c=r.shape[3],h=l*a,p=u*a,d=c/(a*a),f=n.data.get(r.dataId).values,m=new Float32Array(o*h*p*d);let g=0;for(let e=0;e<o;++e)for(let t=0;t<h;++t){const n=Math.floor(t/a),s=t%a;for(let t=0;t<p;++t){const r=Math.floor(t/a),i=(s*a+t%a)*d;for(let t=0;t<d;++t){const s=t+i+c*(r+u*(n+l*e));m[g++]=f[s]}}}return n.makeTensorInfo([o,h,p,d],r.dtype,m)}};function d$(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l,dimRoundingMode:u}=s;gS([r,a],"depthwiseConv2DNative");const c=Te(r.shape),h=Te(a.shape);let p=l;null==p&&(p=[1,1]),Z(Il(i,p),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${p}'`));const d=ml(r.shape,a.shape,i,p,o,u,!0),{filterHeight:f,filterWidth:m,dilationHeight:g,dilationWidth:y,padInfo:b}=d,x=b.left,w=b.top,k=d.outChannels/d.inChannels,v=new mr(d.outShape,r.dtype),I=n.data.get(r.dataId).values,N=n.data.get(a.dataId).values,S=v.values;for(let e=0;e<d.batchSize;++e){const t=e*c[0],n=e*v.strides[0];for(let e=0;e<d.outHeight;++e){const s=n+e*v.strides[1],r=e*d.strideHeight-x;for(let e=0;e<f;++e){const n=r+e*g;if(n<0||n>=d.inHeight)continue;const a=e*h[0],i=t+n*c[1];for(let e=0;e<d.outWidth;++e){const t=s+e*v.strides[2],n=e*d.strideWidth-w;for(let e=0;e<m;++e){const s=n+e*y;if(s<0||s>=d.inWidth)continue;const r=a+e*h[1],o=i+s*d.inChannels;let l=t,u=r;for(let e=0;e<d.inChannels;++e){const t=I[o+e];for(let e=0;e<k;++e)S[l+e]+=t*N[u+e];l+=k,u+=k}}}}}}return n.makeTensorInfo(v.shape,v.dtype,v.values)}const f$={kernelName:Rt,backendName:"cpu",kernelFunc:d$},m$={kernelName:Dt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,filterShape:c}=s;gS([r,a],"depthwiseConv2dNativeBackpropFilter");const h=ml(r.shape,c,i,o,l,u,!0),{strideHeight:p,strideWidth:d,filterHeight:f,filterWidth:m}=h,g=new mr(h.filterShape,"float32"),y=h.padInfo.left,b=h.padInfo.top,x=h.outChannels/h.inChannels,w=n.data.get(r.dataId).values,k=new mr(r.shape,r.dtype,w),v=n.data.get(a.dataId).values,I=new mr(a.shape,a.dtype,v);for(let e=0;e<f;++e){const t=Math.max(0,Math.ceil((b-e)/p)),n=Math.min(h.outHeight,(h.inHeight+b-e)/p);for(let s=0;s<m;++s){const r=Math.max(0,Math.ceil((y-s)/d)),a=Math.min(h.outWidth,(h.inWidth+y-s)/d);for(let i=0;i<h.outChannels;++i){const o=Math.trunc(i/x),l=i%x;let u=0;for(let l=0;l<h.batchSize;++l)for(let c=t;c<n;++c){const t=e+c*p-b;for(let e=r;e<a;++e){const n=s+e*d-y;u+=k.get(l,t,n,o)*I.get(l,c,e,i)}}g.set(u,e,s,o,l)}}}return n.makeTensorInfo(g.shape,g.dtype,g.values)}},g$={kernelName:Ft,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,inputShape:c}=s;gS([r,a],"depthwiseConv2DNativeBackpropInput");const h=Te(r.shape),p=Te(a.shape),d=ml(c,a.shape,i,o,l,u,!0),f=new mr(d.inShape,"float32"),m=f.values,[g,y,b]=f.strides,x=n.data.get(r.dataId).values,[w,k,v]=h,I=n.data.get(a.dataId).values,[N,S,C]=p,{batchSize:$,filterHeight:T,filterWidth:E,inChannels:A,inHeight:R,inWidth:D,outChannels:F,outHeight:_,outWidth:O,strideHeight:M,strideWidth:L}=d,z=T-1-d.padInfo.top,P=E-1-d.padInfo.left,B=F/A;for(let e=0;e<$;++e)for(let t=0;t<A;++t)for(let n=0;n<R;++n){const s=n-z,r=Math.max(0,Math.ceil(s/M)),a=Math.min(_,(T+s)/M);for(let i=0;i<D;++i){const o=i-P,l=Math.max(0,Math.ceil(o/L)),u=Math.min(O,(E+o)/L);let c=0;for(let n=r;n<a;++n){const r=n*M-s;for(let s=l;s<u;++s){const a=w*e+k*n+v*s,i=N*(T-1-r)+S*(E-1-(s*L-o))+C*t;for(let e=0;e<B;++e)c+=x[a+(t*B+e)]*I[i+e]}}m[g*e+y*n+b*i+t]=c}}return n.makeTensorInfo(f.shape,f.dtype,f.values)}},y$={kernelName:_t,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,r=ne(s.shape),a=n.data.get(s.dataId).values,i=Ga([r,r],s.dtype),o=i.values;for(let e=0;e<a.length;e++)o[e*r+e]=a[e];const l=[...s.shape,...s.shape];return n.makeTensorInfo(l,i.dtype,i.values)}},b$={kernelName:Ot,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:r}=e,{strides:a,pad:i,dilations:o}=n,l=t,u=l.data.get(s.dataId).values,c=s.shape.length,h=l.data.get(r.dataId).values,p=r.shape.length,{batchSize:d,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:b,padInfo:x,strideHeight:w,strideWidth:k,filterHeight:v,filterWidth:I,dilationHeight:N,dilationWidth:S,outShape:C}=pl(s.shape,r.shape,a,i,"NHWC",o),$=ne(C),T=C.length,E=me(s.dtype,$);for(let e=0;e<d;++e)for(let t=0;t<y;++t){const n=t*w-x.top;for(let a=0;a<b;++a){const i=a*k-x.left;for(let o=0;o<g;++o){let l=Number.MIN_SAFE_INTEGER;for(let t=0;t<v;++t){const a=n+t*N;if(a>=0&&a<f)for(let n=0;n<I;++n){const d=i+n*S;if(d>=0&&d<m){const i=Oe([e,a,d,o],c,Te(s.shape)),f=Oe([t,n,o],p,Te(r.shape)),m=u[i]+h[f];m>l&&(l=m)}}}E[Oe([e,t,a,o],T,Te(C))]=l}}}return{dataId:l.write(cr(E,s.dtype),C,s.dtype),shape:C,dtype:s.dtype}}},x$={kernelName:Lt,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:r,dy:a}=e,{strides:i,pad:o,dilations:l}=n,u=t,c=Ae(s.shape,u.data.get(s.dataId).values),h=Ae(r.shape,u.data.get(r.dataId).values),{batchSize:p,inHeight:d,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:b,strideHeight:x,strideWidth:w,filterHeight:k,filterWidth:v,dilationHeight:I,dilationWidth:N,outShape:S}=pl(s.shape,r.shape,i,o,"NHWC",l);Z(a.rank===S.length,(()=>`Error in ${Lt}, dy must have the same rank as output ${S.length}, but got ${a.rank}`));const C=Ae(S,u.data.get(a.dataId).values),$=Fe(r.shape,r.dtype);for(let e=0;e<p;++e)for(let t=0;t<g;++t){const n=t*x-b.top;for(let s=0;s<y;++s){const r=s*w-b.left;for(let a=0;a<m;++a){let i=Number.MIN_SAFE_INTEGER,o=0,l=0;for(let t=0;t<k;++t){const s=n+t*I;if(s>=0&&s<d)for(let n=0;n<v;++n){const u=r+n*N;if(u>=0&&u<f){const r=c[e][s][u][a]+h[t][n][a];r>i&&(i=r,o=t,l=n)}}}$[o][l][a]+=C[e][t][s][a]}}}return{dataId:u.write(cr($,s.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},w$={kernelName:Mt,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:r,dy:a}=e,{strides:i,pad:o,dilations:l}=n,u=t,c=Ae(s.shape,u.data.get(s.dataId).values),h=Ae(r.shape,u.data.get(r.dataId).values),{batchSize:p,inHeight:d,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:b,strideHeight:x,strideWidth:w,filterHeight:k,filterWidth:v,dilationHeight:I,dilationWidth:N,outShape:S}=pl(s.shape,r.shape,i,o,"NHWC",l);Z(a.rank===S.length,(()=>`Error in ${Mt}, dy must have the same rank as output ${S.length}, but got ${a.rank}`));const C=Ae(S,u.data.get(a.dataId).values),$=Fe(s.shape,s.dtype);for(let e=0;e<p;++e)for(let t=0;t<g;++t){const n=t*x-b.top;for(let s=0;s<y;++s){const r=s*w-b.left;for(let a=0;a<m;++a){let i=Number.MIN_SAFE_INTEGER,o=n<0?0:n,l=r<0?0:r;for(let t=0;t<k;++t){const s=n+t*I;if(s>=0&&s<d)for(let n=0;n<v;++n){const u=r+n*N;if(u>=0&&u<f){const r=c[e][s][u][a]+h[t][n][a];r>i&&(i=r,o=s,l=u)}}}$[e][o][l][a]+=C[e][t][s][a]}}}return{dataId:u.write(cr($,s.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},k$={kernelName:Bt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{dy:s,y:r}=t;gS([s,r],"eluGrad");const a=new Float32Array(ne(r.shape)),i=n.data.get(r.dataId).values,o=n.data.get(s.dataId).values;for(let e=0;e<i.length;++e){const t=i[e];a[e]=t>=1?o[e]:o[e]*(t+1)}return n.makeTensorInfo(r.shape,"float32",a)}},v$=$S(((e,t)=>e===t?1:0)),I$=US(Vt,v$,null,"bool"),N$={kernelName:Vt,backendName:"cpu",kernelFunc:I$},S$=ud,C$=cd,$$=hd,T$=pd,E$=dd,A$=fd,R$=xS(Wt,(e=>{const t=Math.sign(e),n=Math.abs(e),s=1/(1+S$*n);return t*(1-((((A$*s+E$)*s+T$)*s+$$)*s+C$)*s*Math.exp(-n*n))})),D$={kernelName:Wt,backendName:"cpu",kernelFunc:R$},F$=BC((e=>Math.exp(e))),_$=wS(Ut,F$),O$={kernelName:Ut,backendName:"cpu",kernelFunc:_$};function M$(e){const{inputs:t,backend:n,attrs:s}=e,{input:r}=t,{dim:a}=s,i=r.shape.length,o=r.shape.slice();let l=a;return a<0&&(Z(-(i+1)<=a,(()=>`Axis must be in the interval [${-(i+1)}, ${i}]`)),l=i+a+1),o.splice(l,0,1),XS({inputs:{x:r},backend:n,attrs:{shape:o}})}const L$={kernelName:Gt,backendName:"cpu",kernelFunc:M$},z$=BC((e=>Math.expm1(e))),P$=wS(Ht,z$),B$={kernelName:Ht,backendName:"cpu",kernelFunc:P$},W$=$S(((e,t)=>e*t)),V$=GS(((e,t,n,s)=>({real:e*n-t*s,imag:e*s+t*n}))),U$=US(_n,W$,V$),G$={kernelName:_n,backendName:"cpu",kernelFunc:U$},H$=$S(((e,t)=>e/t)),j$=US(zt,H$),q$={kernelName:zt,backendName:"cpu",kernelFunc:j$},K$=$S(((e,t)=>e-t)),X$=GS(((e,t,n,s)=>({real:e-n,imag:t-s}))),Y$=US(Is,K$,X$),J$={kernelName:Is,backendName:"cpu",kernelFunc:Y$};function Z$(e,t,n){const s=e.shape,r=s[0],a=s[1],i=n.data.get(e.dataId),o=i.complexTensorInfos.real,l=i.complexTensorInfos.imag,u=[r,a],c=ne(u),h=fe("float32",c),p=fe("float32",c);for(let e=0;e<r;e++){const s=_C({inputs:{x:o},backend:n,attrs:{begin:[e,0],size:[1,a]}}),r=_C({inputs:{x:l},backend:n,attrs:{begin:[e,0],size:[1,a]}}),i=MS({inputs:{real:s,imag:r},backend:n}),{real:u,imag:c}=Q$(i,t,n),d=yd(u,c);for(let t=0;t<a;t++){const n=kd(d,t);h[e*a+t]=n.real,p[e*a+t]=n.imag}n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(i)}const d=n.makeTensorInfo(u,"float32",h),f=n.makeTensorInfo(u,"float32",p),m=MS({inputs:{real:d,imag:f},backend:n});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),m}function Q$(e,t,n){const s=ne(e.shape),r=n.data.get(e.dataId),a=n.data.get(r.complexTensorInfos.real.dataId).values,i=n.data.get(r.complexTensorInfos.imag.dataId).values;if(0==((o=s)&o-1)){const r=eT(a,i,s,t,n),o=[e.shape[0],e.shape[1]];if(t){const e=n.makeTensorInfo(o,"float32",r.real),t=n.makeTensorInfo(o,"float32",r.imag),a=n.makeTensorInfo([],"float32",ur(s,"float32")),i=IS({inputs:{x:a},backend:n}),l=q$.kernelFunc({inputs:{a:e,b:a},backend:n}),u=q$.kernelFunc({inputs:{a:t,b:i},backend:n}),c=n.data.get(l.dataId).values,h=n.data.get(u.dataId).values;return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),{real:c,imag:h}}return r}{const e=function(e,t,n){const s=new Float32Array(2*t);for(let r=0;r<t;r++){let a=0,i=0;for(let s=0;s<t;s++){const o=Nd(r*s,t,n),l=kd(e,s);a+=l.real*o.real-l.imag*o.imag,i+=l.real*o.imag+l.imag*o.real}n&&(a/=t,i/=t),vd(s,a,i,r)}return s}(yd(a,i),s,t);return bd(e)}var o}function eT(e,t,n,s,r){if(1===n)return{real:e,imag:t};const a=yd(e,t),i=n/2,o=xd(a),l=o.real,u=o.imag,c=[l.length],h=r.makeTensorInfo(c,"float32",l),p=r.makeTensorInfo(c,"float32",u),d=MS({inputs:{real:h,imag:p},backend:r}),f=wd(a),m=f.real,g=f.imag,y=[m.length],b=r.makeTensorInfo(y,"float32",m),x=r.makeTensorInfo(y,"float32",g),w=MS({inputs:{real:b,imag:x},backend:r}),k=eT(l,u,i,s,r),v=k.real,I=k.imag,N=[v.length],S=r.makeTensorInfo(N,"float32",v),C=r.makeTensorInfo(N,"float32",I),$=MS({inputs:{real:S,imag:C},backend:r}),T=eT(m,g,i,s,r),E=T.real,A=T.imag,R=[E.length],D=r.makeTensorInfo(R,"float32",E),F=r.makeTensorInfo(R,"float32",A),_=MS({inputs:{real:D,imag:F},backend:r}),O=Id(n,s),M=[O.real.length],L=r.makeTensorInfo(M,"float32",O.real),z=r.makeTensorInfo(M,"float32",O.imag),P=MS({inputs:{real:L,imag:z},backend:r}),B=U$({inputs:{a:P,b:_},backend:r}),W=qS({inputs:{a:$,b:B},backend:r}),V=Y$({inputs:{a:$,b:B},backend:r}),U=PS({inputs:{input:W},backend:r}),G=PS({inputs:{input:V},backend:r}),H=KC({inputs:{input:W},backend:r}),j=KC({inputs:{input:V},backend:r}),q=YC({inputs:[U,G],backend:r,attrs:{axis:0}}),K=YC({inputs:[H,j],backend:r,attrs:{axis:0}}),X=r.data.get(q.dataId).values,Y=r.data.get(K.dataId).values;return r.disposeIntermediateTensorInfo(h),r.disposeIntermediateTensorInfo(p),r.disposeIntermediateTensorInfo(d),r.disposeIntermediateTensorInfo(b),r.disposeIntermediateTensorInfo(x),r.disposeIntermediateTensorInfo(w),r.disposeIntermediateTensorInfo(S),r.disposeIntermediateTensorInfo(C),r.disposeIntermediateTensorInfo($),r.disposeIntermediateTensorInfo(D),r.disposeIntermediateTensorInfo(F),r.disposeIntermediateTensorInfo(_),r.disposeIntermediateTensorInfo(L),r.disposeIntermediateTensorInfo(z),r.disposeIntermediateTensorInfo(P),r.disposeIntermediateTensorInfo(B),r.disposeIntermediateTensorInfo(W),r.disposeIntermediateTensorInfo(V),r.disposeIntermediateTensorInfo(U),r.disposeIntermediateTensorInfo(H),r.disposeIntermediateTensorInfo(G),r.disposeIntermediateTensorInfo(j),r.disposeIntermediateTensorInfo(q),r.disposeIntermediateTensorInfo(K),{real:X,imag:Y}}const tT={kernelName:jt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t,r=ne(s.shape),a=s.shape[s.shape.length-1],i=XS({inputs:{x:s},backend:n,attrs:{shape:[r/a,a]}}),o=Z$(i,!1,n),l=XS({inputs:{x:o},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),l}};function nT(e){const{backend:t,attrs:n}=e,{shape:s,value:r,dtype:a}=n,i=a||Se(r),o=me(i,ne(s));return function(e,t,n){e.fill(t)}(o,r),t.makeTensorInfo(s,i,o)}const sT={kernelName:qt,backendName:"cpu",kernelFunc:nT},rT={kernelName:Kt,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,r=n,a=fe(s.dtype,ne(s.shape)),[i,o,l,u]=s.shape,c=r.data.get(s.dataId).values;for(let e=0;e<i;e++){const t=e*l*o*u;for(let e=0;e<o;e++){const n=e*(l*u);for(let s=0;s<l;s++){const r=s*u;for(let o=0;o<u;o++){const h=[i,e,s,o][2],p=Math.round(l-h),d=t+n+r+o;let f=c[d];p>=0&&p<l&&(f=c[t+n+p*u+o]),a[d]=f}}}}return{dataId:r.write(a,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},aT=BC((e=>Math.floor(e))),iT=wS(Xt,aT),oT={kernelName:Xt,backendName:"cpu",kernelFunc:iT},lT=$S(((e,t)=>Math.floor(e/t))),uT=US(Yt,lT,null,"int32"),cT={kernelName:Yt,backendName:"cpu",kernelFunc:uT},hT={kernelName:Ps,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=s;let m=ZC({inputs:{x:r,filter:a},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p}});if(i){const e=m;m=qS({inputs:{a:m,b:i},backend:n}),n.disposeIntermediateTensorInfo(e)}if(d){const e=m;m=OS(n,m,d,o,f),n.disposeIntermediateTensorInfo(e)}return m}},pT={kernelName:Bs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=s;let m=d$({inputs:{x:r,filter:a},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p}});if(i){const e=m;m=qS({inputs:{a:m,b:i},backend:n}),n.disposeIntermediateTensorInfo(e)}if(d){const e=m;m=OS(n,m,d,o,f),n.disposeIntermediateTensorInfo(e)}return m}},dT={kernelName:Qt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:s,indices:r}=t,a=ne(s.shape),i=r.shape,o=i[i.length-1],[l,u,c,h]=xi(s,r);if(0===u)return n.makeTensorInfo(l,s.dtype,[]);const p=Ga([u,c],s.dtype),d=n.data.get(r.dataId).values,f=n.data.get(s.dataId).values;for(let e=0;e<u;e++){const t=[];let n=0;for(let s=0;s<o;s++){const r=d[e*o+s];n+=r*h[s],t.push(r)}if(n<0||n>=a/c)throw new Error(`Invalid indices: ${t} does not index into ${s.shape}`);for(let t=0;t<c;t++)p.values[e*c+t]=f[n*c+t]}return n.makeTensorInfo(l,p.dtype,p.values)}};function fT(e,t,n){const s=Ga(n,e.dtype);for(let n=0;n<s.size;++n){const r=s.indexToLoc(n).slice(),a=r[0],i=r[2],o=t.locToIndex([a,i]);r[2]=t.values[o];const l=e.locToIndex(r);s.values[n]=e.values[l]}return s}const mT={kernelName:Zt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,indices:a}=t,{axis:i,batchDims:o}=s;gS([r,a],"gatherV2");let l=o;null==o&&(l=0);const u=ne(a.shape),c=Td(r,a,pe(i,r.shape)[0],l),h=XS({inputs:{x:r},backend:n,attrs:{shape:[c.batchSize,c.outerSize,c.dimSize,c.sliceSize]}}),p=XS({inputs:{x:a},backend:n,attrs:{shape:[c.batchSize,u/c.batchSize]}}),d=[c.batchSize,c.outerSize,u/c.batchSize,c.sliceSize],f=n.bufferSync(p),m=fT(n.bufferSync(h),f,d);return n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p),n.makeTensorInfo(c.outputShape,m.dtype,m.values)}},gT=$S(((e,t)=>e>t?1:0)),yT=US(en,gT,null,"bool"),bT={kernelName:en,backendName:"cpu",kernelFunc:yT},xT=$S(((e,t)=>e>=t?1:0)),wT=US(tn,xT,null,"bool"),kT={kernelName:tn,backendName:"cpu",kernelFunc:wT},vT={kernelName:sn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t,r=ne(s.shape),a=s.shape[s.shape.length-1],i=XS({inputs:{x:s},backend:n,attrs:{shape:[r/a,a]}}),o=Z$(i,!0,n),l=XS({inputs:{x:o},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),l}},IT=xS(an,(e=>Number.isFinite(e)?1:0),"bool"),NT={kernelName:an,backendName:"cpu",kernelFunc:IT},ST=xS(on,(e=>Math.abs(e)===1/0?1:0),"bool"),CT={kernelName:on,backendName:"cpu",kernelFunc:ST},$T=xS(ln,(e=>Number.isNaN(e)?1:0),"bool"),TT={kernelName:ln,backendName:"cpu",kernelFunc:$T},ET=$S(((e,t)=>e<t?1:0)),AT=US(cn,ET,null,"bool"),RT={kernelName:cn,backendName:"cpu",kernelFunc:AT},DT=$S(((e,t)=>e<=t?1:0)),FT=US(hn,DT,null,"bool"),_T={kernelName:hn,backendName:"cpu",kernelFunc:FT};function OT(e,t,n){const s=(t-e)/(n-1),r=De(n,"float32");r[0]=e;for(let e=1;e<r.length;e++)r[e]=r[e-1]+s;return r}const MT={kernelName:pn,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,num:a}=n,i=OT(s,r,a);return t.makeTensorInfo([i.length],"float32",i)}},LT=BC((e=>Math.log(e))),zT=wS(dn,LT),PT={kernelName:dn,backendName:"cpu",kernelFunc:zT},BT=xS(fn,(e=>Math.log1p(e))),WT={kernelName:fn,backendName:"cpu",kernelFunc:BT},VT=$S(((e,t)=>e&&t)),UT=US(mn,VT,null,"bool"),GT={kernelName:mn,backendName:"cpu",kernelFunc:UT},HT=xS(gn,(e=>e?0:1),"bool"),jT={kernelName:gn,backendName:"cpu",kernelFunc:HT},qT=$S(((e,t)=>e||t)),KT=US(yn,qT,null,"bool"),XT={kernelName:yn,backendName:"cpu",kernelFunc:KT},YT={kernelName:xn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{depthRadius:a,bias:i,alpha:o,beta:l}=s;gS(r,"LRN");const u=r.shape[3],c=u-1,h=n.data.get(r.dataId).values,p=ne(r.shape),d=new Float32Array(p);function f(e){const t=e%u;let n=e-t+Math.max(0,t-a);const s=e-t+Math.min(t+a,c);let r=0;for(;n<=s;n++){const e=h[n];r+=e*e}return r}for(let e=0;e<p;e++){const t=f(e),n=h[e]*Math.pow(i+o*t,-l);d[e]=n}return n.makeTensorInfo(r.shape,r.dtype,d)}},JT={kernelName:wn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,y:a,dy:i}=t,{depthRadius:o,bias:l,alpha:u,beta:c}=s;gS(i,"LRNGrad");const h=ne(i.shape),p=i.shape[3],d=n.data.get(i.dataId).values,f=n.data.get(r.dataId).values,m=n.data.get(a.dataId).values,g=new Float32Array(h),y=h;for(let e=0;e<y;e++){const t=e%p,n=e-t+Math.max(0,t-o),s=e-t+Math.min(p,t+o+1);let r=0;for(let e=n;e<s;e++)r+=Math.pow(f[e],2);r=u*r+l;for(let t=n;t<s;t++){let n=-2*u*c*f[t]*m[e]/r;e===t&&(n+=Math.pow(r,-c)),n*=d[e],g[t]+=n}}return n.makeTensorInfo(i.shape,r.dtype,g)}};function ZT(e,t,n,s){const r=fe(s,ne(n));for(let n=0;n<r.length;++n){const s=n*t;let a=e[s];for(let n=0;n<t;++n){const t=e[s+n];t>a&&(a=t)}r[n]=a}return r}function QT(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reductionIndices:a,keepDims:i}=s,o=n;let l=r.shape;const u=l.length,c=pe(a,l);let h=c;const p=Gu(h,u);let d=o.data.get(r.dataId).values;if(null!=p){const e=new Array(u);for(let t=0;t<e.length;t++)e[t]=l[p[t]];d=oC(d,l,r.dtype,p,e),h=ju(h.length,u),l=e}gS(r,"max"),Uu("max",h,u);const[f,m]=Wu(l,h),g=ZT(d,ne(m),f,r.dtype),y=o.write(g,f,r.dtype);let b=f;return i&&(b=Vu(f,c)),{dataId:y,shape:b,dtype:r.dtype}}const eE={kernelName:kn,backendName:"cpu",kernelFunc:QT},tE=$S(((e,t)=>Math.max(e,t))),nE=US(vn,tE),sE={kernelName:vn,backendName:"cpu",kernelFunc:nE},rE={kernelName:In,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;gS(r,"maxPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=s;Z(Il(i,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const u=dl(r.shape,a,i,1,o,l);let c;if(1===u.filterWidth&&1===u.filterHeight&&re(u.inShape,u.outShape))c=IS({inputs:{x:r},backend:n});else{const e=n.data.get(r.dataId).values,t=Te(r.shape),s=SC(e,r.shape,r.dtype,t,u,"max");c=n.makeTensorInfo(u.outShape,r.dtype,s.values)}return c}},aE={kernelName:Sn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l,dataFormat:u,dilations:c}=s;gS(r,"maxPool3d");let h=c;null==h&&(h=[1,1,1]);const p=fl(r.shape,a,i,h,o,l,u),d=$C(n.data.get(r.dataId).values,r.shape,r.dtype,Te(r.shape),p,"max");return n.makeTensorInfo(d.shape,"float32",d.values)}},iE={kernelName:Cn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,{filterSize:i,strides:o,pad:l,dilations:u,dimRoundingMode:c}=s;gS([r,a],"maxPool3DGrad");const h=fl(a.shape,i,o,u,l,c),p=function(e,t){const n=Ga(t.outShape,"int32"),s=t.strideDepth,r=t.strideHeight,a=t.strideWidth,i=t.dilationDepth,o=t.dilationHeight,l=t.dilationWidth,u=t.effectiveFilterDepth,c=t.effectiveFilterHeight,h=t.effectiveFilterWidth,p=t.padInfo.front,d=t.padInfo.top,f=t.padInfo.left;for(let m=0;m<t.batchSize;++m)for(let g=0;g<t.inChannels;++g)for(let y=0;y<t.outDepth;++y){const b=y*s-p;let x=b;for(;x<0;)x+=i;const w=Math.min(t.inDepth,u+b);for(let s=0;s<t.outHeight;++s){const u=s*r-d;let p=u;for(;p<0;)p+=o;const k=Math.min(t.inHeight,c+u);for(let r=0;r<t.outWidth;++r){const d=r*a-f;let v=d;for(;v<0;)v+=l;const I=Math.min(t.inWidth,h+d);let N=Number.NEGATIVE_INFINITY,S=-1;for(let t=x;t<w;t+=i){const n=t-b;for(let s=p;s<k;s+=o){const r=s-u;for(let a=v;a<I;a+=l){const i=a-d,o=e.get(m,t,s,a,g);o>=N&&(N=o,S=n*c*h+r*c+i)}}}n.set(S,m,y,s,r,g)}}}return n}(n.bufferSync(a),h),d=h.strideDepth,f=h.strideHeight,m=h.strideWidth,g=h.dilationDepth,y=h.dilationHeight,b=h.dilationWidth,x=h.effectiveFilterDepth,w=h.effectiveFilterHeight,k=h.effectiveFilterWidth,v=x-1-h.padInfo.front,I=k-1-h.padInfo.left,N=w-1-h.padInfo.top,S=Ga(a.shape,"float32"),C=n.bufferSync(r);for(let e=0;e<h.batchSize;++e)for(let t=0;t<h.inChannels;++t)for(let n=0;n<h.inDepth;++n)for(let s=0;s<h.inHeight;++s)for(let r=0;r<h.inWidth;++r){const a=n-v,i=s-N,o=r-I;let l=0;for(let n=0;n<x;n+=g){const s=(a+n)/d;if(!(s<0||s>=h.outDepth||Math.floor(s)!==s))for(let r=0;r<w;r+=y){const a=(i+r)/f;if(!(a<0||a>=h.outHeight||Math.floor(a)!==a))for(let i=0;i<k;i+=b){const u=(o+i)/m;if(u<0||u>=h.outWidth||Math.floor(u)!==u)continue;const c=x*w*k-1-p.get(e,s,a,u,t)===n*w*k+r*k+i?1:0;0!==c&&(l+=C.get(e,s,a,u,t)*c)}}}S.set(l,e,n,s,r,t)}return n.makeTensorInfo(S.shape,S.dtype,S.values)}},oE={kernelName:Nn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a,output:i}=t,o=a;gS([a,i],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,p=dl(o.shape,l,u,1,c,h),d=n.data.get(o.dataId).values,f=Ga(p.outShape,o.dtype,CC(d,o.shape,o.dtype,p).values),m=p.strideHeight,g=p.strideWidth,y=p.dilationHeight,b=p.dilationWidth,x=p.effectiveFilterHeight,w=p.effectiveFilterWidth,k=w-1-p.padInfo.left,v=x-1-p.padInfo.top,I=Ga(o.shape,"float32"),N=n.data.get(r.dataId).values,S=Ga(r.shape,"float32",N);for(let e=0;e<p.batchSize;++e)for(let t=0;t<p.inChannels;++t)for(let n=0;n<p.inHeight;++n)for(let s=0;s<p.inWidth;++s){const r=n-v,a=s-k;let i=0;for(let n=0;n<x;n+=y){const s=(r+n)/m;if(!(s<0||s>=p.outHeight||Math.floor(s)!==s))for(let r=0;r<w;r+=b){const o=(a+r)/g;if(o<0||o>=p.outWidth||Math.floor(o)!==o)continue;const l=x*w-1-f.get(e,s,o,t)===n*w+r?1:0;0!==l&&(i+=S.get(e,s,o,t)*l)}}I.set(i,e,n,s,t)}return n.makeTensorInfo(I.shape,I.dtype,I.values)}},lE={kernelName:$n,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{filterSize:r,strides:a,pad:i,includeBatchInIndex:o}=t,l=n;gS(s,"MaxPoolWithArgmax");const u=l.data.get(s.dataId).values,c=dl(s.shape,r,a,[1,1],i),[h,p]=function(e,t,n,s,r){const a=SC(e,0,n,Te(t),r,"max"),i=CC(e,t,n,r,!0,s);return[a.values,i.values]}(u,s.shape,s.dtype,o,c),d=l.write(h,c.outShape,s.dtype),f=l.write(p,c.outShape,s.dtype);return[{dataId:d,shape:c.outShape,dtype:s.dtype},{dataId:f,shape:c.outShape,dtype:"int32"}]}};function uE(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;let o;gS(r,"sum"),o="bool"===r.dtype?WS({inputs:{x:r},backend:n,attrs:{dtype:"int32"}}):IS({inputs:{x:r},backend:n});const l=o.shape.length,u=pe(a,o.shape),c=Gu(u,l);let h=u,p=o;null!=c&&(p=lC({inputs:{x:o},backend:n,attrs:{perm:c}}),h=ju(h.length,l)),Uu("sum",h,p.shape.length);const[d,f]=Wu(p.shape,h);let m=zS(n,d,$r(p.dtype,"int32"));const g=ne(f),y=n.data.get(m.dataId).values,b=n.data.get(p.dataId).values;for(let e=0;e<y.length;++e){const t=e*g;let n=0;for(let e=0;e<g;++e)n+=b[t+e];y[e]=n}if(i){const e=m;m=XS({inputs:{x:m},backend:n,attrs:{shape:Vu(m.shape,u)}}),n.disposeIntermediateTensorInfo(e)}return n.disposeIntermediateTensorInfo(o),null!=c&&n.disposeIntermediateTensorInfo(p),m}const cE={kernelName:ys,backendName:"cpu",kernelFunc:uE},hE={kernelName:Tn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=pe(a,r.shape),l=ne(Wu(r.shape,o)[1]),u=[],c=n.makeTensorInfo([],"float32",new Float32Array([l]));u.push(c);const h=WS({inputs:{x:r},backend:n,attrs:{dtype:"float32"}});u.push(h);const p=j$({inputs:{a:h,b:c},backend:n});u.push(p);const d=uE({inputs:{x:p},backend:n,attrs:{axis:a,keepDims:i}});return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),d}},pE={kernelName:En,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;gS(r,"min");const o=pe(a,r.shape);let l=o;const u=Gu(l,r.shape.length);let c=r;null!=u&&(c=lC({inputs:{x:r},backend:n,attrs:{perm:u}}),l=ju(l.length,r.shape.length)),Uu("min",l,c.shape.length);const[h,p]=Wu(c.shape,l),d=ne(p),f=De(ne(h),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*d;let n=m[t];for(let e=0;e<d;++e){const s=m[t+e];s<n&&(n=s)}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(h,c.dtype,f);if(i){const e=XS({inputs:{x:g},backend:n,attrs:{shape:Vu(h,o)}});return n.disposeIntermediateTensorInfo(g),e}return g}},dE=$S(((e,t)=>Math.min(e,t))),fE=US(An,dE),mE={kernelName:An,backendName:"cpu",kernelFunc:fE},gE={kernelName:Rn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{paddings:a,mode:i}=s;gS(r,"mirrorPad");const o=a.map(((e,t)=>e[0]+r.shape[t]+e[1])),l=a.map((e=>e[0])),u=a.map(((e,t)=>e[0]+r.shape[t])),c="reflect"===i?0:1,h=n.data.get(r.dataId).values,p=r.shape.length,d=Te(r.shape),f=ne(o),m=o.length,g=Te(o),y=fe(r.dtype,f);for(let e=0;e<f;e++){let t=Me(e,m,g);for(let e=0;e<m;e++)t[e]<l[e]?t[e]=2*l[e]-t[e]-c:t[e]>=u[e]&&(t[e]=2*(u[e]-1)-t[e]+c);t=t.map(((e,t)=>e-l[t]));const n=Oe(t,p,d);y[e]=h[n]}return{dataId:n.write(y,o,r.dtype),shape:o,dtype:r.dtype}}},yE=$S(((e,t)=>{const n=e%t;return e<0&&t<0||e>=0&&t>=0?n:(n+t)%t})),bE=US(Dn,yE),xE={kernelName:Dn,backendName:"cpu",kernelFunc:bE};function wE(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{dim:a}=s,i=r.shape.length;let o=a;if(-1===o&&(o=i-1),o!==i-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${i} and dim was ${o}`);const l=pe([o],r.shape),u=QT({inputs:{x:r},backend:n,attrs:{reductionIndices:l,keepDims:!1}}),c=Vu(u.shape,l),h=XS({inputs:{x:u},backend:n,attrs:{shape:c}}),p=Y$({inputs:{a:r,b:h},backend:n}),d=_$({inputs:{x:p},backend:n}),f=uE({inputs:{x:d},backend:n,attrs:{axis:l,keepDims:!1}}),m=XS({inputs:{x:f},backend:n,attrs:{shape:c}}),g=j$({inputs:{a:d,b:m},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}const kE={kernelName:ws,backendName:"cpu",kernelFunc:wE},vE={kernelName:Fn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{numSamples:a,seed:i,normalized:o}=s;gS(r,"multinomial");const l=o?r:wE({inputs:{logits:r},backend:n,attrs:{dim:-1}}),u=l.shape[0],c=l.shape[1],h=n.data.get(l.dataId).values,p=[u,a],d=De(ne(p),"int32");for(let e=0;e<u;++e){const t=e*c,n=new Float32Array(c-1);n[0]=h[t];for(let e=1;e<n.length;++e)n[e]=n[e-1]+h[t+e];const s=Nc.alea(i.toString()),r=e*a;for(let e=0;e<a;++e){const t=s();d[r+e]=n.length;for(let s=0;s<n.length;s++)if(t<n[s]){d[r+e]=s;break}}}return o||n.disposeIntermediateTensorInfo(l),n.makeTensorInfo(p,"int32",d)}};function IE(e,t,n){const s=ur(-1,n);return W$([],t,s,e,n)}const NE={kernelName:On,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;gS(s,"neg");const r=n.data.get(s.dataId).values,[a,i]=IE(r,s.shape,s.dtype);return n.makeTensorInfo(i,s.dtype,a)}},SE=yp,CE={kernelName:Ln,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=s;gS(r,"NonMaxSuppression");const u=n.data.get(r.dataId).values,c=n.data.get(a.dataId).values,{selectedIndices:h}=SE(u,c,i,o,l);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},$E=bp,TE={kernelName:zn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,padToMaxOutputSize:u}=s;gS(r,"NonMaxSuppressionPadded");const c=n.data.get(r.dataId).values,h=n.data.get(a.dataId).values,{selectedIndices:p,validOutputs:d}=$E(c,h,i,o,l,u);return[n.makeTensorInfo([p.length],"int32",new Int32Array(p)),n.makeTensorInfo([],"int32",new Int32Array([d]))]}},EE=xp,AE={kernelName:Pn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=s;gS(r,"NonMaxSuppressionWithScore");const c=n.data.get(r.dataId).values,h=n.data.get(a.dataId).values,p=i,d=o,f=l,m=u,{selectedIndices:g,selectedScores:y}=EE(c,h,p,d,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}},RE=$S(((e,t)=>e!==t?1:0)),DE=US(Mn,RE,null,"bool"),FE={kernelName:Mn,backendName:"cpu",kernelFunc:DE},_E={kernelName:Wn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:r}=t,{depth:a,onValue:i,offValue:o}=s;gS(r,"oneHot");const l=ne(r.shape),u=new Float32Array(l*a);u.fill(o);const c=n.data.get(r.dataId).values;for(let e=0;e<l;++e)c[e]>=0&&c[e]<a&&(u[e*a+c[e]]=i);return n.makeTensorInfo([...r.shape,a],"int32",u)}};function OE(e){const{inputs:t,backend:n}=e,{x:s}=t;if("string"===s.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===s.dtype){const e=PS({inputs:{input:s},backend:n}),t=OE({inputs:{x:e},backend:n}),r=KC({inputs:{input:s},backend:n}),a=OE({inputs:{x:r},backend:n}),i=MS({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),i}return nT({backend:n,attrs:{shape:s.shape,value:0,dtype:s.dtype}})}const ME={kernelName:_s,backendName:"cpu",kernelFunc:OE},LE={kernelName:Bn,backendName:"cpu",kernelFunc:function e(t){const{inputs:n,backend:s}=t,{x:r}=n;if("string"===r.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===r.dtype){const t=PS({inputs:{input:r},backend:s}),n=e({inputs:{x:t},backend:s}),a=KC({inputs:{input:r},backend:s}),i=OE({inputs:{x:a},backend:s}),o=MS({inputs:{real:n,imag:i},backend:s});return s.disposeIntermediateTensorInfo(t),s.disposeIntermediateTensorInfo(n),s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}return nT({backend:s,attrs:{shape:r.shape,value:1,dtype:r.dtype}})}};function zE(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s;if(1===t.length)return M$({inputs:{input:t[0]},backend:n,attrs:{dim:r}});const a=t[0].shape,i=t[0].dtype;t.forEach((e=>{Q(a,e.shape,"All tensors passed to stack must have matching shapes"),Z(i===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const o=[],l=YC({inputs:t.map((e=>{const t=M$({inputs:{input:e},backend:n,attrs:{dim:r}});return o.push(t),t})),backend:n,attrs:{axis:r}});return o.forEach((e=>n.disposeIntermediateTensorInfo(e))),l}const PE={kernelName:Vn,backendName:"cpu",kernelFunc:zE},BE={kernelName:Un,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{paddings:a,constantValue:i}=s;gS(r,"pad");const o=a.map(((e,t)=>e[0]+r.shape[t]+e[1])),l=a.map((e=>e[0])),u=n.data.get(r.dataId).values,c=ne(r.shape),h=r.shape.length,p=Te(r.shape),d=ne(o),f=o.length,m=Te(o),g=fe(r.dtype,d);0!==i&&g.fill(i);for(let e=0;e<c;e++)g[Oe(Me(e,h,p).map(((e,t)=>e+l[t])),f,m)]=u[e];return{dataId:n.write(g,o,r.dtype),shape:o,dtype:r.dtype}}},WE=$S(((e,t)=>Math.pow(e,t))),VE=US(Hn,WE),UE={kernelName:Hn,backendName:"cpu",kernelFunc:VE};function GE(e,t,n,s){const[r,a]=Wu(e,s),i=$r(t,"int32"),o=De(ne(r),i),l=ne(a);for(let e=0;e<o.length;++e){const t=e*l;let s=1;for(let e=0;e<l;++e)s*=n[t+e];o[e]=s}return{outVals:o,outShape:r,outDtype:i}}const HE={kernelName:qn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;gS(r,"prod");const o=r.shape.length,l=pe(a,r.shape),u=Gu(l,o);let c=l,h=r;const p=[];null!=u&&(h=lC({inputs:{x:r},backend:n,attrs:{perm:u}}),p.push(h),c=ju(c.length,o));const d=n.data.get(h.dataId).values,{outVals:f,outShape:m,outDtype:g}=GE(h.shape,h.dtype,d,c);let y=m;return i&&(y=Vu(m,l)),p.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(y,g,f)}};function jE(e,t,n,s){if(e===t||e<t&&n<0||t<e&&n>1)return De(0,s);const r=De(Math.abs(Math.ceil((t-e)/n)),s);t<e&&1===n&&(n=-1),r[0]=e;for(let e=1;e<r.length;e++)r[e]=r[e-1]+n;return r}const qE={kernelName:Kn,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,dtype:a,step:i}=n,o=jE(s,r,i,a);return t.makeTensorInfo([o.length],a,o)}},KE=xS(Yn,(e=>1/e)),XE={kernelName:Yn,backendName:"cpu",kernelFunc:KE},YE={kernelName:ts,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s;gS(r,"resizeBilinear");const l=Te(r.shape),[u,c]=o,[h,p,d,f]=r.shape,m=n.data.get(r.dataId).values,g=new Float32Array(ne([h,u,c,f])),y=[a&&u>1?p-1:p,a&&c>1?d-1:d],b=[a&&u>1?u-1:u,a&&c>1?c-1:c];let x=0;const w=y[0]/b[0],k=y[1]/b[1];for(let e=0;e<h;e++)for(let t=0;t<u;t++){let n;n=i?w*(t+.5)-.5:w*t;const s=Math.max(0,Math.floor(n)),r=n-s,a=Math.min(p-1,Math.ceil(n)),o=e*l[0]+s*l[1],u=e*l[0]+a*l[1];for(let e=0;e<c;e++){let t;t=i?k*(e+.5)-.5:k*e;const n=Math.max(0,Math.floor(t)),s=t-n,a=Math.min(d-1,Math.ceil(t)),c=o+n*l[2],h=u+n*l[2],p=o+a*l[2],y=u+a*l[2];for(let e=0;e<f;e++){const t=m[c+e],n=m[h+e],a=t+(m[p+e]-t)*s,i=a+(n+(m[y+e]-n)*s-a)*r;g[x++]=i}}}return n.makeTensorInfo([h,u,c,f],"float32",g)}},JE={kernelName:ns,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s;gS([a,r],"resizeBilinearGrad");const o=Te(r.shape),[l,u,c,h]=r.shape,[,p,d]=a.shape,f=new Float32Array(l*u*c*h),m=[i&&p>1?u-1:u,i&&d>1?c-1:c],g=[i&&p>1?p-1:p,i&&d>1?d-1:d],y=m[0]/g[0],b=m[1]/g[1],x=n.data.get(a.dataId).values;let w=0;for(let e=0;e<l;e++){const t=e*o[0];for(let e=0;e<p;e++){const n=e*y,s=Math.floor(n),r=Math.min(Math.ceil(n),u-1),a=t+s*o[1],i=t+r*o[1],l=n-s,p=1-l;for(let e=0;e<d;e++){const t=e*b,n=Math.floor(t),s=Math.min(Math.ceil(t),c-1),r=t-n,u=1-r,d=a+n*o[2],m=a+s*o[2],g=i+n*o[2],y=i+s*o[2],k=p*u,v=p*r,I=l*u,N=l*r;for(let e=0;e<h;e++){const t=x[w++];f[d+e]+=t*k,f[m+e]+=t*v,f[g+e]+=t*I,f[y+e]+=t*N}}}}return n.makeTensorInfo([l,c,u,h],"float32",f)}},ZE={kernelName:Qn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s;gS(r,"resizeNearestNeighbor");const l=Te(r.shape),[u,c]=o,[h,p,d,f]=r.shape,m=n.data.get(r.dataId).values,g=new Float32Array(h*u*c*f),y=[a&&u>1?p-1:p,a&&c>1?d-1:d],b=[a&&u>1?u-1:u,a&&c>1?c-1:c],x=y[0]/b[0],w=y[1]/b[1];let k=0;for(let e=0;e<h;e++){const t=e*l[0];for(let e=0;e<u;e++){const n=i?x*(e+.5):x*e;let s=Math.min(p-1,a?Math.round(n):Math.floor(n));i&&(s=Math.max(0,s));const r=t+s*l[1];for(let e=0;e<c;e++){const t=i?w*(e+.5):w*e;let n=Math.min(d-1,a?Math.round(t):Math.floor(t));i&&(n=Math.max(0,n));const s=r+n*l[2];for(let e=0;e<f;e++){const t=m[s+e];g[k++]=t}}}}return n.makeTensorInfo([h,u,c,f],r.dtype,g)}},QE={kernelName:es,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s;gS([a,r],"resizeNearestNeighborGrad");const o=Te(r.shape),l=Te(a.shape),[u,c,h,p]=r.shape,[,d,f]=a.shape,m=new Float32Array(u*c*h*p),g=n.data.get(a.dataId).values,y=[i&&d>1?c-1:c,i&&f>1?h-1:h],b=[i&&d>1?d-1:d,i&&f>1?f-1:f],x=y[0]/b[0],w=y[1]/b[1],k=1/x,v=1/w,I=2*Math.ceil(k)+2,N=2*Math.ceil(v)+2;for(let e=0;e<u;e++){const t=e*o[0];for(let e=0;e<c;e++){const n=t+e*o[1],s=Math.floor(e*k),r=Math.floor(s-I/2);for(let s=0;s<h;s++){const a=n+s*o[2],u=Math.floor(s*v),y=Math.floor(u-N/2);for(let n=0;n<p;n++){let o=0;for(let a=0;a<I;a++){const u=a+r;if(u<0||u>=d)continue;const p=t+u*l[1],m=u*x;if(e===Math.min(c-1,i?Math.round(m):Math.floor(m)))for(let e=0;e<N;e++){const t=e+y;if(t<0||t>=f)continue;const r=p+t*l[2],a=t*w;s===Math.min(h-1,i?Math.round(a):Math.floor(a))&&(o+=g[r+n])}}m[a+n]=o}}}}return n.makeTensorInfo(r.shape,r.dtype,m)}},eA={kernelName:rs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{dims:a}=s;gS(r,"reverse");const i=r.shape.length,o=pe(a,r.shape);if(0===i)return IS({inputs:{x:r},backend:n});const l=new mr(r.shape,r.dtype),u=n.bufferSync(r);for(let e=0;e<l.size;e++){const t=l.indexToLoc(e),n=t.slice();o.forEach((e=>n[e]=r.shape[e]-1-n[e])),l.set(u.get(...n),...t)}return n.makeTensorInfo(l.shape,l.dtype,l.values)}},tA={kernelName:Ls,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,{radians:r,fillValue:a,center:i}=t,o=n,l=fe(s.dtype,ne(s.shape)),[u,c,h,p]=s.shape,[d,f]=td(i,c,h),m=Math.sin(r),g=Math.cos(r),y=o.data.get(s.dataId).values;for(let e=0;e<u;e++){const t=e*h*c*p;for(let e=0;e<c;e++){const n=e*(h*p);for(let s=0;s<h;s++){const r=s*p;for(let i=0;i<p;i++){const o=[u,e,s,i],b=o[2],x=o[1];let w=(b-d)*g-(x-f)*m,k=(b-d)*m+(x-f)*g;w=Math.round(w+d),k=Math.round(k+f);let v=a;"number"!=typeof a&&(v=3===i?255:a[i]),w>=0&&w<h&&k>=0&&k<c&&(v=y[t+k*(h*p)+w*p+i]),l[t+n+r+i]=v}}}}return{dataId:o.write(l,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},nA=xS(as,(e=>{const t=Math.floor(e);return e-t<.5?Math.floor(e):e-t>.5?Math.ceil(e):t%2==0?t:t+1})),sA={kernelName:as,backendName:"cpu",kernelFunc:nA},rA=BC((e=>1/Math.sqrt(e))),aA=wS(is,rA),iA={kernelName:is,backendName:"cpu",kernelFunc:aA};function oA(e,t,n,s,r,a,i,o,l,u){const c=[s/r,r],h=e.values,p=t.values;if(0===s)return Ga(n,t.dtype);const d=Ga(c,t.dtype);d.values.fill(l);for(let e=0;e<a;e++){const a=[];let l=0;for(let t=0;t<i;t++){const n=h[e*i+t];a.push(n),l+=n*o[t]}if(l<0||l>=s/r)throw new Error(`Invalid indices: ${a} does not index into ${n}`);for(let n=0;n<r;n++)u?d.values[l*r+n]+=p[e*r+n]:d.values[l*r+n]=0===t.rank?p[0]:p[e*r+n]}return d}const lA={kernelName:os,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:r,updates:a}=t,{shape:i}=s,{sliceRank:o,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=vi(0,r,i),p=oA(n.bufferSync(r),n.bufferSync(a),i,h,u,l,o,c,0,!0);return n.makeTensorInfo(i,p.dtype,p.values)}},uA={kernelName:ls,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:s,t:r,e:a}=t;gS([s,r,a],"select");const i=s.shape.length,o=n.data.get(s.dataId).values,l=n.data.get(r.dataId).values,u=n.data.get(a.dataId).values,c=$r(r.dtype,a.dtype),h=De(ne(r.shape),c);let p=0;const d=0===i||i>1||1===r.shape.length?1:ne(r.shape.slice(1));for(let e=0;e<o.length;e++)for(let t=0;t<d;t++)1===o[e]?h[p++]=l[e]:h[p++]=u[e];return n.makeTensorInfo(r.shape,c,h)}},cA=od,hA=ld,pA=xS(us,(e=>e>=0?hA*e:cA*(Math.exp(e)-1))),dA={kernelName:us,backendName:"cpu",kernelFunc:pA},fA=xS(fs,(e=>1/(1+Math.exp(-e)))),mA={kernelName:fs,backendName:"cpu",kernelFunc:fA},gA=xS(ds,(e=>e<0?-1:e>0?1:0)),yA={kernelName:ds,backendName:"cpu",kernelFunc:gA},bA=xS(hs,(e=>Math.sin(e))),xA={kernelName:hs,backendName:"cpu",kernelFunc:bA},wA=xS(ps,(e=>Math.sinh(e))),kA={kernelName:ps,backendName:"cpu",kernelFunc:wA},vA=Math.log(1.1920928955078125e-7)+2,IA=xS(ms,(e=>{const t=e>-vA,n=e<vA,s=Math.exp(e);let r;return r=n?s:t?e:Math.log(1+s),r})),NA={kernelName:ms,backendName:"cpu",kernelFunc:IA},SA={kernelName:bs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,paddings:i}=s;gS([r],"spaceToBatchND");const o=ne(a),l=[[0,0]];l.push(...i);for(let e=1+a.length;e<r.shape.length;++e)l.push([0,0]);const u=BE.kernelFunc({inputs:{x:r},backend:n,attrs:{paddings:l,constantValue:0}}),c=nd(u.shape,a,o,!1),h=sd(c.length,a.length,!1),p=rd(u.shape,a,o,!1),d=XS({inputs:{x:u},backend:n,attrs:{shape:c}}),f=lC({inputs:{x:d},backend:n,attrs:{perm:h}}),m=XS({inputs:{x:f},backend:n,attrs:{shape:p}});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),m}},CA={kernelName:Ns,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sparseIndices:r,sparseValues:a,defaultValue:i}=t,{outputShape:o}=s,{sliceRank:l,numUpdates:u,sliceSize:c,strides:h,outputSize:p}=vi(0,r,o),d=oA(n.bufferSync(r),n.bufferSync(a),o,p,c,u,l,h,n.data.get(i.dataId).values[0],!1);return n.makeTensorInfo(o,d.dtype,d.values)}},$A={kernelName:xs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{numOrSizeSplits:a,axis:i}=s,o=pe(i,r.shape)[0],l=Sd(r,a,o),u=new Array(r.shape.length).fill(0),c=r.shape.slice();return l.map((e=>{const t=[...c];t[o]=e;const s=_C({inputs:{x:r},backend:n,attrs:{begin:u,size:t}});return u[o]+=e,s}))}},TA=xS(gs,(e=>Math.sqrt(e))),EA={kernelName:gs,backendName:"cpu",kernelFunc:TA},AA={kernelName:vs,backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{const{x:n}=e,s=t;gS(n,"square");const r=s.data.get(n.dataId).values,a=new Float32Array(r.length);for(let e=0;e<r.length;++e){const t=r[e];a[e]=t*t}return{dataId:s.write(a,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},RA=$S(((e,t)=>{const n=e-t;return n*n})),DA=US(ks,RA),FA={kernelName:ks,backendName:"cpu",kernelFunc:DA},_A=xS(Os,((e,t)=>{const n=t;return isNaN(e)?NaN:e>0?1:n.alpha})),OA={kernelName:Os,backendName:"cpu",kernelFunc:_A};function MA(e,t,n,s){const r=Ga(e,t.dtype);for(let e=0;e<r.size;e++){const a=r.indexToLoc(e),i=new Array(a.length);for(let e=0;e<i.length;e++)i[e]=a[e]*n[e]+s[e];r.set(t.get(...i),...a)}return r}const LA={kernelName:Ss,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,end:i,strides:o,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:p}=s;gS(r,"stridedSlice");const{nonStrided:d,$begin:f,$strides:m,size:g,newShape:y,outShape:b}=zi(r.shape,a,i,o,l,u,c,h,p),x=XS({inputs:{x:r},backend:n,attrs:{shape:y}});let w;if(d){const e=_C({inputs:{x},backend:n,attrs:{begin:f,size:g}});w=XS({inputs:{x:e},backend:n,attrs:{shape:b}}),n.disposeIntermediateTensorInfo(e)}else if(b.some((e=>0===e)))w=n.makeTensorInfo(b,r.dtype,[]);else{const e=MA(b,n.bufferSync(x),m,f);w=n.makeTensorInfo(e.shape,e.dtype,e.values)}const k=XS({inputs:{x:w},backend:n,attrs:{shape:b}});return n.disposeIntermediateTensorInfo(x),n.disposeIntermediateTensorInfo(w),k}},zA=xS(Cs,(e=>Math.tan(e))),PA={kernelName:Cs,backendName:"cpu",kernelFunc:zA},BA=xS($s,(e=>Math.tanh(e)));function WA(e,t){const n=new Array(e.rank);for(let s=0;s<n.length;s++)n[s]=e.shape[s]*t[s];const s=Ga(n,e.dtype);for(let t=0;t<s.values.length;++t){const n=s.indexToLoc(t),r=new Array(e.rank);for(let t=0;t<r.length;t++)r[t]=n[t]%e.shape[t];const a=e.locToIndex(r);s.values[t]=e.values[a]}return s}const VA={kernelName:Ts,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reps:a}=s;gS(r,"tile");const i=WA(n.bufferSync(r),a);return n.makeTensorInfo(i.shape,i.dtype,i.values)}};function UA(e,t,n,s,r){const a=t[t.length-1],[i,o]=[e.length/a,a],l=fe(n,i*s),u=fe("int32",i*s);for(let t=0;t<i;t++){const n=t*o,r=e.subarray(n,n+o),a=[];for(let e=0;e<r.length;e++)a.push({value:r[e],index:e});a.sort(((e,t)=>t.value-e.value));const i=t*s,c=l.subarray(i,i+s),h=u.subarray(i,i+s);for(let e=0;e<s;e++)c[e]=a[e].value,h[e]=a[e].index}const c=t.slice();return c[c.length-1]=s,[Ga(c,n,l),Ga(c,"int32",u)]}const GA={kernelName:Es,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{k:a,sorted:i}=s;gS(r,"topk");const o=n.data.get(r.dataId).values,[l,u]=UA(o,r.shape,r.dtype,a);return[n.makeTensorInfo(l.shape,l.dtype,l.values),n.makeTensorInfo(u.shape,u.dtype,u.values)]}};function HA(e,t,n,s){const r=pe(t,n)[0],a=[1,n[0],1];for(let e=0;e<r;e++)a[0]*=n[e];a[1]=n[r];for(let e=r+1;e<n.length;e++)a[2]*=n[e];const i={},o=new Int32Array(n[r]),l=new mr(a,s,e),u=[],c=1===a[0]&&1===a[2];for(let t=0;t<n[r];t++){let n;if(c)n=e[t].toString();else{const e=[];for(let n=0;n<a[0];n++)for(let s=0;s<a[2];s++)e.push(l.get(n,t,s));n=e.join(",")}if(void 0!==i[n])o[t]=i[n];else{const e=Object.keys(i).length;i[n]=e,o[t]=e,u.push(t)}}const h=a.slice();h[1]=Object.keys(i).length;const p=new mr(h,s);u.forEach(((e,t)=>{for(let n=0;n<a[0];n++)for(let s=0;s<a[2];s++)p.set(l.get(n,e,s),n,t,s)}));const d=n.slice();return d[r]=h[1],{outputValues:p.values,outputShape:d,indices:o}}const jA={kernelName:Rs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{axis:r}=n,{x:a}=t;gS(a,"unique");const i=s.data.get(a.dataId).values,{outputValues:o,outputShape:l,indices:u}=HA(i,r,a.shape,a.dtype);return[s.makeTensorInfo(l,a.dtype,o),s.makeTensorInfo([u.length],"int32",u)]}},qA={kernelName:Ds,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{value:r}=t;let{axis:a}=s;a<0&&(a+=r.shape.length);const i=r.shape.length,o=r.shape[a],l=new Array(i-1);let u=0;for(let e=0;e<i;e++)e!==a&&(l[u++]=r.shape[e]);const c=new Array(i).fill(0),h=r.shape.slice();h[a]=1;const p=new Array(o);for(let e=0;e<p.length;e++){c[a]=e;const t=_C({inputs:{x:r},backend:n,attrs:{begin:c,size:h}});p[e]=XS({inputs:{x:t},backend:n,attrs:{shape:l}}),n.disposeIntermediateTensorInfo(t)}return p}},KA={kernelName:Fs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,segmentIds:a}=t,{numSegments:i}=s;gS(r,"unsortedSegmentSum");const o=[],l=[],u=r.shape.length-a.shape.length;let c=a;for(let e=0;e<u;++e){const t=M$({inputs:{input:c},backend:n,attrs:{dim:e+1}});c=t,l.push(t)}for(let e=0;e<i;++e){const t=ur(e,"int32"),s=n.makeTensorInfo([],"int32",t),a=I$({inputs:{a:s,b:c},backend:n}),i=WS({inputs:{x:a},backend:n,attrs:{dtype:"float32"}}),u=U$({inputs:{a:i,b:r},backend:n}),h=uE({inputs:{x:u},backend:n,attrs:{axis:0,keepDims:!1}});o.push(h),l.push(s),l.push(a),l.push(i),l.push(u),l.push(h)}const h=zE({inputs:o,backend:n,attrs:{axis:0}});return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),h}},XA=[QS,tC,sC,aC,KS,iC,cC,hC,pC,dC,mC,yC,xC,vC,NC,TC,EC,AC,RC,ZS,DC,MC,PC,VS,UC,HC,LS,jC,JC,e$,t$,QC,s$,r$,n$,i$,l$,u$,c$,h$,p$,f$,m$,g$,y$,b$,w$,x$,q$,vS,k$,N$,D$,O$,L$,B$,tT,sT,rT,oT,cT,hT,pT,dT,mT,bT,kT,NS,vT,XC,NT,CT,TT,CS,RT,_T,MT,PT,WT,GT,jT,XT,YT,JT,sE,rE,aE,iE,oE,lE,eE,hE,pE,mE,gE,xE,vE,G$,NE,CE,TE,AE,FE,_E,LE,PE,BE,UE,AS,HE,qE,BS,XE,DS,_S,YS,YE,JE,ZE,QE,eA,tA,sA,iA,lA,uA,dA,mA,yA,xA,kA,OC,kE,NA,SA,CA,$A,EA,AA,FA,OA,LA,J$,cE,PA,{kernelName:$s,backendName:"cpu",kernelFunc:BA},VA,GA,uC,jA,qA,KA,ME];for(const e of XA)js(e);const YA={},JA={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function ZA(e){if(!(e in YA)){const t=function(e){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const t=function(e){if("undefined"!=typeof OffscreenCanvas&&2===e)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(e);return t.addEventListener("webglcontextlost",(t=>{t.preventDefault(),delete YA[e]}),!1),1===e?t.getContext("webgl",JA)||t.getContext("experimental-webgl",JA):t.getContext("webgl2",JA)}(e);if(null===t)return console.log("Could not get context for WebGL version",e),null;YA[e]=t}const t=YA[e];return t.isContextLost()?(delete YA[e],ZA(e)):(t.disable(t.DEPTH_TEST),t.disable(t.STENCIL_TEST),t.disable(t.BLEND),t.disable(t.DITHER),t.disable(t.POLYGON_OFFSET_FILL),t.disable(t.SAMPLE_COVERAGE),t.enable(t.SCISSOR_TEST),t.enable(t.CULL_FACE),t.cullFace(t.BACK),YA[e])}var QA,eR,tR;function nR(e,t){return[t,e]}function sR(e){const t=ne(e);return oe(Math.ceil(t/4))}function rR(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function aR(e,t){const n=e;let s,r,a,i,o,l,u,c,h,p;return 2===Be().getNumber("WEBGL_VERSION")?(s=n.R32F,r=n.R16F,a=n.RGBA16F,i=n.RGBA32F,o=n.RED,u=4,c=1,h=n.HALF_FLOAT,p=n.FLOAT):(s=e.RGBA,r=e.RGBA,a=e.RGBA,i=n.RGBA,o=e.RGBA,u=4,c=4,h=null!=t?t.HALF_FLOAT_OES:null,p=e.FLOAT),l=e.RGBA,{internalFormatFloat:s,internalFormatHalfFloat:r,internalFormatPackedHalfFloat:a,internalFormatPackedFloat:i,textureFormatFloat:o,downloadTextureFormat:l,downloadUnpackNumChannels:u,defaultNumChannels:c,textureTypeHalfFloat:h,textureTypeFloat:p}}function iR(e,t){const n=t();return Be().getBool("DEBUG")&&function(e){const t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+function(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}(e,t))}(e),n}!function(e){e[e.DENSE=0]="DENSE",e[e.SHARED_BATCH=1]="SHARED_BATCH"}(QA||(QA={})),function(e){e[e.RENDER=0]="RENDER",e[e.UPLOAD=1]="UPLOAD",e[e.PIXELS=2]="PIXELS",e[e.DOWNLOAD=3]="DOWNLOAD"}(eR||(eR={})),function(e){e[e.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",e[e.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",e[e.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",e[e.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",e[e.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(tR||(tR={}));const oR=5.96e-8,lR=65504;function uR(e){return!!(Be().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||oR<Math.abs(e)&&Math.abs(e)<lR)}function cR(e,t){return bR(e,(()=>e.getExtension(t)),'Extension "'+t+'" not supported on this browser.')}const hR=/ERROR: [0-9]+:([0-9]+):/g;function pR(e,t){if(iR(e,(()=>e.validateProgram(t))),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function dR(e,t,n,s,r,a,i){const o=e.getAttribLocation(t,n);return-1!==o&&(iR(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,s))),iR(e,(()=>e.vertexAttribPointer(o,r,e.FLOAT,!1,a,i))),iR(e,(()=>e.enableVertexAttribArray(o))),!0)}function fR(e,t,n,s){iR(e,(()=>function(e,t,n){(function(e,t){const n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,s=t+e.TEXTURE0;if(s<e.TEXTURE0||s>n)throw new Error(`textureUnit must be in [gl.TEXTURE0, gl.TEXTURE${n}].`)})(e,n),iR(e,(()=>e.activeTexture(e.TEXTURE0+n))),iR(e,(()=>e.bindTexture(e.TEXTURE_2D,t)))}(e,t,s))),iR(e,(()=>e.uniform1i(n,s)))}function mR(e,t,n){iR(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,n))),iR(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0)))}function gR(e,t){iR(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,t))),iR(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0)))}function yR(e){const t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}(e,t))}function bR(e,t,n){const s=iR(e,(()=>t()));if(null==s)throw new Error(n);return s}function xR(e,t=2){return ne(e.slice(0,e.length-t))}function wR(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function kR(e){let t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[xR(e),...wR(e)]),t}function vR(e){return e%2==0}function IR(e,t){if(re(e=e.slice(-2),t=t.slice(-2)))return!0;if(!e.length||!t.length)return!0;if(0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){const n=e.slice(-1)[0],s=t.slice(-1)[0];if(n===s)return!0;if(vR(n)&&vR(s)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&vR(e[0])&&vR(t[0])}let NR,SR;function CR(e,t){return null!=e.getExtension(t)}function $R(e){try{if(null!=ZA(e))return!0}catch(e){return console.log("Error when getting WebGL context: ",e),!1}return!1}function TR(e){const t=aR(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n),e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const s=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,s),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);const r=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(s),r}function ER(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&Z("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the WebGL backend.`))}))}const AR=Be();function RR(){let e,t,n,s,r,a,i,o,l,u;return 2===Be().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",s="in",r="texture",a="outputColor",i="out vec4 outputColor;",o="\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",l="",u="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",t="attribute",n="varying",s="varying",r="texture2D",a="gl_FragColor",i="",o="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",l="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",u="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:t,varyingVs:n,varyingFs:s,texture2D:r,output:a,defineOutput:i,defineSpecialNaN:o,defineSpecialInf:l,defineRound:u}}function DR(e,t,n="index"){const s=Te(t);return s.map(((t,r)=>`int ${e[r]} = ${n} / ${t}; ${r===s.length-1?`int ${e[r+1]} = ${n} - ${e[r]} * ${t}`:`index -= ${e[r]} * ${t}`};`)).join("")}function FR(e){const t=Te(e).map((e=>e.toString()));return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}AR.registerFlag("HAS_WEBGL",(()=>AR.getNumber("WEBGL_VERSION")>0)),AR.registerFlag("WEBGL_VERSION",(()=>$R(2)?2:$R(1)?1:0)),AR.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",(()=>!1)),AR.registerFlag("WEBGL_BUFFER_SUPPORTED",(()=>2===AR.get("WEBGL_VERSION"))),AR.registerFlag("WEBGL_CPU_FORWARD",(()=>!0)),AR.registerFlag("WEBGL_FORCE_F16_TEXTURES",(()=>!1)),AR.registerFlag("WEBGL_PACK",(()=>AR.getBool("HAS_WEBGL"))),AR.registerFlag("WEBGL_PACK_NORMALIZATION",(()=>AR.getBool("WEBGL_PACK"))),AR.registerFlag("WEBGL_PACK_CLIP",(()=>AR.getBool("WEBGL_PACK"))),AR.registerFlag("WEBGL_PACK_DEPTHWISECONV",(()=>!1)),AR.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(()=>AR.getBool("WEBGL_PACK"))),AR.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(()=>AR.getBool("WEBGL_PACK"))),AR.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(()=>AR.getBool("WEBGL_PACK"))),AR.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(()=>AR.getBool("WEBGL_PACK"))),AR.registerFlag("WEBGL_PACK_REDUCE",(()=>AR.getBool("WEBGL_PACK"))),AR.registerFlag("WEBGL_LAZILY_UNPACK",(()=>AR.getBool("WEBGL_PACK"))),AR.registerFlag("WEBGL_CONV_IM2COL",(()=>AR.getBool("WEBGL_PACK"))),AR.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(()=>function(e){if(null==NR){const t=ZA(e);NR=t.getParameter(t.MAX_TEXTURE_SIZE)}return NR}(AR.getNumber("WEBGL_VERSION")))),AR.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(()=>function(e){if(null==SR){const t=ZA(e);SR=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,SR)}(AR.getNumber("WEBGL_VERSION")))),AR.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(()=>{const e=AR.getNumber("WEBGL_VERSION");return 0===e?0:function(e){if(0===e)return 0;let t;const n=ZA(e);return t=CR(n,"EXT_disjoint_timer_query_webgl2")&&2===e?2:CR(n,"EXT_disjoint_timer_query")?1:0,t}(e)})),AR.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(()=>AR.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!Pr())),AR.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(()=>function(e){if(0===e)return!1;const t=ZA(e);if(1===e){if(!CR(t,"OES_texture_float"))return!1}else if(!CR(t,"EXT_color_buffer_float"))return!1;return TR(t)}(AR.getNumber("WEBGL_VERSION")))),AR.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(()=>!AR.getBool("WEBGL_FORCE_F16_TEXTURES")&&AR.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))),AR.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(()=>function(e){if(0===e)return!1;const t=ZA(e);if(1!==e){if(CR(t,"EXT_color_buffer_float"))return TR(t);const e="EXT_color_buffer_half_float";if(CR(t,e)){const n=t.getExtension(e);return function(e,t){const n=aR(e,t),s=e.createTexture();e.bindTexture(e.TEXTURE_2D,s),e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,1,1,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const r=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,r),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,s,0);const a=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(s),e.deleteFramebuffer(r),a}(t,n)}return!1}return!!CR(t,"OES_texture_float")&&!!CR(t,"WEBGL_color_buffer_float")&&TR(t)}(AR.getNumber("WEBGL_VERSION")))),AR.registerFlag("WEBGL_FENCE_API_ENABLED",(()=>{return 2===(e=AR.getNumber("WEBGL_VERSION"))&&null!=ZA(e).fenceSync;var e})),AR.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(()=>AR.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0)),AR.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",(()=>-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)}));const _R="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n";class OR{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=QA.DENSE;const t=sR(e),n=RR();this.outputShape=e,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${DR(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${t[0]}, ${t[1]}));\n        int index = 4 * (resTexRC.x * ${t[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${n.output} = result;\n      }\n    `}}class MR{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=QA.DENSE;const t=sR(e),n=RR();this.outputShape=e,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${DR(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${t[0]}, ${t[1]}));\n        int index = 4 * (resTexRC.x * ${t[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${n.output} = result;\n      }\n    `}}class LR{constructor(e){this.variableNames=["A"],this.outTexUsage=eR.DOWNLOAD;const t=RR();this.outputShape=e,this.userCode=`\n      ${_R}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${t.output} = encode_float(x);\n      }\n    `}}class zR{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=eR.DOWNLOAD;const t=RR();this.outputShape=e,this.userCode=`\n      ${_R}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${t.output} = encode_float(x);\n      }\n    `}}class PR{constructor(e,t,n=!1){this.variableNames=["A"];const s=RR(),[r,a]=t;this.outputShape=e;let i="result";n&&(i="floor(result * 255. + 0.5)"),this.userCode=`\n      ${FR(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / ${a};\n        int c = imod(flatIndex, ${a});\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(${a}.0, ${r}.0);\n        vec4 values = ${s.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${s.output} = vec4(${i}, 0., 0., 0.);\n      }\n    `}}class BR{constructor(e,t,n=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const s=RR(),[r,a]=t;this.outputShape=e;let i="",o="result";n&&(o="floor(result * 255. + 0.5)");for(let t=0;t<=1;t++)for(let n=0;n<=1;n++){const o=2*t+n;i+=`\n          localCoords = coords;\n          if(localCoords[2] + ${n} < ${e[2]}) {\n            localCoords[2] += ${n};\n            if(localCoords[1] + ${t} < ${e[1]}) {\n              localCoords[1] += ${t};\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / ${a};\n              c = imod(flatIndex, ${a});\n              uv = (vec2(c, r) + halfCR) / vec2(${a}.0, ${r}.0);\n              values = ${s.texture2D}(A, uv);\n\n              if(offset == 0) {\n                result[${o}] = values[0];\n              } else if(offset == 1) {\n                result[${o}] = values[1];\n              } else if(offset == 2) {\n                result[${o}] = values[2];\n              } else {\n                result[${o}] = values[3];\n              }\n            }\n          }\n        `}this.userCode=`\n      ${FR(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        ${i}\n\n        ${s.output} = ${o};\n      }\n    `}}function WR(e,t,n,s,r,a){!function(e,t){const n=Be().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0)throw new Error(`Requested texture size [${e}x${t}] is invalid.`);if(e>n||t>n)throw new Error(`Requested texture size [${e}x${t}] greater than WebGL maximum on this browser / GPU [${n}x${n}].`)}(t,n);const i=function(e){return bR(e,(()=>e.createTexture()),"Unable to create WebGLTexture.")}(e),o=e.TEXTURE_2D;return iR(e,(()=>e.bindTexture(o,i))),iR(e,(()=>e.texParameteri(o,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE))),iR(e,(()=>e.texParameteri(o,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE))),iR(e,(()=>e.texParameteri(o,e.TEXTURE_MIN_FILTER,e.NEAREST))),iR(e,(()=>e.texParameteri(o,e.TEXTURE_MAG_FILTER,e.NEAREST))),iR(e,(()=>e.texImage2D(o,0,s,t,n,0,r,a,null))),iR(e,(()=>e.bindTexture(e.TEXTURE_2D,null))),i}function VR(e){return e.internalFormatFloat}function UR(e){return e.internalFormatHalfFloat}function GR(e){return e.downloadTextureFormat}function HR(e){return e.internalFormatPackedFloat}function jR(e){return e.internalFormatPackedHalfFloat}class qR{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const t=Be().getNumber("WEBGL_VERSION");null!=e?(this.gl=e,function(e,t){YA[e]=t}(t,e)):this.gl=ZA(t);let n="WEBGL_color_buffer_float";const s="EXT_color_buffer_half_float";if(1===Be().getNumber("WEBGL_VERSION")){const e="OES_texture_float",t="OES_texture_half_float";if(this.textureFloatExtension=cR(this.gl,e),CR(this.gl,t))this.textureHalfFloatExtension=cR(this.gl,t);else if(Be().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),CR(this.gl,s))this.colorBufferHalfFloatExtension=cR(this.gl,s);else if(Be().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",CR(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!CR(this.gl,s))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(s)}this.vertexBuffer=function(e){return function(e,t){const n=bR(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return iR(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),iR(e,(()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}(this.gl),this.indexBuffer=function(e){return function(e,t){const n=bR(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return iR(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n))),iR(e,(()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Uint16Array([0,1,2,2,1,3]))}(this.gl),this.framebuffer=function(e){return bR(e,(()=>e.createFramebuffer()),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=aR(this.gl,this.textureHalfFloatExtension)}get debug(){return Be().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;iR(e,(()=>e.finish())),iR(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,null))),iR(e,(()=>e.deleteFramebuffer(this.framebuffer))),iR(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,null))),iR(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null))),iR(e,(()=>e.deleteBuffer(this.indexBuffer))),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=nR(t,n);return WR(e,r,a,VR(s),s.textureFormatFloat,e.FLOAT)}(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=nR(t,n);return WR(e,r,a,UR(s),s.textureFormatFloat,s.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=nR(t,n);return WR(e,r,a,GR(s),e.RGBA,e.UNSIGNED_BYTE)}(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),function(e,t,n){iR(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),n.data instanceof Uint8Array?iR(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n.width,n.height,0,e.RGBA,e.UNSIGNED_BYTE,n.data))):iR(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n))),iR(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,n,s){this.throwIfDisposed(),function(e,t,n,s,r,a){let i,o,l;iR(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),r instanceof Uint8Array?(i=new Uint8Array(n*s*4),o=e.UNSIGNED_BYTE,l=e.RGBA):(i=new Float32Array(n*s*4),o=e.FLOAT,l=a.internalFormatPackedFloat),i.set(r),iR(e,(()=>e.texImage2D(e.TEXTURE_2D,0,l,n,s,0,e.RGBA,o,i))),iR(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t,n,s,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=rR(t,n);return WR(e,r,a,jR(s),e.RGBA,s.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=rR(t,n);return WR(e,r,a,HR(s),e.RGBA,e.FLOAT)}(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(gR(this.gl,this.framebuffer),this.outputTexture=null),iR(this.gl,(()=>this.gl.deleteTexture(e)))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n,s){const[r,a]=nR(t,n),i=new Uint8Array(t*n*4);return iR(e,(()=>e.readPixels(0,0,r,a,s.downloadTextureFormat,e.UNSIGNED_BYTE,i))),new Float32Array(i.buffer)}(this.gl,t,n,this.textureConfig)))}downloadPackedMatrixFromBuffer(e,t,n,s,r,a){return function(e,t,n,s,r,a,i,o){const l=e,u=new Float32Array(function(e,t){const[n,s]=rR(e,t);return n*s*4}(a,i));return l.bindBuffer(l.PIXEL_PACK_BUFFER,t),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,u),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),u}(this.gl,e,0,0,0,r,a,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return function(e,t,n){const s=e,r=new Float32Array(n);return s.bindBuffer(s.PIXEL_PACK_BUFFER,t),s.getBufferSubData(s.PIXEL_PACK_BUFFER,0,r),s.bindBuffer(s.PIXEL_PACK_BUFFER,null),r}(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);const s=function(e,t,n,s){const r=e.createBuffer();iR(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,r)));const a=16*t*n;return iR(e,(()=>e.bufferData(e.PIXEL_PACK_BUFFER,a,e.STREAM_READ))),iR(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0))),iR(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null))),r}(this.gl,t,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),s}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,n;if(Be().getBool("WEBGL_FENCE_API_ENABLED")){const s=e,r=s.fenceSync(s.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=()=>{const e=s.clientWaitSync(r,0,0);return e===s.ALREADY_SIGNALED||e===s.CONDITION_SATISFIED},t=r}else Be().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(t,Be().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:t,isFencePassed:n}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n){const s=new Float32Array(t*n*4);return iR(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,s))),s}(this.gl,t,n)))}createProgram(e){this.throwIfDisposed();const t=this.gl,n=function(e,t){const n=bR(e,(()=>e.createShader(e.FRAGMENT_SHADER)),"Unable to create fragment WebGLShader.");if(iR(e,(()=>e.shaderSource(n,t))),iR(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw function(e,t){const n=hR.exec(t);if(null==n)return console.log(`Couldn't parse line number in error: ${t}`),void console.log(e);const s=+n[1],r=e.split("\n"),a=r.length.toString().length+2,i=r.map(((e,t)=>ue((t+1).toString(),a)+e));let o=0;for(let e=0;e<i.length;e++)o=Math.max(i[e].length,o);const l=i.slice(0,s-1),u=i.slice(s-1,s),c=i.slice(s);console.log(l.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${ue(u[0],o)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}(t,e.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}(t,e),s=function(e){const t=RR();return function(e,t){const n=bR(e,(()=>e.createShader(e.VERTEX_SHADER)),"Unable to create vertex WebGLShader.");if(iR(e,(()=>e.shaderSource(n,t))),iR(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(e,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}(t),r=function(e){return bR(e,(()=>e.createProgram()),"Unable to create WebGLProgram.")}(t);return iR(t,(()=>t.attachShader(r,s))),iR(t,(()=>t.attachShader(r,n))),function(e,t){if(iR(e,(()=>e.linkProgram(t))),!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}(t,r),this.debug&&pR(t,r),this.vertexAttrsAreBound||(this.setProgram(r),this.vertexAttrsAreBound=function(e,t,n){return iR(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),dR(e,t,"clipSpacePos",n,3,20,0)&&dR(e,t,"uv",n,2,20,12)}(t,this.program,this.vertexBuffer)),r}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&iR(this.gl,(()=>this.gl.deleteProgram(e)))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&pR(this.gl,this.program),iR(this.gl,(()=>this.gl.useProgram(e)))}getUniformLocation(e,t,n=!0){return this.throwIfDisposed(),n?function(e,t,n){return bR(e,(()=>e.getUniformLocation(t,n)),'uniform "'+n+'" not present in program.')}(this.gl,e,t):function(e,t,n){return e.getUniformLocation(t,n)}(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),iR(this.gl,(()=>this.gl.getAttribLocation(e,t)))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),fR(this.gl,e,t,n)}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();const[s,r]=rR(t,n);this.setOutputMatrixTextureDriver(e,s,r)}setOutputMatrixWriteRegion(e,t,n,s){this.setOutputMatrixWriteRegionDriver(n,e,s,t)}setOutputPackedMatrixWriteRegion(e,t,n,s){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&pR(this.gl,this.program),yR(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;this.debug&&this.debugValidate(),iR(e,(()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0)))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),iR(this.gl,(()=>this.gl.finish()))}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=cR(this.gl,2===Be().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===Be().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===Be().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2();return void e.endQuery(t.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await ce((()=>this.disposed||this.isQueryAvailable(e,Be().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")))),this.getQueryTime(e,Be().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){const t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{const t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){const t=this.gl,n=this.getQueryTimerExtensionWebGL2(),s=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),s&&!this.disjoint}{const t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise((t=>{this.addItemToPoll((()=>e.isFencePassed()),(()=>t()))}))}pollItems(){const e=function(e){let t=0;for(;t<e.length&&e[t]();++t);return t-1}(this.itemsToPoll.map((e=>e.isDoneFn)));for(let t=0;t<=e;++t){const{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1||ce((()=>(this.pollItems(),0===this.itemsToPoll.length)))}bindTextureToFrameBuffer(e){this.throwIfDisposed(),mR(this.gl,e,this.framebuffer),this.debug&&yR(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(mR(this.gl,this.outputTexture,this.framebuffer),this.debug&&yR(this.gl)):gR(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();const s=this.gl;mR(s,e,this.framebuffer),this.debug&&yR(s),this.outputTexture=e,iR(s,(()=>s.viewport(0,0,t,n))),iR(s,(()=>s.scissor(0,0,t,n)))}setOutputMatrixWriteRegionDriver(e,t,n,s){this.throwIfDisposed(),iR(this.gl,(()=>this.gl.scissor(e,t,n,s)))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}const{getBroadcastDims:KR}=g;function XR(e,t,n,s){const r=[];e.forEach((e=>{const t=ne(e.shapeInfo.logicalShape);e.shapeInfo.isUniform?r.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(r.push(`uniform sampler2D ${e.name};`),r.push(`uniform int offset${e.name};`))}));const a=r.join("\n"),i=e.map((e=>function(e,t,n=!1){let s="";s+=n?JR(e):YR(e);const r=e.shapeInfo.logicalShape,a=t.logicalShape;return r.length<=a.length&&(s+=n?function(e,t){const n=e.name,s=n.charAt(0).toUpperCase()+n.slice(1),r="get"+s+"AtOutCoords",a=e.shapeInfo.logicalShape.length,i=t.logicalShape.length,o=KR(e.shapeInfo.logicalShape,t.logicalShape),l=rD(i),u=i-a;let c;const h=["x","y","z","w","u","v"];c=0===a?"":i<2&&o.length>=1?"coords = 0;":o.map((e=>`coords.${h[e+u]} = 0;`)).join("\n");let p="";p=i<2&&a>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${h[t+u]}`)).join(", ");let d="return outputValue;";const f=1===ne(e.shapeInfo.logicalShape),m=1===ne(t.logicalShape);if(1!==a||f||m){if(f&&!m)d=1===i?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(o.length){const e=a-2,t=a-1;o.indexOf(e)>-1&&o.indexOf(t)>-1?d="return vec4(outputValue.x);":o.indexOf(e)>-1?d="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":o.indexOf(t)>-1&&(d="return vec4(outputValue.xx, outputValue.zz);")}}else d="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${r}() {\n      ${l} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${s}(${p});\n      ${d}\n    }\n  `}(e,t):function(e,t){const n=e.name,s=n.charAt(0).toUpperCase()+n.slice(1),r="get"+s+"AtOutCoords",a=t.texShape,i=e.shapeInfo.texShape,o=e.shapeInfo.logicalShape.length,l=t.logicalShape.length;if(!e.shapeInfo.isUniform&&o===l&&null==e.shapeInfo.flatOffset&&re(i,a))return`\n      float ${r}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const u=rD(l),c=KR(e.shapeInfo.logicalShape,t.logicalShape),h=l-o;let p;const d=["x","y","z","w","u","v"];p=0===o?"":l<2&&c.length>=1?"coords = 0;":c.map((e=>`coords.${d[e+h]} = 0;`)).join("\n");let f="";return f=l<2&&o>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${d[t+h]}`)).join(", "),`\n    float ${r}() {\n      ${u} coords = getOutputCoords();\n      ${p}\n      return get${s}(${f});\n    }\n  `}(e,t)),s}(e,t,s))).join("\n"),o=t.texShape,l=RR(),u=function(e){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${e.texture2D}(textureSampler, uv).r;\n    }\n  `}(l);let c,h,p=function(e){return`${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFs} vec2 resultUV;\n    ${e.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${e.defineSpecialNaN}\n    ${e.defineSpecialInf}\n    ${e.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${ZR}\n    ${QR}\n    ${eD}\n  `}(l);return t.isPacked?(c=function(e,t){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];return 1===n[0]?`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${n[1]}.0);\n      }\n    `:1===n[1]?`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${n[0]}.0);\n      }\n    `:`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      return 2 * (resTexRC.x * ${n[1]} + resTexRC.y);\n    }\n  `}(0,t);case 2:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(re(e,t))return`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${n[0]}, ${n[1]}));\n      }\n    `;const s=Math.ceil(e[1]/2);return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(e,t);case 3:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],s=Math.ceil(e[2]/2),r=s*Math.ceil(e[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      int b = index / ${r};\n      index -= b * ${r};\n\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(e,t);default:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],s=Math.ceil(e[e.length-1]/2),r=s*Math.ceil(e[e.length-2]/2);let a=r,i="",o="b, r, c";for(let t=2;t<e.length-1;t++)a*=e[e.length-t-1],i=`\n      int b${t} = index / ${a};\n      index -= b${t} * ${a};\n    `+i,o=`b${t}, `+o;return`\n    ivec${e.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      ${i}\n\n      int b = index / ${r};\n      index -= b * ${r};\n\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec${e.length}(${o});\n    }\n  `}(e,t)}}(t.logicalShape,o),h=function(e){return`\n    void setOutput(vec4 val) {\n      ${e.output} = val;\n    }\n  `}(l)):(c=function(e,t){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return 1===(n=t)[0]?`\n      int getOutputCoords() {\n        return int(resultUV.x * ${n[1]}.0);\n      }\n    `:1===n[1]?`\n      int getOutputCoords() {\n        return int(resultUV.y * ${n[0]}.0);\n      }\n    `:`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      return resTexRC.x * ${n[1]} + resTexRC.y;\n    }\n  `;case 2:return function(e,t){return re(e,t)?`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `:1===e[1]?`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `:1===e[0]?`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `:`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${e[1]};\n      int c = index - r * ${e[1]};\n      return ivec2(r, c);\n    }\n  `}(e,t);case 3:return function(e,t){const n=DR(["r","c","d"],e);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${n}\n      return ivec3(r, c, d);\n    }\n  `}(e,t);case 4:return function(e,t){const n=DR(["r","c","d","d2"],e);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${n}\n      return ivec4(r, c, d, d2);\n    }\n  `}(e,t);case 5:return function(e,t){const n=DR(["r","c","d","d2","d3"],e);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(e,t);case 6:return function(e,t){const n=DR(["r","c","d","d2","d3","d4"],e);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(e,t);default:throw new Error(`${e.length}-D output sampling is not yet supported`)}var n}(t.logicalShape,o),h=function(e){return`\n    void setOutput(float val) {\n      ${e.output} = vec4(val, 0, 0, 0);\n    }\n  `}(l)),s&&(p+=tD),[p,u,h,a,c,i,n].join("\n")}function YR(e){const t=e.shapeInfo.logicalShape;switch(t.length){case 0:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1);if(e.shapeInfo.isUniform)return`float ${n}() {return ${t};}`;const[s,r]=e.shapeInfo.texShape;if(1===s&&1===r)return`\n      float ${n}() {\n        return sampleTexture(${t}, halfCR);\n      }\n    `;const[a,i]=e.shapeInfo.texShape;return`\n    float ${n}() {\n      vec2 uv = uvFromFlat(${a}, ${i}, ${nD(t)});\n      return sampleTexture(${t}, uv);\n    }\n  `}(e);case 1:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1);if(e.shapeInfo.isUniform)return`\n      float ${n}(int index) {\n        ${sD(e)}\n      }\n    `;const s=e.shapeInfo.texShape,r=s[0],a=s[1];if(1===a&&1===r)return`\n      float ${n}(int index) {\n        return sampleTexture(${t}, halfCR);\n      }\n    `;const i=nD(t);return 1===a?`\n      float ${n}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${r}.0);\n        return sampleTexture(${t}, uv);\n      }\n    `:1===r?`\n      float ${n}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${a}.0, 0.5);\n        return sampleTexture(${t}, uv);\n      }\n    `:`\n    float ${n}(int index) {\n      vec2 uv = uvFromFlat(${r}, ${a}, index + ${i});\n      return sampleTexture(${t}, uv);\n    }\n  `}(e);case 2:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=e.shapeInfo.texShape;if(null!=r&&re(t,r)){const e=r[0];return`\n    float ${s}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${r[1]}.0, ${e}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `}const{newShape:a,keptDims:i}=de(t),o=a;if(o.length<t.length){const t=["row","col"];return`\n      ${YR(aD(e,o))}\n      float ${s}(int row, int col) {\n        return ${s}(${iD(t,i)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${t[1]}, 1)));\n        ${sD(e)}\n      }\n    `;const l=r[0],u=r[1],c=nD(n);return 1===u?`\n    float ${s}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${t[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${l}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `:1===l?`\n    float ${s}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${t[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${u}.0, 0.5);\n      return sampleTexture(${n}, uv);\n    }\n  `:`\n  float ${s}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${t[1]} + col + ${c};\n    vec2 uv = uvFromFlat(${l}, ${u}, index);\n    return sampleTexture(${n}, uv);\n  }\n`}(e);case 3:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=t[1]*t[2],a=t[2],{newShape:i,keptDims:o}=de(t),l=i;if(l.length<t.length){const t=["row","col","depth"];return`\n        ${YR(aD(e,l))}\n        float ${s}(int row, int col, int depth) {\n          return ${s}(${iD(t,o)});\n        }\n      `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${r}, ${a}, 1)));\n        ${sD(e)}\n      }\n    `;const u=e.shapeInfo.texShape,c=u[0],h=u[1],p=e.shapeInfo.flatOffset;if(h===r&&null==p)return`\n        float ${s}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${a}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${h}.0, ${c}.0);\n          return sampleTexture(${n}, uv);\n        }\n      `;if(h===a&&null==p)return`\n    float ${s}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${t[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${h}.0, ${c}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;return`\n      float ${s}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${r} + col * ${a} + depth + ${nD(n)};\n        vec2 uv = uvFromFlat(${c}, ${h}, index);\n        return sampleTexture(${n}, uv);\n      }\n  `}(e);case 4:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=t[3],a=t[2]*r,i=t[1]*a,{newShape:o,keptDims:l}=de(t);if(o.length<t.length){const t=["row","col","depth","depth2"];return`\n      ${YR(aD(e,o))}\n      float ${s}(int row, int col, int depth, int depth2) {\n        return ${s}(${iD(t,l)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${i}, ${a}, ${r}, 1)));\n        ${sD(e)}\n      }\n    `;const u=e.shapeInfo.flatOffset,c=e.shapeInfo.texShape,h=c[0],p=c[1];if(p===i&&null==u)return`\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${a}, ${r}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(p===r&&null==u)return`\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${t[1]*t[2]}, ${t[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;return`\n    float ${s}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${a} +\n          depth * ${r} + depth2;\n      vec2 uv = uvFromFlat(${h}, ${p}, index + ${nD(n)});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 5:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=t[4],a=t[3]*r,i=t[2]*a,o=t[1]*i,{newShape:l,keptDims:u}=de(t);if(l.length<t.length){const t=["row","col","depth","depth2","depth3"];return`\n      ${YR(aD(e,l))}\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        return ${s}(${iD(t,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${o}, ${i}, ${a}, ${r})) +\n          depth3;\n        ${sD(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,p=h[0],d=h[1];if(d===o&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${i}, ${a}, ${r}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(d===r&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;return`\n    float ${s}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${i} + depth * ${a} +\n          depth2 * ${r} + depth3 + ${nD(n)};\n      vec2 uv = uvFromFlat(${p}, ${d}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 6:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:r,keptDims:a}=de(t);if(r.length<t.length){const t=["row","col","depth","depth2","depth3","depth4"];return`\n      ${YR(aD(e,r))}\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${s}(${iD(t,a)});\n      }\n    `}const i=t[5],o=t[4]*i,l=t[3]*o,u=t[2]*l,c=t[1]*u;if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${u}, ${l}, ${o})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${i}, 1)));\n        ${sD(e)}\n      }\n    `;const h=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,d=p[0],f=p[1];if(f===c&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${u}, ${l}, ${o}, ${i})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===i&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;return`\n    float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${u} + depth * ${l} +\n          depth2 * ${o} + depth3 * ${i} + depth4 + ${nD(n)};\n      vec2 uv = uvFromFlat(${d}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);default:throw new Error(`${t.length}-D input sampling is not yet supported`)}}function JR(e){switch(e.shapeInfo.logicalShape.length){case 0:return function(e){const t=e.name;return`\n    vec4 ${"get"+t.charAt(0).toUpperCase()+t.slice(1)}() {\n      return ${RR().texture2D}(${t}, halfCR);\n    }\n  `}(e);case 1:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1),s=e.shapeInfo.texShape,r=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)],a=RR();return`\n    vec4 ${n}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${r[0]}, ${r[1]}, index);\n      return ${a.texture2D}(${t}, uv);\n    }\n  `}(e);case 2:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=e.shapeInfo.texShape,a=r[0],i=r[1],o=RR();if(null!=r&&re(t,r))return`\n      vec4 ${s}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${i}.0, ${a}.0);\n\n        return ${o.texture2D}(${n}, uv);\n      }\n    `;const l=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];return`\n    vec4 ${s}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${Math.ceil(t[1]/2)}, ${l[0]}, ${l[1]}, row, col);\n      return ${o.texture2D}(${n}, uv);\n    }\n  `}(e);case 3:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=e.shapeInfo.texShape,a=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];if(1===t[0]){const n=[1,2],r=["b","row","col"];return`\n        ${JR(aD(e,t.slice(1)))}\n        vec4 ${s}(int b, int row, int col) {\n          return ${s}(${iD(r,n)});\n        }\n      `}const i=a[0],o=a[1],l=Math.ceil(t[2]/2);return`\n    vec4 ${s}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${i}, ${o}, ${l*Math.ceil(t[1]/2)}, ${l}, b, row, col);\n      return ${RR().texture2D}(${n}, uv);\n    }\n  `}(e);default:return function(e){const t=e.shapeInfo.logicalShape,n=t.length,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=e.shapeInfo.texShape,i=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],o=i[0],l=i[1],u=Math.ceil(t[n-1]/2);let c=u*Math.ceil(t[n-2]/2),h="int b, int row, int col",p=`b * ${c} + (row / 2) * ${u} + (col / 2)`;for(let e=2;e<n-1;e++)h=`int b${e}, `+h,c*=t[n-e-1],p=`b${e} * ${c} + `+p;return`\n    vec4 ${r}(${h}) {\n      int index = ${p};\n      int texR = index / ${l};\n      int texC = index - texR * ${l};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${l}, ${o});\n      return ${RR().texture2D}(${s}, uv);\n    }\n  `}(e)}}const ZR="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",QR="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",eD="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",tD="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function nD(e){return`offset${e}`}function sD(e){const t=e.name,n=ne(e.shapeInfo.logicalShape);return n<2?`return ${t};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function rD(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function aD(e,t){const n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function iD(e,t){return t.map((t=>e[t])).join(", ")}function oD(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach(((e,n)=>{const s=e.logicalShape,r=t[n],a=r.shape;if(!re(s,a))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${s} and ${a} must match`);if(e.isUniform&&r.isUniform)return;const i=e.texShape,o=r.isUniform?null:r.texData.texShape;if(!re(i,o))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${o} must match`)}))}const{addImpl:lD,bincountImpl:uD,bincountReduceImpl:cD,ceilImpl:hD,concatImpl:pD,expImpl:dD,expm1Impl:fD,floorImpl:mD,gatherV2Impl:gD,greaterImpl:yD,lessImpl:bD,linSpaceImpl:xD,logImpl:wD,maxImpl:kD,maximumImpl:vD,minimumImpl:ID,multiplyImpl:ND,negImpl:SD,prodImpl:CD,rangeImpl:$D,rsqrtImpl:TD,simpleAbsImpl:ED,sliceImpl:AD,stridedSliceImpl:RD,subImpl:DD,tileImpl:FD,topKImpl:_D,transposeImpl:OD,uniqueImpl:MD}=V;function LD(e,t){return["x","y","z","w","u","v"].slice(0,t).map((t=>`${e}.${t}`))}function zD(e,t){return 1===t?[e]:LD(e,t)}class PD{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e;const t=e.length;if(0===t)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const n=zD("rc",t),s=rD(t),r=function(e,t,n){if(1===e)return`rc > ${t[0]}`;let s="";for(let r=e-2;r<e;r++)s+=`${n[r]} >= ${t[r]}`,r<e-1&&(s+="||");return s}(t,e,n),a=function(e,t,n,s){if(1===e)return"";const r=s.slice(-2);return`\n    int r = ${r[0]};\n    int c = ${r[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${t};\n    bool rEdge = rp1 >= ${n};\n  `}(t,e[e.length-1],e[e.length-2],n),i=function(e,t){const n=e.length,s=function(e,t){const n=[];for(let s=0;s<=1;s++)for(let r=0;r<=1;r++){let a=`${0===s?"r":"rp1"}, ${0===r?"c":"cp1"}`;for(let n=2;n<e;n++)a=`${t[t.length-1-n]},`+a;n.push(a)}return n}(n,t);return 1===n?`getA(rc),\n            rc + 1 >= ${e[0]} ? 0. : getA(rc + 1),\n            0, 0`:`getA(${s[0]}),\n          cEdge ? 0. : getA(${s[1]}),\n          rEdge ? 0. : getA(${s[2]}),\n          rEdge || cEdge ? 0. : getA(${s[3]})`}(e,n);this.userCode=`\n        void main() {\n          ${s} rc = getOutputCoords();\n\n          if(${r}) {\n            setOutput(vec4(0));\n          } else {\n            ${a}\n\n            setOutput(vec4(${i}));\n          }\n        }\n      `}}}class BD{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;let n="";for(let e=0;e<4;e++){let t="thisRC = rc;";e%2==1&&(t+="thisRC.z += 1;"),e>1&&(t+="thisRC.y += 1;"),n+=`\n        ${t}\n        ${e>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${e}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${e>0?"}":""}\n      `}var s;this.userCode=`\n      ${s=t,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${DR(["r","c","d"],s)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${FR(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${e[1]};\n        int cols = ${e[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class WD{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(e,t,n){const s=UD(t,n),r=GD(e,s,n);r in this.freeTextures||(this.freeTextures[r]=[]),r in this.usedTextures||(this.usedTextures[r]=[]);const a=VD(e,s,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[r].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=a,this.log();const e=this.freeTextures[r].shift();return this.usedTextures[r].push(e),e}let i;return s===tR.PACKED_2X2_FLOAT32?i=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):s===tR.PACKED_2X2_FLOAT16?i=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):s===tR.UNPACKED_FLOAT32?i=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):s===tR.UNPACKED_FLOAT16?i=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):s===tR.PACKED_4X1_UNSIGNED_BYTE&&(i=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[r].push(i),this.numUsedTextures++,this._numBytesAllocated+=a,this.log(),i}releaseTexture(e,t,n,s){if(null==this.freeTextures)return;const r=UD(n,s),a=GD(t,r,s);a in this.freeTextures||(this.freeTextures[a]=[]);const i=VD(t,r,this.gpgpu.gl,this.gpgpu.textureConfig,s),o=Be().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==o&&this._numBytesAllocated>o?(this.gpgpu.deleteMatrixTexture(e),this._numBytesAllocated-=i):(this.freeTextures[a].push(e),this.numFreeTextures++,this._numBytesFree+=i),this.numUsedTextures--;const l=this.usedTextures[a],u=l.indexOf(e);if(u<0)throw new Error("Cannot release a texture that was never provided by this texture manager");l.splice(u,1),this.log()}log(){if(!this.logEnabled)return;const e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);const t=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e)}));for(const e in this.usedTextures)this.usedTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function VD(e,t,n,s,r){const a=function(e,t){switch(e){case tR.PACKED_2X2_FLOAT32:return HR(t);case tR.PACKED_2X2_FLOAT16:return jR(t);case tR.UNPACKED_FLOAT32:return VR(t);case tR.UNPACKED_FLOAT16:return UR(t);case tR.PACKED_4X1_UNSIGNED_BYTE:return GR(t);default:throw new Error(`Unknown physical texture type ${e}`)}}(t,s);let i;if(r){const[t,n]=rR(e[0],e[1]);i=t*n}else{const[t,n]=nR(e[0],e[1]);i=t*n}const o=function(e,t){const n=e;if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===n.RGBA16F)return 8;throw new Error(`Unknown internal format ${t}`)}(n,a);return i*o}function UD(e,t){if(e===eR.UPLOAD)return tR.PACKED_2X2_FLOAT32;if(e===eR.RENDER||null==e)return function(e){return Be().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?tR.PACKED_2X2_FLOAT32:tR.UNPACKED_FLOAT32:e?tR.PACKED_2X2_FLOAT16:tR.UNPACKED_FLOAT16}(t);if(e===eR.DOWNLOAD||e===eR.PIXELS)return tR.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${e}`)}function GD(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}class HD{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.userCode=`\n      float unaryOperation(float x) {\n        ${t}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const jD="if (isnan(x)) return x;",qD="return x;",KD="return abs(x);",XD="return (x >= 0.0) ? x : (exp(x) - 1.0);",YD=jD+"\n  return (x < 0.0) ? 0.0 : x;\n",JD=jD+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",ZD="return x;",QD="return x;",eF="\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n",tF="\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",nF="\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n";class sF{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${t}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class rF{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e;const t=e.length,n=zD("rc",t),s=rD(t),r=function(e,t){if(1===e)return"rc";let n="";for(let s=0;s<e;s++)n+=t[s],s<e-1&&(n+=",");return n}(t,n),a=n.slice(-2),i=t<=1?"rc":`vec2(${a.join(",")})`;this.userCode=`\n      void main() {\n        ${s} rc = getOutputCoords();\n        vec4 packedInput = getA(${r});\n\n        setOutput(getChannel(packedInput, ${i}));\n      }\n    `}}const aF=vh,iF={};class oF extends G{constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.warnedAboutMemory=!1,this.warnedAboutCPUBackend=!1,this.pendingDeletes=0,this.disposed=!1,!Be().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");if(null==e){const e=ZA(Be().getNumber("WEBGL_VERSION"));this.binaryCache=((t=Be().getNumber("WEBGL_VERSION"))in iF||(iF[t]={}),iF[t]),this.gpgpu=new qR(e),this.canvas=e.canvas,this.gpgpuCreatedLocally=!0}else this.gpgpu=e,this.binaryCache={},this.gpgpuCreatedLocally=!1,this.canvas=e.gl.canvas;var t;this.textureManager=new WD(this.gpgpu),this.numMBBeforeWarning=null==Be().global.screen?1024:Be().global.screen.height*Be().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new U(this,io())}numDataIds(){return this.texData.numDataIds()+(this.cpuBackend?this.cpuBackend.numDataIds():0)-this.pendingDeletes}write(e,t,n){if((Be().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||Be().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const s={};return this.texData.set(s,{shape:t,dtype:n,values:e,usage:eR.UPLOAD,refCount:1,complexParentRefCount:0}),s}incRef(e){this.texData.get(e).refCount++}decRef(e){this.texData.has(e)&&this.texData.get(e).refCount--}decComplexRef(e){if(this.texData.has(e)){const t=this.texData.get(e);t.complexParentRefCount>0&&t.refCount--}}move(e,t,n,s){if(Be().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===s)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:n,dtype:s,values:t,usage:eR.UPLOAD,refCount:1,complexParentRefCount:0})}disposeIntermediateTensorInfo(e){const t=e.dataId;if(this.texData.has(t)){const e=this.texData.get(t);e.refCount--,e.refCount<1&&this.disposeData(t)}}readSync(e){const t=this.texData.get(e),{values:n,dtype:s,complexTensorInfos:r,slice:a,shape:i,isPacked:o}=t;if(null!=a){let t;t=o?new sF(i,ZD):new HD(i,ZD);const n=this.runWebGLProgram(t,[{dataId:e,shape:i,dtype:s}],s),r=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),r}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===s)return n;const l=null!=this.activeTimers;let u,c;return l&&(u=hr()),c="complex64"===s?yd(this.readSync(r.real.dataId),this.readSync(r.imag.dataId)):this.getValuesFromTexture(e),l&&(this.downloadWaitMs+=hr()-u),this.convertAndCacheOnCPU(e,c)}async read(e){if(this.pendingRead.has(e)){const t=this.pendingRead.get(e);return new Promise((e=>t.push(e)))}const t=this.texData.get(e),{values:n,shape:s,slice:r,dtype:a,complexTensorInfos:i,isPacked:o}=t;if(null!=r){let t;t=o?new sF(s,ZD):new HD(s,ZD);const n=this.runWebGLProgram(t,[{dataId:e,shape:s,dtype:a}],a),r=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),r}if(null!=n)return this.convertAndCacheOnCPU(e);if(!Be().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===Be().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let l,u,c=null;if("complex64"!==a&&Be().get("WEBGL_BUFFER_SUPPORTED")){l=this.decode(e);const t=this.texData.get(l.dataId);c=this.gpgpu.createBufferFromTexture(t.texture,...sR(s))}if(this.pendingRead.set(e,[]),"complex64"!==a&&await this.gpgpu.createAndWaitForFence(),"complex64"===a){const e=await Promise.all([this.read(i.real.dataId),this.read(i.imag.dataId)]);u=yd(e[0],e[1])}else if(null==c)u=this.getValuesFromTexture(e);else{const e=ne(s);u=this.gpgpu.downloadFloat32MatrixFromBuffer(c,e)}null!=l&&this.disposeIntermediateTensorInfo(l);const h=this.convertAndCacheOnCPU(e,u),p=this.pendingRead.get(e);return this.pendingRead.delete(e),p.forEach((e=>e(h))),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e),this.pendingDeletes--),h}bufferSync(e){const t=this.readSync(e.dataId);let n=t;if("string"===e.dtype)try{n=t.map((e=>fr(e)))}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return Ga(e.shape,e.dtype,n)}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){const n=e[t];if(!uR(n)){if(Be().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(e){const{shape:t,dtype:n,isPacked:s}=this.texData.get(e),r=ne(t);if(Be().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(e),s=this.texData.get(n.dataId),a=this.gpgpu.downloadMatrixFromPackedTexture(s.texture,...sR(t)).subarray(0,r);return this.disposeIntermediateTensorInfo(n),a}const a=Be().getBool("WEBGL_PACK")&&!0===s,i=a?kR(t):t,o=a?new zR(i):new LR(i),l=this.runWebGLProgram(o,[{shape:i,dtype:n,dataId:e}],"float32"),u=this.texData.get(l.dataId),c=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(u.texture,u.texShape[0],u.texShape[1]).subarray(0,r);return this.disposeIntermediateTensorInfo(l),c}async time(e){const t=this.activeTimers,n=[];let s=!1;null==this.programTimersStack?(this.programTimersStack=n,s=!0):this.activeTimers.push(n),this.activeTimers=n,e();const r=te(this.activeTimers.map((e=>e.query))).filter((e=>null!=e)),a=te(this.activeTimers.map((e=>e.name))).filter((e=>null!=e));this.activeTimers=t,s&&(this.programTimersStack=null);const i={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};if(Be().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const e=await Promise.all(r);i.kernelMs=X(e),i.getExtraProfileInfo=()=>e.map(((e,t)=>({name:a[t],ms:e}))).map((e=>`${e.name}: ${e.ms}`)).join(", ")}else i.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,i}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return Be().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:hr(),endMs:null}}endTimer(e){return Be().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=hr(),e)}async getQueryTime(e){if(Be().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);const t=e;return t.endMs-t.startMs}disposeData(e){if(this.pendingDisposal.has(e))return;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),void this.pendingDeletes++;if(!this.texData.has(e))return;if(this.texData.get(e).complexParentRefCount>0)return void this.texData.get(e).refCount--;this.releaseGPUData(e);const{complexTensorInfos:t}=this.texData.get(e);null!=t&&(this.texData.get(t.real.dataId).complexParentRefCount--,this.disposeIntermediateTensorInfo(t.real),this.texData.get(t.imag.dataId).complexParentRefCount--,this.disposeIntermediateTensorInfo(t.imag)),this.texData.delete(e)}releaseGPUData(e){const{texture:t,dtype:n,texShape:s,usage:r,isPacked:a,slice:i}=this.texData.get(e),o=i&&i.origDataId||e,l=this.dataRefCount.get(o);l>1?this.dataRefCount.set(o,l-1):(this.dataRefCount.delete(o),null!=t&&(this.numBytesInGPU-=this.computeBytes(s,n),this.textureManager.releaseTexture(t,s,r,a)));const u=this.texData.get(e);u.texture=null,u.texShape=null,u.isPacked=!1,u.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture}getDataInfo(e){return this.texData.get(e)}getCPUBackend(){return Be().getBool("WEBGL_CPU_FORWARD")?(null==this.cpuBackend&&(this.cpuBackend=io().findBackend("cpu")),this.cpuBackend):null}shouldExecuteOnCPU(e,t=128){const n=this.getCPUBackend();return Be().getBool("IS_TEST")||this.warnedAboutCPUBackend||null!=n||(console.warn("Your application contains ops that are small enough to be executed on the CPU backend, however the CPU backend cannot be found. Consider importing the CPU backend (@tensorflow/tfjs-backend-cpu) for better performance."),this.warnedAboutCPUBackend=!0),null!=n&&e.every((e=>null==this.texData.get(e.dataId).texture&&ne(e.shape)<t))}getGPGPUContext(){return this.gpgpu}where(e){md("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const t=e.dataSync();return aF(e.shape,t)}packedUnaryOp(e,t,n){const s=new sF(e.shape,t);return this.compileAndRun(s,[e],n)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const t=ED(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if(Be().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,KD,e.dtype);const t=new HD(e.shape,KD);return this.compileAndRun(t,[e])}makeTensorInfo(e,t,n){let s;if("string"===t&&null!=n&&n.length>0&&ve(n[0])){const r=n.map((e=>dr(e)));s=this.write(r,e,t)}else s=this.write(n,e,t);return this.texData.get(s).usage=null,{dataId:s,shape:e,dtype:t}}makeOutput(e,t,n){const{dataId:s}=this.makeTensorInfo(e,t,n);return io().makeTensorFromDataId(s,e,t,this)}unpackTensor(e){const t=new rF(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){const t=new PD(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){const n=[xR(e.shape),...wR(e.shape)],s={dtype:e.dtype,shape:n,dataId:e.dataId},r=[xR(t),...wR(t)],a=new BD(r,n),i=this.runWebGLProgram(a,[s],e.dtype,null,!0);return{dataId:i.dataId,shape:t,dtype:i.dtype}}decode(e){const t=this.texData.get(e),{isPacked:n,shape:s,dtype:r}=t,a=kR(s);let i;return i=n?new MR(a):new OR(a),{dtype:r,shape:s,dataId:this.runWebGLProgram(i,[{shape:a,dtype:r,dataId:e}],r,null,!0).dataId}}runWebGLProgram(e,t,n,s,r=!1){const a=this.makeTensorInfo(e.outputShape,n),i=this.texData.get(a.dataId);if(e.packedOutput&&(i.isPacked=!0),e.outPackingScheme===QA.DENSE){const t=sR(e.outputShape);i.texShape=t.map((e=>2*e))}if(null!=e.outTexUsage&&(i.usage=e.outTexUsage),0===ne(a.shape))return i.values=fe(a.dtype,0),a;const o=[],l=t.map((t=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(t.dataId);if(null==n.texture){if(!e.packedInputs&&ne(t.shape)<=Be().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:n.values};e.packedInputs&&(n.isPacked=!0,n.shape=t.shape)}else if(!!n.isPacked!=!!e.packedInputs)t=n.isPacked?this.unpackTensor(t):this.packTensor(t),o.push(t),n=this.texData.get(t.dataId);else if(n.isPacked&&!IR(n.shape,t.shape)){const e=t,s=t.shape;t.shape=n.shape,t=this.packedReshape(t,s),o.push(t),n=this.texData.get(t.dataId),e.shape=s}return this.uploadToGPU(t.dataId),{shape:t.shape,texData:n,isUniform:!1}}));this.uploadToGPU(a.dataId);const u={shape:a.shape,texData:i,isUniform:!1},c=function(e,t,n){let s="";t.concat(n).forEach((e=>{const t=null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0,n=e.isUniform?"uniform":e.texData.texShape;s+=`${e.shape}_${n}_${t}`}));const r=e.userCode;let a=e.constructor.name;return a+="_"+s+"_"+r,a}(e,l,u),h=this.getAndSaveBinary(c,(()=>function(e,t,n,s){const r=t.userCode,a=n.map(((e,n)=>{const s={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(s.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[n],shapeInfo:s}})),i=a.map((e=>e.shapeInfo)),o={logicalShape:s.shape,texShape:s.texData.texShape,isUniform:!1,isPacked:s.texData.isPacked,flatOffset:null},l=XR(a,o,r,t.packedInputs),u=e.createProgram(l);let c=null;const h=e.getUniformLocation(u,"NAN",!1);1===Be().getNumber("WEBGL_VERSION")&&(c=e.getUniformLocation(u,"INFINITY",!1));const p={};for(let n=0;n<t.variableNames.length;n++){const s=t.variableNames[n],r=!1;p[s]=e.getUniformLocation(u,s,r),p[`offset${s}`]=e.getUniformLocation(u,`offset${s}`,r)}return{program:t,source:l,webGLProgram:u,uniformLocations:p,inShapeInfos:i,outShapeInfo:o,infLoc:c,nanLoc:h}}(this.gpgpu,e,l,u))),p=null!=this.activeTimers;let d;if(p&&(d=this.startTimer()),function(e,t,n,s,r){oD(t.inShapeInfos,n),oD([t.outShapeInfo],[s]);const a=s.texData.texture,i=s.texData.texShape;s.texData.isPacked?e.setOutputPackedMatrixTexture(a,i[0],i[1]):e.setOutputMatrixTexture(a,i[0],i[1]),e.setProgram(t.webGLProgram),1===Be().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN),n.forEach(((n,s)=>{const r=t.program.variableNames[s],a=t.uniformLocations[r],i=t.uniformLocations[`offset${r}`];if(null!=a)if(n.isUniform)if(ne(n.shape)<2)e.gl.uniform1f(a,n.uniformValues[0]);else{let t=n.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(a,t)}else null!=n.texData.slice&&null!=i&&e.gl.uniform1i(i,n.texData.slice.flatOffset),e.setInputMatrixTexture(n.texData.texture,a,s)})),null!=r&&r(e,t.webGLProgram),e.executeProgram()}(this.gpgpu,h,l,u,s),o.forEach((e=>this.disposeIntermediateTensorInfo(e))),p&&(d=this.endTimer(d),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(d)})),!Be().getBool("WEBGL_LAZILY_UNPACK")&&i.isPacked&&!1===r){const e=this.unpackTensor(a);return this.disposeIntermediateTensorInfo(a),e}return a}compileAndRun(e,t,n,s,r=!1){n=n||t[0].dtype;const a=this.runWebGLProgram(e,t,n,s,r);return io().makeTensorFromDataId(a.dataId,a.shape,a.dtype)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){this.disposed||(Be().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach((e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]})),this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=uo((()=>{if(!Be().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=Be().getBool("DEBUG");Be().set("DEBUG",!1);const t=this.abs(Lo(1e-8)).dataSync()[0];if(Be().set("DEBUG",e),t>0)return 32}return 16}))),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const t=this.texData.get(e),{shape:n,dtype:s,values:r,texture:a,usage:i,isPacked:o}=t;if(null!=a)return;const l=null!=this.activeTimers;let u;l&&(u=hr());let c=t.texShape;if(null==c&&(c=function(e,t=!1){let n=Be().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t&&(n*=2,1===(e=e.map(((t,n)=>n>=e.length-2?K(e[n]):e[n]))).length&&(e=[2,e[0]])),2!==e.length){const t=de(e);e=t.newShape}let s=ne(e);if(e.length<=1&&s<=n)return[1,s];if(2===e.length&&e[0]<=n&&e[1]<=n)return e;if(3===e.length&&e[0]*e[1]<=n&&e[2]<=n)return[e[0]*e[1],e[2]];if(3===e.length&&e[0]<=n&&e[1]*e[2]<=n)return[e[0],e[1]*e[2]];if(4===e.length&&e[0]*e[1]*e[2]<=n&&e[3]<=n)return[e[0]*e[1]*e[2],e[3]];if(4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n)return[e[0],e[1]*e[2]*e[3]];if(t){const t=xR(e);let n=2,r=2;return e.length&&([n,r]=wR(e)),s=t*(n/2)*(r/2),oe(s).map((e=>2*e))}return oe(s)}(n,o),t.texShape=c),null!=r){const e=kR(n);let a,i=c[1],h=c[0];const p=r instanceof Uint8Array;o?([i,h]=rR(c[0],c[1]),a=new BR(e,[h,i],p)):a=new PR(e,[h,i],p);const d=this.makeTensorInfo([h,i],s);this.texData.get(d.dataId).usage=p?eR.PIXELS:eR.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(d.dataId),i,h,r);const f=!0,m=this.runWebGLProgram(a,[d],s,null,f),g=this.texData.get(m.dataId);t.texture=g.texture,t.texShape=g.texShape,t.isPacked=g.isPacked,t.usage=g.usage,this.disposeIntermediateTensorInfo(d),this.texData.delete(m.dataId),t.values=null,l&&(this.uploadWaitMs+=hr()-u)}else{const e=this.acquireTexture(c,i,s,o);t.texture=e}}convertAndCacheOnCPU(e,t){const n=this.texData.get(e),{dtype:s}=n;return this.releaseGPUData(e),null!=t&&(n.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){const n="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<n.length;++t)n[t]=Math.round(e[t]);return n}throw new Error(`Unknown dtype ${t}`)}(t,s)),n.values}acquireTexture(e,t,n,s){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,s)}computeBytes(e,t){return e[0]*e[1]*we(t)}}Br()&&wo("webgl",(()=>new oF),2);const lF="\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n";class uF{constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=Ko(t,n),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}const cF="\n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n";class hF{constructor(e,t,n,s=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=Ko(t,n);const r=this.outputShape.length;let a="";if(s)if(0===r||1===ne(this.outputShape))a="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else if(a=`\n          ${rD(r)} coords = getOutputCoords();\n        `,1===r)a+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const e=zD("coords",r);a+=`\n            bool nextRowOutOfBounds =\n              (${e[r-2]} + 1) >= ${this.outputShape[r-2]};\n            bool nextColOutOfBounds =\n              (${e[r-1]} + 1) >= ${this.outputShape[r-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${e}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${a}\n\n        setOutput(result);\n      }\n    `}}function pF(e){const{inputs:t,backend:n}=e,{x:s}=t;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const dF={kernelName:nn,backendName:"webgl",kernelFunc:pF};function fF(e){const{inputs:t,backend:n}=e,{real:s,imag:r}=t,a=n.makeTensorInfo(s.shape,"complex64"),i=n.texData.get(a.dataId),o=pF({inputs:{x:s},backend:n});n.texData.get(o.dataId).complexParentRefCount++;const l=pF({inputs:{x:r},backend:n});return n.texData.get(l.dataId).complexParentRefCount++,i.complexTensorInfos={real:o,imag:l},a}const mF={kernelName:gt,backendName:"webgl",kernelFunc:fF},gF="return (a < 0.) ? b * a : a;",yF="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",bF={kernelName:un,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{alpha:a}=s,i=n.makeTensorInfo([],"float32",ur(a,"float32")),o=Be().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new hF(yF,r.shape,i.shape):new uF(gF,r.shape,i.shape),l=n.runWebGLProgram(o,[r,i],r.dtype);return n.disposeIntermediateTensorInfo(i),l}},xF="return (a < 0.) ? b * a : a;",wF="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",kF={kernelName:jn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s,alpha:r}=t,a=Be().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new hF(wF,s.shape,r.shape):new uF(xF,s.shape,r.shape);return n.runWebGLProgram(a,[s,r],s.dtype)}},vF="if (isnan(x)) return x;";function IF({opSnippet:e,packedOpSnippet:t,cpuKernelImpl:n,dtype:s}){return({inputs:r,backend:a})=>{const{x:i}=r,o=a,l=s||i.dtype;if(o.shouldExecuteOnCPU([i])&&null!=n){const e=o.texData.get(i.dataId),t=n(e.values,l);return o.makeTensorInfo(i.shape,l,t)}let u;return u=Be().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new sF(i.shape,t):new HD(i.shape,e),o.runWebGLProgram(u,[i],l)}}function NF({opSnippet:e,packedOpSnippet:t,checkOutOfBounds:n=!1,supportsComplex:s=!1,cpuKernelImpl:r,dtype:a}){return({inputs:i,backend:o})=>{const{a:l,b:u}=i,c=o;if(s&&"complex64"===l.dtype){const t=c.texData.get(l.dataId),n=c.texData.get(u.dataId),[s,r]=[[t.complexTensorInfos.real,n.complexTensorInfos.real],[t.complexTensorInfos.imag,n.complexTensorInfos.imag]].map((t=>{const[n,s]=t,r={dataId:n.dataId,dtype:n.dtype,shape:l.shape},a={dataId:s.dataId,dtype:s.dtype,shape:u.shape},i=new uF(e,l.shape,u.shape);return c.runWebGLProgram(i,[r,a],$r(n.dtype,s.dtype))})),a=fF({inputs:{real:s,imag:r},backend:c});return c.disposeIntermediateTensorInfo(s),c.disposeIntermediateTensorInfo(r),a}const h=a||$r(l.dtype,u.dtype);if(c.shouldExecuteOnCPU([l,u])&&null!=r){const e=c.texData.get(l.dataId),t=c.texData.get(u.dataId),[n,s]=r(l.shape,u.shape,e.values,t.values,h),a=c.makeTensorInfo(s,h);return c.texData.get(a.dataId).values=n,a}let p;return p=Be().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new hF(t,l.shape,u.shape,n):new uF(e,l.shape,u.shape),c.runWebGLProgram(p,[l,u],h)}}function SF(e,t=!1){if("linear"===e)return t?QD:qD;if("relu"===e)return t?tF:YD;if("elu"===e)return t?eF:XD;if("relu6"===e)return t?nF:JD;if("prelu"===e)return t?wF:xF;if("leakyrelu"===e)return t?yF:gF;throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class CF{constructor(e,t,n,s=!1,r=!1,a=!1,i=null,o=!1,l=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n;const u=s?e[1]:e[2],c=Math.ceil(u/2),h=s?"i * 2, rc.y":"rc.y, i * 2",p=r?"rc.z, i * 2":"i * 2, rc.z",d=s?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],f=r?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let m="",g="";i&&(m=o?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${i}\n        }`:l?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${i}\n        }`:`vec4 activation(vec4 x) {\n          ${i}\n        }`,g="result = activation(result);");const y=a?"result += getBiasAtOutCoords();":"";a&&this.variableNames.push("bias"),o&&this.variableNames.push("preluActivationWeights"),l&&this.variableNames.push("leakyreluAlpha");let b="rc.x",x="rc.x";e[0]<t[0]?b=`int(min(float(rc.x), ${e[0]-1}.))`:t[0]<e[0]&&(x=`int(min(float(rc.x), ${t[0]-1}.))`),this.userCode=`\n      ${m}\n\n      const float sharedDimension = ${c}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${c}; i++) {\n          int batchA = ${b};\n          int batchB = ${x};\n          vec4 a = getMatrixA(batchA, ${h});\n          vec4 b = getMatrixB(batchB, ${p});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${d[0]} * ${f[0]});\n          result += (${d[1]} * ${f[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${y}\n\n        ${g}\n\n        setOutput(result);\n      }\n    `}}const $F={REAL:"return areal * breal - aimag * bimag;",IMAG:"return areal * bimag + aimag * breal;"};class TF{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=Ko(t,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const EF="return a * b;";function AF(e){const{inputs:t,backend:n}=e,{a:s,b:r}=t,a=$r(s.dtype,r.dtype);if("complex64"===s.dtype){const e=n.texData.get(s.dataId),t=n.texData.get(r.dataId),a=new TF($F.REAL,s.shape,r.shape),i=new TF($F.IMAG,s.shape,r.shape),o=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:s.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:s.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:r.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:r.shape}],l=n.runWebGLProgram(a,o,"float32"),u=n.runWebGLProgram(i,o,"float32"),c=fF({inputs:{real:l,imag:u},backend:n});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),c}if(n.shouldExecuteOnCPU([s,r])){const e=n.texData.get(s.dataId),t=n.texData.get(r.dataId),[i,o]=ND(s.shape,r.shape,e.values,t.values,a),l=n.makeTensorInfo(o,a);return n.texData.get(l.dataId).values=i,l}let i;return i=Be().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new hF(EF,s.shape,r.shape):new uF(EF,s.shape,r.shape),n.runWebGLProgram(i,[s,r],a)}const RF={kernelName:_n,backendName:"webgl",kernelFunc:AF};function DF(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{shape:a}=s,i=n,o=ne(r.shape),l=he(a,o),u=ne(l);Z(o===u,(()=>`The new shape (${l}) has ${u} elements and the old shape (${r.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`));const c=i.texData.get(r.dataId);return!c.isPacked||IR(r.shape,l)||null!==c.texture&&IR(c.shape,l)?(i.incRef(r.dataId),{dataId:r.dataId,shape:l,dtype:r.dtype}):function(e,t,n){const s=[xR(e.shape),...wR(e.shape)],r={dtype:e.dtype,shape:s,dataId:e.dataId},a=[xR(t),...wR(t)],i=new BD(a,s),o=n.runWebGLProgram(i,[r],e.dtype,null,!0);return{dataId:o.dataId,shape:t,dtype:o.dtype}}(r,l,i)}const FF={kernelName:Zn,backendName:"webgl",kernelFunc:DF};class _F{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:r,outSize:a}=e;this.outputShape=[s,a];const i=4*Math.floor(n/4),o=n%4;let l="sumValue += dot(values, ones);";if(null!=t){const e=1/t;l=`sumValue += dot(values * ${ae(e)?e.toPrecision(2):e}, ones);`}let u="";r%n>0&&(u=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${u}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===o}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${l}\n        } else if (${2===o}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${l}\n        } else if (${3===o}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}class OF{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:r,outSize:a}=e;this.outputShape=[s,a];let i="0.0",o="";"prod"===t?i="1.0":"min"===t?(i="1.0 / 1e-20",o="min"):"max"===t&&(i="-1.0 / 1e-20",o="max");let l=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?l="sumValue":"prod"===t?l="prodValue":"all"===t?l="allValue":"any"===t&&(l="anyValue");const u=4*Math.floor(n/4),c=n%4;let h=`\n      if (${"sum"===t}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===t}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${o}(values, minMaxValue);\n      }\n    `,p="vec4";"all"===t?(i="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",p="bvec4"):"any"===t&&(i="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",p="bvec4");let d="";r%n>0&&(d=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${i};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${d}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${i});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${u}; i += 4) {\n          int inIdx = inOffset + i;\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${h}\n        }\n\n        int inIdx = inOffset + ${u};\n        if (${1===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${2===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${3===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${h}\n        }\n        setOutput(${l});\n      }\n    `}}function MF(e,t,n,s){const r=function(e){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const n=t.length?t[t.length-1].outSize:e[1],s=ed(n);t.push({inSize:n,windowSize:s,outSize:Math.ceil(n/s)})}return t}(e.shape);let a=e;for(let i=0;i<r.length;i++){const{inSize:o,windowSize:l,outSize:u}=r[i];let c,h;c="mean"===n?0===i?new _F({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u},o):new _F({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u}):new OF({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u},n),h=a,a=s.runWebGLProgram(c,[a],t),h.dataId!==e.dataId&&s.disposeIntermediateTensorInfo(h)}return a}class LF{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[t[s]];this.outputShape=n,this.rank=n.length;const s=rD(this.rank),r=function(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],s=new Array(t);for(let t=0;t<e.length;t++)s[e[t]]=n[t];return s.join()}(t);this.userCode=`\n    void main() {\n      ${s} resRC = getOutputCoords();\n      setOutput(getA(${r}));\n    }\n    `}}class zF{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[t[s]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const s=rD(this.rank),r=LD("rc",this.rank),a=new Array(this.rank);for(let e=0;e<t.length;e++)a[t[e]]=r[e];const i=`vec2(${a.slice(-2).join()})`,o=`++${r[this.rank-1]} < ${n[this.rank-1]}`,l=`getChannel(getA(${a.join()}), ${i})`;this.userCode=`\n    void main() {\n      ${s} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${l};\n      if(${o}) {\n        result[1] = ${l};\n      }\n      --${r[this.rank-1]};\n      if(++${r[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${l};\n        if(${o}) {\n          result[3] = ${l};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function PF(e,t,n){const s=Be().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new zF(e.shape,t):new LF(e.shape,t);return n.runWebGLProgram(s,[e],e.dtype)}function BF(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;return function(e,t,n,s){const r=t,a=e.shape.length,i=pe(r,e.shape);let o=i;const l=Gu(o,a),u=null!=l;let c=e;u&&(c=PF(e,l,s),o=ju(o.length,a)),Uu("sum",o,a);const[h,p]=Wu(c.shape,o);let d=h;n&&(d=Vu(h,i));const f=ne(p),m=DF({inputs:{x:c},attrs:{shape:[ne(e.shape)/f,f]},backend:s}),g=MF(m,Tr(e.dtype),"sum",s),y=DF({inputs:{x:g},attrs:{shape:d},backend:s});return s.disposeIntermediateTensorInfo(m),s.disposeIntermediateTensorInfo(g),u&&s.disposeIntermediateTensorInfo(c),y}(r,a,i,n)}const WF={kernelName:ys,backendName:"webgl",kernelFunc:BF};function VF(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{perm:a}=s,i=n,o=r.shape.length,l=new Array(o);for(let e=0;e<l.length;e++)l[e]=r.shape[a[e]];let u;if(i.shouldExecuteOnCPU([r])){const e=i.texData.get(r.dataId).values,t=OD(e,r.shape,r.dtype,a,l);u=i.makeTensorInfo(l,r.dtype),i.texData.get(u.dataId).values=t}else u=PF(r,a,i);return u}const UF={kernelName:As,backendName:"webgl",kernelFunc:VF},GF=1e3;function HF({a:e,b:t,transposeA:n,transposeB:s,backend:r,bias:a=null,preluActivationWeights:i=null,leakyreluAlpha:o=0,activation:l=null}){const u=e.shape.length,c=t.shape.length,h=n?e.shape[u-2]:e.shape[u-1],p=s?t.shape[c-1]:t.shape[c-2],d=n?e.shape[u-1]:e.shape[u-2],f=s?t.shape[c-2]:t.shape[c-1],m=e.shape.slice(0,-2),g=t.shape.slice(0,-2),y=ne(m),b=ne(g);Z(u>=2&&c>=2&&(y===b||1===y||1===b),(()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${m}) and (${g}).`));const x=(y>b?e.shape.slice(0,-2):t.shape.slice(0,-2)).concat([d,f]);Z(h===p,(()=>`Error in matMul: inner shapes (${h}) and (${p}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${n} and transposeB=${s} must match.`));const w=n?[y,h,d]:[y,d,h],k=s?[b,f,p]:[b,p,f],v=DF({inputs:{x:e},backend:r,attrs:{shape:w}}),I=DF({inputs:{x:t},backend:r,attrs:{shape:k}}),N=[v,I],S=Math.max(y,b),C=n?v.shape[1]:v.shape[2],$=null!=a,T=null!=i,E="leakyrelu"===l,A=null!=l?SF(l,!0):null;let R;if((1===d||1===f)&&C>GF&&!1===($||T||E||null!=A)){let e=v,t=I;n&&(e=VF({inputs:{x:v},backend:r,attrs:{perm:[0,2,1]}}),N.push(e)),s&&(t=VF({inputs:{x:I},backend:r,attrs:{perm:[0,2,1]}}),N.push(t));const a=1===f;let i=e;1!==f&&(i=DF({inputs:{x:e},backend:r,attrs:{shape:[S,C,1]}}),N.push(i));const o=1===f?2:1;let l=t;a&&(l=DF({inputs:{x:t},backend:r,attrs:{shape:[S,1,C]}}),N.push(l));const u=AF({inputs:{a:i,b:l},backend:r});R=BF({inputs:{x:u},backend:r,attrs:{axis:o,keepDims:!0}}),N.push(u)}else{const l=$r(e.dtype,t.dtype),u=new CF(w,k,[S,d,f],n,s,$,A,T,E),c=[v,I];if(null!=a&&c.push(a),T&&c.push(i),E){const e=r.makeTensorInfo([],"float32",ur(o,"float32"));c.push(e),N.push(e)}R=r.runWebGLProgram(u,c,l)}const D=DF({inputs:{x:R},backend:r,attrs:{shape:x}});N.push(R);for(const e of N)r.disposeIntermediateTensorInfo(e);return D}const jF={kernelName:zs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a,bias:i,preluActivationWeights:o}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;return HF({a:r,b:a,transposeA:l,transposeB:u,backend:n,bias:i,preluActivationWeights:o,leakyreluAlpha:h,activation:c})}},qF="return abs(x);",KF={kernelName:He,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;if(n.shouldExecuteOnCPU([s])&&"complex64"!==s.dtype){const e=n.texData.get(s.dataId),t=ED(e.values);return n.makeTensorInfo(s.shape,s.dtype,t)}let r;return r=Be().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new sF(s.shape,qF):new HD(s.shape,qF),n.runWebGLProgram(r,[s],s.dtype)}},XF=IF({opSnippet:jD+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"}),YF={kernelName:je,backendName:"webgl",kernelFunc:XF},JF=IF({opSnippet:jD+"\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"}),ZF={kernelName:qe,backendName:"webgl",kernelFunc:JF},QF="return a + b;",e_=NF({opSnippet:QF,packedOpSnippet:QF,supportsComplex:!0,cpuKernelImpl:lD}),t_={kernelName:Ke,backendName:"webgl",kernelFunc:e_};class n_{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`float v${e} = get${e}AtOutCoords();`)}));const s=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${s};\n        setOutput(result);\n      }\n    `}}class s_{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`vec4 v${e} = get${e}AtOutCoords();`)}));const s=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${s};\n        setOutput(result);\n      }\n    `}}const r_={kernelName:Xe,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s}=t,r=n;if(1===r.length)return pF({inputs:{x:r[0]},backend:s});if(r.length>Be().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const t=Math.floor(r.length/2),n=e({inputs:r.slice(0,t),backend:s}),a=e({inputs:r.slice(t),backend:s});return e({inputs:[n,a],backend:s})}const a=r.map((e=>e.dtype)).reduce(((e,t)=>$r(e,t))),i=r.map((e=>e.shape)),o=Be().getBool("WEBGL_PACK")?new s_(r[0].shape,i):new n_(r[0].shape,i);return s.runWebGLProgram(o,r,a)}},a_={kernelName:Ye,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=pe(a,r.shape);let u=l;const c=Gu(u,o);let h=r;null!=c&&(h=VF({inputs:{x:r},backend:n,attrs:{perm:c}}),u=ju(u.length,o)),Uu("all",u,o);const[p,d]=Wu(h.shape,u),f=DF({inputs:{x:h},backend:n,attrs:{shape:[-1,ne(d)]}}),m=MF(f,f.dtype,"all",n);let g;return g=DF(i?{inputs:{x:m},backend:n,attrs:{shape:Vu(p,l)}}:{inputs:{x:m},backend:n,attrs:{shape:p}}),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),g}},i_={kernelName:Je,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=pe(a,r.shape);let u=l;const c=Gu(u,o);let h=r;null!=c&&(h=VF({inputs:{x:r},backend:n,attrs:{perm:c}}),u=ju(u.length,o)),Uu("any",u,o);const[p,d]=Wu(h.shape,u),f=DF({inputs:{x:h},backend:n,attrs:{shape:[-1,ne(d)]}}),m=MF(f,f.dtype,"any",n);let g;return g=DF(i?{inputs:{x:m},backend:n,attrs:{shape:Vu(p,l)}}:{inputs:{x:m},backend:n,attrs:{shape:p}}),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),g}};class o_{constructor(e,t,n){this.variableNames=["A"];const{windowSize:s,batchSize:r,outSize:a}=e;n||this.variableNames.push("bestIndicesA"),this.outputShape=[r,a];const i="max"===t?">":"<",o=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${s};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${s}; i++) {\n          int inIdx = ${o};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${i} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class l_{constructor(e,t,n,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,Z(e.length>2,(()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`));const r=e[e.length-1],a=Math.ceil(r/t);this.outputShape=e.slice(0,-1),a>1&&this.outputShape.push(a),s||this.variableNames.push("bestIndicesA");const i=this.outputShape,o=i.length,l=rD(o),u=zD("coords",o);let c,h;if(1===a){h=o+1;const e=rD(h);c=`\n        ${e} sourceLocR = ${e}(${u.join()}, 0);\n        ++${u[o-1]};\n        ${e} sourceLocG = ${e}(${u.join()}, 0);\n        ++${u[o-2]};\n        ${e} sourceLocA = ${e}(${u.join()}, 0);\n        --${u[o-1]};\n        ${e} sourceLocB = ${e}(${u.join()}, 0);\n        --${u[o-2]};`}else h=o,c=`\n        ${l} sourceLocR = coords;\n        ++${u[o-1]};\n        ${l} sourceLocG = coords;\n        ++${u[o-2]};\n        ${l} sourceLocA = coords;\n        --${u[o-1]};\n        ${l} sourceLocB = coords;\n        --${u[o-2]};`;const p=["x","y","z","w","u","v"].slice(0,h),d="."+p[h-1],f=p.map((e=>"int "+e)),m=zD("sourceLocR",h-1).concat("inIdx.r"),g=zD("sourceLocG",h-1).concat("inIdx.g"),y=zD("sourceLocB",h-1).concat("inIdx.b"),b=zD("sourceLocA",h-1).concat("inIdx.a"),x="max"===n?"greaterThan":"lessThan",w=s?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${b.join()})));`,k=`vec4(\n            getAChannel(${m.join()}),\n            hasNextCol ? getAChannel(${g.join()}) : 0.,\n            hasNextRow ? getAChannel(${y.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${b.join()}) : 0.)`,v=s?"":`\n      float getBestIndicesAChannel(${f.join()}) {\n        return getChannel(getBestIndicesA(${p.join()}),\n                                          vec2(${p.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${f.join()}) {\n        return getChannel(getA(${p.join()}),\n                               vec2(${p.slice(-2).join()}));\n      }\n      ${v}\n      void main() {\n        ${l} coords = getOutputCoords();\n        bool hasNextCol = ${u[o-1]} < ${i[o-1]-1};\n        bool hasNextRow = ${u[o-2]} < ${i[o-2]-1};\n        ${c}\n        ivec4 srcIdx = ivec4(sourceLocR${d}, sourceLocG${d},\n          sourceLocB${d}, sourceLocA${d}) * ${t};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${k};\n\n        for (int i = 0; i < ${t}; i++) {\n          inIdx = srcIdx;\n          ${w}\n          vec4 candidate = ${k};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${x}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function u_(e,t,n,s=null){let r=t.shape[0],a=t.shape[1];null!=s&&(r=s.shape[0],a=s.shape[1]);const i=ed(a),o={windowSize:i,inSize:a,batchSize:r,outSize:Math.ceil(a/i)},l=new o_(o,n,null==s),u=[t];null!=s&&u.push(s);const c=e.runWebGLProgram(l,u,"int32");if(1===c.shape[1])return c;const h=u_(e,t,n,c);return e.disposeIntermediateTensorInfo(c),h}function c_(e,t,n,s=null){const r=null!=s?s.shape:t.shape,a=ed(r[r.length-1]),i=new l_(r,a,n,null==s),o=null==s?[t]:[t,s],l=e.runWebGLProgram(i,o,"int32");if(l.shape.length===t.shape.length){const s=c_(e,t,n,l);return e.disposeIntermediateTensorInfo(l),s}return l}function h_(e,t,n,s){const r=[n];if(Uu("arg"+s.charAt(0).toUpperCase()+s.slice(1),r,t.shape.length),!Be().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const n=[],[a,i]=Wu(t.shape,r),o=ne(i),l=DF({inputs:{x:t},backend:e,attrs:{shape:[-1,o]}});n.push(l);const u=u_(e,l,s);n.push(u);const c=DF({inputs:{x:u},backend:e,attrs:{shape:a}});return n.forEach((t=>e.disposeIntermediateTensorInfo(t))),c}return c_(e,t,s)}const p_={kernelName:Ze,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;let i=pe(a,r.shape);const o=Gu(i,r.shape.length);let l=r;const u=[];null!=o&&(l=VF({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=ju(i.length,l.shape.length)),Uu("argMax",[i[0]],l.shape.length);const c=h_(n,l,i[0],"max");return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}},d_={kernelName:Qe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;let i=pe(a,r.shape);const o=Gu(i,r.shape.length);let l=r;const u=[];null!=o&&(l=VF({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=ju(i.length,l.shape.length)),Uu("argMin",[i[0]],l.shape.length);const c=h_(n,l,i[0],"min");return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}},f_=IF({opSnippet:jD+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"}),m_={kernelName:et,backendName:"webgl",kernelFunc:f_},g_=IF({opSnippet:jD+"return log(x + sqrt(x * x + 1.0));"}),y_={kernelName:tt,backendName:"webgl",kernelFunc:g_},b_=IF({opSnippet:jD+"\n  return atan(x);\n"}),x_={kernelName:nt,backendName:"webgl",kernelFunc:b_},w_=NF({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),k_={kernelName:rt,backendName:"webgl",kernelFunc:w_},v_=IF({opSnippet:jD+"\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"}),I_={kernelName:st,backendName:"webgl",kernelFunc:v_};class N_{constructor(e,t,n,s=!1,r=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,i=e.strideHeight,o=e.strideWidth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,p=e.padInfo.top,d=e.padInfo.left;this.outputShape=e.outShape;const f="avg"===t,m=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,g=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;let y="0.0";if(f||(y="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${i}, ${o});\n        const ivec2 pads = ivec2(${p}, ${d});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${l}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h};\n                wC += ${u}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${t} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${s?r?m:g:`wR * ${h} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let b=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(b="avgValue / count");const x=4*Math.floor(a/4),w=a%4,k=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${p}, ${d});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${l}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${x}; wC += 4) {\n            int xC = xCCorner + wC * ${u};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              getValue(batch, xR, xC + 3 * ${u}, d)\n            );\n\n            ${k}\n          }\n\n          int xC = xCCorner + ${x};\n          if (${1===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${k}\n          } else if (${2===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${k}\n          } else if (${3===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              initializationValue\n            );\n\n            ${k}\n          }\n        }\n        setOutput(${b});\n      }\n    `}}class S_{constructor(e,t,n,s=!1,r=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,i=e.strideDepth,o=e.strideHeight,l=e.strideWidth,u=e.dilationDepth,c=e.dilationHeight,h=e.dilationWidth,p=e.effectiveFilterDepth,d=e.effectiveFilterHeight,f=e.effectiveFilterWidth,m=e.padInfo.front,g=e.padInfo.top,y=e.padInfo.left;this.outputShape=e.outShape;const b="avg"===t;let x="0.0";if(b||(x="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${i}, ${o}, ${l});\n        const ivec3 pads = ivec3(${m}, ${g}, ${y});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${p};\n              wD += ${u}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${d};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${h}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${t} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${s?r?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${d} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let w=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(w="avgValue / count");const k=4*Math.floor(a/4),v=a%4,I=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${i}, ${o}, ${l});\n      const ivec3 pads = ivec3(${m}, ${g}, ${y});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${p};\n            wD += ${u}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${d};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${k}; wC += 4) {\n              int xC = xCCorner + wC * ${h};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${h}, ch)\n              );\n\n              ${I}\n            }\n\n            int xC = xCCorner + ${k};\n            if (${1===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${I}\n            } else if (${2===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${I}\n            } else if (${3===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                initializationValue\n              );\n\n              ${I}\n            }\n          }\n          setOutput(${w});\n        }\n      }\n    `}}const C_={kernelName:at,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;ER(r,"avgPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=s;Z(Il(i,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const u=dl(r.shape,a,i,1,o,l);if(1===u.filterWidth&&1===u.filterHeight&&re(u.inShape,u.outShape))return pF({inputs:{x:r},backend:n});const c=new N_(u,"avg",!1);return n.runWebGLProgram(c,[r],"float32")}},$_={kernelName:ot,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=s,c=fl(r.shape,a,i,[1,1,1],o,l,u),h=new S_(c,"avg",!1);return n.runWebGLProgram(h,[r],"float32")}};class T_{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,r=e.strideWidth,a=e.dilationHeight,i=e.dilationWidth,o=e.effectiveFilterHeight,l=e.effectiveFilterWidth,u=o-1-e.padInfo.top,c=l-1-e.padInfo.left,h=1/(t*n);this.userCode=`\n      const ivec2 pads = ivec2(${u}, ${c});\n      const float avgMultiplier = float(${h});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${o};\n            wR += ${a}) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${l};\n            wC+= ${i}) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class E_{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,s=e.filterWidth,r=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterDepth,h=e.effectiveFilterHeight,p=e.effectiveFilterWidth,d=c-1-e.padInfo.front,f=h-1-e.padInfo.top,m=p-1-e.padInfo.left,g=1/(t*n*s);this.userCode=`\n      const ivec3 pads = ivec3(${d}, ${f}, ${m});\n      const float avgMultiplier = float(${g});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${o}) {\n          float dyD = float(dyDCorner + wD) / ${r}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${h};\n              wR += ${l}) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${p};\n                wC += ${u}) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const A_={kernelName:lt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a,{filterSize:o,strides:l,pad:u,dimRoundingMode:c}=s,h=fl(i.shape,o,l,[1,1,1],u,c),p=new E_(h);return n.runWebGLProgram(p,[r],i.dtype)}},R_={kernelName:it,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a;ER([r,a],"avgPoolGrad");const{filterSize:o,strides:l,pad:u}=s,c=dl(i.shape,o,l,1,u),h=new T_(c);return n.runWebGLProgram(h,[r],i.dtype)}},D_={kernelName:ut,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a}=t,{transposeA:i,transposeB:o}=s;return HF({a:r,b:a,transposeA:i,transposeB:o,backend:n})}};class F_{constructor(e,t,n,s,r,a){this.outputShape=[],this.variableNames=["x","mean","variance"],Ko(e,t),Ko(e,n);let i="0.0";null!=s&&(Ko(e,s),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="1.0";null!=r&&(Ko(e,r),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${i};\n        float scale = ${o};\n        float inv = scale * inversesqrt(variance + float(${a}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class __{constructor(e,t,n,s,r,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],Ko(e,t),Ko(e,n);let i="vec4(0.0)";null!=s&&(Ko(e,s),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="vec4(1.0)";null!=r&&(Ko(e,r),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        vec4 offset = ${i};\n        vec4 scale = ${o};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${a}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const O_={kernelName:Jt,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,mean:r,variance:a,offset:i,scale:o}=e;Z(r.shape.length===a.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),Z(null==i||r.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),Z(null==o||r.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));let{varianceEpsilon:l}=n;null==l&&(l=.001);const u=[s,r,a];let c=null;null!=i&&(c=i.shape,u.push(i));let h=null;null!=o&&(h=o.shape,u.push(o));const p=Be().getBool("WEBGL_PACK_NORMALIZATION")?new __(s.shape,r.shape,a.shape,c,h,l):new F_(s.shape,r.shape,a.shape,c,h,l);return t.runWebGLProgram(p,u,u[0].dtype)}};class M_{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=rD(this.rank),n=`uniform int start[${this.rank}];`,s=function(e){if(1===e)return"sourceLoc";if(e<=6)return L_.slice(0,e).map((e=>"sourceLoc."+e)).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let r;r=`\n        ${t} sourceLoc;\n        ${t} coords = getOutputCoords();\n        ${e.map(((e,t)=>`sourceLoc.${L_[t]} = start[${t}] + coords.${L_[t]};`)).join("\n")}\n      `,this.userCode=`\n      ${n}\n      void main() {\n        ${r}\n        setOutput(getSource(${s}));\n      }\n    `}getCustomSetupFunc(e){if(e.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${e.length})`);return(t,n)=>{null==this.startLoc&&(this.startLoc=t.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||t.gl.uniform1iv(this.startLoc,e)}}}const L_=["x","y","z","w","u","v"];class z_{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length;const t=rD(this.rank),n=zD("coords",this.rank),s=zD("sourceLoc",this.rank),r=1===this.rank?"sourceLoc":`vec2(${s.slice(-2).join()})`,a=`getChannel(getSource(${s.join()}), ${r})`,i=`\n      result.x = ${a};\n      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n        ++${s[this.rank-1]};\n        result.y = ${a};\n        --${s[this.rank-1]};\n      }\n    `,o=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {\n        ++${s[this.rank-2]};\n        result.z = ${a};\n        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n          ++${s[this.rank-1]};\n          result.w = ${a};\n        }\n      }\n    `,l=this.rank<=4?`sourceLoc = coords +\n            ${t}(${e.map(((e,t)=>`start[${t}]`)).join()});`:e.map(((e,t)=>`${s[t]} = ${n[t]} + start[${t}];`)).join("\n");this.userCode=`\n      uniform int start[${this.rank}];\n      void main() {\n        ${t} coords = getOutputCoords();\n        ${t} sourceLoc;\n        ${l}\n        vec4 result = vec4(0.);\n        ${i}\n        ${o}\n        setOutput(result);\n      }\n    `}getCustomSetupFunc(e){if(e.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${e.length})`);return(t,n)=>{null==this.startLoc&&(this.startLoc=t.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||t.gl.uniform1iv(this.startLoc,e)}}}function P_(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,size:i}=s,[o,l]=Li(r,a,i);if(Ii(r,o,l),0===ne(l))return n.makeTensorInfo(l,r.dtype,[]);if(n.shouldExecuteOnCPU([r])||"string"===r.dtype){const e=n.texData.get(r.dataId),t=AD(e.values,o,l,r.shape,r.dtype);return n.makeTensorInfo(l,r.dtype,t)}const{isPacked:u}=n.texData.get(r.dataId),c=Oi(r.shape,o,l);if(u||!c){const e=Be().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new z_(l):new M_(l),t=e.getCustomSetupFunc(o);return n.runWebGLProgram(e,[r],r.dtype,t)}return n.uploadToGPU(r.dataId),function(e,t,n,s){const r=s.texData.get(e.dataId),a=s.makeTensorInfo(n,e.dtype),i=s.texData.get(a.dataId);Object.assign(i,r),i.complexParentRefCount=0,i.refCount=1,i.shape=n,i.dtype=e.dtype;let o=Mi(t,Te(e.shape));r.slice&&(o+=r.slice.flatOffset),i.slice={flatOffset:o,origDataId:r.slice&&r.slice.origDataId||e.dataId};const l=s.dataRefCount.get(i.slice.origDataId)||1;return s.dataRefCount.set(i.slice.origDataId,l+1),a}(r,o,l,n)}const B_={kernelName:cs,backendName:"webgl",kernelFunc:P_},W_={kernelName:ct,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,crops:i}=s;Z(r.shape.length<=4,(()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"));const o=a.reduce(((e,t)=>e*t)),l=nd(r.shape,a,o),u=sd(l.length,a.length),c=rd(r.shape,a,o),h=ad(i,a.length),p=id(c,i,a.length),d=[],f=DF({inputs:{x:r},backend:n,attrs:{shape:l}}),m=VF({inputs:{x:f},backend:n,attrs:{perm:u}}),g=DF({inputs:{x:m},backend:n,attrs:{shape:c}}),y=P_({inputs:{x:g},backend:n,attrs:{begin:h,size:p}});return d.push(f),d.push(m),d.push(g),d.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}},V_={kernelName:ht,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i}=s,o=n.readSync(r.dataId),l=n.readSync(a.dataId),u=uD(o,l,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,u)}},U_=NF({opSnippet:"return float(a != b);",dtype:"bool"}),G_={kernelName:Mn,backendName:"webgl",kernelFunc:U_};function H_(e){const{inputs:t,backend:n}=e,{input:s}=t;return pF({inputs:{x:n.texData.get(s.dataId).complexTensorInfos.real},backend:n})}const j_={kernelName:Xn,backendName:"webgl",kernelFunc:H_},q_={kernelName:dt,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s,attrs:r}=t,{x:a}=n,{dtype:i}=r;if("complex64"===i){if("complex64"===a.dtype)return pF({inputs:{x:a},backend:s});const t=cc(a.shape),n=e({inputs:{x:a},backend:s,attrs:{dtype:"float32"}}),r=fF({inputs:{real:n,imag:t},backend:s});return t.dispose(),s.disposeIntermediateTensorInfo(n),r}if("complex64"===a.dtype){const t=H_({inputs:{input:a},backend:s}),n=e({inputs:{x:t},backend:s,attrs:{dtype:i}});return s.disposeIntermediateTensorInfo(t),n}if(!be(a.dtype,i)){const e=pF({inputs:{x:a},backend:s});return{dataId:e.dataId,shape:e.shape,dtype:i}}if("int32"===i)return function(e,t){const n=new HD(e.shape,"return float(int(x));"),s=t.runWebGLProgram(n,[e],"int32");return{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}(a,s);if("bool"===i){const e=s.makeTensorInfo([],"bool",fe("bool",1)),t=U_({inputs:{a,b:e},backend:s});return s.disposeIntermediateTensorInfo(e),t}throw new Error(`Error in Cast: failed to cast ${a.dtype} to ${i}`)}},K_="return ceil(x);",X_=IF({opSnippet:K_,packedOpSnippet:K_,cpuKernelImpl:hD}),Y_={kernelName:ft,backendName:"webgl",kernelFunc:X_};class J_{constructor(e){this.variableNames=["A"],this.outputShape=e,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}getCustomSetupFunc(e,t){return(n,s)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(s,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(s,"maxVal")),n.gl.uniform1f(this.minLoc,e),n.gl.uniform1f(this.maxLoc,t)}}}class Z_{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}getCustomSetupFunc(e,t){return(n,s)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(s,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(s,"maxVal")),n.gl.uniform1f(this.minLoc,e),n.gl.uniform1f(this.maxLoc,t)}}}const Q_={kernelName:mt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{clipValueMin:a,clipValueMax:i}=s;let o;o=Be().getBool("WEBGL_PACK_CLIP")?new Z_(r.shape):new J_(r.shape);const l=o.getCustomSetupFunc(a,i);return n.runWebGLProgram(o,[r],r.dtype,l)}};class eO{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function tO(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}const nO={kernelName:yt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,r=n.texData.get(s.dataId),a=new eO(s.shape),i=[tO(s,r.complexTensorInfos.real),tO(s,r.complexTensorInfos.imag)];return n.runWebGLProgram(a,i,i[0].dtype)}};class sO{constructor(e){this.outputShape=[],this.outputShape=Zp(e,1),this.variableNames=e.map(((e,t)=>`T${t}`));const t=new Array(e.length-1);t[0]=e[0][1];for(let n=1;n<t.length;n++)t[n]=t[n-1]+e[n][1];const n=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let e=1;e<t.length;e++){const s=t[e-1];n.push(`else if (yC < ${t[e]}) setOutput(getT${e}(yR, yC-${s}));`)}const s=t.length,r=t[t.length-1];n.push(`else setOutput(getT${s}(yR, yC-${r}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class rO{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=Zp(e,t);const n=this.outputShape,s=n.length,r=rD(s),a=zD("coords",s),i=["x","y","z","w","u","v"].slice(0,s);this.variableNames=e.map(((e,t)=>`T${t}`));const o=new Array(e.length-1);o[0]=e[0][t];for(let n=1;n<o.length;n++)o[n]=o[n-1]+e[n][t];const l=i[t],u=i.slice(-2),c=i.join();let h=`if (${l} < ${o[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${u.join()}));\n        }`;for(let e=1;e<o.length;e++){const t=o[e-1];h+=`\n        if (${l} < ${o[e]}  && ${l} >= ${o[e-1]}) {\n          return getChannel(\n            getT${e}(${aO(i,l,t)}),\n            vec2(${aO(u,l,t)}));\n        }`}const p=o.length,d=o[o.length-1];h+=`\n        return getChannel(\n          getT${p}(${aO(i,l,d)}),\n          vec2(${aO(u,l,d)}));`,this.userCode=`\n      float getValue(${i.map((e=>"int "+e))}) {\n        ${h}\n      }\n\n      void main() {\n        ${r} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${a}), 0., 0., 0.);\n\n        ${a[s-1]} = ${a[s-1]} + 1;\n        if (${a[s-1]} < ${n[s-1]}) {\n          result.g = getValue(${a});\n        }\n\n        ${a[s-2]} = ${a[s-2]} + 1;\n        if (${a[s-2]} < ${n[s-2]}) {\n          result.a = getValue(${a});\n        }\n\n        ${a[s-1]} = ${a[s-1]} - 1;\n        if (${a[s-2]} < ${n[s-2]} &&\n            ${a[s-1]} < ${n[s-1]}) {\n          result.b = getValue(${a});\n        }\n        setOutput(result);\n      }\n    `}}function aO(e,t,n){const s=e.indexOf(t);return e.map(((e,t)=>t===s?`${e} - ${n}`:e)).join()}function iO(e){const{inputs:t,backend:n}=e,{input:s}=t;return pF({inputs:{x:n.texData.get(s.dataId).complexTensorInfos.imag},backend:n})}const oO={kernelName:rn,backendName:"webgl",kernelFunc:iO};function lO(e,t,n){const s=e[0].dtype;if("complex64"===s){const s=e.map((e=>H_({inputs:{input:e},backend:n}))),r=e.map((e=>iO({inputs:{input:e},backend:n}))),a=lO(s,t,n),i=lO(r,t,n),o=fF({inputs:{real:a,imag:i},backend:n});return s.forEach((e=>n.disposeIntermediateTensorInfo(e))),r.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(i),o}if("string"===s){const{tensors2D:r,outShape:a}=uO(e,t,n),i=r.map((e=>({vals:n.readSync(e.dataId),shape:e.shape}))),o=1===r[0].shape[0],l=pD(i,a,s,o),u=Zp(e.map((e=>e.shape)),t),c=n.makeTensorInfo(u,s,l);return r.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}if(e.length>Be().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const s=Math.floor(e.length/2),r=lO(e.slice(0,s),t,n),a=lO(e.slice(s),t,n),i=lO([r,a],t,n);return n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),i}if(Be().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&e[0].shape.length>1){const r=new rO(e.map((e=>e.shape)),t);return n.runWebGLProgram(r,e,s)}const{tensors2D:r,outShape:a}=uO(e,t,n),i=new sO(r.map((e=>e.shape))),o=n.runWebGLProgram(i,r,s);r.forEach((e=>n.disposeIntermediateTensorInfo(e)));const l=DF({inputs:{x:o},attrs:{shape:a},backend:n});return n.disposeIntermediateTensorInfo(o),l}function uO(e,t,n){const s=Zp(e.map((e=>e.shape)),t);return{tensors2D:e.map((e=>DF({inputs:{x:e},attrs:{shape:[-1,ne(e.shape.slice(t))]},backend:n}))),outShape:s}}function cO(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s,a=pe(r,t[0].shape)[0],i=Zp(t.map((e=>e.shape)),a);if(0===ne(i))return n.makeTensorInfo(i,t[0].dtype,[]);const o=t.filter((e=>ne(e.shape)>0));return 1===o.length?pF({inputs:{x:o[0]},backend:n}):(Jp(o.map((e=>e.shape)),a),lO(o,a,n))}const hO={kernelName:bt,backendName:"webgl",kernelFunc:cO};class pO{constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const a=e.padInfo.top,i=e.padInfo.left,o=e.strideHeight,l=e.strideWidth,u=e.dilationHeight,c=e.dilationWidth,h=e.filterHeight,p=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4,m="channelsLast"===e.dataFormat,g=m?1:2,y=m?2:3,b=m?3:1;let x="",w="";n&&(x=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,w="result = activation(result);");const k=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${x}\n\n      const ivec2 strides = ivec2(${o}, ${l});\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${b}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${g}], coords[${y}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${h}; wR++) {\n          int xR = xRCorner + wR * ${u};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${p}; wC++) {\n            int xC = xCCorner + wC * ${c};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${d}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${m}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===f}) {\n\n              if (${m}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${d}) *\n                    getW(wR, wC, ${d}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${d}, xR, xC) *\n                    getW(wR, wC, ${d}, d2);\n              }\n\n            } else if (${2===f}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2)\n              );\n\n              if (${m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===f}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2),\n                getW(wR, wC, ${d} + 2, d2)\n              );\n\n              if (${m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1),\n                  getX(batch, xR, xC, ${d} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC),\n                  getX(batch, ${d} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${k}\n        ${w}\n        setOutput(result);\n      }\n    `}}class dO{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const t=e.padInfo.front,n=e.padInfo.top,s=e.padInfo.left,r=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.filterDepth,h=e.filterHeight,p=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${r}, ${a}, ${i});\n      const ivec3 pads = ivec3(${t}, ${n}, ${s});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${o};\n\n          if (xF < 0 || xF >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h}; wR++) {\n            int xR = xRCorner + wR * ${l};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p}; wC++) {\n              int xC = xCCorner + wC * ${u};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${d}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${d}) *\n                  getW(wF, wR, wC, ${d}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1),\n                  getX(batch, xF, xR, xC, ${d} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2),\n                  getW(wF, wR, wC, ${d} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class fO{constructor(e,t,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;const{filterWidth:s,inChannels:r,strideWidth:a,strideHeight:i,padInfo:o,outWidth:l,dilationWidth:u,dilationHeight:c,dataFormat:h}=n,{left:p,top:d}=o,f=r*s,m=RR(),g="channelsLast"===h,y=g?0:1,b=g?1:2;let x="";for(let n=0;n<=1;n++)for(let s=0;s<=1;s++)x+=`\n          blockIndex = rc.y + ${s};\n          pos = rc.x + ${n};\n\n          if(blockIndex < ${e[1]} && pos < ${e[0]}) {\n            offsetY = int(blockIndex / (${l})) * ${i} - ${d};\n            d0 = offsetY + ${c} * (pos / ${f});\n\n            if(d0 < ${t[y]} && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ${l}.) * ${a}. - ${p}.);\n              d1 = offsetX + ${u} * (int(mod(float(pos), ${f}.) / ${r}.));\n\n              if(d1 < ${t[b]} && d1 >= 0) {\n\n                ch = int(mod(float(pos), ${r}.));\n\n                if (${g}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*n+s}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*n+s}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${x}\n\n        ${m.output} = result;\n      }\n    `}}function mO({x:e,filter:t,convInfo:n,backend:s,bias:r=null,preluActivationWeights:a=null,leakyreluAlpha:i=0,activation:o=null}){const l=e.shape,u=s.texData.get(e.dataId),c=n.inChannels,h=l[0]*l[1]*l[2],p=n.outChannels,d="channelsLast"===n.dataFormat;let f;const m=[],g=(1===h||1===p)&&c>GF,y=l[2]%2!=0&&!!u.isPacked;if(!g&&Be().getBool("WEBGL_LAZILY_UNPACK")&&Be().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&y){const c=d?l[0]*l[1]*(l[2]+1):l[0]*l[2]*(l[3]+1),h={dataId:e.dataId,shape:[1,c,n.inChannels],dtype:e.dtype},p=u.shape;u.shape=u.shape.slice(),u.shape[u.shape.length-2]++,Z(IR(u.shape,h.shape),(()=>`packed reshape ${u.shape} to ${h.shape} isn't free`));const g=DF({inputs:{x:t},backend:s,attrs:{shape:[1,n.inChannels,n.outChannels]}});m.push(g);const y=HF({a:h,b:g,backend:s,transposeA:!1,transposeB:!1,bias:r,activation:o,preluActivationWeights:a,leakyreluAlpha:i}),b=s.texData.get(y.dataId);Z(b.isPacked,(()=>"batchMatMul result is expected to be packed")),u.shape=p,b.shape=n.outShape,f=pF({inputs:{x:y},backend:s}),f.shape=n.outShape,m.push(y)}else{const u=DF({inputs:{x:e},backend:s,attrs:{shape:[1,d?l[0]*l[1]*l[2]:l[0]*l[2]*l[3],n.inChannels]}}),c=DF({inputs:{x:t},backend:s,attrs:{shape:[1,n.inChannels,n.outChannels]}}),h=HF({a:u,b:c,transposeA:!1,transposeB:!1,backend:s,bias:r,activation:o,preluActivationWeights:a,leakyreluAlpha:i});f=DF({inputs:{x:h},backend:s,attrs:{shape:n.outShape}}),m.push(u),m.push(c),m.push(h)}for(const e of m)s.disposeIntermediateTensorInfo(e);return f}function gO({x:e,filter:t,convInfo:n,backend:s,bias:r=null,preluActivationWeights:a=null,leakyreluAlpha:i=0,activation:o=null}){const{filterWidth:l,filterHeight:u,inChannels:c,outWidth:h,outHeight:p,dataFormat:d}=n,f="channelsLast"===d,m=l*u*c,g=p*h,y=[m,g],b=[],x=DF({inputs:{x:e},backend:s,attrs:{shape:e.shape.slice(1)}}),w=DF({inputs:{x:t},backend:s,attrs:{shape:[1,m,ne(t.shape)/m]}});b.push(x),b.push(w);const k=new fO(y,x.shape,n),v=s.runWebGLProgram(k,[x],"float32"),I=DF({inputs:{x:v},backend:s,attrs:{shape:[1,y[0],y[1]]}});b.push(v),b.push(I);const N=null!=r,S=null!=a,C="leakyrelu"===o,$=o?SF(o,!0):null,T=new CF(I.shape,w.shape,[1,g,n.outChannels],!0,!1,N,$,S,C),E=[I,w];if(r&&E.push(r),S&&E.push(a),C){const e=s.makeTensorInfo([],"float32",ur(i,"float32"));E.push(e),b.push(e)}const A=s.runWebGLProgram(T,E,"float32"),R=DF({inputs:{x:A},backend:s,attrs:{shape:f?[1,p,h,n.outChannels]:[1,n.outChannels,p,h]}});b.push(A);for(const e of b)s.disposeIntermediateTensorInfo(e);return R}const yO={kernelName:xt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dataFormat:l,dilations:u,dimRoundingMode:c}=s,h=Nl(l),p=ml(r.shape,a.shape,i,u,o,c,!1,h);let d;if(1!==p.filterHeight||1!==p.filterWidth||1!==p.dilationHeight||1!==p.dilationWidth||1!==p.strideHeight||1!==p.strideWidth||"SAME"!==p.padInfo.type&&"VALID"!==p.padInfo.type)if(Be().getBool("WEBGL_CONV_IM2COL")&&1===r.shape[0])d=gO({x:r,filter:a,convInfo:p,backend:n});else{const e=new pO(p);d=n.runWebGLProgram(e,[r,a],"float32")}else d=mO({x:r,filter:a,convInfo:p,backend:n});const f=DF({inputs:{x:d},backend:n,attrs:{shape:p.outShape}});return n.disposeIntermediateTensorInfo(d),f}};class bO{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,s=e.padInfo.top,r=e.padInfo.left,a="channelsLast"===e.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${s};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${r};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              if (${a}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class xO{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,r=e.strideWidth,a="channelsLast"===e.dataFormat,i=t-1-e.padInfo.top,o=n-1-e.padInfo.left,l=a?1:2,u=a?2:3,c=a?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${l}], coords[${u}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n\n              if (${a}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class wO{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideDepth,n=e.strideHeight,s=e.strideWidth,r=e.padInfo.front,a=e.padInfo.top,i=e.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yF = 0; yF < ${e.outDepth}; yF++) {\n            int xF = wF + yF * ${t} - ${r};\n\n            if (xF < 0 || xF >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${e.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${a};\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${e.outWidth}; yC++) {\n                int xC = wC + yC * ${s} - ${i};\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class kO{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,s=e.filterWidth,r=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=t-1-e.padInfo.front,l=n-1-e.padInfo.top,u=s-1-e.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${o}, ${l}, ${u});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${t}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${r}.0;\n\n          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${t} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${s}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${s} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const vO={kernelName:wt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,dataFormat:l,dimRoundingMode:u,filterShape:c}=s,h=Nl(l),p=ml(r.shape,c,i,1,o,u,!1,h),d=new bO(p);return n.runWebGLProgram(d,[r,a],"float32")}},IO={kernelName:kt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{inputShape:i,strides:o,pad:l,dataFormat:u,dimRoundingMode:c}=s,h=Nl(u),p=ml(i,a.shape,o,1,l,c,!1,h),d=new xO(p);return n.runWebGLProgram(d,[r,a],"float32")}},NO={kernelName:vt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l}=s,u=gl(r.shape,a.shape,i,l,o),c=new dO(u);return n.runWebGLProgram(c,[r,a],"float32")}},SO={kernelName:It,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,filterShape:l}=s,u=gl(r.shape,l,i,1,o),c=new wO(u);return n.runWebGLProgram(c,[r,a],"float32")}},CO={kernelName:Nt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{pad:i,strides:o,inputShape:l}=s,u=gl(l,a.shape,o,1,i),c=new kO(u);return n.runWebGLProgram(c,[r,a],"float32")}},$O=IF({opSnippet:vF+"\n  return cos(x);\n"}),TO={kernelName:St,backendName:"webgl",kernelFunc:$O},EO=IF({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"}),AO={kernelName:Ct,backendName:"webgl",kernelFunc:EO};class RO{constructor(e,t,n,s,r){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[a,i,o,l]=e,[u]=t,[c,h]=n;this.outputShape=[u,c,h,l];const p="bilinear"===s?1:0,[d,f]=[i-1+".0",o-1+".0"],[m,g,y]=c>1?[""+(i-1)/(c-1),"(y2-y1) * height_ratio",`y1*${d} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${d}`],[b,x,w]=h>1?[""+(o-1)/(h-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${f}`];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${a}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${x};\n\n        float in_y = ${y};\n        if( in_y < 0.0 || in_y > ${d} ) {\n          setOutput(float(${r}));\n          return;\n        }\n        float in_x = ${w};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${r}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${p} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const DO={kernelName:Tt,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{image:r,boxes:a,boxInd:i}=t,{cropSize:o,method:l,extrapolationValue:u}=s,c=new RO(r.shape,a.shape,o,l,u);return n.runWebGLProgram(c,[r,a,i],"float32")}};class FO{constructor(e,t,n){this.variableNames=["x"],this.outputShape=e;const s=e.length,r=t?"0.0":`getX(${_O(s,"coords")})`,a=e[e.length-1];let i="",o="";t?(i=n?"end != "+(a-1):"end != 0",o=n?"end + 1":"end - 1"):(i=n?`end + pow2 < ${a}`:"end >= pow2",o=n?"end + pow2":"end - pow2"),this.userCode=`\n      uniform float index;\n      void main() {\n        ${rD(s)} coords = getOutputCoords();\n        int end = ${OO(s,"coords")};\n        float val = ${r};\n        int pow2 = int(pow(2.0, index));\n        if (${i}) {\n          int idx = ${o};\n          ${OO(s,"coords")} = idx;\n          val += getX(${_O(s,"coords")});\n        }\n        setOutput(val);\n      }\n    `}getCustomSetupFunc(e){return(t,n)=>{null==this.index&&(this.index=t.getUniformLocation(n,"index")),t.gl.uniform1f(this.index,e)}}}function _O(e,t){if(1===e)return`${t}`;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw Error(`Cumulative sum for rank ${e} is not yet supported`)}function OO(e,t){if(1===e)return`${t}`;if(2===e)return`${t}.y`;if(3===e)return`${t}.z`;if(4===e)return`${t}.w`;throw Error(`Cumulative sum for rank ${e} is not yet supported`)}const MO={kernelName:$t,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,exclusive:i,reverse:o}=s,l=r.shape.length,u=Gu([a],l);let c=r;null!=u&&(c=VF({inputs:{x:r},backend:n,attrs:{perm:u}}));const h=ju(1,l)[0];if(h!==l-1)throw new Error(`WebGL cumsum shader expects an inner-most axis=${r.shape.length-1} but got axis=${a}`);const p=c.shape[h];let d=pF({inputs:{x:c},backend:n});for(let e=0;e<=Math.ceil(Math.log2(p))-1;e++){const t=new FO(c.shape,!1,o),s=t.getCustomSetupFunc(e),r=d;d=n.runWebGLProgram(t,[d],d.dtype,s),n.disposeIntermediateTensorInfo(r)}if(i){const e=new FO(c.shape,i,o),t=d;d=n.runWebGLProgram(e,[d],d.dtype),n.disposeIntermediateTensorInfo(t)}if(null!=u){const e=VF({inputs:{x:d},backend:n,attrs:{perm:Hu(u)}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(c),e}return d}},LO={kernelName:Et,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i,binaryOutput:o}=s;if(1===r.shape.length){const e=n.readSync(r.dataId),t=n.readSync(a.dataId),s=uD(e,t,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,s)}if(2===r.shape.length){const e=n.bufferSync(r),t=n.bufferSync(a),s=cD(e,t,i,o);return n.makeTensorInfo(s.shape,a.dtype,s.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}};class zO{constructor(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${t};\n      int offset_h = imod(h, ${t});\n      int in_w = w / ${t};\n      int offset_w = imod(w, ${t});\n      int offset_d = (offset_h * ${t} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const PO={kernelName:At,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockSize:a,dataFormat:i}=s;Z(a>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${a}`));const o=r.shape[0],l="NHWC"===i?r.shape[1]:r.shape[2],u="NHWC"===i?r.shape[2]:r.shape[3],c="NHWC"===i?r.shape[3]:r.shape[1],h=l*a,p=u*a,d=c/(a*a),f=new zO("NHWC"===i?[o,h,p,d]:[o,d,h,p],a,i);return n.runWebGLProgram(f,[r],r.dtype)}};class BO{constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const a=e.inHeight,i=e.inWidth,o=e.padInfo.top,l=e.padInfo.left,u=e.strideHeight,c=e.strideWidth,h=e.dilationHeight,p=e.dilationWidth,d=e.filterHeight,f=e.filterWidth,m=e.outChannels/e.inChannels;let g="",y="";n&&(g=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,y="result = activation(result);");const b=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${g}\n\n      const ivec2 strides = ivec2(${u}, ${c});\n      const ivec2 pads = ivec2(${o}, ${l});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${m};\n        int q = d2 - d1 * ${m};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${d}; wR++) {\n          int xR = xRCorner + wR * ${h};\n\n          if (xR < 0 || xR >= ${a}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${f}; wC++) {\n            int xC = xCCorner + wC * ${p};\n\n            if (xC < 0 || xC >= ${i}) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${b}\n        ${y}\n        setOutput(result);\n      }\n    `}}class WO{constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.outShape;const a=e.inHeight,i=e.inWidth,o=e.padInfo.top,l=e.padInfo.left,u=e.strideHeight,c=e.strideWidth,h=e.dilationHeight,p=e.dilationWidth,d=e.filterHeight,f=e.filterWidth,m=f;let g="int xR; int xC; int xCOffset;";for(let e=0;e<d;e++)for(let t=0;t<f;t++)g+=`\n          vec4 xTexelR${e}C${2*t} = vec4(0.);\n          vec4 wR${e}C${t} = vec4(0.);\n          vec4 xR${e}C${t} = vec4(0.);`;for(let e=0;e<d;e++)for(let t=0;t<m;t++){const n=2*t;if(g+=`\n          xR = xRCorner + ${e*h};\n          xC = xCCorner + ${n*p};\n        `,1===c){if(n<f&&(g+=l%2==1?`\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < ${a} && xCOffset >= 0 && xCOffset < ${i}) {\n                  xTexelR${e}C${n} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${i}) {\n                    xTexelR${e}C${n}.zw = vec2(0.);\n                  }\n                } else {\n                  xTexelR${e}C${n} = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < ${a} && xCOffset >= 0 && xCOffset < ${i}) {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${i}) {\n                    previous.zw = vec2(0.);\n                  }\n\n                  xR${e}C${n} = vec4(previous.zw, xTexelR${e}C${n}.xy);\n                } else {\n                  xR${e}C${n} = vec4(0, 0, xTexelR${e}C${n}.xy);\n                }\n              `:`\n                if(xR >= 0 && xR < ${a} && xC >= 0 && xC < ${i}) {\n                  xTexelR${e}C${n} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${e}C${n} = vec4(0.);\n                }\n\n                xR${e}C${n} = xTexelR${e}C${n};\n              `,n+1<f)){const t=l%2==0?K(p):p;p%2==0&&l%2==1||p%2!=0&&l%2!=1?(g+=`\n                  xCOffset = xC + ${l%2} + ${t};\n\n                  if(xR >= 0 && xR < ${a} &&\n                    xCOffset >= 0 && xCOffset < ${i}) {\n                    xTexelR${e}C${n+2} = getX(batch, xR, xCOffset, d1);\n                  }\n                `,p>1&&(g+=`\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < ${a} &&\n                      xCOffset >= 0 && xCOffset < ${i}) {\n                      xTexelR${e}C${n} = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR${e}C${n} = vec4(0.);\n                    }\n                  `),g+=`\n                  xR${e}C${n+1} = vec4(\n                    xTexelR${e}C${n}.zw, xTexelR${e}C${n+2}.xy);\n                `):g+=`\n                  xCOffset = xC + ${t};\n\n                  if(xR >= 0 && xR < ${a} &&\n                    xCOffset >= 0 && xCOffset < ${i}) {\n                    xTexelR${e}C${n+2} = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR${e}C${n+1} = xTexelR${e}C${n+2};\n                `}}else n<f&&(g+=`\n              if(xR >= 0 && xR < ${a}) {\n            `,l%2==1?(g+=`\n                xCOffset = xC + 1 - ${c};\n                if(xCOffset >= 0 && xCOffset < ${i}) {\n                  xTexelR${e}C${n} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${e}C${n} = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ${i}) {\n                  xTexelR${e}C${n+2} = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR${e}C${n+2} = vec4(0.);\n                }\n\n                xR${e}C${n} = vec4(\n                  xTexelR${e}C${n}.zw, xTexelR${e}C${n+2}.zw);\n              `,n+1<f&&(g+=`\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + ${c};\n                  if(xCOffset >= 0 && xCOffset < ${i}) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR${e}C${n+1} = vec4(xTexelR${e}C${n+2}.xy, final.xy);\n                `)):(g+=`\n                if(xC >= 0 && xC < ${i}) {\n                  xTexelR${e}C${n} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${e}C${n} = vec4(0.);\n                }\n\n                xCOffset = xC + ${c};\n                if(xCOffset >= 0 && xCOffset < ${i}) {\n                  xTexelR${e}C${n+2} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${e}C${n+2} = vec4(0.);\n                }\n\n                xR${e}C${n} = vec4(\n                  xTexelR${e}C${n}.xy, xTexelR${e}C${n+2}.xy);\n              `,n+1<f&&(g+=`\n                  xR${e}C${n+1} = vec4(\n                    xTexelR${e}C${n}.zw, xTexelR${e}C${n+2}.zw);\n                `)),g+="}");n<f&&(g+=`\n            vec4 wTexelR${e}C${n} = getW(${e}, ${n}, d1, q);\n            wR${e}C${n} = vec4(wTexelR${e}C${n}.xz, wTexelR${e}C${n}.xz);\n          `,n+1<f&&(g+=`\n              vec4 wTexelR${e}C${n+1} = getW(${e}, ${n+1}, d1, q);\n              wR${e}C${n+1} =\n                vec4(wTexelR${e}C${n+1}.xz, wTexelR${e}C${n+1}.xz);`))}for(let e=0;e<d;e++)for(let t=0;t<f;t++)g+=`dotProd += xR${e}C${t} * wR${e}C${t};`;let y="",b="";n&&(y=s?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,b="result = activation(result);");const x=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${y}\n\n      const ivec2 strides = ivec2(${u}, ${c});\n      const ivec2 pads = ivec2(${o}, ${l});\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        ${g}\n\n        vec4 result = dotProd;\n        ${x}\n        ${b}\n        setOutput(result);\n      }\n    `}}const VO={kernelName:Rt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l,dimRoundingMode:u}=s;let c=l;null==c&&(c=[1,1]),Z(Il(i,c),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`));const h=ml(r.shape,a.shape,i,c,o,u,!0);let p;return p=Be().getBool("WEBGL_PACK_DEPTHWISECONV")&&h.strideWidth<=2&&h.outChannels/h.inChannels==1?new WO(h):new BO(h),n.runWebGLProgram(p,[r,a],"float32")}};class UO{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,s=e.padInfo.top,r=e.padInfo.left,a=e.outChannels/e.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${a} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${s};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${r};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class GO{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,r=e.strideWidth,a=t-1-e.padInfo.top,i=n-1-e.padInfo.left,o=e.outChannels/e.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${o}; dm++) {\n              int d2 = d1 * ${o} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const HO={kernelName:Dt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,filterShape:c}=s,h=ml(r.shape,c,i,o,l,u,!0),p=new UO(h);return n.runWebGLProgram(p,[r,a],"float32")}},jO={kernelName:Ft,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,inputShape:c}=s,h=ml(c,a.shape,i,o,l,u,!0),p=new GO(h);return n.runWebGLProgram(p,[r,a],"float32")}};class qO{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const KO={kernelName:_t,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,r=[...s.shape,...s.shape],a=ne(s.shape),i=DF({inputs:{x:s},backend:n,attrs:{shape:[a]}}),o=new qO(a),l=n.runWebGLProgram(o,[i],i.dtype),u=DF({inputs:{x:l},backend:n,attrs:{shape:r}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(l),u}};class XO{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const{inHeight:t,inWidth:n,padInfo:s,strideHeight:r,strideWidth:a,filterHeight:i,filterWidth:o,dilationHeight:l,dilationWidth:u}=e,{top:c,left:h}=s;this.userCode=`\n      const ivec2 strides = ivec2(${r}, ${a});\n      const ivec2 pads = ivec2(${c}, ${h});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${i}; h++) {\n          int hIn = hBeg + h * ${l};\n\n          if (hIn >= 0 && hIn < ${t}) {\n            for (int w = 0; w < ${o}; w++) {\n              int wIn = wBeg + w * ${u};\n\n              if (wIn >= 0 && wIn < ${n}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const YO={kernelName:Ot,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l}=s,u=pl(r.shape,a.shape,i,o,"NHWC",l);let c;const h=new XO(u);c=n.runWebGLProgram(h,[r,a],"float32");const p=DF({inputs:{x:c},backend:n,attrs:{shape:u.outShape}});return n.disposeIntermediateTensorInfo(c),p}},JO=IF({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"}),ZO={kernelName:Pt,backendName:"webgl",kernelFunc:JO},QO={kernelName:Bt,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n}=e,{dy:s,y:r}=t,a=Be().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new hF("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",s.shape,r.shape):new uF("return (b >= 1.0) ? a : a * (b + 1.0);",s.shape,r.shape);return n.runWebGLProgram(a,[s,r],s.dtype)}},eM=NF({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool"}),tM={kernelName:Vt,backendName:"webgl",kernelFunc:eM},nM=IF({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${ud};\n  float a1 = ${cd};\n  float a2 = ${hd};\n  float a3 = ${pd};\n  float a4 = ${dd};\n  float a5 = ${fd};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`}),sM={kernelName:Wt,backendName:"webgl",kernelFunc:nM},rM="return exp(x);",aM=IF({opSnippet:rM,packedOpSnippet:rM,cpuKernelImpl:dD}),iM={kernelName:Ut,backendName:"webgl",kernelFunc:aM};function oM(e){const{inputs:t,attrs:n,backend:s}=e,{dim:r}=n,{input:a}=t,i=a.shape.length,o=a.shape.slice();let l=r;return r<0&&(Z(-(i+1)<=r,(()=>`Axis must be in the interval [${-(i+1)}, ${i}]`)),l=i+r+1),o.splice(l,0,1),DF({inputs:{x:a},backend:s,attrs:{shape:o}})}const lM={kernelName:Gt,backendName:"webgl",kernelFunc:oM},uM="return exp(x) - 1.0;",cM=IF({opSnippet:uM,packedOpSnippet:uM,cpuKernelImpl:fD}),hM={kernelName:Ht,backendName:"webgl",kernelFunc:cM};class pM{constructor(e,t,n){this.variableNames=["real","imag"];const s=t[1];this.outputShape=t;const r=n?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,a=n?`${s}.0`:"1.0";let i;if("real"===e)i="return real * expR - imag * expI;";else{if("imag"!==e)throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);i="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${r};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${i}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${s});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${s}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${a};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function dM(e,t,n){const s=n.texData.get(e.dataId),r=ne(e.shape),a=e.shape[e.shape.length-1],i=DF({inputs:{x:e},backend:n,attrs:{shape:[r/a,a]}}),o=i.shape,l=new pM("real",o,t),u=new pM("imag",o,t),c=[{dataId:s.complexTensorInfos.real.dataId,dtype:s.complexTensorInfos.real.dtype,shape:o},{dataId:s.complexTensorInfos.imag.dataId,dtype:s.complexTensorInfos.imag.dtype,shape:o}],h=n.runWebGLProgram(l,c,"float32"),p=n.runWebGLProgram(u,c,"float32"),d=fF({inputs:{real:h,imag:p},backend:n});n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p);const f=DF({inputs:{x:d},backend:n,attrs:{shape:e.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(d),f}const fM={kernelName:jt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t;return dM(s,!1,n)}};class mM{constructor(e,t){this.outputShape=[],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}getCustomSetupFunc(e){return(t,n)=>{null==this.valueLoc&&(this.valueLoc=t.getUniformLocationNoThrow(n,"value")),t.gl.uniform1f(this.valueLoc,e)}}}function gM(e){const{backend:t,attrs:n}=e,{shape:s,value:r}=n;let{dtype:a}=n;if(a=a||Se(r),"string"===a){const e=me(a,ne(s));return e.fill(r),t.makeTensorInfo(s,a,e)}{const e=new mM(s,r),n=e.getCustomSetupFunc(r);return t.runWebGLProgram(e,[],a,n)}}const yM={kernelName:qt,backendName:"webgl",kernelFunc:gM};class bM{constructor(e){this.variableNames=["Image"],this.outputShape=[];const t=e[2];this.outputShape=e,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${t} - x;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${t}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const xM={kernelName:Kt,backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{const{image:n}=e,s=t,r=new bM(n.shape);return s.runWebGLProgram(r,[n],n.dtype)}},wM="return floor(x);",kM=IF({opSnippet:wM,packedOpSnippet:wM,cpuKernelImpl:mD}),vM={kernelName:Xt,backendName:"webgl",kernelFunc:kM},IM=NF({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"}),NM={kernelName:Yt,backendName:"webgl",kernelFunc:IM};class SM{constructor(e){this.variableNames=["A"];const t=RR(),[n,s]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}.0, ${n}.0);\n\n        vec4 values = ${t.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class CM{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const t=RR(),[n,s]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${s}.0, ${n}.0);\n            vec4 values = ${t.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${t.output} = result;\n      }\n    `}}const $M={kernelName:Ms,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e;let{pixels:r}=t;const{numChannels:a}=s,i="undefined"!=typeof HTMLVideoElement&&r instanceof HTMLVideoElement,o="undefined"!=typeof HTMLImageElement&&r instanceof HTMLImageElement,l="undefined"!=typeof ImageBitmap&&r instanceof ImageBitmap,[u,c]=i?[r.videoWidth,r.videoHeight]:[r.width,r.height],h=[c,u],p=[c,u,a];(o||i||l)&&(null==TM&&(TM=document.createElement("canvas").getContext("2d")),TM.canvas.width=u,TM.canvas.height=c,TM.drawImage(r,0,0,u,c),r=TM.canvas);const d=n.makeTensorInfo(h,"int32");n.texData.get(d.dataId).usage=eR.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(d.dataId),r);const f=Be().getBool("WEBGL_PACK")?new CM(p):new SM(p),m=n.runWebGLProgram(f,[d],"int32");return n.disposeData(d.dataId),m}};let TM;const EM={kernelName:Ps,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=s,m=Nl(c),g=ml(r.shape,a.shape,l,h,u,p,!1,m);let y;const b=[];if(1!==g.filterHeight||1!==g.filterWidth||1!==g.dilationHeight||1!==g.dilationWidth||1!==g.strideHeight||1!==g.strideWidth||"SAME"!==g.padInfo.type&&"VALID"!==g.padInfo.type)if(Be().getBool("WEBGL_CONV_IM2COL")&&1===r.shape[0])y=gO({x:r,filter:a,convInfo:g,backend:n,bias:i,activation:d,preluActivationWeights:o,leakyreluAlpha:f});else{const e=null!=i,t=null!=o,s="leakyrelu"===d,l=d?SF(d,!1):null,u=new pO(g,e,l,t,s),c=[r,a];if(i&&c.push(i),o&&c.push(o),s){const e=n.makeTensorInfo([],"float32",ur(f,"float32"));c.push(e),b.push(e)}y=n.runWebGLProgram(u,c,"float32")}else y=mO({x:r,filter:a,convInfo:g,backend:n,bias:i,activation:d,preluActivationWeights:o,leakyreluAlpha:f});const x=DF({inputs:{x:y},backend:n,attrs:{shape:g.outShape}});return b.push(y),b.forEach((e=>n.disposeIntermediateTensorInfo(e))),x}},AM={kernelName:Bs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dilations:c,dimRoundingMode:h,activation:p,leakyreluAlpha:d}=s,f=[];let m=c;null==m&&(m=[1,1]),Z(Il(l,m),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${m}'`));const g=ml(r.shape,a.shape,l,m,u,h,!0),y=Be().getBool("WEBGL_PACK_DEPTHWISECONV")&&g.strideWidth<=2&&g.outChannels/g.inChannels==1,b=p?SF(p,y):null,x=[r,a],w=null!=i,k=null!=o,v="leakyrelu"===p;if(w&&x.push(i),k&&x.push(o),v){const e=n.makeTensorInfo([],"float32",ur(d,"float32"));x.push(e),f.push(e)}let I;I=y?new WO(g,w,b,k,v):new BO(g,w,b,k,v);const N=n.runWebGLProgram(I,x,"float32");return f.forEach((e=>n.disposeIntermediateTensorInfo(e))),N}};class RM{constructor(e,t,n){this.sliceDim=e,this.strides=t,this.variableNames=["x","indices"],this.outputShape=n;const s=rD(t.length),r=rD(n.length),a=this.sliceDim>1?"strides[j]":"strides";this.userCode=`\n        ${s} strides = ${s}(${this.strides});\n         void main() {\n          ${r} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${a};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `}}const DM={kernelName:Qt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:s,indices:r}=t,a=r.shape,i=a[a.length-1],[o,l,u,c]=xi(s,r),h=DF({inputs:{x:r},backend:n,attrs:{shape:[l,i]}}),p=DF({inputs:{x:s},backend:n,attrs:{shape:[ne(s.shape)/u,u]}}),d=new RM(i,c,[l,u]),f=n.runWebGLProgram(d,[p,h],p.dtype),m=DF({inputs:{x:f},backend:n,attrs:{shape:o}});return n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),m}};class FM{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;const n=rD(this.rank),s=function(e,t){const n=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[];for(let t=0;t<e.length;t++)2===t?s.push("int(getIndices(resRC.x, resRC.z))"):s.push(`${n[t]}`);return s.join()}(e);this.userCode=`\n      void main() {\n        ${n} resRC = getOutputCoords();\n        setOutput(getA(${s}));\n      }\n    `}}const _M={kernelName:Zt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,indices:a}=t,{axis:i,batchDims:o}=s,l=Td(r,a,pe(i,r.shape)[0],o),u=ne(a.shape),c=[],h=DF({inputs:{x:r},backend:n,attrs:{shape:[l.batchSize,l.outerSize,l.dimSize,l.sliceSize]}}),p=DF({inputs:{x:a},backend:n,attrs:{shape:[l.batchSize,u/l.batchSize]}});c.push(h),c.push(p);const d=[l.batchSize,l.outerSize,u/l.batchSize,l.sliceSize];if(n.shouldExecuteOnCPU([r,a])||"string"===r.dtype){const e=n.bufferSync(p),t=n.bufferSync(h),s=gD(t,e,d);return c.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(l.outputShape,s.dtype,s.values)}const f=new FM(h.shape,d),m=n.runWebGLProgram(f,[h,p],h.dtype);c.push(m);const g=DF({inputs:{x:m},backend:n,attrs:{shape:l.outputShape}});return c.forEach((e=>n.disposeIntermediateTensorInfo(e))),g}},OM=NF({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:yD,dtype:"bool"}),MM={kernelName:en,backendName:"webgl",kernelFunc:OM},LM=NF({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool"}),zM={kernelName:tn,backendName:"webgl",kernelFunc:LM},PM={kernelName:sn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t;return dM(s,!0,n)}},BM=IF({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),WM={kernelName:an,backendName:"webgl",kernelFunc:BM},VM=IF({opSnippet:"return float(isinf(x));",dtype:"bool"}),UM={kernelName:on,backendName:"webgl",kernelFunc:VM},GM=IF({opSnippet:"return float(isnan(x));",dtype:"bool"}),HM={kernelName:ln,backendName:"webgl",kernelFunc:GM},jM=NF({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:bD,dtype:"bool"}),qM={kernelName:cn,backendName:"webgl",kernelFunc:jM},KM=NF({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",dtype:"bool"}),XM={kernelName:hn,backendName:"webgl",kernelFunc:KM},YM={kernelName:pn,backendName:"webgl",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,num:a}=n,i=xD(s,r,a);return t.makeTensorInfo([i.length],"float32",i)}},JM=IF({opSnippet:"if (x < 0.0) return NAN;\n  return log(x);",packedOpSnippet:"\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:wD}),ZM={kernelName:dn,backendName:"webgl",kernelFunc:JM},QM=IF({opSnippet:"return log(1.0 + x);"}),eL={kernelName:fn,backendName:"webgl",kernelFunc:QM},tL=NF({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"}),nL={kernelName:mn,backendName:"webgl",kernelFunc:tL},sL=IF({opSnippet:"return float(!(x >= 1.0));"}),rL={kernelName:gn,backendName:"webgl",kernelFunc:sL},aL=NF({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"}),iL={kernelName:yn,backendName:"webgl",kernelFunc:aL};class oL{constructor(e,t,n,s,r){this.variableNames=["x"],this.outputShape=[];const a=t,i=e[3]-1;let o;this.outputShape=e;const l=`float(${n}) + float(${s}) * sum`;o=.5===r?`inversesqrt(${l})`:1===r?`1.0/(${l})`:`exp(log(${l}) * float(-${r}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${a}; j <= ${a}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${i}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${o};\n        setOutput(val);\n      }\n    `}}class lL{constructor(e,t,n,s,r){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const a=t,i=e[3]-1;let o;this.outputShape=e;const l=`float(${n}) + float(${s}) * sum`;o=.5===r?`inversesqrt(${l})`:1===r?`1.0/(${l})`:`exp(log(${l}) * float(-${r}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${a};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${a}; j <= ${a}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${o};\n        setOutput(result);\n      }\n    `}}const uL={kernelName:xn,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{depthRadius:a,bias:i,alpha:o,beta:l}=s,u=Be().getBool("WEBGL_PACK_NORMALIZATION")?new lL(r.shape,a,i,o,l):new oL(r.shape,a,i,o,l);return n.runWebGLProgram(u,[r],r.dtype)}};class cL{constructor(e,t,n,s,r){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=s,this.beta=r,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${t})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${t} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${s}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${s})\n                * float(${r})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${r});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const hL={kernelName:wn,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r,y:a,dy:i}=t,{depthRadius:o,bias:l,alpha:u,beta:c}=s,h=new cL(r.shape,o,l,u,c);return n.runWebGLProgram(h,[r,a,i],r.dtype)}};function pL(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reductionIndices:a,keepDims:i}=s,o=r.shape.length,l=pe(a,r.shape);let u=l;const c=Gu(u,o),h=null!=c,p=n.shouldExecuteOnCPU([r]);let d=r;if(h){if(p){const e=n.texData.get(d.dataId).values,t=new Array(o);for(let e=0;e<t.length;e++)t[e]=r.shape[c[e]];const s=OD(e,r.shape,r.dtype,c,t);d=n.makeTensorInfo(t,r.dtype),n.texData.get(d.dataId).values=s}else d=PF(r,c,n);u=ju(u.length,o)}Uu("max",u,o);const[f,m]=Wu(d.shape,u);let g,y=f;if(i&&(y=Vu(f,l)),p){const e=n.texData.get(d.dataId).values,t=kD(e,ne(m),y,r.dtype);g=n.makeTensorInfo(y,r.dtype),n.texData.get(g.dataId).values=t}else g=function(e,t,n,s){const r=ne(t),a=DF({inputs:{x:e},attrs:{shape:[ne(e.shape)/r,r]},backend:s}),i=MF(a,e.dtype,"max",s),o=DF({inputs:{x:i},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}(d,m,y,n);return h&&n.disposeIntermediateTensorInfo(d),g}const dL={kernelName:kn,backendName:"webgl",kernelFunc:pL},fL=NF({opSnippet:lF+"\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  "+cF+"\n  return result;\n",cpuKernelImpl:vD}),mL={kernelName:vn,backendName:"webgl",kernelFunc:fL},gL={kernelName:In,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;ER(r,"maxPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=s;Z(Il(i,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const u=dl(r.shape,a,i,1,o,l);if(1===u.filterWidth&&1===u.filterHeight&&re(u.inShape,u.outShape))return pF({inputs:{x:r},backend:n});const c=new N_(u,"max",!1);return n.runWebGLProgram(c,[r],r.dtype)}},yL={kernelName:Sn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dataFormat:l,dimRoundingMode:u}=s,c=fl(r.shape,a,i,[1,1,1],o,u,l),h=new S_(c,"max",!1);return n.runWebGLProgram(h,[r],r.dtype)}};class bL{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideHeight,n=e.strideWidth,s=e.dilationHeight,r=e.effectiveFilterHeight,a=e.effectiveFilterWidth,i=r-1-e.padInfo.top,o=a-1-e.padInfo.left,l=r*a-1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${r};\n          wR += ${s}) {\n          float dyR = float(dyRCorner + wR) / ${t}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${a}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${l} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${a} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class xL{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideDepth,n=e.strideHeight,s=e.strideWidth,r=e.dilationDepth,a=e.dilationHeight,i=e.dilationWidth,o=e.effectiveFilterDepth,l=e.effectiveFilterHeight,u=e.effectiveFilterWidth,c=o-1-e.padInfo.front,h=l-1-e.padInfo.top,p=u-1-e.padInfo.left,d=o*l*u-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${h}, ${p});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${o};\n           wD += ${r}) {\n          float dyD = float(dyDCorner + wD) / ${t}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${l};\n              wR += ${a}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${u};\n                wC += ${i}) {\n              float dyC = float(dyCCorner + wC) / ${s}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${d} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${l} * ${u} +\n                  wR * ${u} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const wL={kernelName:Cn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a,{filterSize:o,strides:l,pad:u,dimRoundingMode:c}=s,h=fl(i.shape,o,l,[1,1,1],u,c),p=new S_(h,"max",!0),d=n.runWebGLProgram(p,[i],i.dtype),f=new xL(h),m=n.runWebGLProgram(f,[r,d],i.dtype);return n.disposeIntermediateTensorInfo(d),m}},kL={kernelName:Nn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a,output:i}=t,o=a;ER([a,i],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,p=dl(o.shape,l,u,1,c,h),d=new N_(p,"max",!0),f=n.runWebGLProgram(d,[o],o.dtype),m=new bL(p),g=n.runWebGLProgram(m,[r,f],o.dtype);return n.disposeIntermediateTensorInfo(f),g}},vL={kernelName:$n,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{filterSize:r,strides:a,pad:i,includeBatchInIndex:o}=t,l=n;Z(4===s.shape.length,(()=>`Error in maxPool: input must be rank 4 but got rank ${s.shape.length}.`));const u=[1,1];Z(Il(a,u),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${u}'`));const c=dl(s.shape,r,a,u,i),[h,p]=function(e,t,n,s){let r=new N_(n,"max",!1);const a=s.runWebGLProgram(r,[e],"float32");return r=new N_(n,"max",!0,!0,t),[a,s.runWebGLProgram(r,[e],"float32")]}(s,o,c,l);return[h,p]}},IL={kernelName:Tn,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{keepDims:r,axis:a}=t,i=n,o=s.shape.length,l=pe(a,s.shape);let u=l;const c=Gu(u,o),h=null!=c,p=i.shouldExecuteOnCPU([s]),d=[];let f=s;if(h){if(p){const e=i.texData.get(f.dataId).values,t=new Array(o);for(let e=0;e<t.length;e++)t[e]=s.shape[c[e]];const n=OD(e,s.shape,s.dtype,c,t);f=i.makeTensorInfo(t,s.dtype),i.texData.get(f.dataId).values=n}else f=PF(s,c,i);d.push(f),u=ju(u.length,o)}Uu("sum",u,o);const[m,g]=Wu(f.shape,u);let y=m;r&&(y=Vu(m,l));const b=function(e,t,n,s){const r=ne(t),a=DF({inputs:{x:e},attrs:{shape:[ne(e.shape)/r,r]},backend:s}),i=MF(a,"float32","mean",s),o=DF({inputs:{x:i},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}(f,g,y,i);for(const e of d)i.disposeIntermediateTensorInfo(e);return b}},NL={kernelName:En,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=pe(a,r.shape);let u=l;const c=Gu(u,o);let h=r;null!=c&&(h=VF({inputs:{x:r},backend:n,attrs:{perm:c}}),u=ju(u.length,r.shape.length)),Uu("min",u,o);const[p,d]=Wu(h.shape,u),f=DF({inputs:{x:h},backend:n,attrs:{shape:[-1,ne(d)]}}),m=MF(f,f.dtype,"min",n);let g;return g=DF(i?{inputs:{x:m},backend:n,attrs:{shape:Vu(p,l)}}:{inputs:{x:m},backend:n,attrs:{shape:p}}),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),g}},SL=NF({opSnippet:lF+"\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  "+cF+"\n  return result;\n",cpuKernelImpl:ID}),CL={kernelName:An,backendName:"webgl",kernelFunc:SL};class $L{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=rD(s),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s),l="reflect"===n?0:1;this.userCode=1!==s?`\n      ${r} start = ${r}(${a});\n      ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outC = getOutputCoords();\n        for (int i = 0; i < ${s}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${l};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${l};\n          }\n        }\n        ${r} coords = outC - start;\n        setOutput(getX(${o}));\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${l};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${l};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class TL{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=rD(s),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=zD("rc",s),l=zD("source",s),u=`${o[s-1]} < ${this.outputShape[s-1]}`,c=1===s?"source":`vec2(${l.slice(-2).join()})`,h="reflect"===n?0:1;let p="";if(1===s){const e=`\n        ${r} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${h};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${h};\n        }\n        source -= start;\n      `;p=`\n        ${r} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${o[s-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n      `}else{const e=`\n        ${r} source = rc;\n        ${r} lt = ${r}(lessThan(source, start));\n        ${r} gte = ${r}(greaterThanEqual(source, end));\n        ${r} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${h}) +\n                gte * ((end - 1) * 2 - source + ${h});\n        source -= start;\n      `;p=`\n        ${r} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${o[s-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n        rc = outputLoc;\n        ${o[s-2]} += 1;\n        if(${o[s-2]} < ${this.outputShape[s-2]}) {\n          ${e}\n          result[2] = getChannel(getX(${l.join()}), ${c});\n          ${o[s-1]} += 1;\n          if(${u}) {\n            ${e}\n            result[3] = getChannel(getX(${l.join()}), ${c});\n          }\n        }\n      `}this.userCode=`\n      const ${r} start = ${r}(${a});\n      const ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}const EL={kernelName:Rn,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s}=e,{paddings:r,mode:a}=n,i=Be().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new TL(s.shape,r,a):new $L(s.shape,r,a);return t.runWebGLProgram(i,[s],s.dtype)}},AL=NF({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  "+cF+"\n  return result;\n"}),RL={kernelName:Dn,backendName:"webgl",kernelFunc:AL};class DL{constructor(e,t,n){this.variableNames=["probs"],this.outputShape=[e,n],this.userCode=`\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${t-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${t-1}));\n      }\n    `}getCustomSetupFunc(e){return(t,n)=>{null==this.seedLoc&&(this.seedLoc=t.getUniformLocation(n,"seed")),t.gl.uniform1f(this.seedLoc,e)}}}const FL=NF({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),_L={kernelName:zt,backendName:"webgl",kernelFunc:FL},OL="return a - b;",ML=NF({opSnippet:OL,packedOpSnippet:OL,supportsComplex:!0,cpuKernelImpl:DD}),LL={kernelName:Is,backendName:"webgl",kernelFunc:ML};function zL(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{dim:a}=s,i=pe([a],r.shape),o=pL({inputs:{x:r},backend:n,attrs:{reductionIndices:i,keepDims:!1}}),l=Vu(o.shape,i),u=DF({inputs:{x:o},backend:n,attrs:{shape:l}}),c=ML({inputs:{a:r,b:u},backend:n}),h=aM({inputs:{x:c},backend:n}),p=BF({inputs:{x:h},backend:n,attrs:{axis:i,keepDims:!1}}),d=DF({inputs:{x:p},backend:n,attrs:{shape:l}}),f=FL({inputs:{a:h,b:d},backend:n});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d),f}const PL={kernelName:ws,backendName:"webgl",kernelFunc:zL},BL={kernelName:Fn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{numSamples:a,seed:i,normalized:o}=s,l=o?r:zL({inputs:{logits:r},backend:n,attrs:{dim:r.shape.length-1}}),u=l.shape[0],c=l.shape[1],h=new DL(u,c,a),p=h.getCustomSetupFunc(i),d=n.runWebGLProgram(h,[l],"int32",p);return o||n.disposeIntermediateTensorInfo(l),d}},WL="return -x;",VL={kernelName:On,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;if(n.shouldExecuteOnCPU([s])){const e=n.texData.get(s.dataId),[t,r]=SD(e.values,s.shape,s.dtype);return n.makeTensorInfo(r,s.dtype,t)}let r;return r=Be().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new sF(s.shape,WL):new HD(s.shape,WL),n.runWebGLProgram(r,[s],s.dtype)}},UL=yp,GL={kernelName:Ln,backendName:"webgl",kernelFunc:function(e){md("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=s,u=n.readSync(r.dataId),c=n.readSync(a.dataId),{selectedIndices:h}=UL(u,c,i,o,l);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},HL=bp,jL={kernelName:zn,backendName:"webgl",kernelFunc:function(e){md("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,padToMaxOutputSize:u}=s,c=n.readSync(r.dataId),h=n.readSync(a.dataId),{selectedIndices:p,validOutputs:d}=HL(c,h,i,o,l,u);return[n.makeTensorInfo([p.length],"int32",new Int32Array(p)),n.makeTensorInfo([],"int32",new Int32Array([d]))]}},qL=xp,KL={kernelName:Pn,backendName:"webgl",kernelFunc:function(e){md("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=s,c=n.readSync(r.dataId),h=n.readSync(a.dataId),p=i,d=o,f=l,m=u,{selectedIndices:g,selectedScores:y}=qL(c,h,p,d,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}};class XL{constructor(e,t,n,s){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${s}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}const YL={kernelName:Wn,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{indices:r}=t,{depth:a,onValue:i,offValue:o}=s,l=ne(r.shape),u=new XL(l,a,i,o),c=DF({inputs:{x:r},backend:n,attrs:{shape:[l]}}),h=n.runWebGLProgram(u,[c],r.dtype);n.disposeIntermediateTensorInfo(c);const p=DF({inputs:{x:h},backend:n,attrs:{shape:[...r.shape,a]}});return n.disposeIntermediateTensorInfo(h),p}};function JL(e){const{inputs:t,backend:n}=e,{x:s}=t;if("complex64"===s.dtype){const e=H_({inputs:{input:s},backend:n}),t=JL({inputs:{x:e},backend:n}),r=iO({inputs:{input:s},backend:n}),a=JL({inputs:{x:r},backend:n}),i=fF({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),i}return gM({attrs:{shape:s.shape,dtype:s.dtype,value:"string"===s.dtype?"":0},backend:n})}const ZL={kernelName:_s,backendName:"webgl",kernelFunc:JL},QL={kernelName:Bn,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s}=t,{x:r}=n;if("string"===r.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===r.dtype){const t=H_({inputs:{input:r},backend:s}),n=e({inputs:{x:t},backend:s}),a=iO({inputs:{input:r},backend:s}),i=JL({inputs:{x:a},backend:s}),o=fF({inputs:{real:n,imag:i},backend:s});return s.disposeIntermediateTensorInfo(t),s.disposeIntermediateTensorInfo(n),s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}return gM({attrs:{shape:r.shape,dtype:r.dtype,value:1},backend:s})}},ez={kernelName:Vn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s;if(1===t.length)return oM({inputs:{input:t[0]},backend:n,attrs:{dim:r}});const a=t[0].shape,i=t[0].dtype;t.forEach((e=>{Q(a,e.shape,"All tensors passed to stack must have matching shapes"),Z(i===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const o=[],l=cO({inputs:t.map((e=>{const t=oM({inputs:{input:e},backend:n,attrs:{dim:r}});return o.push(t),t})),backend:n,attrs:{axis:r}});return o.forEach((e=>n.disposeIntermediateTensorInfo(e))),l}};class tz{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=rD(s),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s);this.userCode=1!==s?`\n      ${r} start = ${r}(${a});\n      ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float(${n}));\n        } else {\n          ${r} coords = outC - start;\n          setOutput(getX(${o}));\n        }\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float(${n}));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class nz{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=rD(s),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=zD("rc",s),l=zD("source",s),u=`${o[s-1]} < ${this.outputShape[s-1]}`,c=1===s?"source":`vec2(${l.slice(-2).join()})`,h=[`${r} rc = outputLoc;`,`${o[s-1]} += 1;\n       if(${u}) {\n      `,1===s?"":`}\n       rc = outputLoc;\n       ${o[s-2]} += 1;\n       if(${o[s-2]} < ${this.outputShape[s-2]}) {`,1===s?"":`  ${o[s-1]} += 1;\n         if(${u}) {`],p=1===s?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let d="";for(let e=0,t=1===s?2:4;e<t;e++)d+=`\n        ${h[e]}\n        if (${p}) {\n          result[${e}] = float(${n});\n        } else {\n          ${r} source = rc - start;\n          result[${e}] = getChannel(getX(${l.join()}), ${c});\n        }\n      `;d+=1===s?"} ":"}}",this.userCode=`\n      const ${r} start = ${r}(${a});\n      const ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${d}\n        setOutput(result);\n      }\n    `}}const sz=e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{paddings:a,constantValue:i}=s,o=Be().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new nz(r.shape,a,i):new tz(r.shape,a,i);return n.runWebGLProgram(o,[r],r.dtype)},rz={kernelName:Un,backendName:"webgl",kernelFunc:sz},az=NF({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  "+cF+"\n  return result;\n"}),iz={kernelName:Hn,backendName:"webgl",kernelFunc:az},oz={kernelName:qn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=[],u=pe(a,r.shape);let c=u;const h=Gu(c,o);let p,d=r;if(null!=h&&(d=VF({inputs:{x:r},backend:n,attrs:{perm:h}}),c=ju(c.length,o),l.push(d)),Uu("prod",c,o),n.shouldExecuteOnCPU([d])){const e=n.texData.get(d.dataId).values,{outVals:t,outShape:s,outDtype:r}=CD(d.shape,d.dtype,e,c);p=n.makeTensorInfo(s,r,t)}else{const[e,t]=Wu(d.shape,c),s=ne(t),a=DF({inputs:{x:d},backend:n,attrs:{shape:[-1,s]}}),i=MF(a,Tr(r.dtype),"prod",n);p=DF({inputs:{x:i},backend:n,attrs:{shape:e}}),l.push(a),l.push(i)}if(i){l.push(p);const e=Vu(p.shape,u);p=DF({inputs:{x:p},backend:n,attrs:{shape:e}})}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),p}},lz=e=>{const{backend:t,attrs:n}=e,{start:s,stop:r,step:a,dtype:i}=n,o=$D(s,r,a,i);return t.makeTensorInfo([o.length],i,o)},uz={kernelName:Kn,backendName:"webgl",kernelFunc:lz},cz=IF({opSnippet:"return 1.0 / x;"}),hz={kernelName:Yn,backendName:"webgl",kernelFunc:cz},pz=IF({opSnippet:jD+"\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),dz={kernelName:Jn,backendName:"webgl",kernelFunc:pz},fz=IF({opSnippet:jD+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),mz={kernelName:ss,backendName:"webgl",kernelFunc:fz};class gz{constructor(e,t,n,s,r){this.variableNames=["A"],this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n];let h;h=r?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class yz{constructor(e,t,n,s,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n];let h;h=r?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]},\n          ${u[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,\n                                     ${o}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const bz={kernelName:ts,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s,[l,u]=o,c=Be().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new yz(r.shape,l,u,a,i):new gz(r.shape,l,u,a,i);return n.runWebGLProgram(c,[r],"float32")}};class xz{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,s,r]=t,[,a,i]=e,o=[n&&a>1?s-1:s,n&&i>1?r-1:r],l=[n&&a>1?a-1:a,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],h=1/u,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${s-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${r-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const wz={kernelName:ns,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s,o=new xz(a.shape,r.shape,i);return n.runWebGLProgram(o,[a],a.dtype)}};class kz{constructor(e,t,n,s,r){this.variableNames=["A"],this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n],h=s?"0.5":"0.0";let p;p=r?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}const vz={kernelName:Qn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s,[l,u]=o,c=new kz(r.shape,l,u,a,i);return n.runWebGLProgram(c,[r],r.dtype)}};class Iz{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,s,r]=t,[,a,i]=e,o=[n&&a>1?s-1:s,n&&i>1?r-1:r],l=[n&&a>1?a-1:a,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],h=1/u,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${o[0]}) *\n                (float(dyR) / float(${l[0]}));\n\n            float sourceFracCol =\n                float(${o[1]}) *\n                  (float(dyC) / float(${l[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${s}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const Nz={kernelName:es,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s,o=new Iz(a.shape,r.shape,i);return n.runWebGLProgram(o,[a],a.dtype)}};class Sz{constructor(e,t){this.variableNames=["x"];const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=e,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${e[0]} - coord - 1));\n        }\n      `);const s=e.map(((n,s)=>(n=>-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - coords[${n}] - 1`:`coords[${n}]`)(s))).join(","),r=rD(n);this.userCode=`\n      void main() {\n        ${r} coords = getOutputCoords();\n        setOutput(getX(${s}));\n      }\n    `}}class Cz{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=e;const s=zD("rc",n),r=`${s[n-1]} + 1 < ${this.outputShape[n-1]}`,a=`${s[n-2]} + 1 < ${this.outputShape[n-2]}`,i=rD(n);function o(n){const s=e.map(((s,r)=>function(n,s){return-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - ${s[n]} - 1`:`${s[n]}`}(r,n)));return`getChannel(getX(${s.join(",")}), vec2(${s.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${e[0]} - rc - 1),\n            ${e[0]} - rc - 1);\n          if(${r}){\n              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),\n                ${e[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${i} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(e){return o(e)}(s.slice())};\n          if(${r}){\n            result.g = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",o(e)}(s.slice())};\n          }\n          if(${a}) {\n            result.b = ${function(e){return e[n-2]="("+e[n-2]+" + 1)",o(e)}(s.slice())};\n            if(${r}) {\n              result.a = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",o(e)}(s.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const $z={kernelName:rs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{dims:a}=s,i=r.shape.length,o=pe(a,r.shape);if(0===i)return pF({inputs:{x:r},backend:n});const l=Be().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Cz(r.shape,o):new Sz(r.shape,o);return n.runWebGLProgram(l,[r],r.dtype)}};class Tz{constructor(e,t,n,s){this.variableNames=["Image"],this.outputShape=[];const r=e[1],a=e[2],i=Math.sin(t).toFixed(3),o=Math.cos(t).toFixed(3);this.outputShape=e;const[l,u]=td(s,r,a),c=l.toFixed(3),h=u.toFixed(3);let p="";p="number"==typeof n?`float outputValue = ${n.toFixed(2)};`:`\n        vec3 fill = vec3(${n.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - ${c}) * ${o} - (float(y) - ${h}) * ${i};\n          float coordYFloat = (float(x) - ${c}) * ${i} + (float(y) - ${h}) * ${o};\n          int coordX = int(round(coordXFloat + ${c}));\n          int coordY = int(round(coordYFloat + ${h}));\n          ${p}\n          if(coordX >= 0 && coordX < ${a} && coordY >= 0 && coordY < ${r}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const Ez={kernelName:Ls,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,{radians:r,fillValue:a,center:i}=t,o=n,l=new Tz(s.shape,r,a,i);return o.runWebGLProgram(l,[s],s.dtype)}},Az=IF({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"}),Rz={kernelName:as,backendName:"webgl",kernelFunc:Az},Dz=IF({opSnippet:"return inversesqrt(x);",cpuKernelImpl:TD}),Fz={kernelName:is,backendName:"webgl",kernelFunc:Dz};class _z{constructor(e,t,n,s,r,a,i=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;const o=rD(r.length),l=rD(a.length);let u="";1===n?u="i":2===n&&(u="i, j");const c=`getIndices(${u})`;let h="";1===s?h="i":2===s&&(h="i, coords[1]");const p=`getUpdates(${h})`,d=t>1?"strides[j]":"strides";this.userCode=`\n        ${o} strides = ${o}(${r});\n\n        void main() {\n          ${l} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${e}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${t}; j++) {\n              int index = round(${c});\n              flattenedIndex += index * ${d};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${p};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}const Oz={kernelName:os,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:r,updates:a}=t,{shape:i}=s,{sliceRank:o,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=vi(0,r,i),p=[h/u,u];if(0===h)return n.makeTensorInfo(i,r.dtype);const d=DF({inputs:{x:r},backend:n,attrs:{shape:[l,o]}}),f=DF({inputs:{x:a},backend:n,attrs:{shape:[l,u]}}),m=n.makeTensorInfo([],"float32",new Float32Array([0])),g=new _z(l,o,d.shape.length,f.shape.length,c,p),y=n.runWebGLProgram(g,[f,d,m],f.dtype),b=DF({inputs:{x:y},backend:n,attrs:{shape:i}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(y),n.disposeIntermediateTensorInfo(m),b}};class Mz{constructor(e,t,n){let s,r;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)r="resRC",s="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],i=[];for(let s=0;s<t.length;s++)i.push(`${n[s]}`),s<e&&a.push(`${n[s]}`);s=a.join(),r=i.join()}const a=rD(n);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        float cVal = getC(${s});\n        if (cVal >= 1.0) {\n          setOutput(getA(${r}));\n        } else {\n          setOutput(getB(${r}));\n        }\n      }\n    `}}const Lz={kernelName:ls,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:s,t:r,e:a}=t,i=new Mz(s.shape.length,r.shape,r.shape.length);return n.runWebGLProgram(i,[s,r,a],$r(r.dtype,a.dtype))}},zz=IF({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${od};\n  float scale = ${ld};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`}),Pz={kernelName:us,backendName:"webgl",kernelFunc:zz},Bz=IF({opSnippet:"return 1.0 / (1.0 + exp(-1.0 * x));"}),Wz={kernelName:fs,backendName:"webgl",kernelFunc:Bz},Vz=IF({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"}),Uz={kernelName:ds,backendName:"webgl",kernelFunc:Vz},Gz=IF({opSnippet:vF+"\n  return sin(x);\n"}),Hz={kernelName:hs,backendName:"webgl",kernelFunc:Gz},jz=IF({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"}),qz={kernelName:ps,backendName:"webgl",kernelFunc:jz},Kz=IF({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"}),Xz={kernelName:ms,backendName:"webgl",kernelFunc:Kz},Yz={kernelName:bs,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,paddings:i}=s;Z(r.shape.length<=4,(()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"));const o=a.reduce(((e,t)=>e*t)),l=[[0,0]];l.push(...i);for(let e=1+a.length;e<r.shape.length;++e)l.push([0,0]);const u=[],c=sz({inputs:{x:r},backend:n,attrs:{paddings:l,constantValue:0}}),h=nd(c.shape,a,o,!1),p=sd(h.length,a.length,!1),d=rd(c.shape,a,o,!1),f=DF({inputs:{x:c},backend:n,attrs:{shape:h}}),m=VF({inputs:{x:f},backend:n,attrs:{perm:p}}),g=DF({inputs:{x:m},backend:n,attrs:{shape:d}});return u.push(c),u.push(f),u.push(m),u.forEach((e=>n.disposeIntermediateTensorInfo(e))),g}},Jz={kernelName:Ns,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sparseIndices:r,sparseValues:a,defaultValue:i}=t,{outputShape:o}=s,{sliceRank:l,numUpdates:u,strides:c,outputSize:h}=vi(0,r,o),p=new _z(u,l,r.shape.length,a.shape.length,c,[h,1],!1),d=n.runWebGLProgram(p,[a,r,i],a.dtype),f=DF({inputs:{x:d},backend:n,attrs:{shape:o}});return n.disposeIntermediateTensorInfo(d),f}},Zz={kernelName:xs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{numOrSizeSplits:a,axis:i}=s,o=pe(i,r.shape)[0],l=Sd(r,a,o),u=r.shape.length,c=new Array(u).fill(0),h=r.shape.slice();return l.map((e=>{const t=[...h];t[o]=e;const s=P_({inputs:{x:r},backend:n,attrs:{begin:c,size:t}});return c[o]+=e,s}))}},Qz=IF({opSnippet:"return sqrt(x);"}),eP={kernelName:gs,backendName:"webgl",kernelFunc:Qz},tP=IF({opSnippet:"return x * x;"}),nP={kernelName:vs,backendName:"webgl",kernelFunc:tP},sP="return (a - b) * (a - b);",rP=NF({opSnippet:sP,packedOpSnippet:sP}),aP={kernelName:ks,backendName:"webgl",kernelFunc:rP},iP={kernelName:Os,backendName:"webgl",kernelFunc:function({inputs:e,attrs:t,backend:n}){const{x:s}=e,r=jD+`\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `,a=new HD(s.shape,r);return n.runWebGLProgram(a,[s],s.dtype)}};class oP{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;const s=n.length,r=rD(n.length),a=rD(n.length);let i="";if(1===s)i="coords * strides + begin";else{let e=0;i=n.map(((t,s)=>(e++,1===n.length?`coords * strides[${s}] + begin[${s}]`:`coords[${e-1}] * strides[${s}] + begin[${s}]`))).join(",")}this.userCode=`\n      ${r} begin = ${r}(${e});\n      ${r} strides = ${r}(${t});\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${i}));\n      }\n    `}}const lP={kernelName:Ss,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,end:i,strides:o,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:p}=s,{nonStrided:d,$begin:f,$strides:m,size:g,newShape:y,outShape:b}=zi(r.shape,a,i,o,l,u,c,h,p),x=DF({inputs:{x:r},backend:n,attrs:{shape:y}});let w;if(d){const e=P_({inputs:{x},backend:n,attrs:{begin:f,size:g}});w=DF({inputs:{x:e},backend:n,attrs:{shape:b}}),n.disposeIntermediateTensorInfo(e)}else if(b.some((e=>0===e)))w=n.makeTensorInfo(b,r.dtype,[]);else if(n.shouldExecuteOnCPU([x])){const e=n.texData.get(x.dataId).values,t=Ga(x.shape,x.dtype,e),s=RD(b,t,m,f);w=n.makeTensorInfo(b,x.dtype,s.values)}else{const e=new oP(f,m,b);w=n.runWebGLProgram(e,[x],x.dtype)}const k=DF({inputs:{x:w},backend:n,attrs:{shape:b}});return n.disposeIntermediateTensorInfo(x),n.disposeIntermediateTensorInfo(w),k}},uP=IF({opSnippet:"return tan(x);"}),cP={kernelName:Cs,backendName:"webgl",kernelFunc:uP},hP=IF({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"}),pP={kernelName:$s,backendName:"webgl",kernelFunc:hP};class dP{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[s]*t[s];this.outputShape=n,this.rank=n.length;const s=rD(this.rank),r=function(e){const t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],s=[];for(let t=0;t<e.length;t++)s.push(`imod(${n[t]}, ${e[t]})`);return s.join()}(e);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        setOutput(getA(${r}));\n      }\n    `}}function fP(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reps:a}=s;if("string"===r.dtype){const e=n.readSync(r.dataId).map((e=>fr(e))),t=Ga(r.shape,r.dtype,e),s=FD(t,a);return n.makeTensorInfo(s.shape,s.dtype,s.values)}const i=new dP(r.shape,a);return n.runWebGLProgram(i,[r],r.dtype)}const mP={kernelName:Ts,backendName:"webgl",kernelFunc:fP},gP={kernelName:Es,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{k:a,sorted:i}=s,o=n.readSync(r.dataId),[l,u]=_D(o,r.shape,r.dtype,a,i);return[n.makeTensorInfo(l.shape,l.dtype,l.values),n.makeTensorInfo(u.shape,u.dtype,u.values)]}},yP={kernelName:Rs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{axis:r}=n,{x:a}=t;ER(a,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const i=s.readSync(a.dataId),{outputValues:o,outputShape:l,indices:u}=MD(i,r,a.shape,a.dtype);return[s.makeTensorInfo(l,a.dtype,o),s.makeTensorInfo([u.length],"int32",u)]}},bP={kernelName:Ds,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{value:r}=t;let{axis:a}=s;a<0&&(a+=r.shape.length);const i=r,o=i.shape.length,l=r.shape[a],u=new Array(o-1);let c=0;for(let e=0;e<o;e++)e!==a&&(u[c++]=i.shape[e]);const h=[],p=new Array(o).fill(0),d=i.shape.slice();d[a]=1;const f=new Array(l);for(let e=0;e<f.length;e++){p[a]=e;const t=P_({inputs:{x:i},backend:n,attrs:{begin:p,size:d}}),s=DF({inputs:{x:t},backend:n,attrs:{shape:u}});f[e]=s,h.push(t)}return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}};class xP{constructor(e,t){this.variableNames=["x","segmentIds"];const n=e.windowSize,s=e.batchSize,r=e.inSize,a=e.numSegments,i=a*Math.ceil(r/n);this.outputShape=[s,i];const o=4*Math.floor(n/4),l=n%4,u="\n        sumValue += dot(values, segFilter);\n    ";let c="";r%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return initializationValue;\n        }\n      `);let h="";r%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${h}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${a})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${a})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${u}\n        } else if (${2===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${u}\n        } else if (${3===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}const wP={kernelName:Fs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,segmentIds:a}=t,{numSegments:i}=s,o=r.shape.length,l=[];let u=0;const c=Gu([u],o);let h=r;null!=c&&(h=VF({inputs:{x:r},backend:n,attrs:{perm:c}}),l.push(h),u=ju(1,o)[0]);const p=$d(h.shape,u,i),d=ne([h.shape[u]]),f=DF({inputs:{x:h},backend:n,attrs:{shape:[-1,d]}});l.push(f);const m=Tr(r.dtype),g=(e,t,s,r,a)=>{const i=e.shape[0],o=e.shape[1],u=Cd(o,a),c=new xP({windowSize:u,inSize:o,batchSize:i,numSegments:a},t),h=n.compileAndRun(c,[e,s],r);if(l.push(h),h.shape[1]===a)return h;const p=lz({backend:n,attrs:{start:0,stop:a,step:1,dtype:"float32"}}),d=fP({inputs:{x:p},backend:n,attrs:{reps:[o/u]}});return l.push(p),l.push(d),g(h,t,d,r,a)},y=DF({inputs:{x:g(f,"unsortedSegmentSum",a,m,i)},backend:n,attrs:{shape:p}});let b=y;if(null!=c){l.push(y);const e=Hu(c);b=VF({inputs:{x:b},backend:n,attrs:{perm:e}})}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),b}},kP=[uL,hL,jF,KF,YF,ZF,t_,r_,a_,i_,p_,d_,m_,y_,k_,x_,I_,$_,C_,A_,R_,D_,O_,W_,V_,q_,Y_,Q_,nO,mF,hO,vO,IO,yO,SO,CO,NO,TO,AO,DO,MO,LO,PO,HO,jO,VO,KO,YO,ZO,QO,tM,sM,iM,lM,hM,fM,yM,xM,vM,NM,$M,EM,AM,DM,_M,MM,zM,dF,PM,oO,WM,UM,HM,bF,qM,XM,YM,eL,ZM,nL,rL,iL,dL,yL,gL,wL,kL,vL,mL,IL,NL,CL,EL,RL,BL,RF,VL,GL,jL,KL,G_,YL,QL,ez,rz,iz,kF,oz,uz,j_,_L,hz,mz,dz,FF,bz,wz,vz,Nz,$z,Ez,Rz,Fz,Oz,Lz,Pz,Wz,Uz,Hz,qz,B_,PL,Xz,Yz,Jz,Zz,eP,nP,aP,iP,lP,LL,WF,cP,pP,mP,gP,UF,yP,bP,wP,ZL];for(const e of kP)js(e);const vP={"tfjs-core":eo,"tfjs-backend-cpu":"2.8.6","tfjs-backend-webgl":"2.8.6","tfjs-data":mS,"tfjs-layers":pb,"tfjs-converter":lN,tfjs:"2.8.6"}},377:(e,t,n)=>{var s=n(832),r=n(652),a=n(801),i=n(30),o=n(618),l=n(49),u=n(971);u.alea=s,u.xor128=r,u.xorwow=a,u.xorshift7=i,u.xor4096=o,u.tychei=l,e.exports=u},832:function(e,t,n){var s;!function(e,r,a){function i(e){var t,n=this,s=(t=4022871197,function(e){e=e.toString();for(var n=0;n<e.length;n++){var s=.02519603282416938*(t+=e.charCodeAt(n));s-=t=s>>>0,t=(s*=t)>>>0,t+=4294967296*(s-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=s(" "),n.s1=s(" "),n.s2=s(" "),n.s0-=s(e),n.s0<0&&(n.s0+=1),n.s1-=s(e),n.s1<0&&(n.s1+=1),n.s2-=s(e),n.s2<0&&(n.s2+=1),s=null}function o(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function l(e,t){var n=new i(e),s=t&&t.state,r=n.next;return r.int32=function(){return 4294967296*n.next()|0},r.double=function(){return r()+11102230246251565e-32*(2097152*r()|0)},r.quick=r,s&&("object"==typeof s&&o(s,n),r.state=function(){return o(n,{})}),r}r&&r.exports?r.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,r))||(r.exports=s):this.alea=l}(0,e=n.nmd(e),n.amdD)},49:function(e,t,n){var s;!function(e,r,a){function i(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,s=t.d,r=t.a;return e=e<<25^e>>>7^n,n=n-s|0,s=s<<24^s>>>8^r,r=r-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-s|0,t.d=s<<16^n>>>16^r,t.a=r-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var s=0;s<n.length+20;s++)t.b^=0|n.charCodeAt(s),t.next()}function o(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function l(e,t){var n=new i(e),s=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,s&&("object"==typeof s&&o(s,n),r.state=function(){return o(n,{})}),r}r&&r.exports?r.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,r))||(r.exports=s):this.tychei=l}(0,e=n.nmd(e),n.amdD)},652:function(e,t,n){var s;!function(e,r,a){function i(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),t.next()}function o(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function l(e,t){var n=new i(e),s=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,s&&("object"==typeof s&&o(s,n),r.state=function(){return o(n,{})}),r}r&&r.exports?r.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,r))||(r.exports=s):this.xor128=l}(0,e=n.nmd(e),n.amdD)},618:function(e,t,n){var s;!function(e,r,a){function i(e){var t=this;t.next=function(){var e,n,s=t.w,r=t.X,a=t.i;return t.w=s=s+1640531527|0,n=r[a+34&127],e=r[a=a+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=r[a]=n^e,t.i=a,n+(s^s>>>16)|0},function(e,t){var n,s,r,a,i,o=[],l=128;for(t===(0|t)?(s=t,t=null):(t+="\0",s=0,l=Math.max(l,t.length)),r=0,a=-32;a<l;++a)t&&(s^=t.charCodeAt((a+32)%t.length)),0===a&&(i=s),s^=s<<10,s^=s>>>15,s^=s<<4,s^=s>>>13,a>=0&&(i=i+1640531527|0,r=0==(n=o[127&a]^=s+i)?r+1:0);for(r>=128&&(o[127&(t&&t.length||0)]=-1),r=127,a=512;a>0;--a)s=o[r+34&127],n=o[r=r+1&127],s^=s<<13,n^=n<<17,s^=s>>>15,n^=n>>>12,o[r]=s^n;e.w=i,e.X=o,e.i=r}(t,e)}function o(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function l(e,t){null==e&&(e=+new Date);var n=new i(e),s=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,s&&(s.X&&o(s,n),r.state=function(){return o(n,{})}),r}r&&r.exports?r.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,r))||(r.exports=s):this.xor4096=l}(0,e=n.nmd(e),n.amdD)},30:function(e,t,n){var s;!function(e,r,a){function i(e){var t=this;t.next=function(){var e,n,s=t.x,r=t.i;return e=s[r],n=(e^=e>>>7)^e<<24,n^=(e=s[r+1&7])^e>>>10,n^=(e=s[r+3&7])^e>>>3,n^=(e=s[r+4&7])^e<<7,e=s[r+7&7],n^=(e^=e<<13)^e<<9,s[r]=n,t.i=r+1&7,n},function(e,t){var n,s=[];if(t===(0|t))s[0]=t;else for(t=""+t,n=0;n<t.length;++n)s[7&n]=s[7&n]<<15^t.charCodeAt(n)+s[n+1&7]<<13;for(;s.length<8;)s.push(0);for(n=0;n<8&&0===s[n];++n);for(8==n?s[7]=-1:s[n],e.x=s,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function o(e,t){return t.x=e.x.slice(),t.i=e.i,t}function l(e,t){null==e&&(e=+new Date);var n=new i(e),s=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,s&&(s.x&&o(s,n),r.state=function(){return o(n,{})}),r}r&&r.exports?r.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,r))||(r.exports=s):this.xorshift7=l}(0,e=n.nmd(e),n.amdD)},801:function(e,t,n){var s;!function(e,r,a){function i(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),s==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function o(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function l(e,t){var n=new i(e),s=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,s&&("object"==typeof s&&o(s,n),r.state=function(){return o(n,{})}),r}r&&r.exports?r.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,r))||(r.exports=s):this.xorwow=l}(0,e=n.nmd(e),n.amdD)},971:(e,t,n)=>{var s;!function(r,a){var i,o=this,l=256,u=6,c="random",h=a.pow(l,u),p=a.pow(2,52),d=2*p,f=l-1;function m(e,t,n){var s=[],f=x(b((t=1==t?{entropy:!0}:t||{}).entropy?[e,w(r)]:null==e?function(){try{var e;return i&&(e=i.randomBytes)?e=e(l):(e=new Uint8Array(l),(o.crypto||o.msCrypto).getRandomValues(e)),w(e)}catch(e){var t=o.navigator,n=t&&t.plugins;return[+new Date,o,n,o.screen,w(r)]}}():e,3),s),m=new g(s),k=function(){for(var e=m.g(u),t=h,n=0;e<p;)e=(e+n)*l,t*=l,n=m.g(1);for(;e>=d;)e/=2,t/=2,n>>>=1;return(e+n)/t};return k.int32=function(){return 0|m.g(4)},k.quick=function(){return m.g(4)/4294967296},k.double=k,x(w(m.S),r),(t.pass||n||function(e,t,n,s){return s&&(s.S&&y(s,m),e.state=function(){return y(m,{})}),n?(a[c]=e,t):e})(k,f,"global"in t?t.global:this==a,t.state)}function g(e){var t,n=e.length,s=this,r=0,a=s.i=s.j=0,i=s.S=[];for(n||(e=[n++]);r<l;)i[r]=r++;for(r=0;r<l;r++)i[r]=i[a=f&a+e[r%n]+(t=i[r])],i[a]=t;(s.g=function(e){for(var t,n=0,r=s.i,a=s.j,i=s.S;e--;)t=i[r=f&r+1],n=n*l+i[f&(i[r]=i[a=f&a+t])+(i[a]=t)];return s.i=r,s.j=a,n})(l)}function y(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function b(e,t){var n,s=[],r=typeof e;if(t&&"object"==r)for(n in e)try{s.push(b(e[n],t-1))}catch(e){}return s.length?s:"string"==r?e:e+"\0"}function x(e,t){for(var n,s=e+"",r=0;r<s.length;)t[f&r]=f&(n^=19*t[f&r])+s.charCodeAt(r++);return w(t)}function w(e){return String.fromCharCode.apply(0,e)}if(a["seed"+c]=m,x(a.random(),r),e.exports){e.exports=m;try{i=n(906)}catch(e){}}else void 0===(s=function(){return m}.call(t,n,t,e))||(e.exports=s)}([],Math)},416:(e,t,n)=>{const s=n(563),{FREAKPOINTS:r}=n(793),a=(r.length-1)*r.length/2;e.exports={Detector:class{constructor(e,t){this.width=e,this.height=t;let n=0;for(;e>=8&&t>=8&&(e/=2,t/=2,n++,5!==n););this.numOctaves=n,this.tensorCaches={},this.kernelCaches={}}detectImageData(e){const t=new Uint8ClampedArray(4*e.length);for(let n=0;n<e.length;n++)t[4*n]=e[n],t[4*n+1]=e[n],t[4*n+2]=e[n],t[4*n+3]=255;const n=new ImageData(t,this.width,this.height);return this.detect(n)}detect(e){const t=[];for(let n=0;n<this.numOctaves;n++){0===n?t.push(this._applyFilter(e)):t.push(this._downsampleBilinear(t[t.length-1]));for(let e=0;e<2;e++)t.push(this._applyFilter(t[t.length-1]))}const n=[];for(let e=0;e<this.numOctaves;e++)for(let s=0;s<2;s++)0!==e||0!==s?n.push(this._differenceImageBinomial(t[3*e+s],t[3*e+s+1])):n.push(null);const s=[],r=[];for(let e=1;e<n.length-1;e++){if(e%2==1)continue;s.push(e);const t=n[e-1],a=n[e],i=n[e+1],o=this._buildExtremas(e,t,a,i);r.push(o)}const a=this._applyPrune(r,s),i=this._computeOrientationHistograms(a,t,s),o=this._smoothHistograms(i),l=this._computeExtremaAngles(o),u=this._computeExtremaFreak(t,this.numOctaves,a,l),c=this._computeFreakDescriptors(u),h=this._combine(a,l,c),p=h.arraySync();t.forEach((e=>e.dispose())),n.forEach((e=>e&&e.dispose())),r.forEach((e=>e.dispose())),a.dispose(),i.dispose(),o.dispose(),l.dispose(),u.dispose(),c.dispose(),h.dispose();const d=[];for(let e=0;e<p.length;e++)for(let t=0;t<p[e].length;t++)if(0!==p[e][t][0]){const n=p[e][t],s=n.slice(5),r=[];let a=0,i=0;for(let e=0;e<s.length;e++)s[e]&&(a+=1),i+=1,32===i?(r.push(a),a=0,i=0):a*=2;r.push(a),d.push({maxima:n[0]>0,x:n[1],y:n[2],scale:n[3],angle:n[4],descriptors:r})}return d}_combine(e,t,n){if(!this.kernelCaches.combine){const e={variableNames:["extrema","angles","desc"],outputShape:[100,5,5+a],userCode:"\n\t  void main() {\n\t    ivec3 coords = getOutputCoords();\n\t    int bucketIndex = coords[0];\n\t    int featureIndex = coords[1];\n\t    int propertyIndex = coords[2];\n\n\t    if (propertyIndex == 0) {\n\t      setOutput(getExtrema(bucketIndex, featureIndex, 0));\n\t      return;\n\t    }\n\t    if (propertyIndex == 1) {\n\t      int extremaIndex = int(getExtrema(bucketIndex, featureIndex, 1));\n\t      int octave = extremaIndex + 1; // ref to buildExtrema, it starts at 2nd octave\n\t      float x = getExtrema(bucketIndex, featureIndex, 3);\n\t      float originalX = x * pow(2.0, float(octave)) + pow(2.0, float(octave-1)) - 0.5;\n\t      setOutput(originalX);\n\t      return;\n\t    }\n\t    if (propertyIndex == 2) {\n\t      int extremaIndex = int(getExtrema(bucketIndex, featureIndex, 1));\n\t      int octave = extremaIndex + 1; // ref to buildExtrema, it starts at 2nd octave\n\t      float y = getExtrema(bucketIndex, featureIndex, 2);\n\t      float originalY = y * pow(2.0, float(octave)) + pow(2.0, float(octave-1)) - 0.5;\n\t      setOutput(originalY);\n\t      return;\n\t    }\n\t    if (propertyIndex == 3) {\n\t      int extremaIndex = int(getExtrema(bucketIndex, featureIndex, 1));\n\t      int octave = extremaIndex + 1; // ref to buildExtrema, it starts at 2nd octave\n\t      float inputSigma = pow(2., float(octave));\n\t      setOutput(inputSigma);\n\t      return;\n\t    }\n\t    if (propertyIndex == 4) {\n\t      setOutput(getAngles(bucketIndex, featureIndex));\n\t      return;\n\t    }\n\t    setOutput( getDesc(bucketIndex, featureIndex, propertyIndex - 5));\n\t  }\n\t"};this.kernelCaches.combine=[e]}return s.tidy((()=>{const[r]=this.kernelCaches.combine;return s.backend().compileAndRun(r,[e,t,n])}))}_computeFreakDescriptors(e){if(!this.tensorCaches.computeFreakDescriptors){const t=[],n=[];for(let s=0;s<e.shape[2];s++)for(let r=s+1;r<e.shape[2];r++)t.push(s),n.push(r);const r=s.tensor(t,[t.length]).cast("int32"),a=s.tensor(n,[n.length]).cast("int32");this.tensorCaches.computeFreakDescriptors={positionT:s.keep(s.stack([r,a],1))}}const{positionT:t}=this.tensorCaches.computeFreakDescriptors;if(r.length,!this.kernelCaches.computeFreakDescriptors){const e={variableNames:["freak","p"],outputShape:[100,5,a],userCode:"\n\t  void main() {\n\t    ivec3 coords = getOutputCoords();\n\t    int bucketIndex = coords[0];\n\t    int featureIndex = coords[1];\n\t    int descIndex = coords[2];\n\n            int p1 = int(getP(descIndex, 0));\n            int p2 = int(getP(descIndex, 1));\n\n\t    float v1 = getFreak(bucketIndex, featureIndex, p1);\n\t    float v2 = getFreak(bucketIndex, featureIndex, p2);\n\n\t    if (v1 < v2 + 0.01) {\n\t      setOutput(1.);\n\t      return;\n\t    }\n\t    setOutput(0.);\n\t  }\n\t"};this.kernelCaches.computeFreakDescriptors=[e]}return s.tidy((()=>{const[n]=this.kernelCaches.computeFreakDescriptors;return s.backend().compileAndRun(n,[e,t])}))}_computeExtremaFreak(e,t,n,a){const i=Math.pow(2,.5),o=1/Math.log(i);this.tensorCaches._computeExtremaFreak||s.tidy((()=>{const e=s.tensor(r);this.tensorCaches._computeExtremaFreak={freakPointsT:s.keep(e)}}));const l=[];for(let e=0;e<t;e++)for(let n=0;n<3;n++)2===n&&e!==t-1||l.push(3*e+n);const{freakPointsT:u}=this.tensorCaches._computeExtremaFreak;if(!this.kernelCaches._computeExtremaFreak){const n={variableNames:["extrema","angles","freakPoints"],outputShape:[100,5,r.length,3],userCode:`\n\t  void main() {\n\t    ivec4 coords = getOutputCoords();\n\n\t    int bucketIndex = coords[0];\n\t    int featureIndex = coords[1];\n\t    int freakIndex = coords[2];\n\t    int propertyIndex = coords[3];\n\n\t    float freakSigma = getFreakPoints(freakIndex, 0);\n\t    float freakX = getFreakPoints(freakIndex, 1);\n\t    float freakY = getFreakPoints(freakIndex, 2);\n\n\t    int extremaIndex = int(getExtrema(bucketIndex, featureIndex, 1));\n\t    float inputY = getExtrema(bucketIndex, featureIndex, 2);\n\t    float inputX = getExtrema(bucketIndex, featureIndex, 3);\n\n            int inputOctave = extremaIndex + 1; // ref to buildExtrema, it starts at 2nd octave\n\n\t    float inputSigma = pow(2., float(inputOctave));\n\t    float inputAngle = getAngles(bucketIndex, featureIndex);\n\n            // Ensure the scale of the similarity transform is at least "1".\n            float transformScale = max(1., inputSigma * 7.);\n            float cos = transformScale * cos(inputAngle);\n            float sin = transformScale * sin(inputAngle);\n\n\t    float sigma = transformScale * freakSigma;\n\n\t    int octave = int(floor(log(sigma) / ${Math.log(2)}));\n\t    float fscale = log( sigma / pow(2., float(octave))) * ${o};\n            int scale = int(floor(fscale + 0.5)); // round() has problem in ios\n\n            // sgima of last scale = sigma of the first scale in next octave\n            // prefer coarser octaves for efficiency\n            if ( scale == 3 - 1) {\n              octave = octave + 1;\n              scale = 0;\n            }\n            // clip octave and scale\n            if (octave < 0) {\n              octave = 0;\n              scale = 0;\n            }\n            if ( int(octave) >= ${t}) {\n              octave = ${t} - 1;\n              scale = 3 - 1;\n            }\n\n            int imageIndex = octave * 3 + scale;\n\t    if (propertyIndex == 0) {\n\t      setOutput(float(imageIndex));\n\t      return;\n\t    }\n\n\t    // 1) inputX, Y is the coordinate in the octave scale. scale it back respect to the original size (i.e. octave 0)\n\n\t    // 2) compute the freak point location, according to the orientation\n\n            // 3) scale the freak point back into the octave scale\n\n\t    if (propertyIndex == 1) {\n\t      float originalY = inputY * pow(2.0, float(inputOctave)) + pow(2.0, float(inputOctave-1)) - 0.5;\n\t      float y = originalY + freakX * sin + freakY * cos;\n\t      float a = 1.0 / pow(2., float(octave));\n\t      float b = 0.5 * a - 0.5;\n\t      float yp = y * a + b; // y in octave\n\t      setOutput(yp);\n\t      return;\n\t    }\n\t    if (propertyIndex == 2) {\n\t      float originalX = inputX * pow(2.0, float(inputOctave)) + pow(2.0, float(inputOctave-1)) - 0.5;\n\t      float x = originalX + freakX * cos + freakY * -sin;\n\t      float a = 1.0 / pow(2., float(octave));\n\t      float b = 0.5 * a - 0.5;\n\t      float xp = x * a + b; // x in octave\n\t      setOutput(xp);\n\t      return;\n\t    }\n\t  }\n\t`},s=[];for(let t=0;t<l.length;t++){const n=l[t],a=e[n].shape[0],i=e[n].shape[1],o={variableNames:["pixel","position","combine"],outputShape:[100,5,r.length],userCode:`\n\t    void main() {\n\t      ivec3 coords = getOutputCoords();\n\t      int bucketIndex = coords[0];\n\t      int featureIndex = coords[1];\n\t      int freakIndex = coords[2];\n\n\t      int imageIndex = int(getPosition(bucketIndex, featureIndex, freakIndex, 0));\n\t      if (imageIndex != ${n}) {\n\t\tsetOutput(getCombine(bucketIndex, featureIndex, freakIndex));\n\t\treturn;\n\t      }\n\n\t      float yp = getPosition(bucketIndex, featureIndex, freakIndex, 1);\n\t      float xp = getPosition(bucketIndex, featureIndex, freakIndex, 2);\n\n\t      int x0 = int(floor(xp));\n\t      int x1 = x0 + 1;\n\t      int y0 = int(floor(yp));\n\t      int y1 = y0 + 1;\n\n\t      if (x0 < 0 || x1 >= ${i} || y0 < 0 || y1 >= ${a}) {\n\t\tsetOutput(0.);\n\t\treturn;\n\t      }\n\n\t      float f1 = getPixel(y0, x0);\n\t      float f2 = getPixel(y0, x1);\n\t      float f3 = getPixel(y1, x0);\n\t      float f4 = getPixel(y1, x1);\n\n\t      float x1f = float(x1);\n\t      float y1f = float(y1);\n\t      float x0f = float(x0);\n\t      float y0f = float(y0);\n\n\t      // ratio for interpolation between four neighbouring points\n\t      float value = (x1f - xp) * (y1f - yp) * f1\n\t\t\t  + (xp - x0f) * (y1f - yp) * f2\n\t\t\t  + (x1f - xp) * (yp - y0f) * f3\n\t\t\t  + (xp - x0f) * (yp - y0f) * f4;\n\n\t      setOutput(value);\n\t    }\n\t  `};s.push(o)}this.kernelCaches._computeExtremaFreak=[n,s]}return s.tidy((()=>{const[t,i]=this.kernelCaches._computeExtremaFreak,o=s.backend().compileAndRun(t,[n,a,u]);let c=s.zeros([100,5,r.length]);for(let t=0;t<l.length;t++){const n=l[t];c=s.backend().compileAndRun(i[t],[e[n],o,c])}return c}))}_computeExtremaAngles(e){if(!this.kernelCaches.computeExtremaAngles){const e={variableNames:["histogram"],outputShape:[100,5],userCode:`\n\t  void main() {\n\t    ivec2 coords = getOutputCoords();\n\n\t    int bucketIndex = coords[0];\n\t    int featureIndex = coords[1];\n\n\t    int maxIndex = 0;\n\t    for (int i = 1; i < 36; i++) {\n\t      if (getHistogram(bucketIndex, featureIndex, i) > getHistogram(bucketIndex, featureIndex, maxIndex)) {\n\t\tmaxIndex = i;\n\t      }\n\t    }\n\n\t    int prev = imod(maxIndex - 1 + 36, 36);\n\t    int next = imod(maxIndex + 1, 36);\n\n\t    /**\n\t     * Fit a quatratic to 3 points. The system of equations is:\n\t     *\n\t     * y0 = A*x0^2 + B*x0 + C\n\t     * y1 = A*x1^2 + B*x1 + C\n\t     * y2 = A*x2^2 + B*x2 + C\n\t     *\n\t     * This system of equations is solved for A,B,C.\n\t     */\n\t    float p10 = float(maxIndex - 1);\n\t    float p11 = getHistogram(bucketIndex, featureIndex, prev); \n\t    float p20 = float(maxIndex);\n\t    float p21 = getHistogram(bucketIndex, featureIndex, maxIndex); \n\t    float p30 = float(maxIndex + 1);\n\t    float p31 = getHistogram(bucketIndex, featureIndex, next); \n\n\t    float d1 = (p30-p20)*(p30-p10);\n\t    float d2 = (p10-p20)*(p30-p10);\n\t    float d3 = p10-p20;\n\n\t    // If any of the denominators are zero then, just use maxIndex.\n            float fbin = float(maxIndex);\n\t    if ( abs(d1) > 0.00001 && abs(d2) > 0.00001 && abs(d3) > 0.00001) {\n\t      float a = p10*p10;\n\t      float b = p20*p20;\n\n\t      // Solve for the coefficients A,B,C\n\t      float A = ((p31-p21)/d1)-((p11-p21)/d2);\n\t      float B = ((p11-p21)+(A*(b-a)))/d3;\n\t      float C = p11-(A*a)-(B*p10);\n\t      fbin = -B / (2. * A);\n\t    }\n\n\t    float an =  2.0 * ${Math.PI} * ((fbin + 0.5 + 36.) / 36.);\n\n\t    for (int i = 0; i < 3; i++) { // stupid modula, while loop not support\n\t      if (an > 2.0 * ${Math.PI}) {\n\t\tan -= 2.0 * ${Math.PI};\n\t      }\n\t    }\n\t    setOutput(an);\n\t  }\n\t`};this.kernelCaches.computeExtremaAngles=e}return s.tidy((()=>{const t=this.kernelCaches.computeExtremaAngles;return s.backend().compileAndRun(t,[e])}))}_computeOrientationHistograms(e,t,n){const r=[];for(let e=0;e<n.length;e++){const s=n[e],a=3*Math.floor(s/2)+(s%2+1);r.push(t[a])}this.tensorCaches.orientationHistograms||s.tidy((()=>{const e=Math.max(1,3),t=-1/(2*e*e),n=1.5*e,a=Math.ceil(n),i=[];for(let e=-a;e<=a;e++)for(let s=-a;s<=a;s++){const r=s*s+e*e;if(r<=n*n){const n=r*t,a=.0013888888*(720+n*(720+n*(360+n*(120+n*(30+n*(6+n))))));i.push([e,s,a])}}const o=[];for(let e=0;e<r.length;e++)o.push([r[e].shape[0],r[e].shape[1]]);this.tensorCaches.orientationHistograms={radialPropertiesT:s.keep(s.tensor(i,[i.length,3])),imageSizesT:s.keep(s.tensor(o,[o.length,2]))}}));const{radialPropertiesT:a,imageSizesT:i}=this.tensorCaches.orientationHistograms;if(!this.kernelCaches.computeOrientationHistograms){const e=[];for(let t=0;t<r.length;t++)e.push("image"+t);let t="float getPixel(int gaussianIndex, int y, int x) {";for(let e=0;e<r.length;e++)t+=`\n\t  if (gaussianIndex == ${e}) {\n\t    return getImage${e}(y, x);\n\t  }\n\t`;t+="}";const n={variableNames:[...e,"imageSizes","extrema","radial"],outputShape:[100,5,a.shape[0],2],userCode:`\n\t  ${t}\n\n\t  void main() {\n\t    ivec4 coords = getOutputCoords();\n\t    int bucketIndex = coords[0];\n\t    int featureIndex = coords[1];\n\t    int radialIndex = coords[2];\n\t    int propertyIndex = coords[3];\n\n\t    int radialY = int(getRadial(radialIndex, 0));\n\t    int radialX = int(getRadial(radialIndex, 1));\n\t    float radialW = getRadial(radialIndex, 2);\n\n\t    int extremaIndex = int(getExtrema(bucketIndex, featureIndex, 1));\n\t    int y = int(getExtrema(bucketIndex, featureIndex, 2));\n\t    int x = int(getExtrema(bucketIndex, featureIndex, 3));\n\n\t    int imageHeight = int(getImageSizes(extremaIndex, 0));\n\t    int imageWidth = int(getImageSizes(extremaIndex, 1));\n\n\t    int xp = x + radialX;\n\t    int yp = y + radialY;\n\n\t    if (xp < 1 || xp >= imageWidth - 1 || yp < 1 || yp >= imageHeight - 1) {\n\t      setOutput(0.);\n\t      return;\n\t    }\n\n\t    float dy = getPixel(extremaIndex, yp+1, xp) - getPixel(extremaIndex, yp-1, xp);\n\t    float dx = getPixel(extremaIndex, yp, xp+1) - getPixel(extremaIndex, yp, xp-1);\n\n\t    if (propertyIndex == 0) {\n\t      float angle = atan(dy, dx) + ${Math.PI};\n\t      float fbin = angle * 36. * 0.159154943091895;\n\t      setOutput(fbin);\n\t      return;\n\t    }\n\n\t    if (propertyIndex == 1) {\n\t      float mag = sqrt(dx * dx + dy * dy);\n\t      float magnitude = radialW * mag;\n\t      setOutput(magnitude);\n\t      return;\n\t    }\n\t  }\n\n\t`},s={variableNames:["fbinMag"],outputShape:[100,5,36],userCode:`\n\t  void main() {\n\t    ivec3 coords = getOutputCoords();\n\t    int bucketIndex = coords[0];\n\t    int featureIndex = coords[1];\n\t    int binIndex = coords[2];\n\n\t    float sum = 0.;\n\t    for (int i = 0; i < ${a.shape[0]}; i++) {\n\t      float fbin = getFbinMag(bucketIndex, featureIndex, i, 0);\n\t      int bin = int(floor(fbin - 0.5));\n\t      int b1 = imod(bin + 36, 36);\n\t      int b2 = imod(bin + 1 + 36, 36);\n\n\t      if (b1 == binIndex || b2 == binIndex) {\n\t\tfloat magnitude = getFbinMag(bucketIndex, featureIndex, i, 1);\n\t\tfloat w2 = fbin - float(bin) - 0.5;\n\t\tfloat w1 = w2 * -1. + 1.;\n\n\t\tif (b1 == binIndex) {\n\t\t  sum += w1 * magnitude;\n\t\t}\n\t\tif (b2 == binIndex) {\n\t\t  sum += w2 * magnitude;\n\t\t}\n\t      }\n\t    }\n\t    setOutput(sum);\n\t  }\n\t`};this.kernelCaches.computeOrientationHistograms=[n,s]}return s.tidy((()=>{const[t,n]=this.kernelCaches.computeOrientationHistograms,o=s.backend().compileAndRun(t,[...r,i,e,a]);return s.backend().compileAndRun(n,[o])}))}_smoothHistograms(e){if(!this.kernelCaches.smoothHistograms){const e={variableNames:["histogram"],outputShape:[100,5,36],userCode:"\n\t  void main() {\n\t    ivec3 coords = getOutputCoords();\n\n\t    int bucketIndex = coords[0];\n\t    int featureIndex = coords[1];\n\t    int binIndex = coords[2];\n\n\t    int prevBin = imod(binIndex - 1 + 36, 36);\n\t    int nextBin = imod(binIndex + 1, 36);\n\n            float result = 0.274068619061197 * getHistogram(bucketIndex, featureIndex, prevBin) + 0.451862761877606 * getHistogram(bucketIndex, featureIndex, binIndex) + 0.274068619061197 * getHistogram(bucketIndex, featureIndex, nextBin);\n\n\t    setOutput(result);\n\t  }\n\t"};this.kernelCaches.smoothHistograms=e}return s.tidy((()=>{const t=this.kernelCaches.smoothHistograms;for(let n=0;n<5;n++)e=s.backend().compileAndRun(t,[e]);return e}))}_applyPrune(e,t){const n=[],r=[];for(let e=0;e<100;e++){r.push([]),n.push([]);for(let t=0;t<5;t++)r[e].push([0,0,0,0]),n[e].push(0)}for(let t=0;t<e.length;t++){const s=e[t],a=s.arraySync(),i=s.shape[0],o=s.shape[1],l=o/10,u=i/10;for(let e=0;e<i;e++)for(let s=0;s<o;s++){const i=Math.floor(s/l),o=10*Math.floor(e/u)+i,c=a[e][s],h=Math.abs(c);let p=5;for(;p>=1&&h>n[o][p-1];)p-=1;if(p<5){for(let e=4;e>=p+1;e--)n[o][e]=n[o][e-1],r[o][e][0]=r[o][e-1][0],r[o][e][1]=r[o][e-1][1],r[o][e][2]=r[o][e-1][2],r[o][e][3]=r[o][e-1][3];n[o][p]=h,r[o][p][0]=c,r[o][p][1]=t,r[o][p][2]=e,r[o][p][3]=s}}}return s.tensor(r,[r.length,r[0].length,r[0][0].length])}_buildExtremas(e,t,n,r){const a=n.shape[0],i=n.shape[1],o="w"+i;if(this.kernelCaches.buildExtremas||(this.kernelCaches.buildExtremas={}),!this.kernelCaches.buildExtremas[o]){const e={variableNames:["image0","image1","image2"],outputShape:[a,i],userCode:`\n\t  void main() {\n\t    ivec2 coords = getOutputCoords();\n\n\t    int y = coords[0];\n\t    int x = coords[1];\n\n\t    // Step 1: find local maxima/minima\n\t    if (y == 0 || y == ${a} - 1 || x == 0 || x == ${i} - 1) {\n\t      setOutput(0.);\n\t      return;\n\t    }\n\t    if (getImage1(y, x) * getImage1(y, x) < 9.) {\n\t      setOutput(0.);\n\t      return;\n\t    }\n\n\t    bool isMax = true;\n\t    for (int dy = -1; dy <= 1; dy++) {\n\t      for (int dx = -1; dx <= 1; dx++) {\n\t        if (getImage1(y, x) < getImage0(y+dy, x+dx)) {\n\t\t  isMax = false;\n\t\t}\n\t        if (getImage1(y, x) < getImage2(y+dy, x+dx)) {\n\t\t  isMax = false;\n\t\t}\n\t        if (getImage1(y, x) < getImage1(y+dy, x+dx)) {\n\t\t  isMax = false;\n\t\t}\n\t      }\n\t    }\n\t    bool isMin = false;\n\t    if (!isMax) {\n\t      isMin = true;\n\n\t      for (int dy = -1; dy <= 1; dy++) {\n\t\tfor (int dx = -1; dx <= 1; dx++) {\n\t\t  if (getImage1(y, x) > getImage0(y+dy, x+dx)) {\n\t\t    isMin = false;\n\t\t  }\n\t\t  if (getImage1(y, x) > getImage2(y+dy, x+dx)) {\n\t\t    isMin = false;\n\t\t  }\n\t\t  if (getImage1(y, x) > getImage1(y+dy, x+dx)) {\n\t\t    isMin = false;\n\t\t  }\n\t\t}\n\t      }\n\t    }\n\n\t    if (!isMax && !isMin) {\n\t      setOutput(0.);\n\t      return;\n\t    }\n\n\t    // Step 2: sub-pixel refinement (I'm not sure what that means. Any educational ref?)\n\t    \n\t    // Compute spatial derivatives\n\t    float dx = 0.5 * (getImage1(y, x+1) - getImage1(y, x-1));\n\t    float dy = 0.5 * (getImage1(y+1, x) - getImage1(y-1, x));\n\t    float dxx = getImage1(y, x+1) + getImage1(y, x-1) - 2. * getImage1(y, x);\n\t    float dyy = getImage1(y+1, x) + getImage1(y-1, x) - 2. * getImage1(y, x);\n\t    float dxy = 0.25 * (getImage1(y-1,x-1) + getImage1(y+1,x+1) - getImage1(y-1,x+1) - getImage1(y+1,x-1));\n\n\t    // Compute scale derivates\n\t    float ds = 0.5 * (getImage2(y, x) - getImage0(y, x)); \n\t    float dss = getImage2(y, x) + getImage0(y, x) - 2. * getImage1(y, x);\n\t    float dxs = 0.25 * ((getImage0(y, x-1) - getImage0(y, x+1)) + (getImage2(y, x+1) - getImage2(y, x-1)));\n\t    float dys = 0.25 * ((getImage0(y-1, x) - getImage0(y+1, x)) + (getImage2(y+1, x) - getImage2(y-1, x)));\n\n\t    // Solve Hessian A * u = b;\n\t    float A0 = dxx;\n\t    float A1 = dxy;\n\t    float A2 = dxs;\n\t    float A3 = dxy;\n\t    float A4 = dyy;\n\t    float A5 = dys;\n\t    float A6 = dxs;\n\t    float A7 = dys;\n\t    float A8 = dss;\n\t    float b0 = -dx;\n\t    float b1 = -dy;\n\t    float b2 = -ds;\n\n\t    float detA = A0 * A4 * A8\n\t\t       - A0 * A5 * A5\n\t\t       - A4 * A2 * A2\n\t\t       - A8 * A1 * A1\n\t\t       + 2. * A1 * A2 * A5;\n\n\t    // B = inverse of A\n\t    float B0 = A4 * A8 - A5 * A7;\n\t    float B1 = A2 * A7 - A1 * A8;\n\t    float B2 = A1 * A5 - A2 * A4;\n\t    float B3 = B1;\n\t    float B4 = A0 * A8 - A2 * A6;\n\t    float B5 = A2 * A3 - A0 * A5;\n\t    float B6 = B2;\n\t    float B7 = B5;\n\t    float B8 = A0 * A4 - A1 * A3;\n\n\t    float u0 = (B0 * b0 + B1 * b1 + B2 * b2) / detA;\n\t    float u1 = (B3 * b0 + B4 * b1 + B5 * b2) / detA;\n\t    float u2 = (B6 * b0 + B7 * b1 + B8 * b2) / detA;\n\n\t    // If points move too much in the sub-pixel update, then the point probably unstable.\n\t    if (u0 * u0 + u1 * u1 > 9.) {\n\t      setOutput(0.);\n\t      return;\n\t    }\n\n\t    // compute edge score\n\t    float det = (dxx * dyy) - (dxy * dxy);\n\n\t    if (abs(det) < 0.0001) { // determinant undefined. no solution\n\t      setOutput(0.);\n\t      return;\n\t    }\n\n\t    float edgeScore = (dxx + dyy) * (dxx + dyy) / det;\n\n\t    if (abs(edgeScore) >= 6.25 ) {\n\t      setOutput(0.);\n\t      return;\n\t    }\n\n\t    float score = getImage1(y, x) - (b0 * u0 + b1 * u1 + b2 * u2);\n\n\t    if (score * score < 9.) {\n\t      setOutput(0.);\n\t      return;\n\t    }\n\n\t    setOutput(score);\n\t  }\n\t`};this.kernelCaches.buildExtremas[o]=e}return s.tidy((()=>{const e=this.kernelCaches.buildExtremas[o];return Math.floor(t.shape[1]/2)===n.shape[1]&&(t=this._downsampleBilinear(t)),s.backend().compileAndRun(e,[t,n,r])}))}_differenceImageBinomial(e,t){return s.tidy((()=>e.sub(t)))}_applyFilter(e){const t=e.shape[0],n=e.shape[1],r="w"+n;if(this.kernelCaches.applyFilter||(this.kernelCaches.applyFilter={}),!this.kernelCaches.applyFilter[r]){const e="\n\tint imax(int a, int b) {\n\t  if (a > b) return a;\n\t  return b;\n\t}\n\tint imin(int a, int b) {\n\t  if (a < b) return a;\n\t  return b;\n\t}\n\n      ",s={variableNames:["p"],outputShape:[t,n],userCode:`\n \t  ${e}\n\t  void main() {\n\t    ivec2 coords = getOutputCoords();\n\n\t    float sum = getP(coords[0], imax(0, coords[1]-2));\n\t    sum += getP(coords[0], imax(0, coords[1]-1)) * 4.;\n\t    sum += getP(coords[0], coords[1]) * 6.;\n\t    sum += getP(coords[0], imin(${n}-1, coords[1]+1)) * 4.;\n\t    sum += getP(coords[0], imin(${n}-1, coords[1]+2));\n\t    setOutput(sum);\n\t  }\n\t`},a={variableNames:["p"],outputShape:[t,n],userCode:`\n \t  ${e}\n\t  void main() {\n\t    ivec2 coords = getOutputCoords();\n\n\t    float sum = getP(imax(coords[0]-2, 0), coords[1]);\n\t    sum += getP(imax(coords[0]-1, 0), coords[1]) * 4.;\n\t    sum += getP(coords[0], coords[1]) * 6.;\n\t    sum += getP(imin(coords[0]+1, ${t}-1), coords[1]) * 4.;\n\t    sum += getP(imin(coords[0]+2, ${t}-1), coords[1]);\n\t    sum /= 256.;\n\t    setOutput(sum);\n\t  }\n\t`};this.kernelCaches.applyFilter[r]=[s,a]}return s.tidy((()=>{const[t,n]=this.kernelCaches.applyFilter[r],a=s.backend().compileAndRun(t,[e]);return s.backend().compileAndRun(n,[a])}))}_downsampleBilinear(e){const t=e.shape[0],n=e.shape[1],r="w"+n;if(this.kernelCaches.downsampleBilinear||(this.kernelCaches.downsampleBilinear={}),!this.kernelCaches.downsampleBilinear[r]){const e={variableNames:["p"],outputShape:[Math.floor(t/2),Math.floor(n/2)],userCode:"\n\t  void main() {\n\t    ivec2 coords = getOutputCoords();\n\t    int y = coords[0] * 2;\n\t    int x = coords[1] * 2;\n\t    float sum = getP(y, x) + getP(y+1,x) + getP(y, x+1) + getP(y+1,x+1);\n\t    sum *= 0.25;\n\t    setOutput(sum);\n\t  }\n\t"};this.kernelCaches.downsampleBilinear[r]=e}return s.tidy((()=>{const t=this.kernelCaches.downsampleBilinear[r];return s.backend().compileAndRun(t,[e])}))}}}},793:e=>{const t=[{sigma:.55,points:[[-1,0],[-.5,-.866025],[.5,-.866025],[1,-0],[.5,.866025],[-.5,.866025]]},{sigma:.475,points:[[0,.930969],[-.806243,.465485],[-.806243,-.465485],[-0,-.930969],[.806243,-.465485],[.806243,.465485]]},{sigma:.4,points:[[.847306,-0],[.423653,.733789],[-.423653,.733789],[-.847306,0],[-.423653,-.733789],[.423653,-.733789]]},{sigma:.325,points:[[-0,-.741094],[.641806,-.370547],[.641806,.370547],[0,.741094],[-.641806,.370547],[-.641806,-.370547]]},{sigma:.25,points:[[-.595502,0],[-.297751,-.51572],[.297751,-.51572],[.595502,-0],[.297751,.51572],[-.297751,.51572]]},{sigma:.175,points:[[0,.362783],[-.314179,.181391],[-.314179,-.181391],[-0,-.362783],[.314179,-.181391],[.314179,.181391]]},{sigma:.1,points:[[0,0]]}],n=[];for(let e=0;e<t.length;e++){const s=t[e].sigma;for(let r=0;r<t[e].points.length;r++){const a=t[e].points[r];n.push([s,a[0],a[1]])}}e.exports={FREAKPOINTS:n}},508:(e,t,n)=>{const{resize:s}=n(140);e.exports={buildImageList:e=>{const t=[];let n=28/Math.min(e.width,e.height);for(;;)if(t.push(n),n*=Math.pow(2,1/3),n>=.95){n=1;break}t.push(n),t.reverse();const r=[];for(let n=0;n<t.length;n++)e.width,t[n],e.height,t[n],r.push(Object.assign(s({image:e,ratio:t[n]}),{scale:t[n]}));return r}}},233:e=>{e.exports={compute:e=>{const{v1:t,v2:n}=e;let s=0;for(let e=0;e<t.length;e++){let i=(t[e]^n[e])>>>0;s+=(a=void 0,((a=((a=((a=((a=(r=i)-(r>>1&1431655765))>>2&858993459)+(858993459&a))>>4)+a&252645135)>>8)+a&16711935)>>16)+a&65535)}var r,a;return s}}},723:(e,t,n)=>{const{compute:s}=n(233),{createRandomizer:r}=n(48),a=e=>{const{points:t,pointIndexes:n,centerPointIndex:s,randomizer:r}=e;let i=!1;(n.length<=8||n.length<=16)&&(i=!0);const o={};if(!i){const e=_computeKMedoids({points:t,pointIndexes:n,randomizer:r});for(let t=0;t<e.length;t++)void 0===o[n[e[t]]]&&(o[n[e[t]]]=[]),o[n[e[t]]].push(n[t])}1===Object.keys(o).length&&(i=!0);const l={centerPointIndex:s};if(i){l.leaf=!0,l.pointIndexes=[];for(let e=0;e<n.length;e++)l.pointIndexes.push(n[e]);return l}return l.leaf=!1,l.children=[],Object.keys(o).forEach((e=>{l.children.push(a({points:t,pointIndexes:o[e],centerPointIndex:e,randomizer:r}))})),l};_computeKMedoids=e=>{const{points:t,pointIndexes:n,randomizer:r}=e,a=[];for(let e=0;e<n.length;e++)a.push(e);let i=Number.MAX_SAFE_INTEGER,o=-1;const l=[];for(let e=0;e<128;e++){r.arrayShuffle({arr:a,sampleSize:8});let u=0;const c=[];for(let e=0;e<n.length;e++){let r=Number.MAX_SAFE_INTEGER;for(let i=0;i<8;i++){const o=n[a[i]],l=s({v1:t[n[e]].descriptors,v2:t[o].descriptors});l<r&&(c[e]=a[i],r=l)}u+=r}l.push(c),u<i&&(i=u,o=e)}return l[o]},e.exports={build:({points:e})=>{const t=[];for(let n=0;n<e.length;n++)t.push(n);const n=r();return{rootNode:a({points:e,pointIndexes:t,centerPointIndex:null,randomizer:n})}}}},589:(e,t,n)=>{const{Cumsum:s}=n(535),r=22,a=({image:e,cx:t,cy:n,sdThresh:s,imageDataCumsum:a,imageDataSqrCumsum:i})=>{if(t-r<0||t+r>=e.width)return null;if(n-r<0||n+r>=e.height)return null;const o=2025;let l=a.query(t-r,n-r,t+r,n+r);l/=o;let u=i.query(t-r,n-r,t+r,n+r);return u-=2*l*a.query(t-r,n-r,t+r,n+r),u+=o*l*l,u/o<s*s?null:(u=Math.sqrt(u),u)},i=e=>{const{image:t,cx:n,cy:s,vlen:a,tx:i,ty:o,imageDataCumsum:l,imageDataSqrCumsum:u}=e,{data:c,width:h,height:p}=t,d=r;if(n-d<0||n+d>=h)return null;if(s-d<0||s+d>=p)return null;let f=l.query(n-d,s-d,n+d,s+d),m=u.query(n-d,s-d,n+d,s+d),g=0,y=(s-d)*h+(n-d),b=(o-d)*h+(i-d),x=h-45;for(let e=0;e<45;e++){for(let e=0;e<45;e++)g+=c[y]*c[b],y+=1,b+=1;y+=x,b+=x}let w=l.query(i-d,o-d,i+d,o+d);w/=2025,g-=w*f;let k=m-f*f/2025;return 0==k?null:(k=Math.sqrt(k),1*g/(a*k))};e.exports={extract:e=>{const{data:t,width:n,height:o,scale:l}=e,u=[n*o];for(let e=0;e<u.length;e++)u[e]=!1;const c=new Float32Array(t.length);for(let e=0;e<n;e++)c[e]=-1,c[n*(o-1)+e]=-1;for(let e=0;e<o;e++)c[e*n]=-1,c[e*n+n-1]=-1;for(let e=1;e<n-1;e++)for(let s=1;s<o-1;s++){let r=e+n*s,a=0,i=0;for(let e=-1;e<=1;e++)a+=t[r+n*e+1]-t[r+n*e-1],i+=t[r+n+e]-t[r-n+e];a/=768,i/=768,c[r]=Math.sqrt((a*a+i*i)/2)}const h=new Uint32Array(1e3);for(let e=0;e<1e3;e++)h[e]=0;const p=[-1,1,-n,n];let d=0;for(let e=1;e<n-1;e++)for(let t=1;t<o-1;t++){let s=e+n*t,r=!0;for(let e=0;e<p.length;e++)if(c[s]<=c[s+p[e]]){r=!1;break}if(r){let e=Math.floor(1e3*c[s]);e>999&&(e=999),e<0&&(e=0),h[e]+=1,d+=1,u[s]=!0}}const f=.02*n*o;let m=999,g=0;for(;m>=0&&(g+=h[m],!(g>f));)m--;for(let e=0;e<u.length;e++)u[e]&&1e3*c[e]<m&&(u[e]=!1);const y=[];for(let e=0;e<t.length;e++)y[e]=t[e]*t[e];const b=new s(t,n,o),x=new s(y,n,o),w=new Float32Array(t.length);for(let t=0;t<n;t++)for(let s=0;s<o;s++){const r=s*n+t;if(!u[r]){w[r]=1;continue}const o=a({image:e,cx:t,cy:s,sdThresh:5,imageDataCumsum:b,imageDataSqrCumsum:x});if(null===o){w[r]=1;continue}let l=-1;for(let n=-10;n<=10;n++){for(let r=-10;r<=10;r++){if(r*r+n*n<=4)continue;const a=i({image:e,cx:t+r,cy:s+n,vlen:o,tx:t,ty:s,imageDataCumsum:b,imageDataSqrCumsum:x});if(null!==a&&a>l&&(l=a,l>.95))break}if(l>.95)break}w[r]=l}return(e=>{let{image:t,featureMap:n,templateSize:s,searchSize:r,occSize:o,maxSimThresh:l,minSimThresh:u,sdThresh:c,imageDataCumsum:h,imageDataSqrCumsum:p}=e;const{data:d,width:f,height:m,scale:g}=t;o=Math.floor(Math.min(t.width,t.height)/10);const y=3*(2*s+1),b=Math.floor(f/y),x=Math.floor(m/y);let w=Math.floor(f/o)*Math.floor(m/o)+b*x;const k=[],v=new Float32Array(d.length);for(let e=0;e<v.length;e++)v[e]=n[e];let I=0;for(;I<w;){let e=l,n=-1,d=-1;for(let t=0;t<m;t++)for(let s=0;s<f;s++)v[t*f+s]<e&&(e=v[t*f+s],n=s,d=t);if(-1===n)break;const g=a({image:t,cx:n,cy:d,sdThresh:0,imageDataCumsum:h,imageDataSqrCumsum:p});if(null===g){v[d*f+n]=1;continue}if(g/(2*s+1)<c){v[d*f+n]=1;continue}let y=1,b=-1;for(let s=-r;s<=r;s++){for(let a=-r;a<=r;a++){if(a*a+s*s>r*r)continue;if(0===a&&0===s)continue;const o=i({image:t,vlen:g,cx:n+a,cy:d+s,tx:n,ty:d,imageDataCumsum:h,imageDataSqrCumsum:p});if(null!==o){if(o<y&&(y=o,y<u&&y<e))break;if(o>b&&(b=o,b>.99))break}}if(y<u&&y<e||b>.99)break}if(y<u&&y<e||b>.99)v[d*f+n]=1;else{k.push({x:n,y:d}),I+=1;for(let e=-o;e<=o;e++)for(let t=-o;t<=o;t++)d+e<0||d+e>=m||n+t<0||n+t>=f||(v[(d+e)*f+(n+t)]=1)}}return k})({image:e,featureMap:w,templateSize:r,searchSize:2,occSize:16,maxSimThresh:.9,minSimThresh:.55,sdThresh:8,imageDataCumsum:b,imageDataSqrCumsum:x})}}},535:e=>{e.exports={Cumsum:class{constructor(e,t,n){this.cumsum=[];for(let e=0;e<n;e++){this.cumsum.push([]);for(let n=0;n<t;n++)this.cumsum[e].push(0)}this.cumsum[0][0]=e[0];for(let n=1;n<t;n++)this.cumsum[0][n]=this.cumsum[0][n-1]+e[n];for(let s=1;s<n;s++)this.cumsum[s][0]=this.cumsum[s-1][0]+e[s*t];for(let s=1;s<n;s++)for(let n=1;n<t;n++)this.cumsum[s][n]=e[s*t+n]+this.cumsum[s-1][n]+this.cumsum[s][n-1]-this.cumsum[s-1][n-1]}query(e,t,n,s){let r=this.cumsum[s][n];return t>0&&(r-=this.cumsum[t-1][n]),e>0&&(r-=this.cumsum[s][e-1]),e>0&&t>0&&(r+=this.cumsum[t-1][e-1]),r}}}},140:e=>{e.exports={downsampleBilinear:({image:e})=>{const{data:t,width:n,height:s}=e,r=Math.floor(n/2),a=Math.floor(s/2),i=new Float32Array(r*a),o=[0,1,n,n+1];for(let e=0;e<a;e++)for(let s=0;s<r;s++){let a=2*e*n+2*s,l=0;for(let e=0;e<o.length;e++)l+=t[a+o[e]];l*=.25,i[e*r+s]=l}return{data:i,width:r,height:a}},upsampleBilinear:({image:e,padOneWidth:t,padOneHeight:n})=>{const{width:s,height:r,data:a}=e,i=2*e.width+(t?1:0),o=2*e.height+(n?1:0),l=new Float32Array(i*o);for(let e=0;e<i;e++){const t=.5*e-.25;let n=Math.floor(t),u=Math.ceil(t);n<0&&(n=0),u>=s&&(u=s-1);for(let c=0;c<o;c++){const o=.5*c-.25;let h=Math.floor(o),p=Math.ceil(o);h<0&&(h=0),p>=r&&(p=r-1);const d=(u-t)*(p-o)*a[h*s+n]+(u-t)*(o-h)*a[p*s+n]+(t-n)*(p-o)*a[h*s+u]+(t-n)*(o-h)*a[p*s+u];l[c*i+e]=d}}return{data:l,width:i,height:o}},resize:({image:e,ratio:t})=>{const n=Math.round(e.width*t),s=Math.round(e.height*t),r=new Uint8Array(n*s);for(let a=0;a<n;a++){let i=Math.round(1*a/t),o=Math.round(1*(a+1)/t)-1;o>=e.width&&(o=e.width-1);for(let l=0;l<s;l++){let s=Math.round(1*l/t),u=Math.round(1*(l+1)/t)-1;u>=e.height&&(u=e.height-1);let c=0,h=0;for(let t=i;t<=o;t++)for(let n=s;n<=u;n++)c+=1*e.data[n*e.width+t],h+=1;r[l*n+a]=Math.floor(c/h)}}return{data:r,width:n,height:s}}}},48:e=>{e.exports={createRandomizer:()=>({seed:1234,arrayShuffle(e){const{arr:t,sampleSize:n}=e;for(let e=0;e<n;e++){this.seed=(214013*this.seed+2531011)%(1<<31);let n=this.seed>>16&32767;n%=t.length;let s=t[e];t[e]=t[n],t[n]=s}},nextInt(e){this.seed=(214013*this.seed+2531011)%(1<<31);let t=this.seed>>16&32767;return t%=e,t}})}},906:()=>{},993:()=>{},352:()=>{},312:()=>{},758:()=>{}},t={};function n(s){if(t[s])return t[s].exports;var r=t[s]={id:s,loaded:!1,exports:{}};return e[s].call(r.exports,r,r.exports,n),r.loaded=!0,r.exports}n.amdD=function(){throw new Error("define cannot be used indirect")},n.amdO={},n.d=(e,t)=>{for(var s in t)n.o(t,s)&&!n.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{const{extract:e}=n(589),{Detector:t}=n(416),{build:s}=n(723),{buildImageList:r}=n(508),a=n(563);onmessage=e=>{const{data:t}=e;if("compile"===t.type){console.log("worker compile...");const{targetImages:e}=t,n=100/e.length;let s=0;const a=[];for(let t=0;t<e.length;t++){const l=e[t],u=r(l),c=n/u.length/2;console.log("compiling tracking...",t);const h=o(u,(e=>{console.log("done tracking",t,e),s+=c,postMessage({type:"progress",percent:s})}));console.log("compiling matching...",t);const p=i(u,(e=>{console.log("done matching",t,e),s+=c,postMessage({type:"progress",percent:s})}));a.push({targetImage:l,imageList:u,trackingData:h,matchingData:p})}postMessage({type:"compileDone",list:a})}};const i=(e,n)=>{const r=[];for(let i=0;i<e.length;i++){const o=e[i],l=new t(o.width,o.height);a.tidy((()=>{const e=a.tensor(o.data,[o.data.length]).reshape([o.height,o.width]),t=l.detect(e),u=s({points:t});r.push({points:t,pointsCluster:u,width:o.width,height:o.height,scale:o.scale}),n(i)}))}return r},o=(t,n)=>{const s=[];for(let r=0;r<t.length;r++){const a=t[r],i=e(a),o={scale:a.scale,width:a.width,height:a.height,points:i};s.push(o),n(r)}return s}})()})();